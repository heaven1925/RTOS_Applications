
001_Intro_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000481c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080049ac  080049ac  000149ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b0c  08004b0c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004b0c  08004b0c  00014b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b14  08004b14  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b14  08004b14  00014b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b18  08004b18  00014b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000040b4  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000412c  2000412c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000efa1  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024cd  00000000  00000000  0002f049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  00031518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ad0  00000000  00000000  000320d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228d2  00000000  00000000  00032ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d4a6  00000000  00000000  00055472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc8d7  00000000  00000000  00062918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f1ef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003724  00000000  00000000  0012f240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004994 	.word	0x08004994

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004994 	.word	0x08004994

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <vApplicationGetIdleTaskMemory+0x30>)
 800058a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000094 	.word	0x20000094
 80005a4:	20000148 	.word	0x20000148

080005a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b090      	sub	sp, #64	; 0x40
 80005ac:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ae:	f000 fb29 	bl	8000c04 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005b2:	f000 f85b 	bl	800066c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005b6:	f000 f8ed 	bl	8000794 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005ba:	f000 f8c1 	bl	8000740 <MX_USART2_UART_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of myTask1 */
	osThreadDef(myTask1, StartDefaultTask, osPriorityNormal, 0, 128);
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <main+0x98>)
 80005c0:	f107 041c 	add.w	r4, r7, #28
 80005c4:	461d      	mov	r5, r3
 80005c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask1Handle = osThreadCreate(osThread(myTask1), NULL);
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fe5a 	bl	8002292 <osThreadCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a18      	ldr	r2, [pc, #96]	; (8000644 <main+0x9c>)
 80005e2:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask2 */
	osThreadDef(myTask2, StartTask02, osPriorityIdle, 0, 128);
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <main+0xa0>)
 80005e6:	463c      	mov	r4, r7
 80005e8:	461d      	mov	r5, r3
 80005ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask2Handle = osThreadCreate(osThread(myTask2), NULL);
 80005f6:	463b      	mov	r3, r7
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fe49 	bl	8002292 <osThreadCreate>
 8000600:	4603      	mov	r3, r0
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <main+0xa4>)
 8000604:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	printf("Starting RTOS Project. \n");
 8000606:	4812      	ldr	r0, [pc, #72]	; (8000650 <main+0xa8>)
 8000608:	f003 faf4 	bl	8003bf4 <puts>

	xTaskCreate(Task1_Handler, "Task1", configMINIMAL_STACK_SIZE, NULL, 4,
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <main+0xac>)
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	2304      	movs	r3, #4
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2300      	movs	r3, #0
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	490f      	ldr	r1, [pc, #60]	; (8000658 <main+0xb0>)
 800061a:	4810      	ldr	r0, [pc, #64]	; (800065c <main+0xb4>)
 800061c:	f001 ffaa 	bl	8002574 <xTaskCreate>
			&myTaskHandle1);
	xTaskCreate(Task2_Handler, "Task2", configMINIMAL_STACK_SIZE, NULL, 4,
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <main+0xb8>)
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	2304      	movs	r3, #4
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	490d      	ldr	r1, [pc, #52]	; (8000664 <main+0xbc>)
 800062e:	480e      	ldr	r0, [pc, #56]	; (8000668 <main+0xc0>)
 8000630:	f001 ffa0 	bl	8002574 <xTaskCreate>
			&myTaskHandle2);

	vTaskStartScheduler();
 8000634:	f002 f920 	bl	8002878 <vTaskStartScheduler>


	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000638:	f001 fe24 	bl	8002284 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800063c:	e7fe      	b.n	800063c <main+0x94>
 800063e:	bf00      	nop
 8000640:	080049e4 	.word	0x080049e4
 8000644:	20000390 	.word	0x20000390
 8000648:	08004a00 	.word	0x08004a00
 800064c:	20000394 	.word	0x20000394
 8000650:	080049bc 	.word	0x080049bc
 8000654:	20000398 	.word	0x20000398
 8000658:	080049d4 	.word	0x080049d4
 800065c:	0800081d 	.word	0x0800081d
 8000660:	2000039c 	.word	0x2000039c
 8000664:	080049dc 	.word	0x080049dc
 8000668:	08000885 	.word	0x08000885

0800066c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	; 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 f9af 	bl	80039de <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a27      	ldr	r2, [pc, #156]	; (8000738 <SystemClock_Config+0xcc>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <SystemClock_Config+0xd0>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2310      	movs	r3, #16
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d4:	2302      	movs	r3, #2
 80006d6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80006dc:	2308      	movs	r3, #8
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80006e0:	23a8      	movs	r3, #168	; 0xa8
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fd95 	bl	8001220 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80006fc:	f000 f906 	bl	800090c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000710:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2105      	movs	r1, #5
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fff6 	bl	8001710 <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800072a:	f000 f8ef 	bl	800090c <Error_Handler>
	}
}
 800072e:	bf00      	nop
 8000730:	3750      	adds	r7, #80	; 0x50
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USART2_UART_Init+0x4c>)
 8000746:	4a12      	ldr	r2, [pc, #72]	; (8000790 <MX_USART2_UART_Init+0x50>)
 8000748:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_USART2_UART_Init+0x4c>)
 800074c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000750:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USART2_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USART2_UART_Init+0x4c>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USART2_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USART2_UART_Init+0x4c>)
 8000778:	f001 f9aa 	bl	8001ad0 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000782:	f000 f8c3 	bl	800090c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000034c 	.word	0x2000034c
 8000790:	40004400 	.word	0x40004400

08000794 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_GPIO_Init+0x80>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a18      	ldr	r2, [pc, #96]	; (8000814 <MX_GPIO_Init+0x80>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_GPIO_Init+0x80>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_GPIO_Init+0x80>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a11      	ldr	r2, [pc, #68]	; (8000814 <MX_GPIO_Init+0x80>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_GPIO_Init+0x80>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, Task1_LED_Pin|Task2_LED_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <MX_GPIO_Init+0x84>)
 80007ea:	f000 fcff 	bl	80011ec <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Task1_LED_Pin Task2_LED_Pin */
	GPIO_InitStruct.Pin = Task1_LED_Pin|Task2_LED_Pin;
 80007ee:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80007f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_GPIO_Init+0x84>)
 8000808:	f000 fb54 	bl	8000eb4 <HAL_GPIO_Init>

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020c00 	.word	0x40020c00

0800081c <Task1_Handler>:

/* USER CODE BEGIN 4 */

void Task1_Handler(void *params) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	while (1)
	{

		if(true == task_flag1)
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <Task1_Handler+0x50>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d1fb      	bne.n	8000824 <Task1_Handler+0x8>
		{
			task_flag2 = false;
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <Task1_Handler+0x54>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
			sprintf(buffer, "Hello World From Task - 1 \n");
 8000832:	4910      	ldr	r1, [pc, #64]	; (8000874 <Task1_Handler+0x58>)
 8000834:	4810      	ldr	r0, [pc, #64]	; (8000878 <Task1_Handler+0x5c>)
 8000836:	f003 fa5f 	bl	8003cf8 <siprintf>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000840:	480e      	ldr	r0, [pc, #56]	; (800087c <Task1_Handler+0x60>)
 8000842:	f000 fcd3 	bl	80011ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <Task1_Handler+0x60>)
 800084e:	f000 fccd 	bl	80011ec <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 100);
 8000852:	2364      	movs	r3, #100	; 0x64
 8000854:	221e      	movs	r2, #30
 8000856:	4908      	ldr	r1, [pc, #32]	; (8000878 <Task1_Handler+0x5c>)
 8000858:	4809      	ldr	r0, [pc, #36]	; (8000880 <Task1_Handler+0x64>)
 800085a:	f001 f986 	bl	8001b6a <HAL_UART_Transmit>
			task_flag2 = true;
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <Task1_Handler+0x54>)
 8000860:	2201      	movs	r2, #1
 8000862:	701a      	strb	r2, [r3, #0]
			task_flag1 = false;
 8000864:	4b01      	ldr	r3, [pc, #4]	; (800086c <Task1_Handler+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
		if(true == task_flag1)
 800086a:	e7db      	b.n	8000824 <Task1_Handler+0x8>
 800086c:	20000000 	.word	0x20000000
 8000870:	20000348 	.word	0x20000348
 8000874:	08004a1c 	.word	0x08004a1c
 8000878:	200003a0 	.word	0x200003a0
 800087c:	40020c00 	.word	0x40020c00
 8000880:	2000034c 	.word	0x2000034c

08000884 <Task2_Handler>:
	}


}

void Task2_Handler(void *params) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if(true == task_flag2)
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <Task2_Handler+0x50>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d1fb      	bne.n	800088c <Task2_Handler+0x8>
		{
			task_flag1 = false;
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <Task2_Handler+0x54>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
			sprintf(buffer,"Hello World From Task - 2 \n");
 800089a:	4910      	ldr	r1, [pc, #64]	; (80008dc <Task2_Handler+0x58>)
 800089c:	4810      	ldr	r0, [pc, #64]	; (80008e0 <Task2_Handler+0x5c>)
 800089e:	f003 fa2b 	bl	8003cf8 <siprintf>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a8:	480e      	ldr	r0, [pc, #56]	; (80008e4 <Task2_Handler+0x60>)
 80008aa:	f000 fc9f 	bl	80011ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <Task2_Handler+0x60>)
 80008b6:	f000 fc99 	bl	80011ec <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 100);
 80008ba:	2364      	movs	r3, #100	; 0x64
 80008bc:	221e      	movs	r2, #30
 80008be:	4908      	ldr	r1, [pc, #32]	; (80008e0 <Task2_Handler+0x5c>)
 80008c0:	4809      	ldr	r0, [pc, #36]	; (80008e8 <Task2_Handler+0x64>)
 80008c2:	f001 f952 	bl	8001b6a <HAL_UART_Transmit>
			task_flag1 = true;
 80008c6:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <Task2_Handler+0x54>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
			task_flag2 = false;
 80008cc:	4b01      	ldr	r3, [pc, #4]	; (80008d4 <Task2_Handler+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
		if(true == task_flag2)
 80008d2:	e7db      	b.n	800088c <Task2_Handler+0x8>
 80008d4:	20000348 	.word	0x20000348
 80008d8:	20000000 	.word	0x20000000
 80008dc:	08004a38 	.word	0x08004a38
 80008e0:	200003a0 	.word	0x200003a0
 80008e4:	40020c00 	.word	0x40020c00
 80008e8:	2000034c 	.word	0x2000034c

080008ec <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f001 fd18 	bl	800232a <osDelay>
 80008fa:	e7fb      	b.n	80008f4 <StartDefaultTask+0x8>

080008fc <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000904:	2001      	movs	r0, #1
 8000906:	f001 fd10 	bl	800232a <osDelay>
 800090a:	e7fb      	b.n	8000904 <StartTask02+0x8>

0800090c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000914:	e7fe      	b.n	8000914 <Error_Handler+0x8>
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_MspInit+0x54>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	4a11      	ldr	r2, [pc, #68]	; (800096c <HAL_MspInit+0x54>)
 8000928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092c:	6453      	str	r3, [r2, #68]	; 0x44
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x54>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_MspInit+0x54>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <HAL_MspInit+0x54>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_MspInit+0x54>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	210f      	movs	r1, #15
 800095a:	f06f 0001 	mvn.w	r0, #1
 800095e:	f000 fa80 	bl	8000e62 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a19      	ldr	r2, [pc, #100]	; (80009f4 <HAL_UART_MspInit+0x84>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d12b      	bne.n	80009ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_UART_MspInit+0x88>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <HAL_UART_MspInit+0x88>)
 800099c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_UART_MspInit+0x88>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_UART_MspInit+0x88>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <HAL_UART_MspInit+0x88>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_UART_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ca:	230c      	movs	r3, #12
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009da:	2307      	movs	r3, #7
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <HAL_UART_MspInit+0x8c>)
 80009e6:	f000 fa65 	bl	8000eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ea:	bf00      	nop
 80009ec:	3728      	adds	r7, #40	; 0x28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40004400 	.word	0x40004400
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020000 	.word	0x40020000

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f000 f93a 	bl	8000ca8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a34:	f002 fa28 	bl	8002e88 <xTaskGetSchedulerState>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d001      	beq.n	8000a42 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a3e:	f002 fc63 	bl	8003308 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	60f8      	str	r0, [r7, #12]
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	e00a      	b.n	8000a6e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a58:	f3af 8000 	nop.w
 8000a5c:	4601      	mov	r1, r0
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	1c5a      	adds	r2, r3, #1
 8000a62:	60ba      	str	r2, [r7, #8]
 8000a64:	b2ca      	uxtb	r2, r1
 8000a66:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	697a      	ldr	r2, [r7, #20]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	dbf0      	blt.n	8000a58 <_read+0x12>
	}

return len;
 8000a76:	687b      	ldr	r3, [r7, #4]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	e009      	b.n	8000aa6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	1c5a      	adds	r2, r3, #1
 8000a96:	60ba      	str	r2, [r7, #8]
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	dbf1      	blt.n	8000a92 <_write+0x12>
	}
	return len;
 8000aae:	687b      	ldr	r3, [r7, #4]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_close>:

int _close(int file)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	return -1;
 8000ac0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ae0:	605a      	str	r2, [r3, #4]
	return 0;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <_isatty>:

int _isatty(int file)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	return 1;
 8000af8:	2301      	movs	r3, #1
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b085      	sub	sp, #20
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
	return 0;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <_sbrk+0x5c>)
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <_sbrk+0x60>)
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <_sbrk+0x64>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <_sbrk+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d207      	bcs.n	8000b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b50:	f002 fe14 	bl	800377c <__errno>
 8000b54:	4603      	mov	r3, r0
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	e009      	b.n	8000b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <_sbrk+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20020000 	.word	0x20020000
 8000b80:	00000400 	.word	0x00000400
 8000b84:	200003c0 	.word	0x200003c0
 8000b88:	20004130 	.word	0x20004130

08000b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bb6:	490e      	ldr	r1, [pc, #56]	; (8000bf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bcc:	4c0b      	ldr	r4, [pc, #44]	; (8000bfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bda:	f7ff ffd7 	bl	8000b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bde:	f002 fec9 	bl	8003974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be2:	f7ff fce1 	bl	80005a8 <main>
  bx  lr    
 8000be6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000bf4:	08004b1c 	.word	0x08004b1c
  ldr r2, =_sbss
 8000bf8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000bfc:	2000412c 	.word	0x2000412c

08000c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <HAL_Init+0x40>)
 8000c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <HAL_Init+0x40>)
 8000c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_Init+0x40>)
 8000c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f90d 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	200f      	movs	r0, #15
 8000c34:	f000 f808 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff fe6e 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023c00 	.word	0x40023c00

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x54>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x58>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f917 	bl	8000e9a <HAL_SYSTICK_Config>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00e      	b.n	8000c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d80a      	bhi.n	8000c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f000 f8ed 	bl	8000e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_InitTick+0x5c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000004 	.word	0x20000004
 8000ca0:	2000000c 	.word	0x2000000c
 8000ca4:	20000008 	.word	0x20000008

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	2000000c 	.word	0x2000000c
 8000ccc:	200003c4 	.word	0x200003c4

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	200003c4 	.word	0x200003c4

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e18:	d301      	bcc.n	8000e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00f      	b.n	8000e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <SysTick_Config+0x40>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e26:	210f      	movs	r1, #15
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f7ff ff8e 	bl	8000d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <SysTick_Config+0x40>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <SysTick_Config+0x40>)
 8000e38:	2207      	movs	r2, #7
 8000e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff47 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e74:	f7ff ff5c 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f7ff ff8e 	bl	8000da0 <NVIC_EncodePriority>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff5d 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffb0 	bl	8000e08 <SysTick_Config>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	e16b      	b.n	80011a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	f040 815a 	bne.w	80011a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d005      	beq.n	8000f06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d130      	bne.n	8000f68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	091b      	lsrs	r3, r3, #4
 8000f52:	f003 0201 	and.w	r2, r3, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d017      	beq.n	8000fa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d123      	bne.n	8000ff8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	69b9      	ldr	r1, [r7, #24]
 8000ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0203 	and.w	r2, r3, #3
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 80b4 	beq.w	80011a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b60      	ldr	r3, [pc, #384]	; (80011c0 <HAL_GPIO_Init+0x30c>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a5f      	ldr	r2, [pc, #380]	; (80011c0 <HAL_GPIO_Init+0x30c>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b5d      	ldr	r3, [pc, #372]	; (80011c0 <HAL_GPIO_Init+0x30c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001056:	4a5b      	ldr	r2, [pc, #364]	; (80011c4 <HAL_GPIO_Init+0x310>)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a52      	ldr	r2, [pc, #328]	; (80011c8 <HAL_GPIO_Init+0x314>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d02b      	beq.n	80010da <HAL_GPIO_Init+0x226>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a51      	ldr	r2, [pc, #324]	; (80011cc <HAL_GPIO_Init+0x318>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d025      	beq.n	80010d6 <HAL_GPIO_Init+0x222>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a50      	ldr	r2, [pc, #320]	; (80011d0 <HAL_GPIO_Init+0x31c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d01f      	beq.n	80010d2 <HAL_GPIO_Init+0x21e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4f      	ldr	r2, [pc, #316]	; (80011d4 <HAL_GPIO_Init+0x320>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d019      	beq.n	80010ce <HAL_GPIO_Init+0x21a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4e      	ldr	r2, [pc, #312]	; (80011d8 <HAL_GPIO_Init+0x324>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0x216>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4d      	ldr	r2, [pc, #308]	; (80011dc <HAL_GPIO_Init+0x328>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00d      	beq.n	80010c6 <HAL_GPIO_Init+0x212>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4c      	ldr	r2, [pc, #304]	; (80011e0 <HAL_GPIO_Init+0x32c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d007      	beq.n	80010c2 <HAL_GPIO_Init+0x20e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4b      	ldr	r2, [pc, #300]	; (80011e4 <HAL_GPIO_Init+0x330>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_GPIO_Init+0x20a>
 80010ba:	2307      	movs	r3, #7
 80010bc:	e00e      	b.n	80010dc <HAL_GPIO_Init+0x228>
 80010be:	2308      	movs	r3, #8
 80010c0:	e00c      	b.n	80010dc <HAL_GPIO_Init+0x228>
 80010c2:	2306      	movs	r3, #6
 80010c4:	e00a      	b.n	80010dc <HAL_GPIO_Init+0x228>
 80010c6:	2305      	movs	r3, #5
 80010c8:	e008      	b.n	80010dc <HAL_GPIO_Init+0x228>
 80010ca:	2304      	movs	r3, #4
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x228>
 80010ce:	2303      	movs	r3, #3
 80010d0:	e004      	b.n	80010dc <HAL_GPIO_Init+0x228>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e002      	b.n	80010dc <HAL_GPIO_Init+0x228>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <HAL_GPIO_Init+0x228>
 80010da:	2300      	movs	r3, #0
 80010dc:	69fa      	ldr	r2, [r7, #28]
 80010de:	f002 0203 	and.w	r2, r2, #3
 80010e2:	0092      	lsls	r2, r2, #2
 80010e4:	4093      	lsls	r3, r2
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ec:	4935      	ldr	r1, [pc, #212]	; (80011c4 <HAL_GPIO_Init+0x310>)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fa:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <HAL_GPIO_Init+0x334>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800111e:	4a32      	ldr	r2, [pc, #200]	; (80011e8 <HAL_GPIO_Init+0x334>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001124:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <HAL_GPIO_Init+0x334>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001148:	4a27      	ldr	r2, [pc, #156]	; (80011e8 <HAL_GPIO_Init+0x334>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800114e:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <HAL_GPIO_Init+0x334>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001172:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <HAL_GPIO_Init+0x334>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_GPIO_Init+0x334>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800119c:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <HAL_GPIO_Init+0x334>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3301      	adds	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	f67f ae90 	bls.w	8000ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40013800 	.word	0x40013800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40021400 	.word	0x40021400
 80011e0:	40021800 	.word	0x40021800
 80011e4:	40021c00 	.word	0x40021c00
 80011e8:	40013c00 	.word	0x40013c00

080011ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001208:	e003      	b.n	8001212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	041a      	lsls	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	619a      	str	r2, [r3, #24]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e267      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	2b00      	cmp	r3, #0
 800123c:	d075      	beq.n	800132a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800123e:	4b88      	ldr	r3, [pc, #544]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 030c 	and.w	r3, r3, #12
 8001246:	2b04      	cmp	r3, #4
 8001248:	d00c      	beq.n	8001264 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800124a:	4b85      	ldr	r3, [pc, #532]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001252:	2b08      	cmp	r3, #8
 8001254:	d112      	bne.n	800127c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001256:	4b82      	ldr	r3, [pc, #520]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001262:	d10b      	bne.n	800127c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001264:	4b7e      	ldr	r3, [pc, #504]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d05b      	beq.n	8001328 <HAL_RCC_OscConfig+0x108>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d157      	bne.n	8001328 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e242      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001284:	d106      	bne.n	8001294 <HAL_RCC_OscConfig+0x74>
 8001286:	4b76      	ldr	r3, [pc, #472]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a75      	ldr	r2, [pc, #468]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 800128c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e01d      	b.n	80012d0 <HAL_RCC_OscConfig+0xb0>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x98>
 800129e:	4b70      	ldr	r3, [pc, #448]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a6f      	ldr	r2, [pc, #444]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b6d      	ldr	r3, [pc, #436]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a6c      	ldr	r2, [pc, #432]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e00b      	b.n	80012d0 <HAL_RCC_OscConfig+0xb0>
 80012b8:	4b69      	ldr	r3, [pc, #420]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a68      	ldr	r2, [pc, #416]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b66      	ldr	r3, [pc, #408]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a65      	ldr	r2, [pc, #404]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d013      	beq.n	8001300 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d8:	f7ff fcfa 	bl	8000cd0 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e0:	f7ff fcf6 	bl	8000cd0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	; 0x64
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e207      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	4b5b      	ldr	r3, [pc, #364]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0xc0>
 80012fe:	e014      	b.n	800132a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fce6 	bl	8000cd0 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fce2 	bl	8000cd0 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	; 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e1f3      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	4b51      	ldr	r3, [pc, #324]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0xe8>
 8001326:	e000      	b.n	800132a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d063      	beq.n	80013fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001336:	4b4a      	ldr	r3, [pc, #296]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00b      	beq.n	800135a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001342:	4b47      	ldr	r3, [pc, #284]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134a:	2b08      	cmp	r3, #8
 800134c:	d11c      	bne.n	8001388 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134e:	4b44      	ldr	r3, [pc, #272]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d116      	bne.n	8001388 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135a:	4b41      	ldr	r3, [pc, #260]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <HAL_RCC_OscConfig+0x152>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d001      	beq.n	8001372 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e1c7      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001372:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4937      	ldr	r1, [pc, #220]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	e03a      	b.n	80013fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d020      	beq.n	80013d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001390:	4b34      	ldr	r3, [pc, #208]	; (8001464 <HAL_RCC_OscConfig+0x244>)
 8001392:	2201      	movs	r2, #1
 8001394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001396:	f7ff fc9b 	bl	8000cd0 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139e:	f7ff fc97 	bl	8000cd0 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e1a8      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4925      	ldr	r1, [pc, #148]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]
 80013d0:	e015      	b.n	80013fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <HAL_RCC_OscConfig+0x244>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d8:	f7ff fc7a 	bl	8000cd0 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e0:	f7ff fc76 	bl	8000cd0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e187      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d036      	beq.n	8001478 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d016      	beq.n	8001440 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_RCC_OscConfig+0x248>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001418:	f7ff fc5a 	bl	8000cd0 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001420:	f7ff fc56 	bl	8000cd0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e167      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0x200>
 800143e:	e01b      	b.n	8001478 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_RCC_OscConfig+0x248>)
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001446:	f7ff fc43 	bl	8000cd0 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144c:	e00e      	b.n	800146c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144e:	f7ff fc3f 	bl	8000cd0 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d907      	bls.n	800146c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e150      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
 8001460:	40023800 	.word	0x40023800
 8001464:	42470000 	.word	0x42470000
 8001468:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146c:	4b88      	ldr	r3, [pc, #544]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 800146e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1ea      	bne.n	800144e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 8097 	beq.w	80015b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148a:	4b81      	ldr	r3, [pc, #516]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10f      	bne.n	80014b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b7d      	ldr	r3, [pc, #500]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a7c      	ldr	r2, [pc, #496]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	4b7a      	ldr	r3, [pc, #488]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b2:	2301      	movs	r3, #1
 80014b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b6:	4b77      	ldr	r3, [pc, #476]	; (8001694 <HAL_RCC_OscConfig+0x474>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d118      	bne.n	80014f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c2:	4b74      	ldr	r3, [pc, #464]	; (8001694 <HAL_RCC_OscConfig+0x474>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a73      	ldr	r2, [pc, #460]	; (8001694 <HAL_RCC_OscConfig+0x474>)
 80014c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fbff 	bl	8000cd0 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d6:	f7ff fbfb 	bl	8000cd0 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e10c      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	4b6a      	ldr	r3, [pc, #424]	; (8001694 <HAL_RCC_OscConfig+0x474>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d106      	bne.n	800150a <HAL_RCC_OscConfig+0x2ea>
 80014fc:	4b64      	ldr	r3, [pc, #400]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 80014fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001500:	4a63      	ldr	r2, [pc, #396]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6713      	str	r3, [r2, #112]	; 0x70
 8001508:	e01c      	b.n	8001544 <HAL_RCC_OscConfig+0x324>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b05      	cmp	r3, #5
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0x30c>
 8001512:	4b5f      	ldr	r3, [pc, #380]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001516:	4a5e      	ldr	r2, [pc, #376]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	6713      	str	r3, [r2, #112]	; 0x70
 800151e:	4b5c      	ldr	r3, [pc, #368]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001522:	4a5b      	ldr	r2, [pc, #364]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6713      	str	r3, [r2, #112]	; 0x70
 800152a:	e00b      	b.n	8001544 <HAL_RCC_OscConfig+0x324>
 800152c:	4b58      	ldr	r3, [pc, #352]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001530:	4a57      	ldr	r2, [pc, #348]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001532:	f023 0301 	bic.w	r3, r3, #1
 8001536:	6713      	str	r3, [r2, #112]	; 0x70
 8001538:	4b55      	ldr	r3, [pc, #340]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 800153a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153c:	4a54      	ldr	r2, [pc, #336]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 800153e:	f023 0304 	bic.w	r3, r3, #4
 8001542:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d015      	beq.n	8001578 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154c:	f7ff fbc0 	bl	8000cd0 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001552:	e00a      	b.n	800156a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001554:	f7ff fbbc 	bl	8000cd0 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001562:	4293      	cmp	r3, r2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e0cb      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156a:	4b49      	ldr	r3, [pc, #292]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0ee      	beq.n	8001554 <HAL_RCC_OscConfig+0x334>
 8001576:	e014      	b.n	80015a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001578:	f7ff fbaa 	bl	8000cd0 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157e:	e00a      	b.n	8001596 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001580:	f7ff fba6 	bl	8000cd0 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f241 3288 	movw	r2, #5000	; 0x1388
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e0b5      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001596:	4b3e      	ldr	r3, [pc, #248]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1ee      	bne.n	8001580 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a8:	4b39      	ldr	r3, [pc, #228]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	4a38      	ldr	r2, [pc, #224]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 80015ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80a1 	beq.w	8001700 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d05c      	beq.n	8001684 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d141      	bne.n	8001656 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d2:	4b31      	ldr	r3, [pc, #196]	; (8001698 <HAL_RCC_OscConfig+0x478>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fb7a 	bl	8000cd0 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e0:	f7ff fb76 	bl	8000cd0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e087      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f2:	4b27      	ldr	r3, [pc, #156]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69da      	ldr	r2, [r3, #28]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	019b      	lsls	r3, r3, #6
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	085b      	lsrs	r3, r3, #1
 8001616:	3b01      	subs	r3, #1
 8001618:	041b      	lsls	r3, r3, #16
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	061b      	lsls	r3, r3, #24
 8001622:	491b      	ldr	r1, [pc, #108]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_RCC_OscConfig+0x478>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162e:	f7ff fb4f 	bl	8000cd0 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001636:	f7ff fb4b 	bl	8000cd0 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e05c      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x416>
 8001654:	e054      	b.n	8001700 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_RCC_OscConfig+0x478>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fb38 	bl	8000cd0 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff fb34 	bl	8000cd0 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e045      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x444>
 8001682:	e03d      	b.n	8001700 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d107      	bne.n	800169c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e038      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
 8001690:	40023800 	.word	0x40023800
 8001694:	40007000 	.word	0x40007000
 8001698:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_RCC_OscConfig+0x4ec>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d028      	beq.n	80016fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d121      	bne.n	80016fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d11a      	bne.n	80016fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016cc:	4013      	ands	r3, r2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d111      	bne.n	80016fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	085b      	lsrs	r3, r3, #1
 80016e4:	3b01      	subs	r3, #1
 80016e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d107      	bne.n	80016fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800

08001710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0cc      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001724:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d90c      	bls.n	800174c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b65      	ldr	r3, [pc, #404]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0b8      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d020      	beq.n	800179a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001764:	4b59      	ldr	r3, [pc, #356]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4a58      	ldr	r2, [pc, #352]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800176e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a52      	ldr	r2, [pc, #328]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001788:	4b50      	ldr	r3, [pc, #320]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	494d      	ldr	r1, [pc, #308]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d044      	beq.n	8001830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	4b47      	ldr	r3, [pc, #284]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d119      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e07f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e06f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e067      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ee:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f023 0203 	bic.w	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4934      	ldr	r1, [pc, #208]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001800:	f7ff fa66 	bl	8000cd0 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	e00a      	b.n	800181e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001808:	f7ff fa62 	bl	8000cd0 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	; 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e04f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 020c 	and.w	r2, r3, #12
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d1eb      	bne.n	8001808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d20c      	bcs.n	8001858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e032      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4916      	ldr	r1, [pc, #88]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	490e      	ldr	r1, [pc, #56]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001896:	f000 f821 	bl	80018dc <HAL_RCC_GetSysClockFreq>
 800189a:	4602      	mov	r2, r0
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	490a      	ldr	r1, [pc, #40]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	5ccb      	ldrb	r3, [r1, r3]
 80018aa:	fa22 f303 	lsr.w	r3, r2, r3
 80018ae:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_RCC_ClockConfig+0x1c8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f9c6 	bl	8000c48 <HAL_InitTick>

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00
 80018cc:	40023800 	.word	0x40023800
 80018d0:	08004a5c 	.word	0x08004a5c
 80018d4:	20000004 	.word	0x20000004
 80018d8:	20000008 	.word	0x20000008

080018dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e0:	b090      	sub	sp, #64	; 0x40
 80018e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
 80018e8:	2300      	movs	r3, #0
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ec:	2300      	movs	r3, #0
 80018ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018f4:	4b59      	ldr	r3, [pc, #356]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x180>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d00d      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x40>
 8001900:	2b08      	cmp	r3, #8
 8001902:	f200 80a1 	bhi.w	8001a48 <HAL_RCC_GetSysClockFreq+0x16c>
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <HAL_RCC_GetSysClockFreq+0x34>
 800190a:	2b04      	cmp	r3, #4
 800190c:	d003      	beq.n	8001916 <HAL_RCC_GetSysClockFreq+0x3a>
 800190e:	e09b      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001910:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x184>)
 8001912:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001914:	e09b      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001916:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001918:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800191a:	e098      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800191c:	4b4f      	ldr	r3, [pc, #316]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x180>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001926:	4b4d      	ldr	r3, [pc, #308]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d028      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001932:	4b4a      	ldr	r3, [pc, #296]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	099b      	lsrs	r3, r3, #6
 8001938:	2200      	movs	r2, #0
 800193a:	623b      	str	r3, [r7, #32]
 800193c:	627a      	str	r2, [r7, #36]	; 0x24
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001944:	2100      	movs	r1, #0
 8001946:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001948:	fb03 f201 	mul.w	r2, r3, r1
 800194c:	2300      	movs	r3, #0
 800194e:	fb00 f303 	mul.w	r3, r0, r3
 8001952:	4413      	add	r3, r2
 8001954:	4a43      	ldr	r2, [pc, #268]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001956:	fba0 1202 	umull	r1, r2, r0, r2
 800195a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800195c:	460a      	mov	r2, r1
 800195e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001962:	4413      	add	r3, r2
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001968:	2200      	movs	r2, #0
 800196a:	61bb      	str	r3, [r7, #24]
 800196c:	61fa      	str	r2, [r7, #28]
 800196e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001972:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001976:	f7fe fc7b 	bl	8000270 <__aeabi_uldivmod>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4613      	mov	r3, r2
 8001980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001982:	e053      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001984:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	099b      	lsrs	r3, r3, #6
 800198a:	2200      	movs	r2, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	617a      	str	r2, [r7, #20]
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001996:	f04f 0b00 	mov.w	fp, #0
 800199a:	4652      	mov	r2, sl
 800199c:	465b      	mov	r3, fp
 800199e:	f04f 0000 	mov.w	r0, #0
 80019a2:	f04f 0100 	mov.w	r1, #0
 80019a6:	0159      	lsls	r1, r3, #5
 80019a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ac:	0150      	lsls	r0, r2, #5
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	ebb2 080a 	subs.w	r8, r2, sl
 80019b6:	eb63 090b 	sbc.w	r9, r3, fp
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019ce:	ebb2 0408 	subs.w	r4, r2, r8
 80019d2:	eb63 0509 	sbc.w	r5, r3, r9
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	00eb      	lsls	r3, r5, #3
 80019e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019e4:	00e2      	lsls	r2, r4, #3
 80019e6:	4614      	mov	r4, r2
 80019e8:	461d      	mov	r5, r3
 80019ea:	eb14 030a 	adds.w	r3, r4, sl
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	eb45 030b 	adc.w	r3, r5, fp
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a02:	4629      	mov	r1, r5
 8001a04:	028b      	lsls	r3, r1, #10
 8001a06:	4621      	mov	r1, r4
 8001a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	028a      	lsls	r2, r1, #10
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a16:	2200      	movs	r2, #0
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	60fa      	str	r2, [r7, #12]
 8001a1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a20:	f7fe fc26 	bl	8000270 <__aeabi_uldivmod>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	0c1b      	lsrs	r3, r3, #16
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	3301      	adds	r3, #1
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a46:	e002      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3740      	adds	r7, #64	; 0x40
 8001a54:	46bd      	mov	sp, r7
 8001a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	00f42400 	.word	0x00f42400
 8001a64:	017d7840 	.word	0x017d7840

08001a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000004 	.word	0x20000004

08001a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a84:	f7ff fff0 	bl	8001a68 <HAL_RCC_GetHCLKFreq>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	0a9b      	lsrs	r3, r3, #10
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	4903      	ldr	r1, [pc, #12]	; (8001aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a96:	5ccb      	ldrb	r3, [r1, r3]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	08004a6c 	.word	0x08004a6c

08001aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001aac:	f7ff ffdc 	bl	8001a68 <HAL_RCC_GetHCLKFreq>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	0b5b      	lsrs	r3, r3, #13
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	4903      	ldr	r1, [pc, #12]	; (8001acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001abe:	5ccb      	ldrb	r3, [r1, r3]
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	08004a6c 	.word	0x08004a6c

08001ad0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e03f      	b.n	8001b62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7fe ff3a 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2224      	movs	r2, #36	; 0x24
 8001b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f929 	bl	8001d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695a      	ldr	r2, [r3, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2220      	movs	r2, #32
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b08a      	sub	sp, #40	; 0x28
 8001b6e:	af02      	add	r7, sp, #8
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	4613      	mov	r3, r2
 8001b78:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	d17c      	bne.n	8001c84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <HAL_UART_Transmit+0x2c>
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e075      	b.n	8001c86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_UART_Transmit+0x3e>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e06e      	b.n	8001c86 <HAL_UART_Transmit+0x11c>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2221      	movs	r2, #33	; 0x21
 8001bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bbe:	f7ff f887 	bl	8000cd0 <HAL_GetTick>
 8001bc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	88fa      	ldrh	r2, [r7, #6]
 8001bc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	88fa      	ldrh	r2, [r7, #6]
 8001bce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bd8:	d108      	bne.n	8001bec <HAL_UART_Transmit+0x82>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d104      	bne.n	8001bec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	e003      	b.n	8001bf4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001bfc:	e02a      	b.n	8001c54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2200      	movs	r2, #0
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f840 	bl	8001c8e <UART_WaitOnFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e036      	b.n	8001c86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10b      	bne.n	8001c36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	3302      	adds	r3, #2
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	e007      	b.n	8001c46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	3301      	adds	r3, #1
 8001c44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1cf      	bne.n	8001bfe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2200      	movs	r2, #0
 8001c66:	2140      	movs	r1, #64	; 0x40
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 f810 	bl	8001c8e <UART_WaitOnFlagUntilTimeout>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e006      	b.n	8001c86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e000      	b.n	8001c86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c84:	2302      	movs	r3, #2
  }
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b090      	sub	sp, #64	; 0x40
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c9e:	e050      	b.n	8001d42 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca6:	d04c      	beq.n	8001d42 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <UART_WaitOnFlagUntilTimeout+0x30>
 8001cae:	f7ff f80f 	bl	8000cd0 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d241      	bcs.n	8001d42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	330c      	adds	r3, #12
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc8:	e853 3f00 	ldrex	r3, [r3]
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	330c      	adds	r3, #12
 8001cdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cde:	637a      	str	r2, [r7, #52]	; 0x34
 8001ce0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ce2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ce6:	e841 2300 	strex	r3, r2, [r1]
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1e5      	bne.n	8001cbe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	3314      	adds	r3, #20
 8001cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	e853 3f00 	ldrex	r3, [r3]
 8001d00:	613b      	str	r3, [r7, #16]
   return(result);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3314      	adds	r3, #20
 8001d10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d12:	623a      	str	r2, [r7, #32]
 8001d14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d16:	69f9      	ldr	r1, [r7, #28]
 8001d18:	6a3a      	ldr	r2, [r7, #32]
 8001d1a:	e841 2300 	strex	r3, r2, [r1]
 8001d1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1e5      	bne.n	8001cf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2220      	movs	r2, #32
 8001d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2220      	movs	r2, #32
 8001d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e00f      	b.n	8001d62 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	bf0c      	ite	eq
 8001d52:	2301      	moveq	r3, #1
 8001d54:	2300      	movne	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d09f      	beq.n	8001ca0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3740      	adds	r7, #64	; 0x40
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d70:	b0c0      	sub	sp, #256	; 0x100
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d88:	68d9      	ldr	r1, [r3, #12]
 8001d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	ea40 0301 	orr.w	r3, r0, r1
 8001d94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	431a      	orrs	r2, r3
 8001da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001dc4:	f021 010c 	bic.w	r1, r1, #12
 8001dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001dd2:	430b      	orrs	r3, r1
 8001dd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001de6:	6999      	ldr	r1, [r3, #24]
 8001de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	ea40 0301 	orr.w	r3, r0, r1
 8001df2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4b8f      	ldr	r3, [pc, #572]	; (8002038 <UART_SetConfig+0x2cc>)
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d005      	beq.n	8001e0c <UART_SetConfig+0xa0>
 8001e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	4b8d      	ldr	r3, [pc, #564]	; (800203c <UART_SetConfig+0x2d0>)
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d104      	bne.n	8001e16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e0c:	f7ff fe4c 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8001e10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001e14:	e003      	b.n	8001e1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e16:	f7ff fe33 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8001e1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e28:	f040 810c 	bne.w	8002044 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e30:	2200      	movs	r2, #0
 8001e32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001e36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001e3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001e3e:	4622      	mov	r2, r4
 8001e40:	462b      	mov	r3, r5
 8001e42:	1891      	adds	r1, r2, r2
 8001e44:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e46:	415b      	adcs	r3, r3
 8001e48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e4e:	4621      	mov	r1, r4
 8001e50:	eb12 0801 	adds.w	r8, r2, r1
 8001e54:	4629      	mov	r1, r5
 8001e56:	eb43 0901 	adc.w	r9, r3, r1
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e6e:	4690      	mov	r8, r2
 8001e70:	4699      	mov	r9, r3
 8001e72:	4623      	mov	r3, r4
 8001e74:	eb18 0303 	adds.w	r3, r8, r3
 8001e78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e7c:	462b      	mov	r3, r5
 8001e7e:	eb49 0303 	adc.w	r3, r9, r3
 8001e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001e96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	18db      	adds	r3, r3, r3
 8001e9e:	653b      	str	r3, [r7, #80]	; 0x50
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	eb42 0303 	adc.w	r3, r2, r3
 8001ea6:	657b      	str	r3, [r7, #84]	; 0x54
 8001ea8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001eac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001eb0:	f7fe f9de 	bl	8000270 <__aeabi_uldivmod>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4b61      	ldr	r3, [pc, #388]	; (8002040 <UART_SetConfig+0x2d4>)
 8001eba:	fba3 2302 	umull	r2, r3, r3, r2
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	011c      	lsls	r4, r3, #4
 8001ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ecc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001ed0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001ed4:	4642      	mov	r2, r8
 8001ed6:	464b      	mov	r3, r9
 8001ed8:	1891      	adds	r1, r2, r2
 8001eda:	64b9      	str	r1, [r7, #72]	; 0x48
 8001edc:	415b      	adcs	r3, r3
 8001ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ee0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ee4:	4641      	mov	r1, r8
 8001ee6:	eb12 0a01 	adds.w	sl, r2, r1
 8001eea:	4649      	mov	r1, r9
 8001eec:	eb43 0b01 	adc.w	fp, r3, r1
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001efc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f04:	4692      	mov	sl, r2
 8001f06:	469b      	mov	fp, r3
 8001f08:	4643      	mov	r3, r8
 8001f0a:	eb1a 0303 	adds.w	r3, sl, r3
 8001f0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f12:	464b      	mov	r3, r9
 8001f14:	eb4b 0303 	adc.w	r3, fp, r3
 8001f18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001f2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001f30:	460b      	mov	r3, r1
 8001f32:	18db      	adds	r3, r3, r3
 8001f34:	643b      	str	r3, [r7, #64]	; 0x40
 8001f36:	4613      	mov	r3, r2
 8001f38:	eb42 0303 	adc.w	r3, r2, r3
 8001f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001f46:	f7fe f993 	bl	8000270 <__aeabi_uldivmod>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <UART_SetConfig+0x2d4>)
 8001f52:	fba3 2301 	umull	r2, r3, r3, r1
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	2264      	movs	r2, #100	; 0x64
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	1acb      	subs	r3, r1, r3
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001f66:	4b36      	ldr	r3, [pc, #216]	; (8002040 <UART_SetConfig+0x2d4>)
 8001f68:	fba3 2302 	umull	r2, r3, r3, r2
 8001f6c:	095b      	lsrs	r3, r3, #5
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f74:	441c      	add	r4, r3
 8001f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001f88:	4642      	mov	r2, r8
 8001f8a:	464b      	mov	r3, r9
 8001f8c:	1891      	adds	r1, r2, r2
 8001f8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f90:	415b      	adcs	r3, r3
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f98:	4641      	mov	r1, r8
 8001f9a:	1851      	adds	r1, r2, r1
 8001f9c:	6339      	str	r1, [r7, #48]	; 0x30
 8001f9e:	4649      	mov	r1, r9
 8001fa0:	414b      	adcs	r3, r1
 8001fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001fb0:	4659      	mov	r1, fp
 8001fb2:	00cb      	lsls	r3, r1, #3
 8001fb4:	4651      	mov	r1, sl
 8001fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fba:	4651      	mov	r1, sl
 8001fbc:	00ca      	lsls	r2, r1, #3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4642      	mov	r2, r8
 8001fc6:	189b      	adds	r3, r3, r2
 8001fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001fcc:	464b      	mov	r3, r9
 8001fce:	460a      	mov	r2, r1
 8001fd0:	eb42 0303 	adc.w	r3, r2, r3
 8001fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001fe4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001fe8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001fec:	460b      	mov	r3, r1
 8001fee:	18db      	adds	r3, r3, r3
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	eb42 0303 	adc.w	r3, r2, r3
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ffa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ffe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002002:	f7fe f935 	bl	8000270 <__aeabi_uldivmod>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <UART_SetConfig+0x2d4>)
 800200c:	fba3 1302 	umull	r1, r3, r3, r2
 8002010:	095b      	lsrs	r3, r3, #5
 8002012:	2164      	movs	r1, #100	; 0x64
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	3332      	adds	r3, #50	; 0x32
 800201e:	4a08      	ldr	r2, [pc, #32]	; (8002040 <UART_SetConfig+0x2d4>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	095b      	lsrs	r3, r3, #5
 8002026:	f003 0207 	and.w	r2, r3, #7
 800202a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4422      	add	r2, r4
 8002032:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002034:	e105      	b.n	8002242 <UART_SetConfig+0x4d6>
 8002036:	bf00      	nop
 8002038:	40011000 	.word	0x40011000
 800203c:	40011400 	.word	0x40011400
 8002040:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002048:	2200      	movs	r2, #0
 800204a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800204e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002052:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002056:	4642      	mov	r2, r8
 8002058:	464b      	mov	r3, r9
 800205a:	1891      	adds	r1, r2, r2
 800205c:	6239      	str	r1, [r7, #32]
 800205e:	415b      	adcs	r3, r3
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
 8002062:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002066:	4641      	mov	r1, r8
 8002068:	1854      	adds	r4, r2, r1
 800206a:	4649      	mov	r1, r9
 800206c:	eb43 0501 	adc.w	r5, r3, r1
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	00eb      	lsls	r3, r5, #3
 800207a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800207e:	00e2      	lsls	r2, r4, #3
 8002080:	4614      	mov	r4, r2
 8002082:	461d      	mov	r5, r3
 8002084:	4643      	mov	r3, r8
 8002086:	18e3      	adds	r3, r4, r3
 8002088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800208c:	464b      	mov	r3, r9
 800208e:	eb45 0303 	adc.w	r3, r5, r3
 8002092:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80020b2:	4629      	mov	r1, r5
 80020b4:	008b      	lsls	r3, r1, #2
 80020b6:	4621      	mov	r1, r4
 80020b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020bc:	4621      	mov	r1, r4
 80020be:	008a      	lsls	r2, r1, #2
 80020c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80020c4:	f7fe f8d4 	bl	8000270 <__aeabi_uldivmod>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4b60      	ldr	r3, [pc, #384]	; (8002250 <UART_SetConfig+0x4e4>)
 80020ce:	fba3 2302 	umull	r2, r3, r3, r2
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	011c      	lsls	r4, r3, #4
 80020d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020da:	2200      	movs	r2, #0
 80020dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80020e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80020e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80020e8:	4642      	mov	r2, r8
 80020ea:	464b      	mov	r3, r9
 80020ec:	1891      	adds	r1, r2, r2
 80020ee:	61b9      	str	r1, [r7, #24]
 80020f0:	415b      	adcs	r3, r3
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020f8:	4641      	mov	r1, r8
 80020fa:	1851      	adds	r1, r2, r1
 80020fc:	6139      	str	r1, [r7, #16]
 80020fe:	4649      	mov	r1, r9
 8002100:	414b      	adcs	r3, r1
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002110:	4659      	mov	r1, fp
 8002112:	00cb      	lsls	r3, r1, #3
 8002114:	4651      	mov	r1, sl
 8002116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800211a:	4651      	mov	r1, sl
 800211c:	00ca      	lsls	r2, r1, #3
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	4603      	mov	r3, r0
 8002124:	4642      	mov	r2, r8
 8002126:	189b      	adds	r3, r3, r2
 8002128:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800212c:	464b      	mov	r3, r9
 800212e:	460a      	mov	r2, r1
 8002130:	eb42 0303 	adc.w	r3, r2, r3
 8002134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	67bb      	str	r3, [r7, #120]	; 0x78
 8002142:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002150:	4649      	mov	r1, r9
 8002152:	008b      	lsls	r3, r1, #2
 8002154:	4641      	mov	r1, r8
 8002156:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800215a:	4641      	mov	r1, r8
 800215c:	008a      	lsls	r2, r1, #2
 800215e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002162:	f7fe f885 	bl	8000270 <__aeabi_uldivmod>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4b39      	ldr	r3, [pc, #228]	; (8002250 <UART_SetConfig+0x4e4>)
 800216c:	fba3 1302 	umull	r1, r3, r3, r2
 8002170:	095b      	lsrs	r3, r3, #5
 8002172:	2164      	movs	r1, #100	; 0x64
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	3332      	adds	r3, #50	; 0x32
 800217e:	4a34      	ldr	r2, [pc, #208]	; (8002250 <UART_SetConfig+0x4e4>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	095b      	lsrs	r3, r3, #5
 8002186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800218a:	441c      	add	r4, r3
 800218c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002190:	2200      	movs	r2, #0
 8002192:	673b      	str	r3, [r7, #112]	; 0x70
 8002194:	677a      	str	r2, [r7, #116]	; 0x74
 8002196:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800219a:	4642      	mov	r2, r8
 800219c:	464b      	mov	r3, r9
 800219e:	1891      	adds	r1, r2, r2
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	415b      	adcs	r3, r3
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021aa:	4641      	mov	r1, r8
 80021ac:	1851      	adds	r1, r2, r1
 80021ae:	6039      	str	r1, [r7, #0]
 80021b0:	4649      	mov	r1, r9
 80021b2:	414b      	adcs	r3, r1
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80021c2:	4659      	mov	r1, fp
 80021c4:	00cb      	lsls	r3, r1, #3
 80021c6:	4651      	mov	r1, sl
 80021c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021cc:	4651      	mov	r1, sl
 80021ce:	00ca      	lsls	r2, r1, #3
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	4642      	mov	r2, r8
 80021d8:	189b      	adds	r3, r3, r2
 80021da:	66bb      	str	r3, [r7, #104]	; 0x68
 80021dc:	464b      	mov	r3, r9
 80021de:	460a      	mov	r2, r1
 80021e0:	eb42 0303 	adc.w	r3, r2, r3
 80021e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	663b      	str	r3, [r7, #96]	; 0x60
 80021f0:	667a      	str	r2, [r7, #100]	; 0x64
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80021fe:	4649      	mov	r1, r9
 8002200:	008b      	lsls	r3, r1, #2
 8002202:	4641      	mov	r1, r8
 8002204:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002208:	4641      	mov	r1, r8
 800220a:	008a      	lsls	r2, r1, #2
 800220c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002210:	f7fe f82e 	bl	8000270 <__aeabi_uldivmod>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <UART_SetConfig+0x4e4>)
 800221a:	fba3 1302 	umull	r1, r3, r3, r2
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	2164      	movs	r1, #100	; 0x64
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	3332      	adds	r3, #50	; 0x32
 800222c:	4a08      	ldr	r2, [pc, #32]	; (8002250 <UART_SetConfig+0x4e4>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	f003 020f 	and.w	r2, r3, #15
 8002238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4422      	add	r2, r4
 8002240:	609a      	str	r2, [r3, #8]
}
 8002242:	bf00      	nop
 8002244:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002248:	46bd      	mov	sp, r7
 800224a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800224e:	bf00      	nop
 8002250:	51eb851f 	.word	0x51eb851f

08002254 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002266:	2b84      	cmp	r3, #132	; 0x84
 8002268:	d005      	beq.n	8002276 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800226a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4413      	add	r3, r2
 8002272:	3303      	adds	r3, #3
 8002274:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002276:	68fb      	ldr	r3, [r7, #12]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002288:	f000 faf6 	bl	8002878 <vTaskStartScheduler>
  
  return osOK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	bd80      	pop	{r7, pc}

08002292 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002292:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002294:	b089      	sub	sp, #36	; 0x24
 8002296:	af04      	add	r7, sp, #16
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d020      	beq.n	80022e6 <osThreadCreate+0x54>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01c      	beq.n	80022e6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685c      	ldr	r4, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681d      	ldr	r5, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691e      	ldr	r6, [r3, #16]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ffc8 	bl	8002254 <makeFreeRtosPriority>
 80022c4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022ce:	9202      	str	r2, [sp, #8]
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	9100      	str	r1, [sp, #0]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4632      	mov	r2, r6
 80022d8:	4629      	mov	r1, r5
 80022da:	4620      	mov	r0, r4
 80022dc:	f000 f8ed 	bl	80024ba <xTaskCreateStatic>
 80022e0:	4603      	mov	r3, r0
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	e01c      	b.n	8002320 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685c      	ldr	r4, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022f2:	b29e      	uxth	r6, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ffaa 	bl	8002254 <makeFreeRtosPriority>
 8002300:	4602      	mov	r2, r0
 8002302:	f107 030c 	add.w	r3, r7, #12
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	9200      	str	r2, [sp, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	4632      	mov	r2, r6
 800230e:	4629      	mov	r1, r5
 8002310:	4620      	mov	r0, r4
 8002312:	f000 f92f 	bl	8002574 <xTaskCreate>
 8002316:	4603      	mov	r3, r0
 8002318:	2b01      	cmp	r3, #1
 800231a:	d001      	beq.n	8002320 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800231c:	2300      	movs	r3, #0
 800231e:	e000      	b.n	8002322 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002320:	68fb      	ldr	r3, [r7, #12]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800232a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <osDelay+0x16>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	e000      	b.n	8002342 <osDelay+0x18>
 8002340:	2301      	movs	r3, #1
 8002342:	4618      	mov	r0, r3
 8002344:	f000 fa64 	bl	8002810 <vTaskDelay>
  
  return osOK;
 8002348:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f103 0208 	add.w	r2, r3, #8
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f04f 32ff 	mov.w	r2, #4294967295
 800236a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f103 0208 	add.w	r2, r3, #8
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f103 0208 	add.w	r2, r3, #8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	601a      	str	r2, [r3, #0]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240a:	d103      	bne.n	8002414 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	e00c      	b.n	800242e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3308      	adds	r3, #8
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	e002      	b.n	8002422 <vListInsert+0x2e>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	429a      	cmp	r2, r3
 800242c:	d2f6      	bcs.n	800241c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	601a      	str	r2, [r3, #0]
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6892      	ldr	r2, [r2, #8]
 800247c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6852      	ldr	r2, [r2, #4]
 8002486:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	429a      	cmp	r2, r3
 8002490:	d103      	bne.n	800249a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	1e5a      	subs	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b08e      	sub	sp, #56	; 0x38
 80024be:	af04      	add	r7, sp, #16
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80024c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10a      	bne.n	80024e4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80024ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d2:	f383 8811 	msr	BASEPRI, r3
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	f3bf 8f4f 	dsb	sy
 80024de:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80024e0:	bf00      	nop
 80024e2:	e7fe      	b.n	80024e2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80024e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10a      	bne.n	8002500 <xTaskCreateStatic+0x46>
	__asm volatile
 80024ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	61fb      	str	r3, [r7, #28]
}
 80024fc:	bf00      	nop
 80024fe:	e7fe      	b.n	80024fe <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002500:	23b4      	movs	r3, #180	; 0xb4
 8002502:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2bb4      	cmp	r3, #180	; 0xb4
 8002508:	d00a      	beq.n	8002520 <xTaskCreateStatic+0x66>
	__asm volatile
 800250a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250e:	f383 8811 	msr	BASEPRI, r3
 8002512:	f3bf 8f6f 	isb	sy
 8002516:	f3bf 8f4f 	dsb	sy
 800251a:	61bb      	str	r3, [r7, #24]
}
 800251c:	bf00      	nop
 800251e:	e7fe      	b.n	800251e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002520:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01e      	beq.n	8002566 <xTaskCreateStatic+0xac>
 8002528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01b      	beq.n	8002566 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002536:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	2202      	movs	r2, #2
 800253c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002540:	2300      	movs	r3, #0
 8002542:	9303      	str	r3, [sp, #12]
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	9302      	str	r3, [sp, #8]
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f851 	bl	8002600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800255e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002560:	f000 f8ec 	bl	800273c <prvAddNewTaskToReadyList>
 8002564:	e001      	b.n	800256a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800256a:	697b      	ldr	r3, [r7, #20]
	}
 800256c:	4618      	mov	r0, r3
 800256e:	3728      	adds	r7, #40	; 0x28
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08c      	sub	sp, #48	; 0x30
 8002578:	af04      	add	r7, sp, #16
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4618      	mov	r0, r3
 800258a:	f000 ff0d 	bl	80033a8 <pvPortMalloc>
 800258e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00e      	beq.n	80025b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002596:	20b4      	movs	r0, #180	; 0xb4
 8002598:	f000 ff06 	bl	80033a8 <pvPortMalloc>
 800259c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
 80025aa:	e005      	b.n	80025b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80025ac:	6978      	ldr	r0, [r7, #20]
 80025ae:	f000 ffc7 	bl	8003540 <vPortFree>
 80025b2:	e001      	b.n	80025b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d017      	beq.n	80025ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025c6:	88fa      	ldrh	r2, [r7, #6]
 80025c8:	2300      	movs	r3, #0
 80025ca:	9303      	str	r3, [sp, #12]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	9302      	str	r3, [sp, #8]
 80025d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68b9      	ldr	r1, [r7, #8]
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f80f 	bl	8002600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025e2:	69f8      	ldr	r0, [r7, #28]
 80025e4:	f000 f8aa 	bl	800273c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80025e8:	2301      	movs	r3, #1
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	e002      	b.n	80025f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295
 80025f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80025f4:	69bb      	ldr	r3, [r7, #24]
	}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3720      	adds	r7, #32
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002618:	3b01      	subs	r3, #1
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f023 0307 	bic.w	r3, r3, #7
 8002626:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	617b      	str	r3, [r7, #20]
}
 8002644:	bf00      	nop
 8002646:	e7fe      	b.n	8002646 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d01f      	beq.n	800268e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	e012      	b.n	800267a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	4413      	add	r3, r2
 800265a:	7819      	ldrb	r1, [r3, #0]
 800265c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	4413      	add	r3, r2
 8002662:	3334      	adds	r3, #52	; 0x34
 8002664:	460a      	mov	r2, r1
 8002666:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4413      	add	r3, r2
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d006      	beq.n	8002682 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	3301      	adds	r3, #1
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	2b0f      	cmp	r3, #15
 800267e:	d9e9      	bls.n	8002654 <prvInitialiseNewTask+0x54>
 8002680:	e000      	b.n	8002684 <prvInitialiseNewTask+0x84>
			{
				break;
 8002682:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800268c:	e003      	b.n	8002696 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002698:	2b06      	cmp	r3, #6
 800269a:	d901      	bls.n	80026a0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800269c:	2306      	movs	r3, #6
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026aa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	2200      	movs	r2, #0
 80026b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	3304      	adds	r3, #4
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fe6b 	bl	8002392 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026be:	3318      	adds	r3, #24
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fe66 	bl	8002392 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	f1c3 0207 	rsb	r2, r3, #7
 80026d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80026dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026de:	2200      	movs	r2, #0
 80026e0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	334c      	adds	r3, #76	; 0x4c
 80026f0:	2260      	movs	r2, #96	; 0x60
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f001 f972 	bl	80039de <memset>
 80026fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fc:	4a0c      	ldr	r2, [pc, #48]	; (8002730 <prvInitialiseNewTask+0x130>)
 80026fe:	651a      	str	r2, [r3, #80]	; 0x50
 8002700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002702:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <prvInitialiseNewTask+0x134>)
 8002704:	655a      	str	r2, [r3, #84]	; 0x54
 8002706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002708:	4a0b      	ldr	r2, [pc, #44]	; (8002738 <prvInitialiseNewTask+0x138>)
 800270a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	68f9      	ldr	r1, [r7, #12]
 8002710:	69b8      	ldr	r0, [r7, #24]
 8002712:	f000 fc3d 	bl	8002f90 <pxPortInitialiseStack>
 8002716:	4602      	mov	r2, r0
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002726:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002728:	bf00      	nop
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	08004a94 	.word	0x08004a94
 8002734:	08004ab4 	.word	0x08004ab4
 8002738:	08004a74 	.word	0x08004a74

0800273c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002744:	f000 fd4e 	bl	80031e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002748:	4b2a      	ldr	r3, [pc, #168]	; (80027f4 <prvAddNewTaskToReadyList+0xb8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3301      	adds	r3, #1
 800274e:	4a29      	ldr	r2, [pc, #164]	; (80027f4 <prvAddNewTaskToReadyList+0xb8>)
 8002750:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002752:	4b29      	ldr	r3, [pc, #164]	; (80027f8 <prvAddNewTaskToReadyList+0xbc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800275a:	4a27      	ldr	r2, [pc, #156]	; (80027f8 <prvAddNewTaskToReadyList+0xbc>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002760:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <prvAddNewTaskToReadyList+0xb8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d110      	bne.n	800278a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002768:	f000 facc 	bl	8002d04 <prvInitialiseTaskLists>
 800276c:	e00d      	b.n	800278a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800276e:	4b23      	ldr	r3, [pc, #140]	; (80027fc <prvAddNewTaskToReadyList+0xc0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <prvAddNewTaskToReadyList+0xbc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	429a      	cmp	r2, r3
 8002782:	d802      	bhi.n	800278a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002784:	4a1c      	ldr	r2, [pc, #112]	; (80027f8 <prvAddNewTaskToReadyList+0xbc>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <prvAddNewTaskToReadyList+0xc4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <prvAddNewTaskToReadyList+0xc4>)
 8002792:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	2201      	movs	r2, #1
 800279a:	409a      	lsls	r2, r3
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <prvAddNewTaskToReadyList+0xc8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	4a18      	ldr	r2, [pc, #96]	; (8002804 <prvAddNewTaskToReadyList+0xc8>)
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4a15      	ldr	r2, [pc, #84]	; (8002808 <prvAddNewTaskToReadyList+0xcc>)
 80027b4:	441a      	add	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3304      	adds	r3, #4
 80027ba:	4619      	mov	r1, r3
 80027bc:	4610      	mov	r0, r2
 80027be:	f7ff fdf5 	bl	80023ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80027c2:	f000 fd3f 	bl	8003244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <prvAddNewTaskToReadyList+0xc0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00e      	beq.n	80027ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <prvAddNewTaskToReadyList+0xbc>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	429a      	cmp	r2, r3
 80027da:	d207      	bcs.n	80027ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <prvAddNewTaskToReadyList+0xd0>)
 80027de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	200004c8 	.word	0x200004c8
 80027f8:	200003c8 	.word	0x200003c8
 80027fc:	200004d4 	.word	0x200004d4
 8002800:	200004e4 	.word	0x200004e4
 8002804:	200004d0 	.word	0x200004d0
 8002808:	200003cc 	.word	0x200003cc
 800280c:	e000ed04 	.word	0xe000ed04

08002810 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d017      	beq.n	8002852 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <vTaskDelay+0x60>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <vTaskDelay+0x30>
	__asm volatile
 800282a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282e:	f383 8811 	msr	BASEPRI, r3
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	f3bf 8f4f 	dsb	sy
 800283a:	60bb      	str	r3, [r7, #8]
}
 800283c:	bf00      	nop
 800283e:	e7fe      	b.n	800283e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002840:	f000 f884 	bl	800294c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002844:	2100      	movs	r1, #0
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fb3c 	bl	8002ec4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800284c:	f000 f88c 	bl	8002968 <xTaskResumeAll>
 8002850:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d107      	bne.n	8002868 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <vTaskDelay+0x64>)
 800285a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	200004f0 	.word	0x200004f0
 8002874:	e000ed04 	.word	0xe000ed04

08002878 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002886:	463a      	mov	r2, r7
 8002888:	1d39      	adds	r1, r7, #4
 800288a:	f107 0308 	add.w	r3, r7, #8
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fe70 	bl	8000574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002894:	6839      	ldr	r1, [r7, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	9202      	str	r2, [sp, #8]
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	2300      	movs	r3, #0
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	2300      	movs	r3, #0
 80028a4:	460a      	mov	r2, r1
 80028a6:	4921      	ldr	r1, [pc, #132]	; (800292c <vTaskStartScheduler+0xb4>)
 80028a8:	4821      	ldr	r0, [pc, #132]	; (8002930 <vTaskStartScheduler+0xb8>)
 80028aa:	f7ff fe06 	bl	80024ba <xTaskCreateStatic>
 80028ae:	4603      	mov	r3, r0
 80028b0:	4a20      	ldr	r2, [pc, #128]	; (8002934 <vTaskStartScheduler+0xbc>)
 80028b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80028b4:	4b1f      	ldr	r3, [pc, #124]	; (8002934 <vTaskStartScheduler+0xbc>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80028bc:	2301      	movs	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	e001      	b.n	80028c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d11b      	bne.n	8002904 <vTaskStartScheduler+0x8c>
	__asm volatile
 80028cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	613b      	str	r3, [r7, #16]
}
 80028de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80028e0:	4b15      	ldr	r3, [pc, #84]	; (8002938 <vTaskStartScheduler+0xc0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	334c      	adds	r3, #76	; 0x4c
 80028e6:	4a15      	ldr	r2, [pc, #84]	; (800293c <vTaskStartScheduler+0xc4>)
 80028e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <vTaskStartScheduler+0xc8>)
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <vTaskStartScheduler+0xcc>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80028f8:	4b13      	ldr	r3, [pc, #76]	; (8002948 <vTaskStartScheduler+0xd0>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80028fe:	f000 fbcf 	bl	80030a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002902:	e00e      	b.n	8002922 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290a:	d10a      	bne.n	8002922 <vTaskStartScheduler+0xaa>
	__asm volatile
 800290c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	60fb      	str	r3, [r7, #12]
}
 800291e:	bf00      	nop
 8002920:	e7fe      	b.n	8002920 <vTaskStartScheduler+0xa8>
}
 8002922:	bf00      	nop
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	08004a54 	.word	0x08004a54
 8002930:	08002cd5 	.word	0x08002cd5
 8002934:	200004ec 	.word	0x200004ec
 8002938:	200003c8 	.word	0x200003c8
 800293c:	20000014 	.word	0x20000014
 8002940:	200004e8 	.word	0x200004e8
 8002944:	200004d4 	.word	0x200004d4
 8002948:	200004cc 	.word	0x200004cc

0800294c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <vTaskSuspendAll+0x18>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3301      	adds	r3, #1
 8002956:	4a03      	ldr	r2, [pc, #12]	; (8002964 <vTaskSuspendAll+0x18>)
 8002958:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800295a:	bf00      	nop
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	200004f0 	.word	0x200004f0

08002968 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002976:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <xTaskResumeAll+0x114>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10a      	bne.n	8002994 <xTaskResumeAll+0x2c>
	__asm volatile
 800297e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	603b      	str	r3, [r7, #0]
}
 8002990:	bf00      	nop
 8002992:	e7fe      	b.n	8002992 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002994:	f000 fc26 	bl	80031e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002998:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <xTaskResumeAll+0x114>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	3b01      	subs	r3, #1
 800299e:	4a37      	ldr	r2, [pc, #220]	; (8002a7c <xTaskResumeAll+0x114>)
 80029a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029a2:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <xTaskResumeAll+0x114>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d161      	bne.n	8002a6e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029aa:	4b35      	ldr	r3, [pc, #212]	; (8002a80 <xTaskResumeAll+0x118>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d05d      	beq.n	8002a6e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029b2:	e02e      	b.n	8002a12 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029b4:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <xTaskResumeAll+0x11c>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3318      	adds	r3, #24
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fd50 	bl	8002466 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3304      	adds	r3, #4
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fd4b 	bl	8002466 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	2201      	movs	r2, #1
 80029d6:	409a      	lsls	r2, r3
 80029d8:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <xTaskResumeAll+0x120>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4313      	orrs	r3, r2
 80029de:	4a2a      	ldr	r2, [pc, #168]	; (8002a88 <xTaskResumeAll+0x120>)
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4a27      	ldr	r2, [pc, #156]	; (8002a8c <xTaskResumeAll+0x124>)
 80029f0:	441a      	add	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3304      	adds	r3, #4
 80029f6:	4619      	mov	r1, r3
 80029f8:	4610      	mov	r0, r2
 80029fa:	f7ff fcd7 	bl	80023ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a02:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <xTaskResumeAll+0x128>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d302      	bcc.n	8002a12 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002a0c:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <xTaskResumeAll+0x12c>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a12:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <xTaskResumeAll+0x11c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1cc      	bne.n	80029b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a20:	f000 fa12 	bl	8002e48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a24:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <xTaskResumeAll+0x130>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d010      	beq.n	8002a52 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a30:	f000 f836 	bl	8002aa0 <xTaskIncrementTick>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002a3a:	4b16      	ldr	r3, [pc, #88]	; (8002a94 <xTaskResumeAll+0x12c>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f1      	bne.n	8002a30 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <xTaskResumeAll+0x130>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <xTaskResumeAll+0x12c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <xTaskResumeAll+0x134>)
 8002a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a6e:	f000 fbe9 	bl	8003244 <vPortExitCritical>

	return xAlreadyYielded;
 8002a72:	68bb      	ldr	r3, [r7, #8]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	200004f0 	.word	0x200004f0
 8002a80:	200004c8 	.word	0x200004c8
 8002a84:	20000488 	.word	0x20000488
 8002a88:	200004d0 	.word	0x200004d0
 8002a8c:	200003cc 	.word	0x200003cc
 8002a90:	200003c8 	.word	0x200003c8
 8002a94:	200004dc 	.word	0x200004dc
 8002a98:	200004d8 	.word	0x200004d8
 8002a9c:	e000ed04 	.word	0xe000ed04

08002aa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aaa:	4b4e      	ldr	r3, [pc, #312]	; (8002be4 <xTaskIncrementTick+0x144>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 808e 	bne.w	8002bd0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ab4:	4b4c      	ldr	r3, [pc, #304]	; (8002be8 <xTaskIncrementTick+0x148>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002abc:	4a4a      	ldr	r2, [pc, #296]	; (8002be8 <xTaskIncrementTick+0x148>)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d120      	bne.n	8002b0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ac8:	4b48      	ldr	r3, [pc, #288]	; (8002bec <xTaskIncrementTick+0x14c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <xTaskIncrementTick+0x48>
	__asm volatile
 8002ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	603b      	str	r3, [r7, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	e7fe      	b.n	8002ae6 <xTaskIncrementTick+0x46>
 8002ae8:	4b40      	ldr	r3, [pc, #256]	; (8002bec <xTaskIncrementTick+0x14c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	4b40      	ldr	r3, [pc, #256]	; (8002bf0 <xTaskIncrementTick+0x150>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a3e      	ldr	r2, [pc, #248]	; (8002bec <xTaskIncrementTick+0x14c>)
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4a3e      	ldr	r2, [pc, #248]	; (8002bf0 <xTaskIncrementTick+0x150>)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b3d      	ldr	r3, [pc, #244]	; (8002bf4 <xTaskIncrementTick+0x154>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	3301      	adds	r3, #1
 8002b02:	4a3c      	ldr	r2, [pc, #240]	; (8002bf4 <xTaskIncrementTick+0x154>)
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	f000 f99f 	bl	8002e48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b0a:	4b3b      	ldr	r3, [pc, #236]	; (8002bf8 <xTaskIncrementTick+0x158>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d348      	bcc.n	8002ba6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b14:	4b35      	ldr	r3, [pc, #212]	; (8002bec <xTaskIncrementTick+0x14c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d104      	bne.n	8002b28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b1e:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <xTaskIncrementTick+0x158>)
 8002b20:	f04f 32ff 	mov.w	r2, #4294967295
 8002b24:	601a      	str	r2, [r3, #0]
					break;
 8002b26:	e03e      	b.n	8002ba6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b28:	4b30      	ldr	r3, [pc, #192]	; (8002bec <xTaskIncrementTick+0x14c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d203      	bcs.n	8002b48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002b40:	4a2d      	ldr	r2, [pc, #180]	; (8002bf8 <xTaskIncrementTick+0x158>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b46:	e02e      	b.n	8002ba6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fc8a 	bl	8002466 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d004      	beq.n	8002b64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	3318      	adds	r3, #24
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fc81 	bl	8002466 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	2201      	movs	r2, #1
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <xTaskIncrementTick+0x15c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	4a22      	ldr	r2, [pc, #136]	; (8002bfc <xTaskIncrementTick+0x15c>)
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4a1f      	ldr	r2, [pc, #124]	; (8002c00 <xTaskIncrementTick+0x160>)
 8002b84:	441a      	add	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	f7ff fc0d 	bl	80023ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b96:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <xTaskIncrementTick+0x164>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d3b9      	bcc.n	8002b14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ba4:	e7b6      	b.n	8002b14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <xTaskIncrementTick+0x164>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bac:	4914      	ldr	r1, [pc, #80]	; (8002c00 <xTaskIncrementTick+0x160>)
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d901      	bls.n	8002bc2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <xTaskIncrementTick+0x168>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	e004      	b.n	8002bda <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <xTaskIncrementTick+0x16c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <xTaskIncrementTick+0x16c>)
 8002bd8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002bda:	697b      	ldr	r3, [r7, #20]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	200004f0 	.word	0x200004f0
 8002be8:	200004cc 	.word	0x200004cc
 8002bec:	20000480 	.word	0x20000480
 8002bf0:	20000484 	.word	0x20000484
 8002bf4:	200004e0 	.word	0x200004e0
 8002bf8:	200004e8 	.word	0x200004e8
 8002bfc:	200004d0 	.word	0x200004d0
 8002c00:	200003cc 	.word	0x200003cc
 8002c04:	200003c8 	.word	0x200003c8
 8002c08:	200004dc 	.word	0x200004dc
 8002c0c:	200004d8 	.word	0x200004d8

08002c10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c16:	4b29      	ldr	r3, [pc, #164]	; (8002cbc <vTaskSwitchContext+0xac>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c1e:	4b28      	ldr	r3, [pc, #160]	; (8002cc0 <vTaskSwitchContext+0xb0>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002c24:	e044      	b.n	8002cb0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002c26:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <vTaskSwitchContext+0xb0>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c2c:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <vTaskSwitchContext+0xb4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	fab3 f383 	clz	r3, r3
 8002c38:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002c3a:	7afb      	ldrb	r3, [r7, #11]
 8002c3c:	f1c3 031f 	rsb	r3, r3, #31
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	4921      	ldr	r1, [pc, #132]	; (8002cc8 <vTaskSwitchContext+0xb8>)
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10a      	bne.n	8002c6c <vTaskSwitchContext+0x5c>
	__asm volatile
 8002c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	607b      	str	r3, [r7, #4]
}
 8002c68:	bf00      	nop
 8002c6a:	e7fe      	b.n	8002c6a <vTaskSwitchContext+0x5a>
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <vTaskSwitchContext+0xb8>)
 8002c78:	4413      	add	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d104      	bne.n	8002c9c <vTaskSwitchContext+0x8c>
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <vTaskSwitchContext+0xbc>)
 8002ca4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <vTaskSwitchContext+0xbc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	334c      	adds	r3, #76	; 0x4c
 8002cac:	4a08      	ldr	r2, [pc, #32]	; (8002cd0 <vTaskSwitchContext+0xc0>)
 8002cae:	6013      	str	r3, [r2, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	200004f0 	.word	0x200004f0
 8002cc0:	200004dc 	.word	0x200004dc
 8002cc4:	200004d0 	.word	0x200004d0
 8002cc8:	200003cc 	.word	0x200003cc
 8002ccc:	200003c8 	.word	0x200003c8
 8002cd0:	20000014 	.word	0x20000014

08002cd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002cdc:	f000 f852 	bl	8002d84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <prvIdleTask+0x28>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d9f9      	bls.n	8002cdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <prvIdleTask+0x2c>)
 8002cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002cf8:	e7f0      	b.n	8002cdc <prvIdleTask+0x8>
 8002cfa:	bf00      	nop
 8002cfc:	200003cc 	.word	0x200003cc
 8002d00:	e000ed04 	.word	0xe000ed04

08002d04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	e00c      	b.n	8002d2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <prvInitialiseTaskLists+0x60>)
 8002d1c:	4413      	add	r3, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fb17 	bl	8002352 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3301      	adds	r3, #1
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b06      	cmp	r3, #6
 8002d2e:	d9ef      	bls.n	8002d10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002d30:	480d      	ldr	r0, [pc, #52]	; (8002d68 <prvInitialiseTaskLists+0x64>)
 8002d32:	f7ff fb0e 	bl	8002352 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002d36:	480d      	ldr	r0, [pc, #52]	; (8002d6c <prvInitialiseTaskLists+0x68>)
 8002d38:	f7ff fb0b 	bl	8002352 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002d3c:	480c      	ldr	r0, [pc, #48]	; (8002d70 <prvInitialiseTaskLists+0x6c>)
 8002d3e:	f7ff fb08 	bl	8002352 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002d42:	480c      	ldr	r0, [pc, #48]	; (8002d74 <prvInitialiseTaskLists+0x70>)
 8002d44:	f7ff fb05 	bl	8002352 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002d48:	480b      	ldr	r0, [pc, #44]	; (8002d78 <prvInitialiseTaskLists+0x74>)
 8002d4a:	f7ff fb02 	bl	8002352 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <prvInitialiseTaskLists+0x78>)
 8002d50:	4a05      	ldr	r2, [pc, #20]	; (8002d68 <prvInitialiseTaskLists+0x64>)
 8002d52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <prvInitialiseTaskLists+0x7c>)
 8002d56:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <prvInitialiseTaskLists+0x68>)
 8002d58:	601a      	str	r2, [r3, #0]
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200003cc 	.word	0x200003cc
 8002d68:	20000458 	.word	0x20000458
 8002d6c:	2000046c 	.word	0x2000046c
 8002d70:	20000488 	.word	0x20000488
 8002d74:	2000049c 	.word	0x2000049c
 8002d78:	200004b4 	.word	0x200004b4
 8002d7c:	20000480 	.word	0x20000480
 8002d80:	20000484 	.word	0x20000484

08002d84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d8a:	e019      	b.n	8002dc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002d8c:	f000 fa2a 	bl	80031e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d90:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <prvCheckTasksWaitingTermination+0x50>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fb62 	bl	8002466 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <prvCheckTasksWaitingTermination+0x54>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <prvCheckTasksWaitingTermination+0x54>)
 8002daa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <prvCheckTasksWaitingTermination+0x58>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <prvCheckTasksWaitingTermination+0x58>)
 8002db4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002db6:	f000 fa45 	bl	8003244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f810 	bl	8002de0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002dc0:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <prvCheckTasksWaitingTermination+0x58>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1e1      	bne.n	8002d8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	2000049c 	.word	0x2000049c
 8002dd8:	200004c8 	.word	0x200004c8
 8002ddc:	200004b0 	.word	0x200004b0

08002de0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	334c      	adds	r3, #76	; 0x4c
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 ff17 	bl	8003c20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d108      	bne.n	8002e0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fb9d 	bl	8003540 <vPortFree>
				vPortFree( pxTCB );
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fb9a 	bl	8003540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002e0c:	e018      	b.n	8002e40 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d103      	bne.n	8002e20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fb91 	bl	8003540 <vPortFree>
	}
 8002e1e:	e00f      	b.n	8002e40 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d00a      	beq.n	8002e40 <prvDeleteTCB+0x60>
	__asm volatile
 8002e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	60fb      	str	r3, [r7, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	e7fe      	b.n	8002e3e <prvDeleteTCB+0x5e>
	}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <prvResetNextTaskUnblockTime+0x38>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d104      	bne.n	8002e62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <prvResetNextTaskUnblockTime+0x3c>)
 8002e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002e60:	e008      	b.n	8002e74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e62:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <prvResetNextTaskUnblockTime+0x38>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a04      	ldr	r2, [pc, #16]	; (8002e84 <prvResetNextTaskUnblockTime+0x3c>)
 8002e72:	6013      	str	r3, [r2, #0]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	20000480 	.word	0x20000480
 8002e84:	200004e8 	.word	0x200004e8

08002e88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <xTaskGetSchedulerState+0x34>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d102      	bne.n	8002e9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002e96:	2301      	movs	r3, #1
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	e008      	b.n	8002eae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <xTaskGetSchedulerState+0x38>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	607b      	str	r3, [r7, #4]
 8002ea8:	e001      	b.n	8002eae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002eae:	687b      	ldr	r3, [r7, #4]
	}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	200004d4 	.word	0x200004d4
 8002ec0:	200004f0 	.word	0x200004f0

08002ec4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002ece:	4b29      	ldr	r3, [pc, #164]	; (8002f74 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ed4:	4b28      	ldr	r3, [pc, #160]	; (8002f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fac3 	bl	8002466 <uxListRemove>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10b      	bne.n	8002efe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002ee6:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	2201      	movs	r2, #1
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	4b21      	ldr	r3, [pc, #132]	; (8002f7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	4a20      	ldr	r2, [pc, #128]	; (8002f7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002efc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d10a      	bne.n	8002f1c <prvAddCurrentTaskToDelayedList+0x58>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d007      	beq.n	8002f1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3304      	adds	r3, #4
 8002f12:	4619      	mov	r1, r3
 8002f14:	481a      	ldr	r0, [pc, #104]	; (8002f80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002f16:	f7ff fa49 	bl	80023ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002f1a:	e026      	b.n	8002f6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f24:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d209      	bcs.n	8002f48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f34:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4610      	mov	r0, r2
 8002f42:	f7ff fa57 	bl	80023f4 <vListInsert>
}
 8002f46:	e010      	b.n	8002f6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f48:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3304      	adds	r3, #4
 8002f52:	4619      	mov	r1, r3
 8002f54:	4610      	mov	r0, r2
 8002f56:	f7ff fa4d 	bl	80023f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d202      	bcs.n	8002f6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002f64:	4a09      	ldr	r2, [pc, #36]	; (8002f8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	6013      	str	r3, [r2, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200004cc 	.word	0x200004cc
 8002f78:	200003c8 	.word	0x200003c8
 8002f7c:	200004d0 	.word	0x200004d0
 8002f80:	200004b4 	.word	0x200004b4
 8002f84:	20000484 	.word	0x20000484
 8002f88:	20000480 	.word	0x20000480
 8002f8c:	200004e8 	.word	0x200004e8

08002f90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3b04      	subs	r3, #4
 8002fa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3b04      	subs	r3, #4
 8002fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f023 0201 	bic.w	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3b04      	subs	r3, #4
 8002fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002fc0:	4a0c      	ldr	r2, [pc, #48]	; (8002ff4 <pxPortInitialiseStack+0x64>)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3b14      	subs	r3, #20
 8002fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3b04      	subs	r3, #4
 8002fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f06f 0202 	mvn.w	r2, #2
 8002fde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3b20      	subs	r3, #32
 8002fe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	08002ff9 	.word	0x08002ff9

08002ff8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <prvTaskExitError+0x54>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300a:	d00a      	beq.n	8003022 <prvTaskExitError+0x2a>
	__asm volatile
 800300c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	60fb      	str	r3, [r7, #12]
}
 800301e:	bf00      	nop
 8003020:	e7fe      	b.n	8003020 <prvTaskExitError+0x28>
	__asm volatile
 8003022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	60bb      	str	r3, [r7, #8]
}
 8003034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003036:	bf00      	nop
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0fc      	beq.n	8003038 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	20000010 	.word	0x20000010

08003050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <pxCurrentTCBConst2>)
 8003052:	6819      	ldr	r1, [r3, #0]
 8003054:	6808      	ldr	r0, [r1, #0]
 8003056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800305a:	f380 8809 	msr	PSP, r0
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f04f 0000 	mov.w	r0, #0
 8003066:	f380 8811 	msr	BASEPRI, r0
 800306a:	4770      	bx	lr
 800306c:	f3af 8000 	nop.w

08003070 <pxCurrentTCBConst2>:
 8003070:	200003c8 	.word	0x200003c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop

08003078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003078:	4808      	ldr	r0, [pc, #32]	; (800309c <prvPortStartFirstTask+0x24>)
 800307a:	6800      	ldr	r0, [r0, #0]
 800307c:	6800      	ldr	r0, [r0, #0]
 800307e:	f380 8808 	msr	MSP, r0
 8003082:	f04f 0000 	mov.w	r0, #0
 8003086:	f380 8814 	msr	CONTROL, r0
 800308a:	b662      	cpsie	i
 800308c:	b661      	cpsie	f
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	df00      	svc	0
 8003098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800309a:	bf00      	nop
 800309c:	e000ed08 	.word	0xe000ed08

080030a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80030a6:	4b46      	ldr	r3, [pc, #280]	; (80031c0 <xPortStartScheduler+0x120>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a46      	ldr	r2, [pc, #280]	; (80031c4 <xPortStartScheduler+0x124>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d10a      	bne.n	80030c6 <xPortStartScheduler+0x26>
	__asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	613b      	str	r3, [r7, #16]
}
 80030c2:	bf00      	nop
 80030c4:	e7fe      	b.n	80030c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80030c6:	4b3e      	ldr	r3, [pc, #248]	; (80031c0 <xPortStartScheduler+0x120>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a3f      	ldr	r2, [pc, #252]	; (80031c8 <xPortStartScheduler+0x128>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d10a      	bne.n	80030e6 <xPortStartScheduler+0x46>
	__asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	60fb      	str	r3, [r7, #12]
}
 80030e2:	bf00      	nop
 80030e4:	e7fe      	b.n	80030e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030e6:	4b39      	ldr	r3, [pc, #228]	; (80031cc <xPortStartScheduler+0x12c>)
 80030e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	22ff      	movs	r2, #255	; 0xff
 80030f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <xPortStartScheduler+0x130>)
 800310c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800310e:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <xPortStartScheduler+0x134>)
 8003110:	2207      	movs	r2, #7
 8003112:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003114:	e009      	b.n	800312a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003116:	4b2f      	ldr	r3, [pc, #188]	; (80031d4 <xPortStartScheduler+0x134>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3b01      	subs	r3, #1
 800311c:	4a2d      	ldr	r2, [pc, #180]	; (80031d4 <xPortStartScheduler+0x134>)
 800311e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	b2db      	uxtb	r3, r3
 8003128:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003132:	2b80      	cmp	r3, #128	; 0x80
 8003134:	d0ef      	beq.n	8003116 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003136:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <xPortStartScheduler+0x134>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f1c3 0307 	rsb	r3, r3, #7
 800313e:	2b04      	cmp	r3, #4
 8003140:	d00a      	beq.n	8003158 <xPortStartScheduler+0xb8>
	__asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	60bb      	str	r3, [r7, #8]
}
 8003154:	bf00      	nop
 8003156:	e7fe      	b.n	8003156 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003158:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <xPortStartScheduler+0x134>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <xPortStartScheduler+0x134>)
 8003160:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003162:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <xPortStartScheduler+0x134>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800316a:	4a1a      	ldr	r2, [pc, #104]	; (80031d4 <xPortStartScheduler+0x134>)
 800316c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	b2da      	uxtb	r2, r3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003176:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <xPortStartScheduler+0x138>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a17      	ldr	r2, [pc, #92]	; (80031d8 <xPortStartScheduler+0x138>)
 800317c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003182:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <xPortStartScheduler+0x138>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a14      	ldr	r2, [pc, #80]	; (80031d8 <xPortStartScheduler+0x138>)
 8003188:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800318c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800318e:	f000 f8dd 	bl	800334c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003192:	4b12      	ldr	r3, [pc, #72]	; (80031dc <xPortStartScheduler+0x13c>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003198:	f000 f8fc 	bl	8003394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800319c:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <xPortStartScheduler+0x140>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a0f      	ldr	r2, [pc, #60]	; (80031e0 <xPortStartScheduler+0x140>)
 80031a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80031a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80031a8:	f7ff ff66 	bl	8003078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80031ac:	f7ff fd30 	bl	8002c10 <vTaskSwitchContext>
	prvTaskExitError();
 80031b0:	f7ff ff22 	bl	8002ff8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	e000ed00 	.word	0xe000ed00
 80031c4:	410fc271 	.word	0x410fc271
 80031c8:	410fc270 	.word	0x410fc270
 80031cc:	e000e400 	.word	0xe000e400
 80031d0:	200004f4 	.word	0x200004f4
 80031d4:	200004f8 	.word	0x200004f8
 80031d8:	e000ed20 	.word	0xe000ed20
 80031dc:	20000010 	.word	0x20000010
 80031e0:	e000ef34 	.word	0xe000ef34

080031e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
	__asm volatile
 80031ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	607b      	str	r3, [r7, #4]
}
 80031fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80031fe:	4b0f      	ldr	r3, [pc, #60]	; (800323c <vPortEnterCritical+0x58>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3301      	adds	r3, #1
 8003204:	4a0d      	ldr	r2, [pc, #52]	; (800323c <vPortEnterCritical+0x58>)
 8003206:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <vPortEnterCritical+0x58>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d10f      	bne.n	8003230 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <vPortEnterCritical+0x5c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <vPortEnterCritical+0x4c>
	__asm volatile
 800321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	603b      	str	r3, [r7, #0]
}
 800322c:	bf00      	nop
 800322e:	e7fe      	b.n	800322e <vPortEnterCritical+0x4a>
	}
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	20000010 	.word	0x20000010
 8003240:	e000ed04 	.word	0xe000ed04

08003244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800324a:	4b12      	ldr	r3, [pc, #72]	; (8003294 <vPortExitCritical+0x50>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <vPortExitCritical+0x24>
	__asm volatile
 8003252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	607b      	str	r3, [r7, #4]
}
 8003264:	bf00      	nop
 8003266:	e7fe      	b.n	8003266 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003268:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <vPortExitCritical+0x50>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3b01      	subs	r3, #1
 800326e:	4a09      	ldr	r2, [pc, #36]	; (8003294 <vPortExitCritical+0x50>)
 8003270:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003272:	4b08      	ldr	r3, [pc, #32]	; (8003294 <vPortExitCritical+0x50>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <vPortExitCritical+0x42>
 800327a:	2300      	movs	r3, #0
 800327c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003284:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	20000010 	.word	0x20000010
	...

080032a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80032a0:	f3ef 8009 	mrs	r0, PSP
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	4b15      	ldr	r3, [pc, #84]	; (8003300 <pxCurrentTCBConst>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	f01e 0f10 	tst.w	lr, #16
 80032b0:	bf08      	it	eq
 80032b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80032b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ba:	6010      	str	r0, [r2, #0]
 80032bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80032c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80032c4:	f380 8811 	msr	BASEPRI, r0
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f7ff fc9e 	bl	8002c10 <vTaskSwitchContext>
 80032d4:	f04f 0000 	mov.w	r0, #0
 80032d8:	f380 8811 	msr	BASEPRI, r0
 80032dc:	bc09      	pop	{r0, r3}
 80032de:	6819      	ldr	r1, [r3, #0]
 80032e0:	6808      	ldr	r0, [r1, #0]
 80032e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e6:	f01e 0f10 	tst.w	lr, #16
 80032ea:	bf08      	it	eq
 80032ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80032f0:	f380 8809 	msr	PSP, r0
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	f3af 8000 	nop.w

08003300 <pxCurrentTCBConst>:
 8003300:	200003c8 	.word	0x200003c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop

08003308 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
	__asm volatile
 800330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	607b      	str	r3, [r7, #4]
}
 8003320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003322:	f7ff fbbd 	bl	8002aa0 <xTaskIncrementTick>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <xPortSysTickHandler+0x40>)
 800332e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	2300      	movs	r3, #0
 8003336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	f383 8811 	msr	BASEPRI, r3
}
 800333e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	e000ed04 	.word	0xe000ed04

0800334c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <vPortSetupTimerInterrupt+0x34>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <vPortSetupTimerInterrupt+0x38>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <vPortSetupTimerInterrupt+0x3c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a0a      	ldr	r2, [pc, #40]	; (800338c <vPortSetupTimerInterrupt+0x40>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	099b      	lsrs	r3, r3, #6
 8003368:	4a09      	ldr	r2, [pc, #36]	; (8003390 <vPortSetupTimerInterrupt+0x44>)
 800336a:	3b01      	subs	r3, #1
 800336c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800336e:	4b04      	ldr	r3, [pc, #16]	; (8003380 <vPortSetupTimerInterrupt+0x34>)
 8003370:	2207      	movs	r2, #7
 8003372:	601a      	str	r2, [r3, #0]
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	e000e010 	.word	0xe000e010
 8003384:	e000e018 	.word	0xe000e018
 8003388:	20000004 	.word	0x20000004
 800338c:	10624dd3 	.word	0x10624dd3
 8003390:	e000e014 	.word	0xe000e014

08003394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80033a4 <vPortEnableVFP+0x10>
 8003398:	6801      	ldr	r1, [r0, #0]
 800339a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800339e:	6001      	str	r1, [r0, #0]
 80033a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80033a2:	bf00      	nop
 80033a4:	e000ed88 	.word	0xe000ed88

080033a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	; 0x28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80033b4:	f7ff faca 	bl	800294c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80033b8:	4b5b      	ldr	r3, [pc, #364]	; (8003528 <pvPortMalloc+0x180>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80033c0:	f000 f920 	bl	8003604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80033c4:	4b59      	ldr	r3, [pc, #356]	; (800352c <pvPortMalloc+0x184>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f040 8093 	bne.w	80034f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01d      	beq.n	8003414 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80033d8:	2208      	movs	r2, #8
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4413      	add	r3, r2
 80033de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d014      	beq.n	8003414 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f023 0307 	bic.w	r3, r3, #7
 80033f0:	3308      	adds	r3, #8
 80033f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <pvPortMalloc+0x6c>
	__asm volatile
 80033fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003402:	f383 8811 	msr	BASEPRI, r3
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	617b      	str	r3, [r7, #20]
}
 8003410:	bf00      	nop
 8003412:	e7fe      	b.n	8003412 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d06e      	beq.n	80034f8 <pvPortMalloc+0x150>
 800341a:	4b45      	ldr	r3, [pc, #276]	; (8003530 <pvPortMalloc+0x188>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	429a      	cmp	r2, r3
 8003422:	d869      	bhi.n	80034f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003424:	4b43      	ldr	r3, [pc, #268]	; (8003534 <pvPortMalloc+0x18c>)
 8003426:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003428:	4b42      	ldr	r3, [pc, #264]	; (8003534 <pvPortMalloc+0x18c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800342e:	e004      	b.n	800343a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	429a      	cmp	r2, r3
 8003442:	d903      	bls.n	800344c <pvPortMalloc+0xa4>
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f1      	bne.n	8003430 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800344c:	4b36      	ldr	r3, [pc, #216]	; (8003528 <pvPortMalloc+0x180>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003452:	429a      	cmp	r2, r3
 8003454:	d050      	beq.n	80034f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2208      	movs	r2, #8
 800345c:	4413      	add	r3, r2
 800345e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	1ad2      	subs	r2, r2, r3
 8003470:	2308      	movs	r3, #8
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	429a      	cmp	r2, r3
 8003476:	d91f      	bls.n	80034b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <pvPortMalloc+0xf8>
	__asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	613b      	str	r3, [r7, #16]
}
 800349c:	bf00      	nop
 800349e:	e7fe      	b.n	800349e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	1ad2      	subs	r2, r2, r3
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80034b2:	69b8      	ldr	r0, [r7, #24]
 80034b4:	f000 f908 	bl	80036c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <pvPortMalloc+0x188>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	4a1b      	ldr	r2, [pc, #108]	; (8003530 <pvPortMalloc+0x188>)
 80034c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80034c6:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <pvPortMalloc+0x188>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <pvPortMalloc+0x190>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d203      	bcs.n	80034da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80034d2:	4b17      	ldr	r3, [pc, #92]	; (8003530 <pvPortMalloc+0x188>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a18      	ldr	r2, [pc, #96]	; (8003538 <pvPortMalloc+0x190>)
 80034d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	4b13      	ldr	r3, [pc, #76]	; (800352c <pvPortMalloc+0x184>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80034ee:	4b13      	ldr	r3, [pc, #76]	; (800353c <pvPortMalloc+0x194>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3301      	adds	r3, #1
 80034f4:	4a11      	ldr	r2, [pc, #68]	; (800353c <pvPortMalloc+0x194>)
 80034f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80034f8:	f7ff fa36 	bl	8002968 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <pvPortMalloc+0x174>
	__asm volatile
 8003506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	60fb      	str	r3, [r7, #12]
}
 8003518:	bf00      	nop
 800351a:	e7fe      	b.n	800351a <pvPortMalloc+0x172>
	return pvReturn;
 800351c:	69fb      	ldr	r3, [r7, #28]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3728      	adds	r7, #40	; 0x28
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20004104 	.word	0x20004104
 800352c:	20004118 	.word	0x20004118
 8003530:	20004108 	.word	0x20004108
 8003534:	200040fc 	.word	0x200040fc
 8003538:	2000410c 	.word	0x2000410c
 800353c:	20004110 	.word	0x20004110

08003540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d04d      	beq.n	80035ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003552:	2308      	movs	r3, #8
 8003554:	425b      	negs	r3, r3
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4413      	add	r3, r2
 800355a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <vPortFree+0xb8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10a      	bne.n	8003584 <vPortFree+0x44>
	__asm volatile
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	60fb      	str	r3, [r7, #12]
}
 8003580:	bf00      	nop
 8003582:	e7fe      	b.n	8003582 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <vPortFree+0x62>
	__asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	60bb      	str	r3, [r7, #8]
}
 800359e:	bf00      	nop
 80035a0:	e7fe      	b.n	80035a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <vPortFree+0xb8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01e      	beq.n	80035ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d11a      	bne.n	80035ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <vPortFree+0xb8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	43db      	mvns	r3, r3
 80035c2:	401a      	ands	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80035c8:	f7ff f9c0 	bl	800294c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <vPortFree+0xbc>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4413      	add	r3, r2
 80035d6:	4a09      	ldr	r2, [pc, #36]	; (80035fc <vPortFree+0xbc>)
 80035d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80035da:	6938      	ldr	r0, [r7, #16]
 80035dc:	f000 f874 	bl	80036c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80035e0:	4b07      	ldr	r3, [pc, #28]	; (8003600 <vPortFree+0xc0>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3301      	adds	r3, #1
 80035e6:	4a06      	ldr	r2, [pc, #24]	; (8003600 <vPortFree+0xc0>)
 80035e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80035ea:	f7ff f9bd 	bl	8002968 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80035ee:	bf00      	nop
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20004118 	.word	0x20004118
 80035fc:	20004108 	.word	0x20004108
 8003600:	20004114 	.word	0x20004114

08003604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800360a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800360e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003610:	4b27      	ldr	r3, [pc, #156]	; (80036b0 <prvHeapInit+0xac>)
 8003612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00c      	beq.n	8003638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3307      	adds	r3, #7
 8003622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0307 	bic.w	r3, r3, #7
 800362a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	4a1f      	ldr	r2, [pc, #124]	; (80036b0 <prvHeapInit+0xac>)
 8003634:	4413      	add	r3, r2
 8003636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800363c:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <prvHeapInit+0xb0>)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003642:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <prvHeapInit+0xb0>)
 8003644:	2200      	movs	r2, #0
 8003646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	4413      	add	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003650:	2208      	movs	r2, #8
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0307 	bic.w	r3, r3, #7
 800365e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4a15      	ldr	r2, [pc, #84]	; (80036b8 <prvHeapInit+0xb4>)
 8003664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <prvHeapInit+0xb4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <prvHeapInit+0xb4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	1ad2      	subs	r2, r2, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <prvHeapInit+0xb4>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4a0a      	ldr	r2, [pc, #40]	; (80036bc <prvHeapInit+0xb8>)
 8003692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <prvHeapInit+0xbc>)
 800369a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <prvHeapInit+0xc0>)
 800369e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036a2:	601a      	str	r2, [r3, #0]
}
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	200004fc 	.word	0x200004fc
 80036b4:	200040fc 	.word	0x200040fc
 80036b8:	20004104 	.word	0x20004104
 80036bc:	2000410c 	.word	0x2000410c
 80036c0:	20004108 	.word	0x20004108
 80036c4:	20004118 	.word	0x20004118

080036c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80036d0:	4b28      	ldr	r3, [pc, #160]	; (8003774 <prvInsertBlockIntoFreeList+0xac>)
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	e002      	b.n	80036dc <prvInsertBlockIntoFreeList+0x14>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d8f7      	bhi.n	80036d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	4413      	add	r3, r2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d108      	bne.n	800370a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	441a      	add	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	441a      	add	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d118      	bne.n	8003750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <prvInsertBlockIntoFreeList+0xb0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d00d      	beq.n	8003746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	441a      	add	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e008      	b.n	8003758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003746:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <prvInsertBlockIntoFreeList+0xb0>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	e003      	b.n	8003758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	429a      	cmp	r2, r3
 800375e:	d002      	beq.n	8003766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	200040fc 	.word	0x200040fc
 8003778:	20004104 	.word	0x20004104

0800377c <__errno>:
 800377c:	4b01      	ldr	r3, [pc, #4]	; (8003784 <__errno+0x8>)
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000014 	.word	0x20000014

08003788 <std>:
 8003788:	2300      	movs	r3, #0
 800378a:	b510      	push	{r4, lr}
 800378c:	4604      	mov	r4, r0
 800378e:	e9c0 3300 	strd	r3, r3, [r0]
 8003792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003796:	6083      	str	r3, [r0, #8]
 8003798:	8181      	strh	r1, [r0, #12]
 800379a:	6643      	str	r3, [r0, #100]	; 0x64
 800379c:	81c2      	strh	r2, [r0, #14]
 800379e:	6183      	str	r3, [r0, #24]
 80037a0:	4619      	mov	r1, r3
 80037a2:	2208      	movs	r2, #8
 80037a4:	305c      	adds	r0, #92	; 0x5c
 80037a6:	f000 f91a 	bl	80039de <memset>
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <std+0x38>)
 80037ac:	6263      	str	r3, [r4, #36]	; 0x24
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <std+0x3c>)
 80037b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <std+0x40>)
 80037b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037b6:	4b05      	ldr	r3, [pc, #20]	; (80037cc <std+0x44>)
 80037b8:	6224      	str	r4, [r4, #32]
 80037ba:	6323      	str	r3, [r4, #48]	; 0x30
 80037bc:	bd10      	pop	{r4, pc}
 80037be:	bf00      	nop
 80037c0:	08003d39 	.word	0x08003d39
 80037c4:	08003d5b 	.word	0x08003d5b
 80037c8:	08003d93 	.word	0x08003d93
 80037cc:	08003db7 	.word	0x08003db7

080037d0 <_cleanup_r>:
 80037d0:	4901      	ldr	r1, [pc, #4]	; (80037d8 <_cleanup_r+0x8>)
 80037d2:	f000 b8af 	b.w	8003934 <_fwalk_reent>
 80037d6:	bf00      	nop
 80037d8:	08004091 	.word	0x08004091

080037dc <__sfmoreglue>:
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	2268      	movs	r2, #104	; 0x68
 80037e0:	1e4d      	subs	r5, r1, #1
 80037e2:	4355      	muls	r5, r2
 80037e4:	460e      	mov	r6, r1
 80037e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80037ea:	f000 f921 	bl	8003a30 <_malloc_r>
 80037ee:	4604      	mov	r4, r0
 80037f0:	b140      	cbz	r0, 8003804 <__sfmoreglue+0x28>
 80037f2:	2100      	movs	r1, #0
 80037f4:	e9c0 1600 	strd	r1, r6, [r0]
 80037f8:	300c      	adds	r0, #12
 80037fa:	60a0      	str	r0, [r4, #8]
 80037fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003800:	f000 f8ed 	bl	80039de <memset>
 8003804:	4620      	mov	r0, r4
 8003806:	bd70      	pop	{r4, r5, r6, pc}

08003808 <__sfp_lock_acquire>:
 8003808:	4801      	ldr	r0, [pc, #4]	; (8003810 <__sfp_lock_acquire+0x8>)
 800380a:	f000 b8d8 	b.w	80039be <__retarget_lock_acquire_recursive>
 800380e:	bf00      	nop
 8003810:	2000411d 	.word	0x2000411d

08003814 <__sfp_lock_release>:
 8003814:	4801      	ldr	r0, [pc, #4]	; (800381c <__sfp_lock_release+0x8>)
 8003816:	f000 b8d3 	b.w	80039c0 <__retarget_lock_release_recursive>
 800381a:	bf00      	nop
 800381c:	2000411d 	.word	0x2000411d

08003820 <__sinit_lock_acquire>:
 8003820:	4801      	ldr	r0, [pc, #4]	; (8003828 <__sinit_lock_acquire+0x8>)
 8003822:	f000 b8cc 	b.w	80039be <__retarget_lock_acquire_recursive>
 8003826:	bf00      	nop
 8003828:	2000411e 	.word	0x2000411e

0800382c <__sinit_lock_release>:
 800382c:	4801      	ldr	r0, [pc, #4]	; (8003834 <__sinit_lock_release+0x8>)
 800382e:	f000 b8c7 	b.w	80039c0 <__retarget_lock_release_recursive>
 8003832:	bf00      	nop
 8003834:	2000411e 	.word	0x2000411e

08003838 <__sinit>:
 8003838:	b510      	push	{r4, lr}
 800383a:	4604      	mov	r4, r0
 800383c:	f7ff fff0 	bl	8003820 <__sinit_lock_acquire>
 8003840:	69a3      	ldr	r3, [r4, #24]
 8003842:	b11b      	cbz	r3, 800384c <__sinit+0x14>
 8003844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003848:	f7ff bff0 	b.w	800382c <__sinit_lock_release>
 800384c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003850:	6523      	str	r3, [r4, #80]	; 0x50
 8003852:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <__sinit+0x68>)
 8003854:	4a13      	ldr	r2, [pc, #76]	; (80038a4 <__sinit+0x6c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	62a2      	str	r2, [r4, #40]	; 0x28
 800385a:	42a3      	cmp	r3, r4
 800385c:	bf04      	itt	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	61a3      	streq	r3, [r4, #24]
 8003862:	4620      	mov	r0, r4
 8003864:	f000 f820 	bl	80038a8 <__sfp>
 8003868:	6060      	str	r0, [r4, #4]
 800386a:	4620      	mov	r0, r4
 800386c:	f000 f81c 	bl	80038a8 <__sfp>
 8003870:	60a0      	str	r0, [r4, #8]
 8003872:	4620      	mov	r0, r4
 8003874:	f000 f818 	bl	80038a8 <__sfp>
 8003878:	2200      	movs	r2, #0
 800387a:	60e0      	str	r0, [r4, #12]
 800387c:	2104      	movs	r1, #4
 800387e:	6860      	ldr	r0, [r4, #4]
 8003880:	f7ff ff82 	bl	8003788 <std>
 8003884:	68a0      	ldr	r0, [r4, #8]
 8003886:	2201      	movs	r2, #1
 8003888:	2109      	movs	r1, #9
 800388a:	f7ff ff7d 	bl	8003788 <std>
 800388e:	68e0      	ldr	r0, [r4, #12]
 8003890:	2202      	movs	r2, #2
 8003892:	2112      	movs	r1, #18
 8003894:	f7ff ff78 	bl	8003788 <std>
 8003898:	2301      	movs	r3, #1
 800389a:	61a3      	str	r3, [r4, #24]
 800389c:	e7d2      	b.n	8003844 <__sinit+0xc>
 800389e:	bf00      	nop
 80038a0:	08004ad4 	.word	0x08004ad4
 80038a4:	080037d1 	.word	0x080037d1

080038a8 <__sfp>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	4607      	mov	r7, r0
 80038ac:	f7ff ffac 	bl	8003808 <__sfp_lock_acquire>
 80038b0:	4b1e      	ldr	r3, [pc, #120]	; (800392c <__sfp+0x84>)
 80038b2:	681e      	ldr	r6, [r3, #0]
 80038b4:	69b3      	ldr	r3, [r6, #24]
 80038b6:	b913      	cbnz	r3, 80038be <__sfp+0x16>
 80038b8:	4630      	mov	r0, r6
 80038ba:	f7ff ffbd 	bl	8003838 <__sinit>
 80038be:	3648      	adds	r6, #72	; 0x48
 80038c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80038c4:	3b01      	subs	r3, #1
 80038c6:	d503      	bpl.n	80038d0 <__sfp+0x28>
 80038c8:	6833      	ldr	r3, [r6, #0]
 80038ca:	b30b      	cbz	r3, 8003910 <__sfp+0x68>
 80038cc:	6836      	ldr	r6, [r6, #0]
 80038ce:	e7f7      	b.n	80038c0 <__sfp+0x18>
 80038d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80038d4:	b9d5      	cbnz	r5, 800390c <__sfp+0x64>
 80038d6:	4b16      	ldr	r3, [pc, #88]	; (8003930 <__sfp+0x88>)
 80038d8:	60e3      	str	r3, [r4, #12]
 80038da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80038de:	6665      	str	r5, [r4, #100]	; 0x64
 80038e0:	f000 f86c 	bl	80039bc <__retarget_lock_init_recursive>
 80038e4:	f7ff ff96 	bl	8003814 <__sfp_lock_release>
 80038e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80038ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80038f0:	6025      	str	r5, [r4, #0]
 80038f2:	61a5      	str	r5, [r4, #24]
 80038f4:	2208      	movs	r2, #8
 80038f6:	4629      	mov	r1, r5
 80038f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038fc:	f000 f86f 	bl	80039de <memset>
 8003900:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003904:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003908:	4620      	mov	r0, r4
 800390a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800390c:	3468      	adds	r4, #104	; 0x68
 800390e:	e7d9      	b.n	80038c4 <__sfp+0x1c>
 8003910:	2104      	movs	r1, #4
 8003912:	4638      	mov	r0, r7
 8003914:	f7ff ff62 	bl	80037dc <__sfmoreglue>
 8003918:	4604      	mov	r4, r0
 800391a:	6030      	str	r0, [r6, #0]
 800391c:	2800      	cmp	r0, #0
 800391e:	d1d5      	bne.n	80038cc <__sfp+0x24>
 8003920:	f7ff ff78 	bl	8003814 <__sfp_lock_release>
 8003924:	230c      	movs	r3, #12
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	e7ee      	b.n	8003908 <__sfp+0x60>
 800392a:	bf00      	nop
 800392c:	08004ad4 	.word	0x08004ad4
 8003930:	ffff0001 	.word	0xffff0001

08003934 <_fwalk_reent>:
 8003934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003938:	4606      	mov	r6, r0
 800393a:	4688      	mov	r8, r1
 800393c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003940:	2700      	movs	r7, #0
 8003942:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003946:	f1b9 0901 	subs.w	r9, r9, #1
 800394a:	d505      	bpl.n	8003958 <_fwalk_reent+0x24>
 800394c:	6824      	ldr	r4, [r4, #0]
 800394e:	2c00      	cmp	r4, #0
 8003950:	d1f7      	bne.n	8003942 <_fwalk_reent+0xe>
 8003952:	4638      	mov	r0, r7
 8003954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003958:	89ab      	ldrh	r3, [r5, #12]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d907      	bls.n	800396e <_fwalk_reent+0x3a>
 800395e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003962:	3301      	adds	r3, #1
 8003964:	d003      	beq.n	800396e <_fwalk_reent+0x3a>
 8003966:	4629      	mov	r1, r5
 8003968:	4630      	mov	r0, r6
 800396a:	47c0      	blx	r8
 800396c:	4307      	orrs	r7, r0
 800396e:	3568      	adds	r5, #104	; 0x68
 8003970:	e7e9      	b.n	8003946 <_fwalk_reent+0x12>
	...

08003974 <__libc_init_array>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	4d0d      	ldr	r5, [pc, #52]	; (80039ac <__libc_init_array+0x38>)
 8003978:	4c0d      	ldr	r4, [pc, #52]	; (80039b0 <__libc_init_array+0x3c>)
 800397a:	1b64      	subs	r4, r4, r5
 800397c:	10a4      	asrs	r4, r4, #2
 800397e:	2600      	movs	r6, #0
 8003980:	42a6      	cmp	r6, r4
 8003982:	d109      	bne.n	8003998 <__libc_init_array+0x24>
 8003984:	4d0b      	ldr	r5, [pc, #44]	; (80039b4 <__libc_init_array+0x40>)
 8003986:	4c0c      	ldr	r4, [pc, #48]	; (80039b8 <__libc_init_array+0x44>)
 8003988:	f001 f804 	bl	8004994 <_init>
 800398c:	1b64      	subs	r4, r4, r5
 800398e:	10a4      	asrs	r4, r4, #2
 8003990:	2600      	movs	r6, #0
 8003992:	42a6      	cmp	r6, r4
 8003994:	d105      	bne.n	80039a2 <__libc_init_array+0x2e>
 8003996:	bd70      	pop	{r4, r5, r6, pc}
 8003998:	f855 3b04 	ldr.w	r3, [r5], #4
 800399c:	4798      	blx	r3
 800399e:	3601      	adds	r6, #1
 80039a0:	e7ee      	b.n	8003980 <__libc_init_array+0xc>
 80039a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a6:	4798      	blx	r3
 80039a8:	3601      	adds	r6, #1
 80039aa:	e7f2      	b.n	8003992 <__libc_init_array+0x1e>
 80039ac:	08004b14 	.word	0x08004b14
 80039b0:	08004b14 	.word	0x08004b14
 80039b4:	08004b14 	.word	0x08004b14
 80039b8:	08004b18 	.word	0x08004b18

080039bc <__retarget_lock_init_recursive>:
 80039bc:	4770      	bx	lr

080039be <__retarget_lock_acquire_recursive>:
 80039be:	4770      	bx	lr

080039c0 <__retarget_lock_release_recursive>:
 80039c0:	4770      	bx	lr

080039c2 <memcpy>:
 80039c2:	440a      	add	r2, r1
 80039c4:	4291      	cmp	r1, r2
 80039c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80039ca:	d100      	bne.n	80039ce <memcpy+0xc>
 80039cc:	4770      	bx	lr
 80039ce:	b510      	push	{r4, lr}
 80039d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039d8:	4291      	cmp	r1, r2
 80039da:	d1f9      	bne.n	80039d0 <memcpy+0xe>
 80039dc:	bd10      	pop	{r4, pc}

080039de <memset>:
 80039de:	4402      	add	r2, r0
 80039e0:	4603      	mov	r3, r0
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d100      	bne.n	80039e8 <memset+0xa>
 80039e6:	4770      	bx	lr
 80039e8:	f803 1b01 	strb.w	r1, [r3], #1
 80039ec:	e7f9      	b.n	80039e2 <memset+0x4>
	...

080039f0 <sbrk_aligned>:
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	4e0e      	ldr	r6, [pc, #56]	; (8003a2c <sbrk_aligned+0x3c>)
 80039f4:	460c      	mov	r4, r1
 80039f6:	6831      	ldr	r1, [r6, #0]
 80039f8:	4605      	mov	r5, r0
 80039fa:	b911      	cbnz	r1, 8003a02 <sbrk_aligned+0x12>
 80039fc:	f000 f96c 	bl	8003cd8 <_sbrk_r>
 8003a00:	6030      	str	r0, [r6, #0]
 8003a02:	4621      	mov	r1, r4
 8003a04:	4628      	mov	r0, r5
 8003a06:	f000 f967 	bl	8003cd8 <_sbrk_r>
 8003a0a:	1c43      	adds	r3, r0, #1
 8003a0c:	d00a      	beq.n	8003a24 <sbrk_aligned+0x34>
 8003a0e:	1cc4      	adds	r4, r0, #3
 8003a10:	f024 0403 	bic.w	r4, r4, #3
 8003a14:	42a0      	cmp	r0, r4
 8003a16:	d007      	beq.n	8003a28 <sbrk_aligned+0x38>
 8003a18:	1a21      	subs	r1, r4, r0
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	f000 f95c 	bl	8003cd8 <_sbrk_r>
 8003a20:	3001      	adds	r0, #1
 8003a22:	d101      	bne.n	8003a28 <sbrk_aligned+0x38>
 8003a24:	f04f 34ff 	mov.w	r4, #4294967295
 8003a28:	4620      	mov	r0, r4
 8003a2a:	bd70      	pop	{r4, r5, r6, pc}
 8003a2c:	20004124 	.word	0x20004124

08003a30 <_malloc_r>:
 8003a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a34:	1ccd      	adds	r5, r1, #3
 8003a36:	f025 0503 	bic.w	r5, r5, #3
 8003a3a:	3508      	adds	r5, #8
 8003a3c:	2d0c      	cmp	r5, #12
 8003a3e:	bf38      	it	cc
 8003a40:	250c      	movcc	r5, #12
 8003a42:	2d00      	cmp	r5, #0
 8003a44:	4607      	mov	r7, r0
 8003a46:	db01      	blt.n	8003a4c <_malloc_r+0x1c>
 8003a48:	42a9      	cmp	r1, r5
 8003a4a:	d905      	bls.n	8003a58 <_malloc_r+0x28>
 8003a4c:	230c      	movs	r3, #12
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	2600      	movs	r6, #0
 8003a52:	4630      	mov	r0, r6
 8003a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a58:	4e2e      	ldr	r6, [pc, #184]	; (8003b14 <_malloc_r+0xe4>)
 8003a5a:	f000 fbcd 	bl	80041f8 <__malloc_lock>
 8003a5e:	6833      	ldr	r3, [r6, #0]
 8003a60:	461c      	mov	r4, r3
 8003a62:	bb34      	cbnz	r4, 8003ab2 <_malloc_r+0x82>
 8003a64:	4629      	mov	r1, r5
 8003a66:	4638      	mov	r0, r7
 8003a68:	f7ff ffc2 	bl	80039f0 <sbrk_aligned>
 8003a6c:	1c43      	adds	r3, r0, #1
 8003a6e:	4604      	mov	r4, r0
 8003a70:	d14d      	bne.n	8003b0e <_malloc_r+0xde>
 8003a72:	6834      	ldr	r4, [r6, #0]
 8003a74:	4626      	mov	r6, r4
 8003a76:	2e00      	cmp	r6, #0
 8003a78:	d140      	bne.n	8003afc <_malloc_r+0xcc>
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	4631      	mov	r1, r6
 8003a7e:	4638      	mov	r0, r7
 8003a80:	eb04 0803 	add.w	r8, r4, r3
 8003a84:	f000 f928 	bl	8003cd8 <_sbrk_r>
 8003a88:	4580      	cmp	r8, r0
 8003a8a:	d13a      	bne.n	8003b02 <_malloc_r+0xd2>
 8003a8c:	6821      	ldr	r1, [r4, #0]
 8003a8e:	3503      	adds	r5, #3
 8003a90:	1a6d      	subs	r5, r5, r1
 8003a92:	f025 0503 	bic.w	r5, r5, #3
 8003a96:	3508      	adds	r5, #8
 8003a98:	2d0c      	cmp	r5, #12
 8003a9a:	bf38      	it	cc
 8003a9c:	250c      	movcc	r5, #12
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	4638      	mov	r0, r7
 8003aa2:	f7ff ffa5 	bl	80039f0 <sbrk_aligned>
 8003aa6:	3001      	adds	r0, #1
 8003aa8:	d02b      	beq.n	8003b02 <_malloc_r+0xd2>
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	442b      	add	r3, r5
 8003aae:	6023      	str	r3, [r4, #0]
 8003ab0:	e00e      	b.n	8003ad0 <_malloc_r+0xa0>
 8003ab2:	6822      	ldr	r2, [r4, #0]
 8003ab4:	1b52      	subs	r2, r2, r5
 8003ab6:	d41e      	bmi.n	8003af6 <_malloc_r+0xc6>
 8003ab8:	2a0b      	cmp	r2, #11
 8003aba:	d916      	bls.n	8003aea <_malloc_r+0xba>
 8003abc:	1961      	adds	r1, r4, r5
 8003abe:	42a3      	cmp	r3, r4
 8003ac0:	6025      	str	r5, [r4, #0]
 8003ac2:	bf18      	it	ne
 8003ac4:	6059      	strne	r1, [r3, #4]
 8003ac6:	6863      	ldr	r3, [r4, #4]
 8003ac8:	bf08      	it	eq
 8003aca:	6031      	streq	r1, [r6, #0]
 8003acc:	5162      	str	r2, [r4, r5]
 8003ace:	604b      	str	r3, [r1, #4]
 8003ad0:	4638      	mov	r0, r7
 8003ad2:	f104 060b 	add.w	r6, r4, #11
 8003ad6:	f000 fb95 	bl	8004204 <__malloc_unlock>
 8003ada:	f026 0607 	bic.w	r6, r6, #7
 8003ade:	1d23      	adds	r3, r4, #4
 8003ae0:	1af2      	subs	r2, r6, r3
 8003ae2:	d0b6      	beq.n	8003a52 <_malloc_r+0x22>
 8003ae4:	1b9b      	subs	r3, r3, r6
 8003ae6:	50a3      	str	r3, [r4, r2]
 8003ae8:	e7b3      	b.n	8003a52 <_malloc_r+0x22>
 8003aea:	6862      	ldr	r2, [r4, #4]
 8003aec:	42a3      	cmp	r3, r4
 8003aee:	bf0c      	ite	eq
 8003af0:	6032      	streq	r2, [r6, #0]
 8003af2:	605a      	strne	r2, [r3, #4]
 8003af4:	e7ec      	b.n	8003ad0 <_malloc_r+0xa0>
 8003af6:	4623      	mov	r3, r4
 8003af8:	6864      	ldr	r4, [r4, #4]
 8003afa:	e7b2      	b.n	8003a62 <_malloc_r+0x32>
 8003afc:	4634      	mov	r4, r6
 8003afe:	6876      	ldr	r6, [r6, #4]
 8003b00:	e7b9      	b.n	8003a76 <_malloc_r+0x46>
 8003b02:	230c      	movs	r3, #12
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	4638      	mov	r0, r7
 8003b08:	f000 fb7c 	bl	8004204 <__malloc_unlock>
 8003b0c:	e7a1      	b.n	8003a52 <_malloc_r+0x22>
 8003b0e:	6025      	str	r5, [r4, #0]
 8003b10:	e7de      	b.n	8003ad0 <_malloc_r+0xa0>
 8003b12:	bf00      	nop
 8003b14:	20004120 	.word	0x20004120

08003b18 <_puts_r>:
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	460e      	mov	r6, r1
 8003b1c:	4605      	mov	r5, r0
 8003b1e:	b118      	cbz	r0, 8003b28 <_puts_r+0x10>
 8003b20:	6983      	ldr	r3, [r0, #24]
 8003b22:	b90b      	cbnz	r3, 8003b28 <_puts_r+0x10>
 8003b24:	f7ff fe88 	bl	8003838 <__sinit>
 8003b28:	69ab      	ldr	r3, [r5, #24]
 8003b2a:	68ac      	ldr	r4, [r5, #8]
 8003b2c:	b913      	cbnz	r3, 8003b34 <_puts_r+0x1c>
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f7ff fe82 	bl	8003838 <__sinit>
 8003b34:	4b2c      	ldr	r3, [pc, #176]	; (8003be8 <_puts_r+0xd0>)
 8003b36:	429c      	cmp	r4, r3
 8003b38:	d120      	bne.n	8003b7c <_puts_r+0x64>
 8003b3a:	686c      	ldr	r4, [r5, #4]
 8003b3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b3e:	07db      	lsls	r3, r3, #31
 8003b40:	d405      	bmi.n	8003b4e <_puts_r+0x36>
 8003b42:	89a3      	ldrh	r3, [r4, #12]
 8003b44:	0598      	lsls	r0, r3, #22
 8003b46:	d402      	bmi.n	8003b4e <_puts_r+0x36>
 8003b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b4a:	f7ff ff38 	bl	80039be <__retarget_lock_acquire_recursive>
 8003b4e:	89a3      	ldrh	r3, [r4, #12]
 8003b50:	0719      	lsls	r1, r3, #28
 8003b52:	d51d      	bpl.n	8003b90 <_puts_r+0x78>
 8003b54:	6923      	ldr	r3, [r4, #16]
 8003b56:	b1db      	cbz	r3, 8003b90 <_puts_r+0x78>
 8003b58:	3e01      	subs	r6, #1
 8003b5a:	68a3      	ldr	r3, [r4, #8]
 8003b5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b60:	3b01      	subs	r3, #1
 8003b62:	60a3      	str	r3, [r4, #8]
 8003b64:	bb39      	cbnz	r1, 8003bb6 <_puts_r+0x9e>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	da38      	bge.n	8003bdc <_puts_r+0xc4>
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	210a      	movs	r1, #10
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f000 f926 	bl	8003dc0 <__swbuf_r>
 8003b74:	3001      	adds	r0, #1
 8003b76:	d011      	beq.n	8003b9c <_puts_r+0x84>
 8003b78:	250a      	movs	r5, #10
 8003b7a:	e011      	b.n	8003ba0 <_puts_r+0x88>
 8003b7c:	4b1b      	ldr	r3, [pc, #108]	; (8003bec <_puts_r+0xd4>)
 8003b7e:	429c      	cmp	r4, r3
 8003b80:	d101      	bne.n	8003b86 <_puts_r+0x6e>
 8003b82:	68ac      	ldr	r4, [r5, #8]
 8003b84:	e7da      	b.n	8003b3c <_puts_r+0x24>
 8003b86:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <_puts_r+0xd8>)
 8003b88:	429c      	cmp	r4, r3
 8003b8a:	bf08      	it	eq
 8003b8c:	68ec      	ldreq	r4, [r5, #12]
 8003b8e:	e7d5      	b.n	8003b3c <_puts_r+0x24>
 8003b90:	4621      	mov	r1, r4
 8003b92:	4628      	mov	r0, r5
 8003b94:	f000 f978 	bl	8003e88 <__swsetup_r>
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	d0dd      	beq.n	8003b58 <_puts_r+0x40>
 8003b9c:	f04f 35ff 	mov.w	r5, #4294967295
 8003ba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ba2:	07da      	lsls	r2, r3, #31
 8003ba4:	d405      	bmi.n	8003bb2 <_puts_r+0x9a>
 8003ba6:	89a3      	ldrh	r3, [r4, #12]
 8003ba8:	059b      	lsls	r3, r3, #22
 8003baa:	d402      	bmi.n	8003bb2 <_puts_r+0x9a>
 8003bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bae:	f7ff ff07 	bl	80039c0 <__retarget_lock_release_recursive>
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	bd70      	pop	{r4, r5, r6, pc}
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da04      	bge.n	8003bc4 <_puts_r+0xac>
 8003bba:	69a2      	ldr	r2, [r4, #24]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	dc06      	bgt.n	8003bce <_puts_r+0xb6>
 8003bc0:	290a      	cmp	r1, #10
 8003bc2:	d004      	beq.n	8003bce <_puts_r+0xb6>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	6022      	str	r2, [r4, #0]
 8003bca:	7019      	strb	r1, [r3, #0]
 8003bcc:	e7c5      	b.n	8003b5a <_puts_r+0x42>
 8003bce:	4622      	mov	r2, r4
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	f000 f8f5 	bl	8003dc0 <__swbuf_r>
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	d1bf      	bne.n	8003b5a <_puts_r+0x42>
 8003bda:	e7df      	b.n	8003b9c <_puts_r+0x84>
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	250a      	movs	r5, #10
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	6022      	str	r2, [r4, #0]
 8003be4:	701d      	strb	r5, [r3, #0]
 8003be6:	e7db      	b.n	8003ba0 <_puts_r+0x88>
 8003be8:	08004a94 	.word	0x08004a94
 8003bec:	08004ab4 	.word	0x08004ab4
 8003bf0:	08004a74 	.word	0x08004a74

08003bf4 <puts>:
 8003bf4:	4b02      	ldr	r3, [pc, #8]	; (8003c00 <puts+0xc>)
 8003bf6:	4601      	mov	r1, r0
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	f7ff bf8d 	b.w	8003b18 <_puts_r>
 8003bfe:	bf00      	nop
 8003c00:	20000014 	.word	0x20000014

08003c04 <cleanup_glue>:
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	460c      	mov	r4, r1
 8003c08:	6809      	ldr	r1, [r1, #0]
 8003c0a:	4605      	mov	r5, r0
 8003c0c:	b109      	cbz	r1, 8003c12 <cleanup_glue+0xe>
 8003c0e:	f7ff fff9 	bl	8003c04 <cleanup_glue>
 8003c12:	4621      	mov	r1, r4
 8003c14:	4628      	mov	r0, r5
 8003c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c1a:	f000 baf9 	b.w	8004210 <_free_r>
	...

08003c20 <_reclaim_reent>:
 8003c20:	4b2c      	ldr	r3, [pc, #176]	; (8003cd4 <_reclaim_reent+0xb4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4283      	cmp	r3, r0
 8003c26:	b570      	push	{r4, r5, r6, lr}
 8003c28:	4604      	mov	r4, r0
 8003c2a:	d051      	beq.n	8003cd0 <_reclaim_reent+0xb0>
 8003c2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c2e:	b143      	cbz	r3, 8003c42 <_reclaim_reent+0x22>
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d14a      	bne.n	8003ccc <_reclaim_reent+0xac>
 8003c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c38:	6819      	ldr	r1, [r3, #0]
 8003c3a:	b111      	cbz	r1, 8003c42 <_reclaim_reent+0x22>
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f000 fae7 	bl	8004210 <_free_r>
 8003c42:	6961      	ldr	r1, [r4, #20]
 8003c44:	b111      	cbz	r1, 8003c4c <_reclaim_reent+0x2c>
 8003c46:	4620      	mov	r0, r4
 8003c48:	f000 fae2 	bl	8004210 <_free_r>
 8003c4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c4e:	b111      	cbz	r1, 8003c56 <_reclaim_reent+0x36>
 8003c50:	4620      	mov	r0, r4
 8003c52:	f000 fadd 	bl	8004210 <_free_r>
 8003c56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003c58:	b111      	cbz	r1, 8003c60 <_reclaim_reent+0x40>
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f000 fad8 	bl	8004210 <_free_r>
 8003c60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003c62:	b111      	cbz	r1, 8003c6a <_reclaim_reent+0x4a>
 8003c64:	4620      	mov	r0, r4
 8003c66:	f000 fad3 	bl	8004210 <_free_r>
 8003c6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003c6c:	b111      	cbz	r1, 8003c74 <_reclaim_reent+0x54>
 8003c6e:	4620      	mov	r0, r4
 8003c70:	f000 face 	bl	8004210 <_free_r>
 8003c74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003c76:	b111      	cbz	r1, 8003c7e <_reclaim_reent+0x5e>
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f000 fac9 	bl	8004210 <_free_r>
 8003c7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003c80:	b111      	cbz	r1, 8003c88 <_reclaim_reent+0x68>
 8003c82:	4620      	mov	r0, r4
 8003c84:	f000 fac4 	bl	8004210 <_free_r>
 8003c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c8a:	b111      	cbz	r1, 8003c92 <_reclaim_reent+0x72>
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f000 fabf 	bl	8004210 <_free_r>
 8003c92:	69a3      	ldr	r3, [r4, #24]
 8003c94:	b1e3      	cbz	r3, 8003cd0 <_reclaim_reent+0xb0>
 8003c96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c98:	4620      	mov	r0, r4
 8003c9a:	4798      	blx	r3
 8003c9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003c9e:	b1b9      	cbz	r1, 8003cd0 <_reclaim_reent+0xb0>
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003ca6:	f7ff bfad 	b.w	8003c04 <cleanup_glue>
 8003caa:	5949      	ldr	r1, [r1, r5]
 8003cac:	b941      	cbnz	r1, 8003cc0 <_reclaim_reent+0xa0>
 8003cae:	3504      	adds	r5, #4
 8003cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cb2:	2d80      	cmp	r5, #128	; 0x80
 8003cb4:	68d9      	ldr	r1, [r3, #12]
 8003cb6:	d1f8      	bne.n	8003caa <_reclaim_reent+0x8a>
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f000 faa9 	bl	8004210 <_free_r>
 8003cbe:	e7ba      	b.n	8003c36 <_reclaim_reent+0x16>
 8003cc0:	680e      	ldr	r6, [r1, #0]
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f000 faa4 	bl	8004210 <_free_r>
 8003cc8:	4631      	mov	r1, r6
 8003cca:	e7ef      	b.n	8003cac <_reclaim_reent+0x8c>
 8003ccc:	2500      	movs	r5, #0
 8003cce:	e7ef      	b.n	8003cb0 <_reclaim_reent+0x90>
 8003cd0:	bd70      	pop	{r4, r5, r6, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000014 	.word	0x20000014

08003cd8 <_sbrk_r>:
 8003cd8:	b538      	push	{r3, r4, r5, lr}
 8003cda:	4d06      	ldr	r5, [pc, #24]	; (8003cf4 <_sbrk_r+0x1c>)
 8003cdc:	2300      	movs	r3, #0
 8003cde:	4604      	mov	r4, r0
 8003ce0:	4608      	mov	r0, r1
 8003ce2:	602b      	str	r3, [r5, #0]
 8003ce4:	f7fc ff1c 	bl	8000b20 <_sbrk>
 8003ce8:	1c43      	adds	r3, r0, #1
 8003cea:	d102      	bne.n	8003cf2 <_sbrk_r+0x1a>
 8003cec:	682b      	ldr	r3, [r5, #0]
 8003cee:	b103      	cbz	r3, 8003cf2 <_sbrk_r+0x1a>
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	bd38      	pop	{r3, r4, r5, pc}
 8003cf4:	20004128 	.word	0x20004128

08003cf8 <siprintf>:
 8003cf8:	b40e      	push	{r1, r2, r3}
 8003cfa:	b500      	push	{lr}
 8003cfc:	b09c      	sub	sp, #112	; 0x70
 8003cfe:	ab1d      	add	r3, sp, #116	; 0x74
 8003d00:	9002      	str	r0, [sp, #8]
 8003d02:	9006      	str	r0, [sp, #24]
 8003d04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d08:	4809      	ldr	r0, [pc, #36]	; (8003d30 <siprintf+0x38>)
 8003d0a:	9107      	str	r1, [sp, #28]
 8003d0c:	9104      	str	r1, [sp, #16]
 8003d0e:	4909      	ldr	r1, [pc, #36]	; (8003d34 <siprintf+0x3c>)
 8003d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d14:	9105      	str	r1, [sp, #20]
 8003d16:	6800      	ldr	r0, [r0, #0]
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	a902      	add	r1, sp, #8
 8003d1c:	f000 fb20 	bl	8004360 <_svfiprintf_r>
 8003d20:	9b02      	ldr	r3, [sp, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	b01c      	add	sp, #112	; 0x70
 8003d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d2c:	b003      	add	sp, #12
 8003d2e:	4770      	bx	lr
 8003d30:	20000014 	.word	0x20000014
 8003d34:	ffff0208 	.word	0xffff0208

08003d38 <__sread>:
 8003d38:	b510      	push	{r4, lr}
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d40:	f000 fda2 	bl	8004888 <_read_r>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	bfab      	itete	ge
 8003d48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d4a:	89a3      	ldrhlt	r3, [r4, #12]
 8003d4c:	181b      	addge	r3, r3, r0
 8003d4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d52:	bfac      	ite	ge
 8003d54:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d56:	81a3      	strhlt	r3, [r4, #12]
 8003d58:	bd10      	pop	{r4, pc}

08003d5a <__swrite>:
 8003d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d5e:	461f      	mov	r7, r3
 8003d60:	898b      	ldrh	r3, [r1, #12]
 8003d62:	05db      	lsls	r3, r3, #23
 8003d64:	4605      	mov	r5, r0
 8003d66:	460c      	mov	r4, r1
 8003d68:	4616      	mov	r6, r2
 8003d6a:	d505      	bpl.n	8003d78 <__swrite+0x1e>
 8003d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d70:	2302      	movs	r3, #2
 8003d72:	2200      	movs	r2, #0
 8003d74:	f000 f9c8 	bl	8004108 <_lseek_r>
 8003d78:	89a3      	ldrh	r3, [r4, #12]
 8003d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d82:	81a3      	strh	r3, [r4, #12]
 8003d84:	4632      	mov	r2, r6
 8003d86:	463b      	mov	r3, r7
 8003d88:	4628      	mov	r0, r5
 8003d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d8e:	f000 b869 	b.w	8003e64 <_write_r>

08003d92 <__sseek>:
 8003d92:	b510      	push	{r4, lr}
 8003d94:	460c      	mov	r4, r1
 8003d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d9a:	f000 f9b5 	bl	8004108 <_lseek_r>
 8003d9e:	1c43      	adds	r3, r0, #1
 8003da0:	89a3      	ldrh	r3, [r4, #12]
 8003da2:	bf15      	itete	ne
 8003da4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003da6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003daa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003dae:	81a3      	strheq	r3, [r4, #12]
 8003db0:	bf18      	it	ne
 8003db2:	81a3      	strhne	r3, [r4, #12]
 8003db4:	bd10      	pop	{r4, pc}

08003db6 <__sclose>:
 8003db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dba:	f000 b8d3 	b.w	8003f64 <_close_r>
	...

08003dc0 <__swbuf_r>:
 8003dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc2:	460e      	mov	r6, r1
 8003dc4:	4614      	mov	r4, r2
 8003dc6:	4605      	mov	r5, r0
 8003dc8:	b118      	cbz	r0, 8003dd2 <__swbuf_r+0x12>
 8003dca:	6983      	ldr	r3, [r0, #24]
 8003dcc:	b90b      	cbnz	r3, 8003dd2 <__swbuf_r+0x12>
 8003dce:	f7ff fd33 	bl	8003838 <__sinit>
 8003dd2:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <__swbuf_r+0x98>)
 8003dd4:	429c      	cmp	r4, r3
 8003dd6:	d12b      	bne.n	8003e30 <__swbuf_r+0x70>
 8003dd8:	686c      	ldr	r4, [r5, #4]
 8003dda:	69a3      	ldr	r3, [r4, #24]
 8003ddc:	60a3      	str	r3, [r4, #8]
 8003dde:	89a3      	ldrh	r3, [r4, #12]
 8003de0:	071a      	lsls	r2, r3, #28
 8003de2:	d52f      	bpl.n	8003e44 <__swbuf_r+0x84>
 8003de4:	6923      	ldr	r3, [r4, #16]
 8003de6:	b36b      	cbz	r3, 8003e44 <__swbuf_r+0x84>
 8003de8:	6923      	ldr	r3, [r4, #16]
 8003dea:	6820      	ldr	r0, [r4, #0]
 8003dec:	1ac0      	subs	r0, r0, r3
 8003dee:	6963      	ldr	r3, [r4, #20]
 8003df0:	b2f6      	uxtb	r6, r6
 8003df2:	4283      	cmp	r3, r0
 8003df4:	4637      	mov	r7, r6
 8003df6:	dc04      	bgt.n	8003e02 <__swbuf_r+0x42>
 8003df8:	4621      	mov	r1, r4
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	f000 f948 	bl	8004090 <_fflush_r>
 8003e00:	bb30      	cbnz	r0, 8003e50 <__swbuf_r+0x90>
 8003e02:	68a3      	ldr	r3, [r4, #8]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	60a3      	str	r3, [r4, #8]
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	6022      	str	r2, [r4, #0]
 8003e0e:	701e      	strb	r6, [r3, #0]
 8003e10:	6963      	ldr	r3, [r4, #20]
 8003e12:	3001      	adds	r0, #1
 8003e14:	4283      	cmp	r3, r0
 8003e16:	d004      	beq.n	8003e22 <__swbuf_r+0x62>
 8003e18:	89a3      	ldrh	r3, [r4, #12]
 8003e1a:	07db      	lsls	r3, r3, #31
 8003e1c:	d506      	bpl.n	8003e2c <__swbuf_r+0x6c>
 8003e1e:	2e0a      	cmp	r6, #10
 8003e20:	d104      	bne.n	8003e2c <__swbuf_r+0x6c>
 8003e22:	4621      	mov	r1, r4
 8003e24:	4628      	mov	r0, r5
 8003e26:	f000 f933 	bl	8004090 <_fflush_r>
 8003e2a:	b988      	cbnz	r0, 8003e50 <__swbuf_r+0x90>
 8003e2c:	4638      	mov	r0, r7
 8003e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <__swbuf_r+0x9c>)
 8003e32:	429c      	cmp	r4, r3
 8003e34:	d101      	bne.n	8003e3a <__swbuf_r+0x7a>
 8003e36:	68ac      	ldr	r4, [r5, #8]
 8003e38:	e7cf      	b.n	8003dda <__swbuf_r+0x1a>
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <__swbuf_r+0xa0>)
 8003e3c:	429c      	cmp	r4, r3
 8003e3e:	bf08      	it	eq
 8003e40:	68ec      	ldreq	r4, [r5, #12]
 8003e42:	e7ca      	b.n	8003dda <__swbuf_r+0x1a>
 8003e44:	4621      	mov	r1, r4
 8003e46:	4628      	mov	r0, r5
 8003e48:	f000 f81e 	bl	8003e88 <__swsetup_r>
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d0cb      	beq.n	8003de8 <__swbuf_r+0x28>
 8003e50:	f04f 37ff 	mov.w	r7, #4294967295
 8003e54:	e7ea      	b.n	8003e2c <__swbuf_r+0x6c>
 8003e56:	bf00      	nop
 8003e58:	08004a94 	.word	0x08004a94
 8003e5c:	08004ab4 	.word	0x08004ab4
 8003e60:	08004a74 	.word	0x08004a74

08003e64 <_write_r>:
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	4d07      	ldr	r5, [pc, #28]	; (8003e84 <_write_r+0x20>)
 8003e68:	4604      	mov	r4, r0
 8003e6a:	4608      	mov	r0, r1
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	2200      	movs	r2, #0
 8003e70:	602a      	str	r2, [r5, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f7fc fe04 	bl	8000a80 <_write>
 8003e78:	1c43      	adds	r3, r0, #1
 8003e7a:	d102      	bne.n	8003e82 <_write_r+0x1e>
 8003e7c:	682b      	ldr	r3, [r5, #0]
 8003e7e:	b103      	cbz	r3, 8003e82 <_write_r+0x1e>
 8003e80:	6023      	str	r3, [r4, #0]
 8003e82:	bd38      	pop	{r3, r4, r5, pc}
 8003e84:	20004128 	.word	0x20004128

08003e88 <__swsetup_r>:
 8003e88:	4b32      	ldr	r3, [pc, #200]	; (8003f54 <__swsetup_r+0xcc>)
 8003e8a:	b570      	push	{r4, r5, r6, lr}
 8003e8c:	681d      	ldr	r5, [r3, #0]
 8003e8e:	4606      	mov	r6, r0
 8003e90:	460c      	mov	r4, r1
 8003e92:	b125      	cbz	r5, 8003e9e <__swsetup_r+0x16>
 8003e94:	69ab      	ldr	r3, [r5, #24]
 8003e96:	b913      	cbnz	r3, 8003e9e <__swsetup_r+0x16>
 8003e98:	4628      	mov	r0, r5
 8003e9a:	f7ff fccd 	bl	8003838 <__sinit>
 8003e9e:	4b2e      	ldr	r3, [pc, #184]	; (8003f58 <__swsetup_r+0xd0>)
 8003ea0:	429c      	cmp	r4, r3
 8003ea2:	d10f      	bne.n	8003ec4 <__swsetup_r+0x3c>
 8003ea4:	686c      	ldr	r4, [r5, #4]
 8003ea6:	89a3      	ldrh	r3, [r4, #12]
 8003ea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003eac:	0719      	lsls	r1, r3, #28
 8003eae:	d42c      	bmi.n	8003f0a <__swsetup_r+0x82>
 8003eb0:	06dd      	lsls	r5, r3, #27
 8003eb2:	d411      	bmi.n	8003ed8 <__swsetup_r+0x50>
 8003eb4:	2309      	movs	r3, #9
 8003eb6:	6033      	str	r3, [r6, #0]
 8003eb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ebc:	81a3      	strh	r3, [r4, #12]
 8003ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec2:	e03e      	b.n	8003f42 <__swsetup_r+0xba>
 8003ec4:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <__swsetup_r+0xd4>)
 8003ec6:	429c      	cmp	r4, r3
 8003ec8:	d101      	bne.n	8003ece <__swsetup_r+0x46>
 8003eca:	68ac      	ldr	r4, [r5, #8]
 8003ecc:	e7eb      	b.n	8003ea6 <__swsetup_r+0x1e>
 8003ece:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <__swsetup_r+0xd8>)
 8003ed0:	429c      	cmp	r4, r3
 8003ed2:	bf08      	it	eq
 8003ed4:	68ec      	ldreq	r4, [r5, #12]
 8003ed6:	e7e6      	b.n	8003ea6 <__swsetup_r+0x1e>
 8003ed8:	0758      	lsls	r0, r3, #29
 8003eda:	d512      	bpl.n	8003f02 <__swsetup_r+0x7a>
 8003edc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ede:	b141      	cbz	r1, 8003ef2 <__swsetup_r+0x6a>
 8003ee0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ee4:	4299      	cmp	r1, r3
 8003ee6:	d002      	beq.n	8003eee <__swsetup_r+0x66>
 8003ee8:	4630      	mov	r0, r6
 8003eea:	f000 f991 	bl	8004210 <_free_r>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	6363      	str	r3, [r4, #52]	; 0x34
 8003ef2:	89a3      	ldrh	r3, [r4, #12]
 8003ef4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ef8:	81a3      	strh	r3, [r4, #12]
 8003efa:	2300      	movs	r3, #0
 8003efc:	6063      	str	r3, [r4, #4]
 8003efe:	6923      	ldr	r3, [r4, #16]
 8003f00:	6023      	str	r3, [r4, #0]
 8003f02:	89a3      	ldrh	r3, [r4, #12]
 8003f04:	f043 0308 	orr.w	r3, r3, #8
 8003f08:	81a3      	strh	r3, [r4, #12]
 8003f0a:	6923      	ldr	r3, [r4, #16]
 8003f0c:	b94b      	cbnz	r3, 8003f22 <__swsetup_r+0x9a>
 8003f0e:	89a3      	ldrh	r3, [r4, #12]
 8003f10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f18:	d003      	beq.n	8003f22 <__swsetup_r+0x9a>
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	f000 f92b 	bl	8004178 <__smakebuf_r>
 8003f22:	89a0      	ldrh	r0, [r4, #12]
 8003f24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f28:	f010 0301 	ands.w	r3, r0, #1
 8003f2c:	d00a      	beq.n	8003f44 <__swsetup_r+0xbc>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60a3      	str	r3, [r4, #8]
 8003f32:	6963      	ldr	r3, [r4, #20]
 8003f34:	425b      	negs	r3, r3
 8003f36:	61a3      	str	r3, [r4, #24]
 8003f38:	6923      	ldr	r3, [r4, #16]
 8003f3a:	b943      	cbnz	r3, 8003f4e <__swsetup_r+0xc6>
 8003f3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f40:	d1ba      	bne.n	8003eb8 <__swsetup_r+0x30>
 8003f42:	bd70      	pop	{r4, r5, r6, pc}
 8003f44:	0781      	lsls	r1, r0, #30
 8003f46:	bf58      	it	pl
 8003f48:	6963      	ldrpl	r3, [r4, #20]
 8003f4a:	60a3      	str	r3, [r4, #8]
 8003f4c:	e7f4      	b.n	8003f38 <__swsetup_r+0xb0>
 8003f4e:	2000      	movs	r0, #0
 8003f50:	e7f7      	b.n	8003f42 <__swsetup_r+0xba>
 8003f52:	bf00      	nop
 8003f54:	20000014 	.word	0x20000014
 8003f58:	08004a94 	.word	0x08004a94
 8003f5c:	08004ab4 	.word	0x08004ab4
 8003f60:	08004a74 	.word	0x08004a74

08003f64 <_close_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	4d06      	ldr	r5, [pc, #24]	; (8003f80 <_close_r+0x1c>)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	4608      	mov	r0, r1
 8003f6e:	602b      	str	r3, [r5, #0]
 8003f70:	f7fc fda2 	bl	8000ab8 <_close>
 8003f74:	1c43      	adds	r3, r0, #1
 8003f76:	d102      	bne.n	8003f7e <_close_r+0x1a>
 8003f78:	682b      	ldr	r3, [r5, #0]
 8003f7a:	b103      	cbz	r3, 8003f7e <_close_r+0x1a>
 8003f7c:	6023      	str	r3, [r4, #0]
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}
 8003f80:	20004128 	.word	0x20004128

08003f84 <__sflush_r>:
 8003f84:	898a      	ldrh	r2, [r1, #12]
 8003f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8a:	4605      	mov	r5, r0
 8003f8c:	0710      	lsls	r0, r2, #28
 8003f8e:	460c      	mov	r4, r1
 8003f90:	d458      	bmi.n	8004044 <__sflush_r+0xc0>
 8003f92:	684b      	ldr	r3, [r1, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	dc05      	bgt.n	8003fa4 <__sflush_r+0x20>
 8003f98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	dc02      	bgt.n	8003fa4 <__sflush_r+0x20>
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fa6:	2e00      	cmp	r6, #0
 8003fa8:	d0f9      	beq.n	8003f9e <__sflush_r+0x1a>
 8003faa:	2300      	movs	r3, #0
 8003fac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003fb0:	682f      	ldr	r7, [r5, #0]
 8003fb2:	602b      	str	r3, [r5, #0]
 8003fb4:	d032      	beq.n	800401c <__sflush_r+0x98>
 8003fb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	075a      	lsls	r2, r3, #29
 8003fbc:	d505      	bpl.n	8003fca <__sflush_r+0x46>
 8003fbe:	6863      	ldr	r3, [r4, #4]
 8003fc0:	1ac0      	subs	r0, r0, r3
 8003fc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fc4:	b10b      	cbz	r3, 8003fca <__sflush_r+0x46>
 8003fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fc8:	1ac0      	subs	r0, r0, r3
 8003fca:	2300      	movs	r3, #0
 8003fcc:	4602      	mov	r2, r0
 8003fce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fd0:	6a21      	ldr	r1, [r4, #32]
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	47b0      	blx	r6
 8003fd6:	1c43      	adds	r3, r0, #1
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	d106      	bne.n	8003fea <__sflush_r+0x66>
 8003fdc:	6829      	ldr	r1, [r5, #0]
 8003fde:	291d      	cmp	r1, #29
 8003fe0:	d82c      	bhi.n	800403c <__sflush_r+0xb8>
 8003fe2:	4a2a      	ldr	r2, [pc, #168]	; (800408c <__sflush_r+0x108>)
 8003fe4:	40ca      	lsrs	r2, r1
 8003fe6:	07d6      	lsls	r6, r2, #31
 8003fe8:	d528      	bpl.n	800403c <__sflush_r+0xb8>
 8003fea:	2200      	movs	r2, #0
 8003fec:	6062      	str	r2, [r4, #4]
 8003fee:	04d9      	lsls	r1, r3, #19
 8003ff0:	6922      	ldr	r2, [r4, #16]
 8003ff2:	6022      	str	r2, [r4, #0]
 8003ff4:	d504      	bpl.n	8004000 <__sflush_r+0x7c>
 8003ff6:	1c42      	adds	r2, r0, #1
 8003ff8:	d101      	bne.n	8003ffe <__sflush_r+0x7a>
 8003ffa:	682b      	ldr	r3, [r5, #0]
 8003ffc:	b903      	cbnz	r3, 8004000 <__sflush_r+0x7c>
 8003ffe:	6560      	str	r0, [r4, #84]	; 0x54
 8004000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004002:	602f      	str	r7, [r5, #0]
 8004004:	2900      	cmp	r1, #0
 8004006:	d0ca      	beq.n	8003f9e <__sflush_r+0x1a>
 8004008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800400c:	4299      	cmp	r1, r3
 800400e:	d002      	beq.n	8004016 <__sflush_r+0x92>
 8004010:	4628      	mov	r0, r5
 8004012:	f000 f8fd 	bl	8004210 <_free_r>
 8004016:	2000      	movs	r0, #0
 8004018:	6360      	str	r0, [r4, #52]	; 0x34
 800401a:	e7c1      	b.n	8003fa0 <__sflush_r+0x1c>
 800401c:	6a21      	ldr	r1, [r4, #32]
 800401e:	2301      	movs	r3, #1
 8004020:	4628      	mov	r0, r5
 8004022:	47b0      	blx	r6
 8004024:	1c41      	adds	r1, r0, #1
 8004026:	d1c7      	bne.n	8003fb8 <__sflush_r+0x34>
 8004028:	682b      	ldr	r3, [r5, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0c4      	beq.n	8003fb8 <__sflush_r+0x34>
 800402e:	2b1d      	cmp	r3, #29
 8004030:	d001      	beq.n	8004036 <__sflush_r+0xb2>
 8004032:	2b16      	cmp	r3, #22
 8004034:	d101      	bne.n	800403a <__sflush_r+0xb6>
 8004036:	602f      	str	r7, [r5, #0]
 8004038:	e7b1      	b.n	8003f9e <__sflush_r+0x1a>
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004040:	81a3      	strh	r3, [r4, #12]
 8004042:	e7ad      	b.n	8003fa0 <__sflush_r+0x1c>
 8004044:	690f      	ldr	r7, [r1, #16]
 8004046:	2f00      	cmp	r7, #0
 8004048:	d0a9      	beq.n	8003f9e <__sflush_r+0x1a>
 800404a:	0793      	lsls	r3, r2, #30
 800404c:	680e      	ldr	r6, [r1, #0]
 800404e:	bf08      	it	eq
 8004050:	694b      	ldreq	r3, [r1, #20]
 8004052:	600f      	str	r7, [r1, #0]
 8004054:	bf18      	it	ne
 8004056:	2300      	movne	r3, #0
 8004058:	eba6 0807 	sub.w	r8, r6, r7
 800405c:	608b      	str	r3, [r1, #8]
 800405e:	f1b8 0f00 	cmp.w	r8, #0
 8004062:	dd9c      	ble.n	8003f9e <__sflush_r+0x1a>
 8004064:	6a21      	ldr	r1, [r4, #32]
 8004066:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004068:	4643      	mov	r3, r8
 800406a:	463a      	mov	r2, r7
 800406c:	4628      	mov	r0, r5
 800406e:	47b0      	blx	r6
 8004070:	2800      	cmp	r0, #0
 8004072:	dc06      	bgt.n	8004082 <__sflush_r+0xfe>
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800407a:	81a3      	strh	r3, [r4, #12]
 800407c:	f04f 30ff 	mov.w	r0, #4294967295
 8004080:	e78e      	b.n	8003fa0 <__sflush_r+0x1c>
 8004082:	4407      	add	r7, r0
 8004084:	eba8 0800 	sub.w	r8, r8, r0
 8004088:	e7e9      	b.n	800405e <__sflush_r+0xda>
 800408a:	bf00      	nop
 800408c:	20400001 	.word	0x20400001

08004090 <_fflush_r>:
 8004090:	b538      	push	{r3, r4, r5, lr}
 8004092:	690b      	ldr	r3, [r1, #16]
 8004094:	4605      	mov	r5, r0
 8004096:	460c      	mov	r4, r1
 8004098:	b913      	cbnz	r3, 80040a0 <_fflush_r+0x10>
 800409a:	2500      	movs	r5, #0
 800409c:	4628      	mov	r0, r5
 800409e:	bd38      	pop	{r3, r4, r5, pc}
 80040a0:	b118      	cbz	r0, 80040aa <_fflush_r+0x1a>
 80040a2:	6983      	ldr	r3, [r0, #24]
 80040a4:	b90b      	cbnz	r3, 80040aa <_fflush_r+0x1a>
 80040a6:	f7ff fbc7 	bl	8003838 <__sinit>
 80040aa:	4b14      	ldr	r3, [pc, #80]	; (80040fc <_fflush_r+0x6c>)
 80040ac:	429c      	cmp	r4, r3
 80040ae:	d11b      	bne.n	80040e8 <_fflush_r+0x58>
 80040b0:	686c      	ldr	r4, [r5, #4]
 80040b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0ef      	beq.n	800409a <_fflush_r+0xa>
 80040ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040bc:	07d0      	lsls	r0, r2, #31
 80040be:	d404      	bmi.n	80040ca <_fflush_r+0x3a>
 80040c0:	0599      	lsls	r1, r3, #22
 80040c2:	d402      	bmi.n	80040ca <_fflush_r+0x3a>
 80040c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040c6:	f7ff fc7a 	bl	80039be <__retarget_lock_acquire_recursive>
 80040ca:	4628      	mov	r0, r5
 80040cc:	4621      	mov	r1, r4
 80040ce:	f7ff ff59 	bl	8003f84 <__sflush_r>
 80040d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040d4:	07da      	lsls	r2, r3, #31
 80040d6:	4605      	mov	r5, r0
 80040d8:	d4e0      	bmi.n	800409c <_fflush_r+0xc>
 80040da:	89a3      	ldrh	r3, [r4, #12]
 80040dc:	059b      	lsls	r3, r3, #22
 80040de:	d4dd      	bmi.n	800409c <_fflush_r+0xc>
 80040e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040e2:	f7ff fc6d 	bl	80039c0 <__retarget_lock_release_recursive>
 80040e6:	e7d9      	b.n	800409c <_fflush_r+0xc>
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <_fflush_r+0x70>)
 80040ea:	429c      	cmp	r4, r3
 80040ec:	d101      	bne.n	80040f2 <_fflush_r+0x62>
 80040ee:	68ac      	ldr	r4, [r5, #8]
 80040f0:	e7df      	b.n	80040b2 <_fflush_r+0x22>
 80040f2:	4b04      	ldr	r3, [pc, #16]	; (8004104 <_fflush_r+0x74>)
 80040f4:	429c      	cmp	r4, r3
 80040f6:	bf08      	it	eq
 80040f8:	68ec      	ldreq	r4, [r5, #12]
 80040fa:	e7da      	b.n	80040b2 <_fflush_r+0x22>
 80040fc:	08004a94 	.word	0x08004a94
 8004100:	08004ab4 	.word	0x08004ab4
 8004104:	08004a74 	.word	0x08004a74

08004108 <_lseek_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	4d07      	ldr	r5, [pc, #28]	; (8004128 <_lseek_r+0x20>)
 800410c:	4604      	mov	r4, r0
 800410e:	4608      	mov	r0, r1
 8004110:	4611      	mov	r1, r2
 8004112:	2200      	movs	r2, #0
 8004114:	602a      	str	r2, [r5, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	f7fc fcf5 	bl	8000b06 <_lseek>
 800411c:	1c43      	adds	r3, r0, #1
 800411e:	d102      	bne.n	8004126 <_lseek_r+0x1e>
 8004120:	682b      	ldr	r3, [r5, #0]
 8004122:	b103      	cbz	r3, 8004126 <_lseek_r+0x1e>
 8004124:	6023      	str	r3, [r4, #0]
 8004126:	bd38      	pop	{r3, r4, r5, pc}
 8004128:	20004128 	.word	0x20004128

0800412c <__swhatbuf_r>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	460e      	mov	r6, r1
 8004130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004134:	2900      	cmp	r1, #0
 8004136:	b096      	sub	sp, #88	; 0x58
 8004138:	4614      	mov	r4, r2
 800413a:	461d      	mov	r5, r3
 800413c:	da08      	bge.n	8004150 <__swhatbuf_r+0x24>
 800413e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	602a      	str	r2, [r5, #0]
 8004146:	061a      	lsls	r2, r3, #24
 8004148:	d410      	bmi.n	800416c <__swhatbuf_r+0x40>
 800414a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800414e:	e00e      	b.n	800416e <__swhatbuf_r+0x42>
 8004150:	466a      	mov	r2, sp
 8004152:	f000 fbab 	bl	80048ac <_fstat_r>
 8004156:	2800      	cmp	r0, #0
 8004158:	dbf1      	blt.n	800413e <__swhatbuf_r+0x12>
 800415a:	9a01      	ldr	r2, [sp, #4]
 800415c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004160:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004164:	425a      	negs	r2, r3
 8004166:	415a      	adcs	r2, r3
 8004168:	602a      	str	r2, [r5, #0]
 800416a:	e7ee      	b.n	800414a <__swhatbuf_r+0x1e>
 800416c:	2340      	movs	r3, #64	; 0x40
 800416e:	2000      	movs	r0, #0
 8004170:	6023      	str	r3, [r4, #0]
 8004172:	b016      	add	sp, #88	; 0x58
 8004174:	bd70      	pop	{r4, r5, r6, pc}
	...

08004178 <__smakebuf_r>:
 8004178:	898b      	ldrh	r3, [r1, #12]
 800417a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800417c:	079d      	lsls	r5, r3, #30
 800417e:	4606      	mov	r6, r0
 8004180:	460c      	mov	r4, r1
 8004182:	d507      	bpl.n	8004194 <__smakebuf_r+0x1c>
 8004184:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	6123      	str	r3, [r4, #16]
 800418c:	2301      	movs	r3, #1
 800418e:	6163      	str	r3, [r4, #20]
 8004190:	b002      	add	sp, #8
 8004192:	bd70      	pop	{r4, r5, r6, pc}
 8004194:	ab01      	add	r3, sp, #4
 8004196:	466a      	mov	r2, sp
 8004198:	f7ff ffc8 	bl	800412c <__swhatbuf_r>
 800419c:	9900      	ldr	r1, [sp, #0]
 800419e:	4605      	mov	r5, r0
 80041a0:	4630      	mov	r0, r6
 80041a2:	f7ff fc45 	bl	8003a30 <_malloc_r>
 80041a6:	b948      	cbnz	r0, 80041bc <__smakebuf_r+0x44>
 80041a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ac:	059a      	lsls	r2, r3, #22
 80041ae:	d4ef      	bmi.n	8004190 <__smakebuf_r+0x18>
 80041b0:	f023 0303 	bic.w	r3, r3, #3
 80041b4:	f043 0302 	orr.w	r3, r3, #2
 80041b8:	81a3      	strh	r3, [r4, #12]
 80041ba:	e7e3      	b.n	8004184 <__smakebuf_r+0xc>
 80041bc:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <__smakebuf_r+0x7c>)
 80041be:	62b3      	str	r3, [r6, #40]	; 0x28
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	6020      	str	r0, [r4, #0]
 80041c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c8:	81a3      	strh	r3, [r4, #12]
 80041ca:	9b00      	ldr	r3, [sp, #0]
 80041cc:	6163      	str	r3, [r4, #20]
 80041ce:	9b01      	ldr	r3, [sp, #4]
 80041d0:	6120      	str	r0, [r4, #16]
 80041d2:	b15b      	cbz	r3, 80041ec <__smakebuf_r+0x74>
 80041d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041d8:	4630      	mov	r0, r6
 80041da:	f000 fb79 	bl	80048d0 <_isatty_r>
 80041de:	b128      	cbz	r0, 80041ec <__smakebuf_r+0x74>
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	f023 0303 	bic.w	r3, r3, #3
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	81a3      	strh	r3, [r4, #12]
 80041ec:	89a0      	ldrh	r0, [r4, #12]
 80041ee:	4305      	orrs	r5, r0
 80041f0:	81a5      	strh	r5, [r4, #12]
 80041f2:	e7cd      	b.n	8004190 <__smakebuf_r+0x18>
 80041f4:	080037d1 	.word	0x080037d1

080041f8 <__malloc_lock>:
 80041f8:	4801      	ldr	r0, [pc, #4]	; (8004200 <__malloc_lock+0x8>)
 80041fa:	f7ff bbe0 	b.w	80039be <__retarget_lock_acquire_recursive>
 80041fe:	bf00      	nop
 8004200:	2000411c 	.word	0x2000411c

08004204 <__malloc_unlock>:
 8004204:	4801      	ldr	r0, [pc, #4]	; (800420c <__malloc_unlock+0x8>)
 8004206:	f7ff bbdb 	b.w	80039c0 <__retarget_lock_release_recursive>
 800420a:	bf00      	nop
 800420c:	2000411c 	.word	0x2000411c

08004210 <_free_r>:
 8004210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004212:	2900      	cmp	r1, #0
 8004214:	d044      	beq.n	80042a0 <_free_r+0x90>
 8004216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800421a:	9001      	str	r0, [sp, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f1a1 0404 	sub.w	r4, r1, #4
 8004222:	bfb8      	it	lt
 8004224:	18e4      	addlt	r4, r4, r3
 8004226:	f7ff ffe7 	bl	80041f8 <__malloc_lock>
 800422a:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <_free_r+0x94>)
 800422c:	9801      	ldr	r0, [sp, #4]
 800422e:	6813      	ldr	r3, [r2, #0]
 8004230:	b933      	cbnz	r3, 8004240 <_free_r+0x30>
 8004232:	6063      	str	r3, [r4, #4]
 8004234:	6014      	str	r4, [r2, #0]
 8004236:	b003      	add	sp, #12
 8004238:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800423c:	f7ff bfe2 	b.w	8004204 <__malloc_unlock>
 8004240:	42a3      	cmp	r3, r4
 8004242:	d908      	bls.n	8004256 <_free_r+0x46>
 8004244:	6825      	ldr	r5, [r4, #0]
 8004246:	1961      	adds	r1, r4, r5
 8004248:	428b      	cmp	r3, r1
 800424a:	bf01      	itttt	eq
 800424c:	6819      	ldreq	r1, [r3, #0]
 800424e:	685b      	ldreq	r3, [r3, #4]
 8004250:	1949      	addeq	r1, r1, r5
 8004252:	6021      	streq	r1, [r4, #0]
 8004254:	e7ed      	b.n	8004232 <_free_r+0x22>
 8004256:	461a      	mov	r2, r3
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	b10b      	cbz	r3, 8004260 <_free_r+0x50>
 800425c:	42a3      	cmp	r3, r4
 800425e:	d9fa      	bls.n	8004256 <_free_r+0x46>
 8004260:	6811      	ldr	r1, [r2, #0]
 8004262:	1855      	adds	r5, r2, r1
 8004264:	42a5      	cmp	r5, r4
 8004266:	d10b      	bne.n	8004280 <_free_r+0x70>
 8004268:	6824      	ldr	r4, [r4, #0]
 800426a:	4421      	add	r1, r4
 800426c:	1854      	adds	r4, r2, r1
 800426e:	42a3      	cmp	r3, r4
 8004270:	6011      	str	r1, [r2, #0]
 8004272:	d1e0      	bne.n	8004236 <_free_r+0x26>
 8004274:	681c      	ldr	r4, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	6053      	str	r3, [r2, #4]
 800427a:	4421      	add	r1, r4
 800427c:	6011      	str	r1, [r2, #0]
 800427e:	e7da      	b.n	8004236 <_free_r+0x26>
 8004280:	d902      	bls.n	8004288 <_free_r+0x78>
 8004282:	230c      	movs	r3, #12
 8004284:	6003      	str	r3, [r0, #0]
 8004286:	e7d6      	b.n	8004236 <_free_r+0x26>
 8004288:	6825      	ldr	r5, [r4, #0]
 800428a:	1961      	adds	r1, r4, r5
 800428c:	428b      	cmp	r3, r1
 800428e:	bf04      	itt	eq
 8004290:	6819      	ldreq	r1, [r3, #0]
 8004292:	685b      	ldreq	r3, [r3, #4]
 8004294:	6063      	str	r3, [r4, #4]
 8004296:	bf04      	itt	eq
 8004298:	1949      	addeq	r1, r1, r5
 800429a:	6021      	streq	r1, [r4, #0]
 800429c:	6054      	str	r4, [r2, #4]
 800429e:	e7ca      	b.n	8004236 <_free_r+0x26>
 80042a0:	b003      	add	sp, #12
 80042a2:	bd30      	pop	{r4, r5, pc}
 80042a4:	20004120 	.word	0x20004120

080042a8 <__ssputs_r>:
 80042a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ac:	688e      	ldr	r6, [r1, #8]
 80042ae:	429e      	cmp	r6, r3
 80042b0:	4682      	mov	sl, r0
 80042b2:	460c      	mov	r4, r1
 80042b4:	4690      	mov	r8, r2
 80042b6:	461f      	mov	r7, r3
 80042b8:	d838      	bhi.n	800432c <__ssputs_r+0x84>
 80042ba:	898a      	ldrh	r2, [r1, #12]
 80042bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042c0:	d032      	beq.n	8004328 <__ssputs_r+0x80>
 80042c2:	6825      	ldr	r5, [r4, #0]
 80042c4:	6909      	ldr	r1, [r1, #16]
 80042c6:	eba5 0901 	sub.w	r9, r5, r1
 80042ca:	6965      	ldr	r5, [r4, #20]
 80042cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042d4:	3301      	adds	r3, #1
 80042d6:	444b      	add	r3, r9
 80042d8:	106d      	asrs	r5, r5, #1
 80042da:	429d      	cmp	r5, r3
 80042dc:	bf38      	it	cc
 80042de:	461d      	movcc	r5, r3
 80042e0:	0553      	lsls	r3, r2, #21
 80042e2:	d531      	bpl.n	8004348 <__ssputs_r+0xa0>
 80042e4:	4629      	mov	r1, r5
 80042e6:	f7ff fba3 	bl	8003a30 <_malloc_r>
 80042ea:	4606      	mov	r6, r0
 80042ec:	b950      	cbnz	r0, 8004304 <__ssputs_r+0x5c>
 80042ee:	230c      	movs	r3, #12
 80042f0:	f8ca 3000 	str.w	r3, [sl]
 80042f4:	89a3      	ldrh	r3, [r4, #12]
 80042f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042fa:	81a3      	strh	r3, [r4, #12]
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004304:	6921      	ldr	r1, [r4, #16]
 8004306:	464a      	mov	r2, r9
 8004308:	f7ff fb5b 	bl	80039c2 <memcpy>
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004316:	81a3      	strh	r3, [r4, #12]
 8004318:	6126      	str	r6, [r4, #16]
 800431a:	6165      	str	r5, [r4, #20]
 800431c:	444e      	add	r6, r9
 800431e:	eba5 0509 	sub.w	r5, r5, r9
 8004322:	6026      	str	r6, [r4, #0]
 8004324:	60a5      	str	r5, [r4, #8]
 8004326:	463e      	mov	r6, r7
 8004328:	42be      	cmp	r6, r7
 800432a:	d900      	bls.n	800432e <__ssputs_r+0x86>
 800432c:	463e      	mov	r6, r7
 800432e:	6820      	ldr	r0, [r4, #0]
 8004330:	4632      	mov	r2, r6
 8004332:	4641      	mov	r1, r8
 8004334:	f000 fadc 	bl	80048f0 <memmove>
 8004338:	68a3      	ldr	r3, [r4, #8]
 800433a:	1b9b      	subs	r3, r3, r6
 800433c:	60a3      	str	r3, [r4, #8]
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	4433      	add	r3, r6
 8004342:	6023      	str	r3, [r4, #0]
 8004344:	2000      	movs	r0, #0
 8004346:	e7db      	b.n	8004300 <__ssputs_r+0x58>
 8004348:	462a      	mov	r2, r5
 800434a:	f000 faeb 	bl	8004924 <_realloc_r>
 800434e:	4606      	mov	r6, r0
 8004350:	2800      	cmp	r0, #0
 8004352:	d1e1      	bne.n	8004318 <__ssputs_r+0x70>
 8004354:	6921      	ldr	r1, [r4, #16]
 8004356:	4650      	mov	r0, sl
 8004358:	f7ff ff5a 	bl	8004210 <_free_r>
 800435c:	e7c7      	b.n	80042ee <__ssputs_r+0x46>
	...

08004360 <_svfiprintf_r>:
 8004360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004364:	4698      	mov	r8, r3
 8004366:	898b      	ldrh	r3, [r1, #12]
 8004368:	061b      	lsls	r3, r3, #24
 800436a:	b09d      	sub	sp, #116	; 0x74
 800436c:	4607      	mov	r7, r0
 800436e:	460d      	mov	r5, r1
 8004370:	4614      	mov	r4, r2
 8004372:	d50e      	bpl.n	8004392 <_svfiprintf_r+0x32>
 8004374:	690b      	ldr	r3, [r1, #16]
 8004376:	b963      	cbnz	r3, 8004392 <_svfiprintf_r+0x32>
 8004378:	2140      	movs	r1, #64	; 0x40
 800437a:	f7ff fb59 	bl	8003a30 <_malloc_r>
 800437e:	6028      	str	r0, [r5, #0]
 8004380:	6128      	str	r0, [r5, #16]
 8004382:	b920      	cbnz	r0, 800438e <_svfiprintf_r+0x2e>
 8004384:	230c      	movs	r3, #12
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	f04f 30ff 	mov.w	r0, #4294967295
 800438c:	e0d1      	b.n	8004532 <_svfiprintf_r+0x1d2>
 800438e:	2340      	movs	r3, #64	; 0x40
 8004390:	616b      	str	r3, [r5, #20]
 8004392:	2300      	movs	r3, #0
 8004394:	9309      	str	r3, [sp, #36]	; 0x24
 8004396:	2320      	movs	r3, #32
 8004398:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800439c:	f8cd 800c 	str.w	r8, [sp, #12]
 80043a0:	2330      	movs	r3, #48	; 0x30
 80043a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800454c <_svfiprintf_r+0x1ec>
 80043a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043aa:	f04f 0901 	mov.w	r9, #1
 80043ae:	4623      	mov	r3, r4
 80043b0:	469a      	mov	sl, r3
 80043b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043b6:	b10a      	cbz	r2, 80043bc <_svfiprintf_r+0x5c>
 80043b8:	2a25      	cmp	r2, #37	; 0x25
 80043ba:	d1f9      	bne.n	80043b0 <_svfiprintf_r+0x50>
 80043bc:	ebba 0b04 	subs.w	fp, sl, r4
 80043c0:	d00b      	beq.n	80043da <_svfiprintf_r+0x7a>
 80043c2:	465b      	mov	r3, fp
 80043c4:	4622      	mov	r2, r4
 80043c6:	4629      	mov	r1, r5
 80043c8:	4638      	mov	r0, r7
 80043ca:	f7ff ff6d 	bl	80042a8 <__ssputs_r>
 80043ce:	3001      	adds	r0, #1
 80043d0:	f000 80aa 	beq.w	8004528 <_svfiprintf_r+0x1c8>
 80043d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043d6:	445a      	add	r2, fp
 80043d8:	9209      	str	r2, [sp, #36]	; 0x24
 80043da:	f89a 3000 	ldrb.w	r3, [sl]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 80a2 	beq.w	8004528 <_svfiprintf_r+0x1c8>
 80043e4:	2300      	movs	r3, #0
 80043e6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043ee:	f10a 0a01 	add.w	sl, sl, #1
 80043f2:	9304      	str	r3, [sp, #16]
 80043f4:	9307      	str	r3, [sp, #28]
 80043f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043fa:	931a      	str	r3, [sp, #104]	; 0x68
 80043fc:	4654      	mov	r4, sl
 80043fe:	2205      	movs	r2, #5
 8004400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004404:	4851      	ldr	r0, [pc, #324]	; (800454c <_svfiprintf_r+0x1ec>)
 8004406:	f7fb fee3 	bl	80001d0 <memchr>
 800440a:	9a04      	ldr	r2, [sp, #16]
 800440c:	b9d8      	cbnz	r0, 8004446 <_svfiprintf_r+0xe6>
 800440e:	06d0      	lsls	r0, r2, #27
 8004410:	bf44      	itt	mi
 8004412:	2320      	movmi	r3, #32
 8004414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004418:	0711      	lsls	r1, r2, #28
 800441a:	bf44      	itt	mi
 800441c:	232b      	movmi	r3, #43	; 0x2b
 800441e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004422:	f89a 3000 	ldrb.w	r3, [sl]
 8004426:	2b2a      	cmp	r3, #42	; 0x2a
 8004428:	d015      	beq.n	8004456 <_svfiprintf_r+0xf6>
 800442a:	9a07      	ldr	r2, [sp, #28]
 800442c:	4654      	mov	r4, sl
 800442e:	2000      	movs	r0, #0
 8004430:	f04f 0c0a 	mov.w	ip, #10
 8004434:	4621      	mov	r1, r4
 8004436:	f811 3b01 	ldrb.w	r3, [r1], #1
 800443a:	3b30      	subs	r3, #48	; 0x30
 800443c:	2b09      	cmp	r3, #9
 800443e:	d94e      	bls.n	80044de <_svfiprintf_r+0x17e>
 8004440:	b1b0      	cbz	r0, 8004470 <_svfiprintf_r+0x110>
 8004442:	9207      	str	r2, [sp, #28]
 8004444:	e014      	b.n	8004470 <_svfiprintf_r+0x110>
 8004446:	eba0 0308 	sub.w	r3, r0, r8
 800444a:	fa09 f303 	lsl.w	r3, r9, r3
 800444e:	4313      	orrs	r3, r2
 8004450:	9304      	str	r3, [sp, #16]
 8004452:	46a2      	mov	sl, r4
 8004454:	e7d2      	b.n	80043fc <_svfiprintf_r+0x9c>
 8004456:	9b03      	ldr	r3, [sp, #12]
 8004458:	1d19      	adds	r1, r3, #4
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	9103      	str	r1, [sp, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	bfbb      	ittet	lt
 8004462:	425b      	neglt	r3, r3
 8004464:	f042 0202 	orrlt.w	r2, r2, #2
 8004468:	9307      	strge	r3, [sp, #28]
 800446a:	9307      	strlt	r3, [sp, #28]
 800446c:	bfb8      	it	lt
 800446e:	9204      	strlt	r2, [sp, #16]
 8004470:	7823      	ldrb	r3, [r4, #0]
 8004472:	2b2e      	cmp	r3, #46	; 0x2e
 8004474:	d10c      	bne.n	8004490 <_svfiprintf_r+0x130>
 8004476:	7863      	ldrb	r3, [r4, #1]
 8004478:	2b2a      	cmp	r3, #42	; 0x2a
 800447a:	d135      	bne.n	80044e8 <_svfiprintf_r+0x188>
 800447c:	9b03      	ldr	r3, [sp, #12]
 800447e:	1d1a      	adds	r2, r3, #4
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	9203      	str	r2, [sp, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	bfb8      	it	lt
 8004488:	f04f 33ff 	movlt.w	r3, #4294967295
 800448c:	3402      	adds	r4, #2
 800448e:	9305      	str	r3, [sp, #20]
 8004490:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800455c <_svfiprintf_r+0x1fc>
 8004494:	7821      	ldrb	r1, [r4, #0]
 8004496:	2203      	movs	r2, #3
 8004498:	4650      	mov	r0, sl
 800449a:	f7fb fe99 	bl	80001d0 <memchr>
 800449e:	b140      	cbz	r0, 80044b2 <_svfiprintf_r+0x152>
 80044a0:	2340      	movs	r3, #64	; 0x40
 80044a2:	eba0 000a 	sub.w	r0, r0, sl
 80044a6:	fa03 f000 	lsl.w	r0, r3, r0
 80044aa:	9b04      	ldr	r3, [sp, #16]
 80044ac:	4303      	orrs	r3, r0
 80044ae:	3401      	adds	r4, #1
 80044b0:	9304      	str	r3, [sp, #16]
 80044b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b6:	4826      	ldr	r0, [pc, #152]	; (8004550 <_svfiprintf_r+0x1f0>)
 80044b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044bc:	2206      	movs	r2, #6
 80044be:	f7fb fe87 	bl	80001d0 <memchr>
 80044c2:	2800      	cmp	r0, #0
 80044c4:	d038      	beq.n	8004538 <_svfiprintf_r+0x1d8>
 80044c6:	4b23      	ldr	r3, [pc, #140]	; (8004554 <_svfiprintf_r+0x1f4>)
 80044c8:	bb1b      	cbnz	r3, 8004512 <_svfiprintf_r+0x1b2>
 80044ca:	9b03      	ldr	r3, [sp, #12]
 80044cc:	3307      	adds	r3, #7
 80044ce:	f023 0307 	bic.w	r3, r3, #7
 80044d2:	3308      	adds	r3, #8
 80044d4:	9303      	str	r3, [sp, #12]
 80044d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d8:	4433      	add	r3, r6
 80044da:	9309      	str	r3, [sp, #36]	; 0x24
 80044dc:	e767      	b.n	80043ae <_svfiprintf_r+0x4e>
 80044de:	fb0c 3202 	mla	r2, ip, r2, r3
 80044e2:	460c      	mov	r4, r1
 80044e4:	2001      	movs	r0, #1
 80044e6:	e7a5      	b.n	8004434 <_svfiprintf_r+0xd4>
 80044e8:	2300      	movs	r3, #0
 80044ea:	3401      	adds	r4, #1
 80044ec:	9305      	str	r3, [sp, #20]
 80044ee:	4619      	mov	r1, r3
 80044f0:	f04f 0c0a 	mov.w	ip, #10
 80044f4:	4620      	mov	r0, r4
 80044f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044fa:	3a30      	subs	r2, #48	; 0x30
 80044fc:	2a09      	cmp	r2, #9
 80044fe:	d903      	bls.n	8004508 <_svfiprintf_r+0x1a8>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0c5      	beq.n	8004490 <_svfiprintf_r+0x130>
 8004504:	9105      	str	r1, [sp, #20]
 8004506:	e7c3      	b.n	8004490 <_svfiprintf_r+0x130>
 8004508:	fb0c 2101 	mla	r1, ip, r1, r2
 800450c:	4604      	mov	r4, r0
 800450e:	2301      	movs	r3, #1
 8004510:	e7f0      	b.n	80044f4 <_svfiprintf_r+0x194>
 8004512:	ab03      	add	r3, sp, #12
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	462a      	mov	r2, r5
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <_svfiprintf_r+0x1f8>)
 800451a:	a904      	add	r1, sp, #16
 800451c:	4638      	mov	r0, r7
 800451e:	f3af 8000 	nop.w
 8004522:	1c42      	adds	r2, r0, #1
 8004524:	4606      	mov	r6, r0
 8004526:	d1d6      	bne.n	80044d6 <_svfiprintf_r+0x176>
 8004528:	89ab      	ldrh	r3, [r5, #12]
 800452a:	065b      	lsls	r3, r3, #25
 800452c:	f53f af2c 	bmi.w	8004388 <_svfiprintf_r+0x28>
 8004530:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004532:	b01d      	add	sp, #116	; 0x74
 8004534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004538:	ab03      	add	r3, sp, #12
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	462a      	mov	r2, r5
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <_svfiprintf_r+0x1f8>)
 8004540:	a904      	add	r1, sp, #16
 8004542:	4638      	mov	r0, r7
 8004544:	f000 f87a 	bl	800463c <_printf_i>
 8004548:	e7eb      	b.n	8004522 <_svfiprintf_r+0x1c2>
 800454a:	bf00      	nop
 800454c:	08004ad8 	.word	0x08004ad8
 8004550:	08004ae2 	.word	0x08004ae2
 8004554:	00000000 	.word	0x00000000
 8004558:	080042a9 	.word	0x080042a9
 800455c:	08004ade 	.word	0x08004ade

08004560 <_printf_common>:
 8004560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004564:	4616      	mov	r6, r2
 8004566:	4699      	mov	r9, r3
 8004568:	688a      	ldr	r2, [r1, #8]
 800456a:	690b      	ldr	r3, [r1, #16]
 800456c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004570:	4293      	cmp	r3, r2
 8004572:	bfb8      	it	lt
 8004574:	4613      	movlt	r3, r2
 8004576:	6033      	str	r3, [r6, #0]
 8004578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800457c:	4607      	mov	r7, r0
 800457e:	460c      	mov	r4, r1
 8004580:	b10a      	cbz	r2, 8004586 <_printf_common+0x26>
 8004582:	3301      	adds	r3, #1
 8004584:	6033      	str	r3, [r6, #0]
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	0699      	lsls	r1, r3, #26
 800458a:	bf42      	ittt	mi
 800458c:	6833      	ldrmi	r3, [r6, #0]
 800458e:	3302      	addmi	r3, #2
 8004590:	6033      	strmi	r3, [r6, #0]
 8004592:	6825      	ldr	r5, [r4, #0]
 8004594:	f015 0506 	ands.w	r5, r5, #6
 8004598:	d106      	bne.n	80045a8 <_printf_common+0x48>
 800459a:	f104 0a19 	add.w	sl, r4, #25
 800459e:	68e3      	ldr	r3, [r4, #12]
 80045a0:	6832      	ldr	r2, [r6, #0]
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	42ab      	cmp	r3, r5
 80045a6:	dc26      	bgt.n	80045f6 <_printf_common+0x96>
 80045a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045ac:	1e13      	subs	r3, r2, #0
 80045ae:	6822      	ldr	r2, [r4, #0]
 80045b0:	bf18      	it	ne
 80045b2:	2301      	movne	r3, #1
 80045b4:	0692      	lsls	r2, r2, #26
 80045b6:	d42b      	bmi.n	8004610 <_printf_common+0xb0>
 80045b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045bc:	4649      	mov	r1, r9
 80045be:	4638      	mov	r0, r7
 80045c0:	47c0      	blx	r8
 80045c2:	3001      	adds	r0, #1
 80045c4:	d01e      	beq.n	8004604 <_printf_common+0xa4>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	68e5      	ldr	r5, [r4, #12]
 80045ca:	6832      	ldr	r2, [r6, #0]
 80045cc:	f003 0306 	and.w	r3, r3, #6
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	bf08      	it	eq
 80045d4:	1aad      	subeq	r5, r5, r2
 80045d6:	68a3      	ldr	r3, [r4, #8]
 80045d8:	6922      	ldr	r2, [r4, #16]
 80045da:	bf0c      	ite	eq
 80045dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045e0:	2500      	movne	r5, #0
 80045e2:	4293      	cmp	r3, r2
 80045e4:	bfc4      	itt	gt
 80045e6:	1a9b      	subgt	r3, r3, r2
 80045e8:	18ed      	addgt	r5, r5, r3
 80045ea:	2600      	movs	r6, #0
 80045ec:	341a      	adds	r4, #26
 80045ee:	42b5      	cmp	r5, r6
 80045f0:	d11a      	bne.n	8004628 <_printf_common+0xc8>
 80045f2:	2000      	movs	r0, #0
 80045f4:	e008      	b.n	8004608 <_printf_common+0xa8>
 80045f6:	2301      	movs	r3, #1
 80045f8:	4652      	mov	r2, sl
 80045fa:	4649      	mov	r1, r9
 80045fc:	4638      	mov	r0, r7
 80045fe:	47c0      	blx	r8
 8004600:	3001      	adds	r0, #1
 8004602:	d103      	bne.n	800460c <_printf_common+0xac>
 8004604:	f04f 30ff 	mov.w	r0, #4294967295
 8004608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460c:	3501      	adds	r5, #1
 800460e:	e7c6      	b.n	800459e <_printf_common+0x3e>
 8004610:	18e1      	adds	r1, r4, r3
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	2030      	movs	r0, #48	; 0x30
 8004616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800461a:	4422      	add	r2, r4
 800461c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004624:	3302      	adds	r3, #2
 8004626:	e7c7      	b.n	80045b8 <_printf_common+0x58>
 8004628:	2301      	movs	r3, #1
 800462a:	4622      	mov	r2, r4
 800462c:	4649      	mov	r1, r9
 800462e:	4638      	mov	r0, r7
 8004630:	47c0      	blx	r8
 8004632:	3001      	adds	r0, #1
 8004634:	d0e6      	beq.n	8004604 <_printf_common+0xa4>
 8004636:	3601      	adds	r6, #1
 8004638:	e7d9      	b.n	80045ee <_printf_common+0x8e>
	...

0800463c <_printf_i>:
 800463c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004640:	7e0f      	ldrb	r7, [r1, #24]
 8004642:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004644:	2f78      	cmp	r7, #120	; 0x78
 8004646:	4691      	mov	r9, r2
 8004648:	4680      	mov	r8, r0
 800464a:	460c      	mov	r4, r1
 800464c:	469a      	mov	sl, r3
 800464e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004652:	d807      	bhi.n	8004664 <_printf_i+0x28>
 8004654:	2f62      	cmp	r7, #98	; 0x62
 8004656:	d80a      	bhi.n	800466e <_printf_i+0x32>
 8004658:	2f00      	cmp	r7, #0
 800465a:	f000 80d8 	beq.w	800480e <_printf_i+0x1d2>
 800465e:	2f58      	cmp	r7, #88	; 0x58
 8004660:	f000 80a3 	beq.w	80047aa <_printf_i+0x16e>
 8004664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800466c:	e03a      	b.n	80046e4 <_printf_i+0xa8>
 800466e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004672:	2b15      	cmp	r3, #21
 8004674:	d8f6      	bhi.n	8004664 <_printf_i+0x28>
 8004676:	a101      	add	r1, pc, #4	; (adr r1, 800467c <_printf_i+0x40>)
 8004678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800467c:	080046d5 	.word	0x080046d5
 8004680:	080046e9 	.word	0x080046e9
 8004684:	08004665 	.word	0x08004665
 8004688:	08004665 	.word	0x08004665
 800468c:	08004665 	.word	0x08004665
 8004690:	08004665 	.word	0x08004665
 8004694:	080046e9 	.word	0x080046e9
 8004698:	08004665 	.word	0x08004665
 800469c:	08004665 	.word	0x08004665
 80046a0:	08004665 	.word	0x08004665
 80046a4:	08004665 	.word	0x08004665
 80046a8:	080047f5 	.word	0x080047f5
 80046ac:	08004719 	.word	0x08004719
 80046b0:	080047d7 	.word	0x080047d7
 80046b4:	08004665 	.word	0x08004665
 80046b8:	08004665 	.word	0x08004665
 80046bc:	08004817 	.word	0x08004817
 80046c0:	08004665 	.word	0x08004665
 80046c4:	08004719 	.word	0x08004719
 80046c8:	08004665 	.word	0x08004665
 80046cc:	08004665 	.word	0x08004665
 80046d0:	080047df 	.word	0x080047df
 80046d4:	682b      	ldr	r3, [r5, #0]
 80046d6:	1d1a      	adds	r2, r3, #4
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	602a      	str	r2, [r5, #0]
 80046dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0a3      	b.n	8004830 <_printf_i+0x1f4>
 80046e8:	6820      	ldr	r0, [r4, #0]
 80046ea:	6829      	ldr	r1, [r5, #0]
 80046ec:	0606      	lsls	r6, r0, #24
 80046ee:	f101 0304 	add.w	r3, r1, #4
 80046f2:	d50a      	bpl.n	800470a <_printf_i+0xce>
 80046f4:	680e      	ldr	r6, [r1, #0]
 80046f6:	602b      	str	r3, [r5, #0]
 80046f8:	2e00      	cmp	r6, #0
 80046fa:	da03      	bge.n	8004704 <_printf_i+0xc8>
 80046fc:	232d      	movs	r3, #45	; 0x2d
 80046fe:	4276      	negs	r6, r6
 8004700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004704:	485e      	ldr	r0, [pc, #376]	; (8004880 <_printf_i+0x244>)
 8004706:	230a      	movs	r3, #10
 8004708:	e019      	b.n	800473e <_printf_i+0x102>
 800470a:	680e      	ldr	r6, [r1, #0]
 800470c:	602b      	str	r3, [r5, #0]
 800470e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004712:	bf18      	it	ne
 8004714:	b236      	sxthne	r6, r6
 8004716:	e7ef      	b.n	80046f8 <_printf_i+0xbc>
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	6820      	ldr	r0, [r4, #0]
 800471c:	1d19      	adds	r1, r3, #4
 800471e:	6029      	str	r1, [r5, #0]
 8004720:	0601      	lsls	r1, r0, #24
 8004722:	d501      	bpl.n	8004728 <_printf_i+0xec>
 8004724:	681e      	ldr	r6, [r3, #0]
 8004726:	e002      	b.n	800472e <_printf_i+0xf2>
 8004728:	0646      	lsls	r6, r0, #25
 800472a:	d5fb      	bpl.n	8004724 <_printf_i+0xe8>
 800472c:	881e      	ldrh	r6, [r3, #0]
 800472e:	4854      	ldr	r0, [pc, #336]	; (8004880 <_printf_i+0x244>)
 8004730:	2f6f      	cmp	r7, #111	; 0x6f
 8004732:	bf0c      	ite	eq
 8004734:	2308      	moveq	r3, #8
 8004736:	230a      	movne	r3, #10
 8004738:	2100      	movs	r1, #0
 800473a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800473e:	6865      	ldr	r5, [r4, #4]
 8004740:	60a5      	str	r5, [r4, #8]
 8004742:	2d00      	cmp	r5, #0
 8004744:	bfa2      	ittt	ge
 8004746:	6821      	ldrge	r1, [r4, #0]
 8004748:	f021 0104 	bicge.w	r1, r1, #4
 800474c:	6021      	strge	r1, [r4, #0]
 800474e:	b90e      	cbnz	r6, 8004754 <_printf_i+0x118>
 8004750:	2d00      	cmp	r5, #0
 8004752:	d04d      	beq.n	80047f0 <_printf_i+0x1b4>
 8004754:	4615      	mov	r5, r2
 8004756:	fbb6 f1f3 	udiv	r1, r6, r3
 800475a:	fb03 6711 	mls	r7, r3, r1, r6
 800475e:	5dc7      	ldrb	r7, [r0, r7]
 8004760:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004764:	4637      	mov	r7, r6
 8004766:	42bb      	cmp	r3, r7
 8004768:	460e      	mov	r6, r1
 800476a:	d9f4      	bls.n	8004756 <_printf_i+0x11a>
 800476c:	2b08      	cmp	r3, #8
 800476e:	d10b      	bne.n	8004788 <_printf_i+0x14c>
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	07de      	lsls	r6, r3, #31
 8004774:	d508      	bpl.n	8004788 <_printf_i+0x14c>
 8004776:	6923      	ldr	r3, [r4, #16]
 8004778:	6861      	ldr	r1, [r4, #4]
 800477a:	4299      	cmp	r1, r3
 800477c:	bfde      	ittt	le
 800477e:	2330      	movle	r3, #48	; 0x30
 8004780:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004784:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004788:	1b52      	subs	r2, r2, r5
 800478a:	6122      	str	r2, [r4, #16]
 800478c:	f8cd a000 	str.w	sl, [sp]
 8004790:	464b      	mov	r3, r9
 8004792:	aa03      	add	r2, sp, #12
 8004794:	4621      	mov	r1, r4
 8004796:	4640      	mov	r0, r8
 8004798:	f7ff fee2 	bl	8004560 <_printf_common>
 800479c:	3001      	adds	r0, #1
 800479e:	d14c      	bne.n	800483a <_printf_i+0x1fe>
 80047a0:	f04f 30ff 	mov.w	r0, #4294967295
 80047a4:	b004      	add	sp, #16
 80047a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047aa:	4835      	ldr	r0, [pc, #212]	; (8004880 <_printf_i+0x244>)
 80047ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047b0:	6829      	ldr	r1, [r5, #0]
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80047b8:	6029      	str	r1, [r5, #0]
 80047ba:	061d      	lsls	r5, r3, #24
 80047bc:	d514      	bpl.n	80047e8 <_printf_i+0x1ac>
 80047be:	07df      	lsls	r7, r3, #31
 80047c0:	bf44      	itt	mi
 80047c2:	f043 0320 	orrmi.w	r3, r3, #32
 80047c6:	6023      	strmi	r3, [r4, #0]
 80047c8:	b91e      	cbnz	r6, 80047d2 <_printf_i+0x196>
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	f023 0320 	bic.w	r3, r3, #32
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	2310      	movs	r3, #16
 80047d4:	e7b0      	b.n	8004738 <_printf_i+0xfc>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	f043 0320 	orr.w	r3, r3, #32
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	2378      	movs	r3, #120	; 0x78
 80047e0:	4828      	ldr	r0, [pc, #160]	; (8004884 <_printf_i+0x248>)
 80047e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047e6:	e7e3      	b.n	80047b0 <_printf_i+0x174>
 80047e8:	0659      	lsls	r1, r3, #25
 80047ea:	bf48      	it	mi
 80047ec:	b2b6      	uxthmi	r6, r6
 80047ee:	e7e6      	b.n	80047be <_printf_i+0x182>
 80047f0:	4615      	mov	r5, r2
 80047f2:	e7bb      	b.n	800476c <_printf_i+0x130>
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	6826      	ldr	r6, [r4, #0]
 80047f8:	6961      	ldr	r1, [r4, #20]
 80047fa:	1d18      	adds	r0, r3, #4
 80047fc:	6028      	str	r0, [r5, #0]
 80047fe:	0635      	lsls	r5, r6, #24
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	d501      	bpl.n	8004808 <_printf_i+0x1cc>
 8004804:	6019      	str	r1, [r3, #0]
 8004806:	e002      	b.n	800480e <_printf_i+0x1d2>
 8004808:	0670      	lsls	r0, r6, #25
 800480a:	d5fb      	bpl.n	8004804 <_printf_i+0x1c8>
 800480c:	8019      	strh	r1, [r3, #0]
 800480e:	2300      	movs	r3, #0
 8004810:	6123      	str	r3, [r4, #16]
 8004812:	4615      	mov	r5, r2
 8004814:	e7ba      	b.n	800478c <_printf_i+0x150>
 8004816:	682b      	ldr	r3, [r5, #0]
 8004818:	1d1a      	adds	r2, r3, #4
 800481a:	602a      	str	r2, [r5, #0]
 800481c:	681d      	ldr	r5, [r3, #0]
 800481e:	6862      	ldr	r2, [r4, #4]
 8004820:	2100      	movs	r1, #0
 8004822:	4628      	mov	r0, r5
 8004824:	f7fb fcd4 	bl	80001d0 <memchr>
 8004828:	b108      	cbz	r0, 800482e <_printf_i+0x1f2>
 800482a:	1b40      	subs	r0, r0, r5
 800482c:	6060      	str	r0, [r4, #4]
 800482e:	6863      	ldr	r3, [r4, #4]
 8004830:	6123      	str	r3, [r4, #16]
 8004832:	2300      	movs	r3, #0
 8004834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004838:	e7a8      	b.n	800478c <_printf_i+0x150>
 800483a:	6923      	ldr	r3, [r4, #16]
 800483c:	462a      	mov	r2, r5
 800483e:	4649      	mov	r1, r9
 8004840:	4640      	mov	r0, r8
 8004842:	47d0      	blx	sl
 8004844:	3001      	adds	r0, #1
 8004846:	d0ab      	beq.n	80047a0 <_printf_i+0x164>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	079b      	lsls	r3, r3, #30
 800484c:	d413      	bmi.n	8004876 <_printf_i+0x23a>
 800484e:	68e0      	ldr	r0, [r4, #12]
 8004850:	9b03      	ldr	r3, [sp, #12]
 8004852:	4298      	cmp	r0, r3
 8004854:	bfb8      	it	lt
 8004856:	4618      	movlt	r0, r3
 8004858:	e7a4      	b.n	80047a4 <_printf_i+0x168>
 800485a:	2301      	movs	r3, #1
 800485c:	4632      	mov	r2, r6
 800485e:	4649      	mov	r1, r9
 8004860:	4640      	mov	r0, r8
 8004862:	47d0      	blx	sl
 8004864:	3001      	adds	r0, #1
 8004866:	d09b      	beq.n	80047a0 <_printf_i+0x164>
 8004868:	3501      	adds	r5, #1
 800486a:	68e3      	ldr	r3, [r4, #12]
 800486c:	9903      	ldr	r1, [sp, #12]
 800486e:	1a5b      	subs	r3, r3, r1
 8004870:	42ab      	cmp	r3, r5
 8004872:	dcf2      	bgt.n	800485a <_printf_i+0x21e>
 8004874:	e7eb      	b.n	800484e <_printf_i+0x212>
 8004876:	2500      	movs	r5, #0
 8004878:	f104 0619 	add.w	r6, r4, #25
 800487c:	e7f5      	b.n	800486a <_printf_i+0x22e>
 800487e:	bf00      	nop
 8004880:	08004ae9 	.word	0x08004ae9
 8004884:	08004afa 	.word	0x08004afa

08004888 <_read_r>:
 8004888:	b538      	push	{r3, r4, r5, lr}
 800488a:	4d07      	ldr	r5, [pc, #28]	; (80048a8 <_read_r+0x20>)
 800488c:	4604      	mov	r4, r0
 800488e:	4608      	mov	r0, r1
 8004890:	4611      	mov	r1, r2
 8004892:	2200      	movs	r2, #0
 8004894:	602a      	str	r2, [r5, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	f7fc f8d5 	bl	8000a46 <_read>
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	d102      	bne.n	80048a6 <_read_r+0x1e>
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	b103      	cbz	r3, 80048a6 <_read_r+0x1e>
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	bd38      	pop	{r3, r4, r5, pc}
 80048a8:	20004128 	.word	0x20004128

080048ac <_fstat_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4d07      	ldr	r5, [pc, #28]	; (80048cc <_fstat_r+0x20>)
 80048b0:	2300      	movs	r3, #0
 80048b2:	4604      	mov	r4, r0
 80048b4:	4608      	mov	r0, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	602b      	str	r3, [r5, #0]
 80048ba:	f7fc f909 	bl	8000ad0 <_fstat>
 80048be:	1c43      	adds	r3, r0, #1
 80048c0:	d102      	bne.n	80048c8 <_fstat_r+0x1c>
 80048c2:	682b      	ldr	r3, [r5, #0]
 80048c4:	b103      	cbz	r3, 80048c8 <_fstat_r+0x1c>
 80048c6:	6023      	str	r3, [r4, #0]
 80048c8:	bd38      	pop	{r3, r4, r5, pc}
 80048ca:	bf00      	nop
 80048cc:	20004128 	.word	0x20004128

080048d0 <_isatty_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	4d06      	ldr	r5, [pc, #24]	; (80048ec <_isatty_r+0x1c>)
 80048d4:	2300      	movs	r3, #0
 80048d6:	4604      	mov	r4, r0
 80048d8:	4608      	mov	r0, r1
 80048da:	602b      	str	r3, [r5, #0]
 80048dc:	f7fc f908 	bl	8000af0 <_isatty>
 80048e0:	1c43      	adds	r3, r0, #1
 80048e2:	d102      	bne.n	80048ea <_isatty_r+0x1a>
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	b103      	cbz	r3, 80048ea <_isatty_r+0x1a>
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	bd38      	pop	{r3, r4, r5, pc}
 80048ec:	20004128 	.word	0x20004128

080048f0 <memmove>:
 80048f0:	4288      	cmp	r0, r1
 80048f2:	b510      	push	{r4, lr}
 80048f4:	eb01 0402 	add.w	r4, r1, r2
 80048f8:	d902      	bls.n	8004900 <memmove+0x10>
 80048fa:	4284      	cmp	r4, r0
 80048fc:	4623      	mov	r3, r4
 80048fe:	d807      	bhi.n	8004910 <memmove+0x20>
 8004900:	1e43      	subs	r3, r0, #1
 8004902:	42a1      	cmp	r1, r4
 8004904:	d008      	beq.n	8004918 <memmove+0x28>
 8004906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800490a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800490e:	e7f8      	b.n	8004902 <memmove+0x12>
 8004910:	4402      	add	r2, r0
 8004912:	4601      	mov	r1, r0
 8004914:	428a      	cmp	r2, r1
 8004916:	d100      	bne.n	800491a <memmove+0x2a>
 8004918:	bd10      	pop	{r4, pc}
 800491a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800491e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004922:	e7f7      	b.n	8004914 <memmove+0x24>

08004924 <_realloc_r>:
 8004924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004928:	4680      	mov	r8, r0
 800492a:	4614      	mov	r4, r2
 800492c:	460e      	mov	r6, r1
 800492e:	b921      	cbnz	r1, 800493a <_realloc_r+0x16>
 8004930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004934:	4611      	mov	r1, r2
 8004936:	f7ff b87b 	b.w	8003a30 <_malloc_r>
 800493a:	b92a      	cbnz	r2, 8004948 <_realloc_r+0x24>
 800493c:	f7ff fc68 	bl	8004210 <_free_r>
 8004940:	4625      	mov	r5, r4
 8004942:	4628      	mov	r0, r5
 8004944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004948:	f000 f81b 	bl	8004982 <_malloc_usable_size_r>
 800494c:	4284      	cmp	r4, r0
 800494e:	4607      	mov	r7, r0
 8004950:	d802      	bhi.n	8004958 <_realloc_r+0x34>
 8004952:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004956:	d812      	bhi.n	800497e <_realloc_r+0x5a>
 8004958:	4621      	mov	r1, r4
 800495a:	4640      	mov	r0, r8
 800495c:	f7ff f868 	bl	8003a30 <_malloc_r>
 8004960:	4605      	mov	r5, r0
 8004962:	2800      	cmp	r0, #0
 8004964:	d0ed      	beq.n	8004942 <_realloc_r+0x1e>
 8004966:	42bc      	cmp	r4, r7
 8004968:	4622      	mov	r2, r4
 800496a:	4631      	mov	r1, r6
 800496c:	bf28      	it	cs
 800496e:	463a      	movcs	r2, r7
 8004970:	f7ff f827 	bl	80039c2 <memcpy>
 8004974:	4631      	mov	r1, r6
 8004976:	4640      	mov	r0, r8
 8004978:	f7ff fc4a 	bl	8004210 <_free_r>
 800497c:	e7e1      	b.n	8004942 <_realloc_r+0x1e>
 800497e:	4635      	mov	r5, r6
 8004980:	e7df      	b.n	8004942 <_realloc_r+0x1e>

08004982 <_malloc_usable_size_r>:
 8004982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004986:	1f18      	subs	r0, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	bfbc      	itt	lt
 800498c:	580b      	ldrlt	r3, [r1, r0]
 800498e:	18c0      	addlt	r0, r0, r3
 8004990:	4770      	bx	lr
	...

08004994 <_init>:
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004996:	bf00      	nop
 8004998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499a:	bc08      	pop	{r3}
 800499c:	469e      	mov	lr, r3
 800499e:	4770      	bx	lr

080049a0 <_fini>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	bf00      	nop
 80049a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a6:	bc08      	pop	{r3}
 80049a8:	469e      	mov	lr, r3
 80049aa:	4770      	bx	lr
