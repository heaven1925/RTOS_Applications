
006_RTOS_TaskDelete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08006bb4  08006bb4  00016bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d40  08006d40  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006d40  08006d40  00016d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d48  08006d48  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d48  08006d48  00016d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d4c  08006d4c  00016d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00006960  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200069d4  200069d4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011860  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b4a  00000000  00000000  00031904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00034450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d68  00000000  00000000  00035310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002427c  00000000  00000000  00036078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000111b3  00000000  00000000  0005a2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5f89  00000000  00000000  0006b4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141430  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004314  00000000  00000000  00141480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b9c 	.word	0x08006b9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006b9c 	.word	0x08006b9c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000090 	.word	0x20000090
 8000504:	200000e4 	.word	0x200000e4

08000508 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000510:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000514:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	2b00      	cmp	r3, #0
 800051e:	d013      	beq.n	8000548 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000524:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000528:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800052c:	2b00      	cmp	r3, #0
 800052e:	d00b      	beq.n	8000548 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000530:	e000      	b.n	8000534 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000532:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000534:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f9      	beq.n	8000532 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800053e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000548:	687b      	ldr	r3, [r7, #4]
}
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	b086      	sub	sp, #24
 800055a:	af00      	add	r7, sp, #0
 800055c:	60f8      	str	r0, [r7, #12]
 800055e:	60b9      	str	r1, [r7, #8]
 8000560:	607a      	str	r2, [r7, #4]

	for (int i = 0; i < len; i++)
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	e009      	b.n	800057c <_write+0x26>
	{
		ITM_SendChar((*ptr++));
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	60ba      	str	r2, [r7, #8]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff ffc9 	bl	8000508 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	3301      	adds	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	429a      	cmp	r2, r3
 8000582:	dbf1      	blt.n	8000568 <_write+0x12>
	}
	return len;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <freeRTOS_delay>:

void freeRTOS_delay(uint32_t delayMS)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	uint32_t currentTick = xTaskGetTickCount();
 8000598:	f003 fa32 	bl	8003a00 <xTaskGetTickCount>
 800059c:	60f8      	str	r0, [r7, #12]
	uint32_t delayTick 	= pdMS_TO_TICKS(delayMS);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005a4:	fb02 f303 	mul.w	r3, r2, r3
 80005a8:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <freeRTOS_delay+0x40>)
 80005aa:	fba2 2303 	umull	r2, r3, r2, r3
 80005ae:	099b      	lsrs	r3, r3, #6
 80005b0:	60bb      	str	r3, [r7, #8]

	while( xTaskGetTickCount() < (currentTick + delayTick));
 80005b2:	bf00      	nop
 80005b4:	f003 fa24 	bl	8003a00 <xTaskGetTickCount>
 80005b8:	4601      	mov	r1, r0
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	4413      	add	r3, r2
 80005c0:	4299      	cmp	r1, r3
 80005c2:	d3f7      	bcc.n	80005b4 <freeRTOS_delay+0x24>
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	10624dd3 	.word	0x10624dd3

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  DWT->CTRL |= ( 1 << 0 );
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <main+0x60>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a15      	ldr	r2, [pc, #84]	; (8000634 <main+0x60>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 fb01 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f833 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 f89b 	bl	8000728 <MX_GPIO_Init>
  //MX_I2S3_Init();
  //MX_SPI1_Init();
  //MX_USB_OTG_FS_HCD_Init();
  /* USER CODE BEGIN 2 */

  	SEGGER_SYSVIEW_Conf();
 80005f2:	f004 f8e9 	bl	80047c8 <SEGGER_SYSVIEW_Conf>
  	vSetVarulMaxPRIGROUPValuE();
 80005f6:	f003 fe97 	bl	8004328 <vSetVarulMaxPRIGROUPValuE>
  	SEGGER_SYSVIEW_Start();
 80005fa:	f005 f809 	bl	8005610 <SEGGER_SYSVIEW_Start>
  //defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  		printf("Starting RTOS Project. \n");
 80005fe:	480e      	ldr	r0, [pc, #56]	; (8000638 <main+0x64>)
 8000600:	f005 fe3c 	bl	800627c <puts>

  		xTaskCreate(Task1_Handler, "Task1", configMINIMAL_STACK_SIZE, NULL, 4,
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <main+0x68>)
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	2304      	movs	r3, #4
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2300      	movs	r3, #0
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	490b      	ldr	r1, [pc, #44]	; (8000640 <main+0x6c>)
 8000612:	480c      	ldr	r0, [pc, #48]	; (8000644 <main+0x70>)
 8000614:	f002 fed8 	bl	80033c8 <xTaskCreate>
  				&myTaskHandle1);

  		// GÖREV 2'nin önceligi daha yuksek olacak

  		xTaskCreate(Task2_Handler, "Task2", configMINIMAL_STACK_SIZE, NULL, 3,
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <main+0x74>)
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	2303      	movs	r3, #3
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2300      	movs	r3, #0
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	4909      	ldr	r1, [pc, #36]	; (800064c <main+0x78>)
 8000626:	480a      	ldr	r0, [pc, #40]	; (8000650 <main+0x7c>)
 8000628:	f002 fece 	bl	80033c8 <xTaskCreate>
  				&myTaskHandle2);

  		vTaskStartScheduler();
 800062c:	f003 f8ca 	bl	80037c4 <vTaskStartScheduler>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x5c>
 8000632:	bf00      	nop
 8000634:	e0001000 	.word	0xe0001000
 8000638:	08006bb4 	.word	0x08006bb4
 800063c:	200005e8 	.word	0x200005e8
 8000640:	08006bcc 	.word	0x08006bcc
 8000644:	08000925 	.word	0x08000925
 8000648:	200005ec 	.word	0x200005ec
 800064c:	08006bd4 	.word	0x08006bd4
 8000650:	08000979 	.word	0x08000979

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f005 fd94 	bl	8006190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a27      	ldr	r2, [pc, #156]	; (8000720 <SystemClock_Config+0xcc>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b25      	ldr	r3, [pc, #148]	; (8000720 <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a21      	ldr	r2, [pc, #132]	; (8000724 <SystemClock_Config+0xd0>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006c8:	2360      	movs	r3, #96	; 0x60
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80006cc:	2306      	movs	r3, #6
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 ff15 	bl	8002508 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e4:	f000 f95e 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2302      	movs	r3, #2
 80006ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f002 f976 	bl	80029f8 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000712:	f000 f947 	bl	80009a4 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	; 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	4b72      	ldr	r3, [pc, #456]	; (800090c <MX_GPIO_Init+0x1e4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a71      	ldr	r2, [pc, #452]	; (800090c <MX_GPIO_Init+0x1e4>)
 8000748:	f043 0310 	orr.w	r3, r3, #16
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b6f      	ldr	r3, [pc, #444]	; (800090c <MX_GPIO_Init+0x1e4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0310 	and.w	r3, r3, #16
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	4b6b      	ldr	r3, [pc, #428]	; (800090c <MX_GPIO_Init+0x1e4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a6a      	ldr	r2, [pc, #424]	; (800090c <MX_GPIO_Init+0x1e4>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b68      	ldr	r3, [pc, #416]	; (800090c <MX_GPIO_Init+0x1e4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b64      	ldr	r3, [pc, #400]	; (800090c <MX_GPIO_Init+0x1e4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a63      	ldr	r2, [pc, #396]	; (800090c <MX_GPIO_Init+0x1e4>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b61      	ldr	r3, [pc, #388]	; (800090c <MX_GPIO_Init+0x1e4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b5d      	ldr	r3, [pc, #372]	; (800090c <MX_GPIO_Init+0x1e4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a5c      	ldr	r2, [pc, #368]	; (800090c <MX_GPIO_Init+0x1e4>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b5a      	ldr	r3, [pc, #360]	; (800090c <MX_GPIO_Init+0x1e4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b56      	ldr	r3, [pc, #344]	; (800090c <MX_GPIO_Init+0x1e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a55      	ldr	r2, [pc, #340]	; (800090c <MX_GPIO_Init+0x1e4>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b53      	ldr	r3, [pc, #332]	; (800090c <MX_GPIO_Init+0x1e4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b4f      	ldr	r3, [pc, #316]	; (800090c <MX_GPIO_Init+0x1e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a4e      	ldr	r2, [pc, #312]	; (800090c <MX_GPIO_Init+0x1e4>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b4c      	ldr	r3, [pc, #304]	; (800090c <MX_GPIO_Init+0x1e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2108      	movs	r1, #8
 80007ea:	4849      	ldr	r0, [pc, #292]	; (8000910 <MX_GPIO_Init+0x1e8>)
 80007ec:	f000 fd0a 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2101      	movs	r1, #1
 80007f4:	4847      	ldr	r0, [pc, #284]	; (8000914 <MX_GPIO_Init+0x1ec>)
 80007f6:	f000 fd05 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007fa:	2200      	movs	r2, #0
 80007fc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000800:	4845      	ldr	r0, [pc, #276]	; (8000918 <MX_GPIO_Init+0x1f0>)
 8000802:	f000 fcff 	bl	8001204 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000806:	2308      	movs	r3, #8
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	483c      	ldr	r0, [pc, #240]	; (8000910 <MX_GPIO_Init+0x1e8>)
 800081e:	f000 fb3d 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000822:	2301      	movs	r3, #1
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4836      	ldr	r0, [pc, #216]	; (8000914 <MX_GPIO_Init+0x1ec>)
 800083a:	f000 fb2f 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800083e:	2308      	movs	r3, #8
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084e:	2305      	movs	r3, #5
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	482e      	ldr	r0, [pc, #184]	; (8000914 <MX_GPIO_Init+0x1ec>)
 800085a:	f000 fb1f 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085e:	2301      	movs	r3, #1
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000862:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	482a      	ldr	r0, [pc, #168]	; (800091c <MX_GPIO_Init+0x1f4>)
 8000874:	f000 fb12 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000878:	2304      	movs	r3, #4
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4825      	ldr	r0, [pc, #148]	; (8000920 <MX_GPIO_Init+0x1f8>)
 800088c:	f000 fb06 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a2:	2305      	movs	r3, #5
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	481c      	ldr	r0, [pc, #112]	; (8000920 <MX_GPIO_Init+0x1f8>)
 80008ae:	f000 faf5 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008b6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4813      	ldr	r0, [pc, #76]	; (8000918 <MX_GPIO_Init+0x1f0>)
 80008cc:	f000 fae6 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008d0:	2320      	movs	r3, #32
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_GPIO_Init+0x1f0>)
 80008e4:	f000 fada 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008e8:	2302      	movs	r3, #2
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_GPIO_Init+0x1e8>)
 80008fe:	f000 facd 	bl	8000e9c <HAL_GPIO_Init>

}
 8000902:	bf00      	nop
 8000904:	3730      	adds	r7, #48	; 0x30
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40021000 	.word	0x40021000
 8000914:	40020800 	.word	0x40020800
 8000918:	40020c00 	.word	0x40020c00
 800091c:	40020000 	.word	0x40020000
 8000920:	40020400 	.word	0x40020400

08000924 <Task1_Handler>:

/* USER CODE BEGIN 4 */

void Task1_Handler(void *params)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800092c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <Task1_Handler+0x44>)
 8000932:	f000 fc80 	bl	8001236 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000936:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800093a:	480b      	ldr	r0, [pc, #44]	; (8000968 <Task1_Handler+0x44>)
 800093c:	f000 fc7b 	bl	8001236 <HAL_GPIO_TogglePin>
		printf("TASK 1. \n");
 8000940:	480a      	ldr	r0, [pc, #40]	; (800096c <Task1_Handler+0x48>)
 8000942:	f005 fc9b 	bl	800627c <puts>
		freeRTOS_delay(1000);
 8000946:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800094a:	f7ff fe21 	bl	8000590 <freeRTOS_delay>

		if( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 800094e:	2101      	movs	r1, #1
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <Task1_Handler+0x4c>)
 8000952:	f000 fc3f 	bl	80011d4 <HAL_GPIO_ReadPin>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d0e7      	beq.n	800092c <Task1_Handler+0x8>
		{
			vTaskDelete(myTaskHandle1);
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <Task1_Handler+0x50>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f002 fe85 	bl	8003670 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000966:	e7e1      	b.n	800092c <Task1_Handler+0x8>
 8000968:	40020c00 	.word	0x40020c00
 800096c:	08006bdc 	.word	0x08006bdc
 8000970:	40020000 	.word	0x40020000
 8000974:	200005e8 	.word	0x200005e8

08000978 <Task2_Handler>:
}



void Task2_Handler(void *params)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]

	while(1)
	{

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000980:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000984:	4805      	ldr	r0, [pc, #20]	; (800099c <Task2_Handler+0x24>)
 8000986:	f000 fc56 	bl	8001236 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800098a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800098e:	4803      	ldr	r0, [pc, #12]	; (800099c <Task2_Handler+0x24>)
 8000990:	f000 fc51 	bl	8001236 <HAL_GPIO_TogglePin>
		printf("TASK 2. \n");
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <Task2_Handler+0x28>)
 8000996:	f005 fc71 	bl	800627c <puts>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800099a:	e7f1      	b.n	8000980 <Task2_Handler+0x8>
 800099c:	40020c00 	.word	0x40020c00
 80009a0:	08006be8 	.word	0x08006be8

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_MspInit+0x54>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <HAL_MspInit+0x54>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_MspInit+0x54>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <HAL_MspInit+0x54>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <HAL_MspInit+0x54>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_MspInit+0x54>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	210f      	movs	r1, #15
 80009f2:	f06f 0001 	mvn.w	r0, #1
 80009f6:	f000 fa28 	bl	8000e4a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a38:	f000 f92a 	bl	8000c90 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a3c:	f003 f9fe 	bl	8003e3c <xTaskGetSchedulerState>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d001      	beq.n	8000a4a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a46:	f003 fbd7 	bl	80041f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <OTG_FS_IRQHandler+0x10>)
 8000a56:	f000 fc08 	bl	800126a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200002e4 	.word	0x200002e4

08000a64 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	e00a      	b.n	8000a8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a76:	f3af 8000 	nop.w
 8000a7a:	4601      	mov	r1, r0
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	1c5a      	adds	r2, r3, #1
 8000a80:	60ba      	str	r2, [r7, #8]
 8000a82:	b2ca      	uxtb	r2, r1
 8000a84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dbf0      	blt.n	8000a76 <_read+0x12>
	}

return len;
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_close>:


int _close(int file)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
	return -1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_isatty>:

int _isatty(int file)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
	return 0;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d207      	bcs.n	8000b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b38:	f005 fae2 	bl	8006100 <__errno>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	220c      	movs	r2, #12
 8000b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e009      	b.n	8000b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <_sbrk+0x64>)
 8000b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20020000 	.word	0x20020000
 8000b68:	00000400 	.word	0x00000400
 8000b6c:	200005f0 	.word	0x200005f0
 8000b70:	200069d8 	.word	0x200069d8

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b9e:	490e      	ldr	r1, [pc, #56]	; (8000bd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba0:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb4:	4c0b      	ldr	r4, [pc, #44]	; (8000be4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc2:	f7ff ffd7 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f005 faa1 	bl	800610c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f7ff fd03 	bl	80005d4 <main>
  bx  lr    
 8000bce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bdc:	08006d50 	.word	0x08006d50
  ldr r2, =_sbss
 8000be0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000be4:	200069d4 	.word	0x200069d4

08000be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_Init+0x40>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_Init+0x40>)
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_Init+0x40>)
 8000c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f90d 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f000 f808 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fec6 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023c00 	.word	0x40023c00

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x54>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x58>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f917 	bl	8000e82 <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00e      	b.n	8000c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d80a      	bhi.n	8000c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f000 f8ed 	bl	8000e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <HAL_InitTick+0x5c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e000      	b.n	8000c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	200005f4 	.word	0x200005f4

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	200005f4 	.word	0x200005f4

08000cd0 <__NVIC_SetPriorityGrouping>:
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_SetPriority>:
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <SysTick_Config>:
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e00:	d301      	bcc.n	8000e06 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00f      	b.n	8000e26 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <SysTick_Config+0x40>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0e:	210f      	movs	r1, #15
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f7ff ff8e 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <SysTick_Config+0x40>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1e:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <SysTick_Config+0x40>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	e000e010 	.word	0xe000e010

08000e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff47 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5c:	f7ff ff5c 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	6978      	ldr	r0, [r7, #20]
 8000e68:	f7ff ff8e 	bl	8000d88 <NVIC_EncodePriority>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff5d 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffb0 	bl	8000df0 <SysTick_Config>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	e16b      	b.n	8001190 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	f040 815a 	bne.w	800118a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d005      	beq.n	8000eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d130      	bne.n	8000f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f24:	2201      	movs	r2, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	091b      	lsrs	r3, r3, #4
 8000f3a:	f003 0201 	and.w	r2, r3, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d017      	beq.n	8000f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d123      	bne.n	8000fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3208      	adds	r2, #8
 8000fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	691a      	ldr	r2, [r3, #16]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	69b9      	ldr	r1, [r7, #24]
 8000fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0203 	and.w	r2, r3, #3
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 80b4 	beq.w	800118a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b60      	ldr	r3, [pc, #384]	; (80011a8 <HAL_GPIO_Init+0x30c>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a5f      	ldr	r2, [pc, #380]	; (80011a8 <HAL_GPIO_Init+0x30c>)
 800102c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b5d      	ldr	r3, [pc, #372]	; (80011a8 <HAL_GPIO_Init+0x30c>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103e:	4a5b      	ldr	r2, [pc, #364]	; (80011ac <HAL_GPIO_Init+0x310>)
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3302      	adds	r3, #2
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a52      	ldr	r2, [pc, #328]	; (80011b0 <HAL_GPIO_Init+0x314>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d02b      	beq.n	80010c2 <HAL_GPIO_Init+0x226>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a51      	ldr	r2, [pc, #324]	; (80011b4 <HAL_GPIO_Init+0x318>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d025      	beq.n	80010be <HAL_GPIO_Init+0x222>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a50      	ldr	r2, [pc, #320]	; (80011b8 <HAL_GPIO_Init+0x31c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d01f      	beq.n	80010ba <HAL_GPIO_Init+0x21e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4f      	ldr	r2, [pc, #316]	; (80011bc <HAL_GPIO_Init+0x320>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d019      	beq.n	80010b6 <HAL_GPIO_Init+0x21a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4e      	ldr	r2, [pc, #312]	; (80011c0 <HAL_GPIO_Init+0x324>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0x216>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4d      	ldr	r2, [pc, #308]	; (80011c4 <HAL_GPIO_Init+0x328>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00d      	beq.n	80010ae <HAL_GPIO_Init+0x212>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4c      	ldr	r2, [pc, #304]	; (80011c8 <HAL_GPIO_Init+0x32c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x20e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4b      	ldr	r2, [pc, #300]	; (80011cc <HAL_GPIO_Init+0x330>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_GPIO_Init+0x20a>
 80010a2:	2307      	movs	r3, #7
 80010a4:	e00e      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010a6:	2308      	movs	r3, #8
 80010a8:	e00c      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010aa:	2306      	movs	r3, #6
 80010ac:	e00a      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010ae:	2305      	movs	r3, #5
 80010b0:	e008      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010b2:	2304      	movs	r3, #4
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010b6:	2303      	movs	r3, #3
 80010b8:	e004      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010c2:	2300      	movs	r3, #0
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	f002 0203 	and.w	r2, r2, #3
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	4093      	lsls	r3, r2
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d4:	4935      	ldr	r1, [pc, #212]	; (80011ac <HAL_GPIO_Init+0x310>)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e2:	4b3b      	ldr	r3, [pc, #236]	; (80011d0 <HAL_GPIO_Init+0x334>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001106:	4a32      	ldr	r2, [pc, #200]	; (80011d0 <HAL_GPIO_Init+0x334>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800110c:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <HAL_GPIO_Init+0x334>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001130:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <HAL_GPIO_Init+0x334>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001136:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <HAL_GPIO_Init+0x334>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800115a:	4a1d      	ldr	r2, [pc, #116]	; (80011d0 <HAL_GPIO_Init+0x334>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <HAL_GPIO_Init+0x334>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001184:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <HAL_GPIO_Init+0x334>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3301      	adds	r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	2b0f      	cmp	r3, #15
 8001194:	f67f ae90 	bls.w	8000eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40013800 	.word	0x40013800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40021400 	.word	0x40021400
 80011c8:	40021800 	.word	0x40021800
 80011cc:	40021c00 	.word	0x40021c00
 80011d0:	40013c00 	.word	0x40013c00

080011d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	691a      	ldr	r2, [r3, #16]
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
 80011f0:	e001      	b.n	80011f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
 8001210:	4613      	mov	r3, r2
 8001212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001214:	787b      	ldrb	r3, [r7, #1]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001220:	e003      	b.n	800122a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	041a      	lsls	r2, r3, #16
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	619a      	str	r2, [r3, #24]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001236:	b480      	push	{r7}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001248:	887a      	ldrh	r2, [r7, #2]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4013      	ands	r3, r2
 800124e:	041a      	lsls	r2, r3, #16
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43d9      	mvns	r1, r3
 8001254:	887b      	ldrh	r3, [r7, #2]
 8001256:	400b      	ands	r3, r1
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	619a      	str	r2, [r3, #24]
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f001 fe74 	bl	8002f6e <USB_GetMode>
 8001286:	4603      	mov	r3, r0
 8001288:	2b01      	cmp	r3, #1
 800128a:	f040 80f6 	bne.w	800147a <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f001 fe58 	bl	8002f48 <USB_ReadInterrupts>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 80ec 	beq.w	8001478 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 fe4f 	bl	8002f48 <USB_ReadInterrupts>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80012b4:	d104      	bne.n	80012c0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80012be:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 fe3f 	bl	8002f48 <USB_ReadInterrupts>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80012d4:	d104      	bne.n	80012e0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012de:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fe2f 	bl	8002f48 <USB_ReadInterrupts>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80012f4:	d104      	bne.n	8001300 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012fe:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f001 fe1f 	bl	8002f48 <USB_ReadInterrupts>
 800130a:	4603      	mov	r3, r0
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b02      	cmp	r3, #2
 8001312:	d103      	bne.n	800131c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2202      	movs	r2, #2
 800131a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f001 fe11 	bl	8002f48 <USB_ReadInterrupts>
 8001326:	4603      	mov	r3, r0
 8001328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800132c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001330:	d11c      	bne.n	800136c <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800133a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10f      	bne.n	800136c <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800134c:	2110      	movs	r1, #16
 800134e:	6938      	ldr	r0, [r7, #16]
 8001350:	f001 fd3e 	bl	8002dd0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001354:	6938      	ldr	r0, [r7, #16]
 8001356:	f001 fd6f 	bl	8002e38 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2101      	movs	r1, #1
 8001360:	4618      	mov	r0, r3
 8001362:	f001 fe12 	bl	8002f8a <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f89e 	bl	80014a8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f001 fde9 	bl	8002f48 <USB_ReadInterrupts>
 8001376:	4603      	mov	r3, r0
 8001378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001380:	d102      	bne.n	8001388 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f001 f84c 	bl	8002420 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f001 fddb 	bl	8002f48 <USB_ReadInterrupts>
 8001392:	4603      	mov	r3, r0
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b08      	cmp	r3, #8
 800139a:	d106      	bne.n	80013aa <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f86f 	bl	8001480 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2208      	movs	r2, #8
 80013a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 fdca 	bl	8002f48 <USB_ReadInterrupts>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f003 0310 	and.w	r3, r3, #16
 80013ba:	2b10      	cmp	r3, #16
 80013bc:	d101      	bne.n	80013c2 <HAL_HCD_IRQHandler+0x158>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_HCD_IRQHandler+0x15a>
 80013c2:	2300      	movs	r3, #0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d012      	beq.n	80013ee <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	699a      	ldr	r2, [r3, #24]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0210 	bic.w	r2, r2, #16
 80013d6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 ff4f 	bl	800227c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	699a      	ldr	r2, [r3, #24]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 0210 	orr.w	r2, r2, #16
 80013ec:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 fda8 	bl	8002f48 <USB_ReadInterrupts>
 80013f8:	4603      	mov	r3, r0
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001402:	d13a      	bne.n	800147a <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f001 fdf8 	bl	8002ffe <USB_HC_ReadInterrupt>
 800140e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e025      	b.n	8001462 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	fa22 f303 	lsr.w	r3, r2, r3
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d018      	beq.n	800145c <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	015a      	lsls	r2, r3, #5
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800143c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001440:	d106      	bne.n	8001450 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4619      	mov	r1, r3
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f859 	bl	8001500 <HCD_HC_IN_IRQHandler>
 800144e:	e005      	b.n	800145c <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	4619      	mov	r1, r3
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 fba7 	bl	8001baa <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	3301      	adds	r3, #1
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	429a      	cmp	r2, r3
 800146a:	d3d4      	bcc.n	8001416 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001474:	615a      	str	r2, [r3, #20]
 8001476:	e000      	b.n	800147a <HAL_HCD_IRQHandler+0x210>
      return;
 8001478:	bf00      	nop
    }
  }
}
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70fb      	strb	r3, [r7, #3]
 80014f0:	4613      	mov	r3, r2
 80014f2:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	015a      	lsls	r2, r3, #5
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4413      	add	r3, r2
 8001522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b04      	cmp	r3, #4
 800152e:	d11a      	bne.n	8001566 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	015a      	lsls	r2, r3, #5
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4413      	add	r3, r2
 8001538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800153c:	461a      	mov	r2, r3
 800153e:	2304      	movs	r3, #4
 8001540:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	212c      	movs	r1, #44	; 0x2c
 8001548:	fb01 f303 	mul.w	r3, r1, r3
 800154c:	4413      	add	r3, r2
 800154e:	3361      	adds	r3, #97	; 0x61
 8001550:	2206      	movs	r2, #6
 8001552:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f001 fd5e 	bl	8003020 <USB_HC_Halt>
 8001564:	e0af      	b.n	80016c6 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	015a      	lsls	r2, r3, #5
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4413      	add	r3, r2
 800156e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800157c:	d11b      	bne.n	80015b6 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	015a      	lsls	r2, r3, #5
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4413      	add	r3, r2
 8001586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800158a:	461a      	mov	r2, r3
 800158c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001590:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	212c      	movs	r1, #44	; 0x2c
 8001598:	fb01 f303 	mul.w	r3, r1, r3
 800159c:	4413      	add	r3, r2
 800159e:	3361      	adds	r3, #97	; 0x61
 80015a0:	2207      	movs	r2, #7
 80015a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 fd36 	bl	8003020 <USB_HC_Halt>
 80015b4:	e087      	b.n	80016c6 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	015a      	lsls	r2, r3, #5
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4413      	add	r3, r2
 80015be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	2b20      	cmp	r3, #32
 80015ca:	d109      	bne.n	80015e0 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	015a      	lsls	r2, r3, #5
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4413      	add	r3, r2
 80015d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015d8:	461a      	mov	r2, r3
 80015da:	2320      	movs	r3, #32
 80015dc:	6093      	str	r3, [r2, #8]
 80015de:	e072      	b.n	80016c6 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	015a      	lsls	r2, r3, #5
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d11a      	bne.n	800162c <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	015a      	lsls	r2, r3, #5
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4413      	add	r3, r2
 80015fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001602:	461a      	mov	r2, r3
 8001604:	2308      	movs	r3, #8
 8001606:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	212c      	movs	r1, #44	; 0x2c
 800160e:	fb01 f303 	mul.w	r3, r1, r3
 8001612:	4413      	add	r3, r2
 8001614:	3361      	adds	r3, #97	; 0x61
 8001616:	2205      	movs	r2, #5
 8001618:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f001 fcfb 	bl	8003020 <USB_HC_Halt>
 800162a:	e04c      	b.n	80016c6 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	015a      	lsls	r2, r3, #5
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4413      	add	r3, r2
 8001634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001642:	d11b      	bne.n	800167c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	015a      	lsls	r2, r3, #5
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4413      	add	r3, r2
 800164c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001650:	461a      	mov	r2, r3
 8001652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001656:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	212c      	movs	r1, #44	; 0x2c
 800165e:	fb01 f303 	mul.w	r3, r1, r3
 8001662:	4413      	add	r3, r2
 8001664:	3361      	adds	r3, #97	; 0x61
 8001666:	2208      	movs	r2, #8
 8001668:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f001 fcd3 	bl	8003020 <USB_HC_Halt>
 800167a:	e024      	b.n	80016c6 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	015a      	lsls	r2, r3, #5
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4413      	add	r3, r2
 8001684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168e:	2b80      	cmp	r3, #128	; 0x80
 8001690:	d119      	bne.n	80016c6 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	015a      	lsls	r2, r3, #5
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4413      	add	r3, r2
 800169a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800169e:	461a      	mov	r2, r3
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	212c      	movs	r1, #44	; 0x2c
 80016aa:	fb01 f303 	mul.w	r3, r1, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	3361      	adds	r3, #97	; 0x61
 80016b2:	2206      	movs	r2, #6
 80016b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 fcad 	bl	8003020 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	015a      	lsls	r2, r3, #5
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4413      	add	r3, r2
 80016ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016dc:	d112      	bne.n	8001704 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 fc99 	bl	8003020 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	015a      	lsls	r2, r3, #5
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016fa:	461a      	mov	r2, r3
 80016fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001700:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001702:	e24e      	b.n	8001ba2 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	015a      	lsls	r2, r3, #5
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4413      	add	r3, r2
 800170c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b01      	cmp	r3, #1
 8001718:	f040 80df 	bne.w	80018da <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d019      	beq.n	8001758 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	212c      	movs	r1, #44	; 0x2c
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	3348      	adds	r3, #72	; 0x48
 8001732:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	0159      	lsls	r1, r3, #5
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	440b      	add	r3, r1
 800173c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001746:	1ad2      	subs	r2, r2, r3
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	202c      	movs	r0, #44	; 0x2c
 800174e:	fb00 f303 	mul.w	r3, r0, r3
 8001752:	440b      	add	r3, r1
 8001754:	3350      	adds	r3, #80	; 0x50
 8001756:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	212c      	movs	r1, #44	; 0x2c
 800175e:	fb01 f303 	mul.w	r3, r1, r3
 8001762:	4413      	add	r3, r2
 8001764:	3361      	adds	r3, #97	; 0x61
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	212c      	movs	r1, #44	; 0x2c
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	4413      	add	r3, r2
 8001776:	335c      	adds	r3, #92	; 0x5c
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	015a      	lsls	r2, r3, #5
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4413      	add	r3, r2
 8001784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001788:	461a      	mov	r2, r3
 800178a:	2301      	movs	r3, #1
 800178c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	212c      	movs	r1, #44	; 0x2c
 8001794:	fb01 f303 	mul.w	r3, r1, r3
 8001798:	4413      	add	r3, r2
 800179a:	333f      	adds	r3, #63	; 0x3f
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d009      	beq.n	80017b6 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	212c      	movs	r1, #44	; 0x2c
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	333f      	adds	r3, #63	; 0x3f
 80017b0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d111      	bne.n	80017da <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f001 fc2d 	bl	8003020 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	015a      	lsls	r2, r3, #5
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017d2:	461a      	mov	r2, r3
 80017d4:	2310      	movs	r3, #16
 80017d6:	6093      	str	r3, [r2, #8]
 80017d8:	e03a      	b.n	8001850 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	212c      	movs	r1, #44	; 0x2c
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	333f      	adds	r3, #63	; 0x3f
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d009      	beq.n	8001802 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	212c      	movs	r1, #44	; 0x2c
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	333f      	adds	r3, #63	; 0x3f
 80017fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d126      	bne.n	8001850 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	015a      	lsls	r2, r3, #5
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4413      	add	r3, r2
 800180a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	0151      	lsls	r1, r2, #5
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	440a      	add	r2, r1
 8001818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800181c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001820:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	212c      	movs	r1, #44	; 0x2c
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	4413      	add	r3, r2
 800182e:	3360      	adds	r3, #96	; 0x60
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	b2d9      	uxtb	r1, r3
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	202c      	movs	r0, #44	; 0x2c
 800183e:	fb00 f303 	mul.w	r3, r0, r3
 8001842:	4413      	add	r3, r2
 8001844:	3360      	adds	r3, #96	; 0x60
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff fe4a 	bl	80014e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d12b      	bne.n	80018b0 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	212c      	movs	r1, #44	; 0x2c
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	4413      	add	r3, r2
 8001864:	3348      	adds	r3, #72	; 0x48
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	202c      	movs	r0, #44	; 0x2c
 800186e:	fb00 f202 	mul.w	r2, r0, r2
 8001872:	440a      	add	r2, r1
 8001874:	3240      	adds	r2, #64	; 0x40
 8001876:	8812      	ldrh	r2, [r2, #0]
 8001878:	fbb3 f3f2 	udiv	r3, r3, r2
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 818e 	beq.w	8001ba2 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	212c      	movs	r1, #44	; 0x2c
 800188c:	fb01 f303 	mul.w	r3, r1, r3
 8001890:	4413      	add	r3, r2
 8001892:	3354      	adds	r3, #84	; 0x54
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	f083 0301 	eor.w	r3, r3, #1
 800189a:	b2d8      	uxtb	r0, r3
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	212c      	movs	r1, #44	; 0x2c
 80018a2:	fb01 f303 	mul.w	r3, r1, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	3354      	adds	r3, #84	; 0x54
 80018aa:	4602      	mov	r2, r0
 80018ac:	701a      	strb	r2, [r3, #0]
}
 80018ae:	e178      	b.n	8001ba2 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	212c      	movs	r1, #44	; 0x2c
 80018b6:	fb01 f303 	mul.w	r3, r1, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	3354      	adds	r3, #84	; 0x54
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	f083 0301 	eor.w	r3, r3, #1
 80018c4:	b2d8      	uxtb	r0, r3
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	212c      	movs	r1, #44	; 0x2c
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	3354      	adds	r3, #84	; 0x54
 80018d4:	4602      	mov	r2, r0
 80018d6:	701a      	strb	r2, [r3, #0]
}
 80018d8:	e163      	b.n	8001ba2 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	f040 80f6 	bne.w	8001ade <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	212c      	movs	r1, #44	; 0x2c
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	3361      	adds	r3, #97	; 0x61
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d109      	bne.n	800191a <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	212c      	movs	r1, #44	; 0x2c
 800190c:	fb01 f303 	mul.w	r3, r1, r3
 8001910:	4413      	add	r3, r2
 8001912:	3360      	adds	r3, #96	; 0x60
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
 8001918:	e0c9      	b.n	8001aae <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	212c      	movs	r1, #44	; 0x2c
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	4413      	add	r3, r2
 8001926:	3361      	adds	r3, #97	; 0x61
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b05      	cmp	r3, #5
 800192c:	d109      	bne.n	8001942 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	212c      	movs	r1, #44	; 0x2c
 8001934:	fb01 f303 	mul.w	r3, r1, r3
 8001938:	4413      	add	r3, r2
 800193a:	3360      	adds	r3, #96	; 0x60
 800193c:	2205      	movs	r2, #5
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e0b5      	b.n	8001aae <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	212c      	movs	r1, #44	; 0x2c
 8001948:	fb01 f303 	mul.w	r3, r1, r3
 800194c:	4413      	add	r3, r2
 800194e:	3361      	adds	r3, #97	; 0x61
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b06      	cmp	r3, #6
 8001954:	d009      	beq.n	800196a <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	212c      	movs	r1, #44	; 0x2c
 800195c:	fb01 f303 	mul.w	r3, r1, r3
 8001960:	4413      	add	r3, r2
 8001962:	3361      	adds	r3, #97	; 0x61
 8001964:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001966:	2b08      	cmp	r3, #8
 8001968:	d150      	bne.n	8001a0c <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	212c      	movs	r1, #44	; 0x2c
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	4413      	add	r3, r2
 8001976:	335c      	adds	r3, #92	; 0x5c
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	202c      	movs	r0, #44	; 0x2c
 8001982:	fb00 f303 	mul.w	r3, r0, r3
 8001986:	440b      	add	r3, r1
 8001988:	335c      	adds	r3, #92	; 0x5c
 800198a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	212c      	movs	r1, #44	; 0x2c
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	335c      	adds	r3, #92	; 0x5c
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d912      	bls.n	80019c6 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	335c      	adds	r3, #92	; 0x5c
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	212c      	movs	r1, #44	; 0x2c
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	4413      	add	r3, r2
 80019be:	3360      	adds	r3, #96	; 0x60
 80019c0:	2204      	movs	r2, #4
 80019c2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80019c4:	e073      	b.n	8001aae <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	212c      	movs	r1, #44	; 0x2c
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	3360      	adds	r3, #96	; 0x60
 80019d4:	2202      	movs	r2, #2
 80019d6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	015a      	lsls	r2, r3, #5
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4413      	add	r3, r2
 80019e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019ee:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019f6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	015a      	lsls	r2, r3, #5
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4413      	add	r3, r2
 8001a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a04:	461a      	mov	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001a0a:	e050      	b.n	8001aae <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	212c      	movs	r1, #44	; 0x2c
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	3361      	adds	r3, #97	; 0x61
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d122      	bne.n	8001a66 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	212c      	movs	r1, #44	; 0x2c
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3360      	adds	r3, #96	; 0x60
 8001a2e:	2202      	movs	r2, #2
 8001a30:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	015a      	lsls	r2, r3, #5
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001a48:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a50:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	e023      	b.n	8001aae <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	212c      	movs	r1, #44	; 0x2c
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	3361      	adds	r3, #97	; 0x61
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b07      	cmp	r3, #7
 8001a78:	d119      	bne.n	8001aae <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	212c      	movs	r1, #44	; 0x2c
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	335c      	adds	r3, #92	; 0x5c
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	202c      	movs	r0, #44	; 0x2c
 8001a92:	fb00 f303 	mul.w	r3, r0, r3
 8001a96:	440b      	add	r3, r1
 8001a98:	335c      	adds	r3, #92	; 0x5c
 8001a9a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	212c      	movs	r1, #44	; 0x2c
 8001aa2:	fb01 f303 	mul.w	r3, r1, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3360      	adds	r3, #96	; 0x60
 8001aaa:	2204      	movs	r2, #4
 8001aac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	015a      	lsls	r2, r3, #5
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aba:	461a      	mov	r2, r3
 8001abc:	2302      	movs	r3, #2
 8001abe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	b2d9      	uxtb	r1, r3
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	202c      	movs	r0, #44	; 0x2c
 8001aca:	fb00 f303 	mul.w	r3, r0, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	3360      	adds	r3, #96	; 0x60
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff fd04 	bl	80014e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001adc:	e061      	b.n	8001ba2 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	015a      	lsls	r2, r3, #5
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d156      	bne.n	8001ba2 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	212c      	movs	r1, #44	; 0x2c
 8001afa:	fb01 f303 	mul.w	r3, r1, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	333f      	adds	r3, #63	; 0x3f
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d111      	bne.n	8001b2c <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	212c      	movs	r1, #44	; 0x2c
 8001b0e:	fb01 f303 	mul.w	r3, r1, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	335c      	adds	r3, #92	; 0x5c
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 fa7b 	bl	8003020 <USB_HC_Halt>
 8001b2a:	e031      	b.n	8001b90 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	212c      	movs	r1, #44	; 0x2c
 8001b32:	fb01 f303 	mul.w	r3, r1, r3
 8001b36:	4413      	add	r3, r2
 8001b38:	333f      	adds	r3, #63	; 0x3f
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d009      	beq.n	8001b54 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	212c      	movs	r1, #44	; 0x2c
 8001b46:	fb01 f303 	mul.w	r3, r1, r3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	333f      	adds	r3, #63	; 0x3f
 8001b4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d11d      	bne.n	8001b90 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	212c      	movs	r1, #44	; 0x2c
 8001b5a:	fb01 f303 	mul.w	r3, r1, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	335c      	adds	r3, #92	; 0x5c
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d110      	bne.n	8001b90 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	212c      	movs	r1, #44	; 0x2c
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	4413      	add	r3, r2
 8001b7a:	3361      	adds	r3, #97	; 0x61
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 fa48 	bl	8003020 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2310      	movs	r3, #16
 8001ba0:	6093      	str	r3, [r2, #8]
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b088      	sub	sp, #32
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	015a      	lsls	r2, r3, #5
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d11a      	bne.n	8001c10 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	015a      	lsls	r2, r3, #5
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be6:	461a      	mov	r2, r3
 8001be8:	2304      	movs	r3, #4
 8001bea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	212c      	movs	r1, #44	; 0x2c
 8001bf2:	fb01 f303 	mul.w	r3, r1, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3361      	adds	r3, #97	; 0x61
 8001bfa:	2206      	movs	r2, #6
 8001bfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f001 fa09 	bl	8003020 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001c0e:	e331      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 0320 	and.w	r3, r3, #32
 8001c22:	2b20      	cmp	r3, #32
 8001c24:	d12e      	bne.n	8001c84 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	015a      	lsls	r2, r3, #5
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c32:	461a      	mov	r2, r3
 8001c34:	2320      	movs	r3, #32
 8001c36:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	212c      	movs	r1, #44	; 0x2c
 8001c3e:	fb01 f303 	mul.w	r3, r1, r3
 8001c42:	4413      	add	r3, r2
 8001c44:	333d      	adds	r3, #61	; 0x3d
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	f040 8313 	bne.w	8002274 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	212c      	movs	r1, #44	; 0x2c
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	333d      	adds	r3, #61	; 0x3d
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	212c      	movs	r1, #44	; 0x2c
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3360      	adds	r3, #96	; 0x60
 8001c6e:	2202      	movs	r2, #2
 8001c70:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 f9cf 	bl	8003020 <USB_HC_Halt>
}
 8001c82:	e2f7      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c9a:	d112      	bne.n	8001cc2 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca8:	461a      	mov	r2, r3
 8001caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cae:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f001 f9b0 	bl	8003020 <USB_HC_Halt>
}
 8001cc0:	e2d8      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d140      	bne.n	8001d5a <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	212c      	movs	r1, #44	; 0x2c
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	335c      	adds	r3, #92	; 0x5c
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfc:	2b40      	cmp	r3, #64	; 0x40
 8001cfe:	d111      	bne.n	8001d24 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	212c      	movs	r1, #44	; 0x2c
 8001d06:	fb01 f303 	mul.w	r3, r1, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	333d      	adds	r3, #61	; 0x3d
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2340      	movs	r3, #64	; 0x40
 8001d22:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	015a      	lsls	r2, r3, #5
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d30:	461a      	mov	r2, r3
 8001d32:	2301      	movs	r3, #1
 8001d34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	3361      	adds	r3, #97	; 0x61
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 f964 	bl	8003020 <USB_HC_Halt>
}
 8001d58:	e28c      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	015a      	lsls	r2, r3, #5
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6c:	2b40      	cmp	r3, #64	; 0x40
 8001d6e:	d12c      	bne.n	8001dca <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	212c      	movs	r1, #44	; 0x2c
 8001d76:	fb01 f303 	mul.w	r3, r1, r3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3361      	adds	r3, #97	; 0x61
 8001d7e:	2204      	movs	r2, #4
 8001d80:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	212c      	movs	r1, #44	; 0x2c
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	333d      	adds	r3, #61	; 0x3d
 8001d90:	2201      	movs	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	212c      	movs	r1, #44	; 0x2c
 8001d9a:	fb01 f303 	mul.w	r3, r1, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	335c      	adds	r3, #92	; 0x5c
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f001 f935 	bl	8003020 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2340      	movs	r3, #64	; 0x40
 8001dc6:	6093      	str	r3, [r2, #8]
}
 8001dc8:	e254      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d11a      	bne.n	8001e16 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dec:	461a      	mov	r2, r3
 8001dee:	2308      	movs	r3, #8
 8001df0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	212c      	movs	r1, #44	; 0x2c
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3361      	adds	r3, #97	; 0x61
 8001e00:	2205      	movs	r2, #5
 8001e02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f001 f906 	bl	8003020 <USB_HC_Halt>
}
 8001e14:	e22e      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b10      	cmp	r3, #16
 8001e2a:	d140      	bne.n	8001eae <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	212c      	movs	r1, #44	; 0x2c
 8001e32:	fb01 f303 	mul.w	r3, r1, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	335c      	adds	r3, #92	; 0x5c
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	212c      	movs	r1, #44	; 0x2c
 8001e44:	fb01 f303 	mul.w	r3, r1, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	3361      	adds	r3, #97	; 0x61
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	212c      	movs	r1, #44	; 0x2c
 8001e56:	fb01 f303 	mul.w	r3, r1, r3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	333d      	adds	r3, #61	; 0x3d
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d112      	bne.n	8001e8a <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	fb01 f303 	mul.w	r3, r1, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	333c      	adds	r3, #60	; 0x3c
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d108      	bne.n	8001e8a <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	212c      	movs	r1, #44	; 0x2c
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	4413      	add	r3, r2
 8001e84:	333d      	adds	r3, #61	; 0x3d
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f001 f8c3 	bl	8003020 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2310      	movs	r3, #16
 8001eaa:	6093      	str	r3, [r2, #8]
}
 8001eac:	e1e2      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec0:	2b80      	cmp	r3, #128	; 0x80
 8001ec2:	d164      	bne.n	8001f8e <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d111      	bne.n	8001ef0 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	212c      	movs	r1, #44	; 0x2c
 8001ed2:	fb01 f303 	mul.w	r3, r1, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3361      	adds	r3, #97	; 0x61
 8001eda:	2206      	movs	r2, #6
 8001edc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f001 f899 	bl	8003020 <USB_HC_Halt>
 8001eee:	e044      	b.n	8001f7a <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	212c      	movs	r1, #44	; 0x2c
 8001ef6:	fb01 f303 	mul.w	r3, r1, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	335c      	adds	r3, #92	; 0x5c
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	202c      	movs	r0, #44	; 0x2c
 8001f08:	fb00 f303 	mul.w	r3, r0, r3
 8001f0c:	440b      	add	r3, r1
 8001f0e:	335c      	adds	r3, #92	; 0x5c
 8001f10:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	212c      	movs	r1, #44	; 0x2c
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	335c      	adds	r3, #92	; 0x5c
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d920      	bls.n	8001f68 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	212c      	movs	r1, #44	; 0x2c
 8001f2c:	fb01 f303 	mul.w	r3, r1, r3
 8001f30:	4413      	add	r3, r2
 8001f32:	335c      	adds	r3, #92	; 0x5c
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	212c      	movs	r1, #44	; 0x2c
 8001f3e:	fb01 f303 	mul.w	r3, r1, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	3360      	adds	r3, #96	; 0x60
 8001f46:	2204      	movs	r2, #4
 8001f48:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	b2d9      	uxtb	r1, r3
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	202c      	movs	r0, #44	; 0x2c
 8001f54:	fb00 f303 	mul.w	r3, r0, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	3360      	adds	r3, #96	; 0x60
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff fabf 	bl	80014e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001f66:	e008      	b.n	8001f7a <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	212c      	movs	r1, #44	; 0x2c
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	3360      	adds	r3, #96	; 0x60
 8001f76:	2202      	movs	r2, #2
 8001f78:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f86:	461a      	mov	r2, r3
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	6093      	str	r3, [r2, #8]
}
 8001f8c:	e172      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa4:	d11b      	bne.n	8001fde <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3361      	adds	r3, #97	; 0x61
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f001 f82c 	bl	8003020 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fda:	6093      	str	r3, [r2, #8]
}
 8001fdc:	e14a      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	f040 813f 	bne.w	8002274 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	212c      	movs	r1, #44	; 0x2c
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	3361      	adds	r3, #97	; 0x61
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d17d      	bne.n	8002106 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	212c      	movs	r1, #44	; 0x2c
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	3360      	adds	r3, #96	; 0x60
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	212c      	movs	r1, #44	; 0x2c
 8002022:	fb01 f303 	mul.w	r3, r1, r3
 8002026:	4413      	add	r3, r2
 8002028:	333f      	adds	r3, #63	; 0x3f
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d00a      	beq.n	8002046 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	212c      	movs	r1, #44	; 0x2c
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	333f      	adds	r3, #63	; 0x3f
 800203e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002040:	2b03      	cmp	r3, #3
 8002042:	f040 8100 	bne.w	8002246 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d113      	bne.n	8002076 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	3355      	adds	r3, #85	; 0x55
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	f083 0301 	eor.w	r3, r3, #1
 8002062:	b2d8      	uxtb	r0, r3
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	3355      	adds	r3, #85	; 0x55
 8002072:	4602      	mov	r2, r0
 8002074:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2b01      	cmp	r3, #1
 800207c:	f040 80e3 	bne.w	8002246 <HCD_HC_OUT_IRQHandler+0x69c>
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	212c      	movs	r1, #44	; 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	334c      	adds	r3, #76	; 0x4c
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80d8 	beq.w	8002246 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	212c      	movs	r1, #44	; 0x2c
 800209c:	fb01 f303 	mul.w	r3, r1, r3
 80020a0:	4413      	add	r3, r2
 80020a2:	334c      	adds	r3, #76	; 0x4c
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	202c      	movs	r0, #44	; 0x2c
 80020ac:	fb00 f202 	mul.w	r2, r0, r2
 80020b0:	440a      	add	r2, r1
 80020b2:	3240      	adds	r2, #64	; 0x40
 80020b4:	8812      	ldrh	r2, [r2, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	3b01      	subs	r3, #1
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	202c      	movs	r0, #44	; 0x2c
 80020c0:	fb00 f202 	mul.w	r2, r0, r2
 80020c4:	440a      	add	r2, r1
 80020c6:	3240      	adds	r2, #64	; 0x40
 80020c8:	8812      	ldrh	r2, [r2, #0]
 80020ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 80b5 	beq.w	8002246 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	212c      	movs	r1, #44	; 0x2c
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	3355      	adds	r3, #85	; 0x55
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	f083 0301 	eor.w	r3, r3, #1
 80020f0:	b2d8      	uxtb	r0, r3
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	3355      	adds	r3, #85	; 0x55
 8002100:	4602      	mov	r2, r0
 8002102:	701a      	strb	r2, [r3, #0]
 8002104:	e09f      	b.n	8002246 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	3361      	adds	r3, #97	; 0x61
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b03      	cmp	r3, #3
 8002118:	d109      	bne.n	800212e <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	3360      	adds	r3, #96	; 0x60
 8002128:	2202      	movs	r2, #2
 800212a:	701a      	strb	r2, [r3, #0]
 800212c:	e08b      	b.n	8002246 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	212c      	movs	r1, #44	; 0x2c
 8002134:	fb01 f303 	mul.w	r3, r1, r3
 8002138:	4413      	add	r3, r2
 800213a:	3361      	adds	r3, #97	; 0x61
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b04      	cmp	r3, #4
 8002140:	d109      	bne.n	8002156 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	212c      	movs	r1, #44	; 0x2c
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	4413      	add	r3, r2
 800214e:	3360      	adds	r3, #96	; 0x60
 8002150:	2202      	movs	r2, #2
 8002152:	701a      	strb	r2, [r3, #0]
 8002154:	e077      	b.n	8002246 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3361      	adds	r3, #97	; 0x61
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b05      	cmp	r3, #5
 8002168:	d109      	bne.n	800217e <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	212c      	movs	r1, #44	; 0x2c
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	4413      	add	r3, r2
 8002176:	3360      	adds	r3, #96	; 0x60
 8002178:	2205      	movs	r2, #5
 800217a:	701a      	strb	r2, [r3, #0]
 800217c:	e063      	b.n	8002246 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	212c      	movs	r1, #44	; 0x2c
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	4413      	add	r3, r2
 800218a:	3361      	adds	r3, #97	; 0x61
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b06      	cmp	r3, #6
 8002190:	d009      	beq.n	80021a6 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	3361      	adds	r3, #97	; 0x61
 80021a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d14f      	bne.n	8002246 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	335c      	adds	r3, #92	; 0x5c
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	202c      	movs	r0, #44	; 0x2c
 80021be:	fb00 f303 	mul.w	r3, r0, r3
 80021c2:	440b      	add	r3, r1
 80021c4:	335c      	adds	r3, #92	; 0x5c
 80021c6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	335c      	adds	r3, #92	; 0x5c
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d912      	bls.n	8002202 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	212c      	movs	r1, #44	; 0x2c
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	335c      	adds	r3, #92	; 0x5c
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	212c      	movs	r1, #44	; 0x2c
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	3360      	adds	r3, #96	; 0x60
 80021fc:	2204      	movs	r2, #4
 80021fe:	701a      	strb	r2, [r3, #0]
 8002200:	e021      	b.n	8002246 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	212c      	movs	r1, #44	; 0x2c
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	4413      	add	r3, r2
 800220e:	3360      	adds	r3, #96	; 0x60
 8002210:	2202      	movs	r2, #2
 8002212:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	4413      	add	r3, r2
 800221c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800222a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002232:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	4413      	add	r3, r2
 800223c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002240:	461a      	mov	r2, r3
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002252:	461a      	mov	r2, r3
 8002254:	2302      	movs	r3, #2
 8002256:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	b2d9      	uxtb	r1, r3
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	202c      	movs	r0, #44	; 0x2c
 8002262:	fb00 f303 	mul.w	r3, r0, r3
 8002266:	4413      	add	r3, r2
 8002268:	3360      	adds	r3, #96	; 0x60
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff f938 	bl	80014e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002274:	bf00      	nop
 8002276:	3720      	adds	r7, #32
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	0c5b      	lsrs	r3, r3, #17
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022b0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d004      	beq.n	80022c2 <HCD_RXQLVL_IRQHandler+0x46>
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2b05      	cmp	r3, #5
 80022bc:	f000 80a9 	beq.w	8002412 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80022c0:	e0aa      	b.n	8002418 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80a6 	beq.w	8002416 <HCD_RXQLVL_IRQHandler+0x19a>
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	212c      	movs	r1, #44	; 0x2c
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	3344      	adds	r3, #68	; 0x44
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 809b 	beq.w	8002416 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3350      	adds	r3, #80	; 0x50
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	441a      	add	r2, r3
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	202c      	movs	r0, #44	; 0x2c
 80022fa:	fb00 f303 	mul.w	r3, r0, r3
 80022fe:	440b      	add	r3, r1
 8002300:	334c      	adds	r3, #76	; 0x4c
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d87a      	bhi.n	80023fe <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	3344      	adds	r3, #68	; 0x44
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	b292      	uxth	r2, r2
 8002320:	4619      	mov	r1, r3
 8002322:	f000 fdb9 	bl	8002e98 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	212c      	movs	r1, #44	; 0x2c
 800232c:	fb01 f303 	mul.w	r3, r1, r3
 8002330:	4413      	add	r3, r2
 8002332:	3344      	adds	r3, #68	; 0x44
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	441a      	add	r2, r3
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	202c      	movs	r0, #44	; 0x2c
 8002340:	fb00 f303 	mul.w	r3, r0, r3
 8002344:	440b      	add	r3, r1
 8002346:	3344      	adds	r3, #68	; 0x44
 8002348:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	3350      	adds	r3, #80	; 0x50
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	441a      	add	r2, r3
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	202c      	movs	r0, #44	; 0x2c
 8002364:	fb00 f303 	mul.w	r3, r0, r3
 8002368:	440b      	add	r3, r1
 800236a:	3350      	adds	r3, #80	; 0x50
 800236c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	4413      	add	r3, r2
 8002376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	0cdb      	lsrs	r3, r3, #19
 800237e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002382:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	212c      	movs	r1, #44	; 0x2c
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	4413      	add	r3, r2
 8002390:	3340      	adds	r3, #64	; 0x40
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4293      	cmp	r3, r2
 800239a:	d13c      	bne.n	8002416 <HCD_RXQLVL_IRQHandler+0x19a>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d039      	beq.n	8002416 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023b8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023c0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ce:	461a      	mov	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	3354      	adds	r3, #84	; 0x54
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	f083 0301 	eor.w	r3, r3, #1
 80023e8:	b2d8      	uxtb	r0, r3
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	212c      	movs	r1, #44	; 0x2c
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	3354      	adds	r3, #84	; 0x54
 80023f8:	4602      	mov	r2, r0
 80023fa:	701a      	strb	r2, [r3, #0]
      break;
 80023fc:	e00b      	b.n	8002416 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	212c      	movs	r1, #44	; 0x2c
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	3360      	adds	r3, #96	; 0x60
 800240c:	2204      	movs	r2, #4
 800240e:	701a      	strb	r2, [r3, #0]
      break;
 8002410:	e001      	b.n	8002416 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002412:	bf00      	nop
 8002414:	e000      	b.n	8002418 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002416:	bf00      	nop
  }
}
 8002418:	bf00      	nop
 800241a:	3728      	adds	r7, #40	; 0x28
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800244c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b02      	cmp	r3, #2
 8002456:	d10b      	bne.n	8002470 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b01      	cmp	r3, #1
 8002460:	d102      	bne.n	8002468 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff f816 	bl	8001494 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f043 0302 	orr.w	r3, r3, #2
 800246e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b08      	cmp	r3, #8
 8002478:	d132      	bne.n	80024e0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f043 0308 	orr.w	r3, r3, #8
 8002480:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b04      	cmp	r3, #4
 800248a:	d126      	bne.n	80024da <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d113      	bne.n	80024bc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800249a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800249e:	d106      	bne.n	80024ae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2102      	movs	r1, #2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fd6f 	bl	8002f8a <USB_InitFSLSPClkSel>
 80024ac:	e011      	b.n	80024d2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2101      	movs	r1, #1
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fd68 	bl	8002f8a <USB_InitFSLSPClkSel>
 80024ba:	e00a      	b.n	80024d2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d106      	bne.n	80024d2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ca:	461a      	mov	r2, r3
 80024cc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80024d0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fff2 	bl	80014bc <HAL_HCD_PortEnabled_Callback>
 80024d8:	e002      	b.n	80024e0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe fff8 	bl	80014d0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d103      	bne.n	80024f2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f043 0320 	orr.w	r3, r3, #32
 80024f0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024f8:	461a      	mov	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	6013      	str	r3, [r2, #0]
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e267      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d075      	beq.n	8002612 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002526:	4b88      	ldr	r3, [pc, #544]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b04      	cmp	r3, #4
 8002530:	d00c      	beq.n	800254c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002532:	4b85      	ldr	r3, [pc, #532]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800253a:	2b08      	cmp	r3, #8
 800253c:	d112      	bne.n	8002564 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800253e:	4b82      	ldr	r3, [pc, #520]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800254a:	d10b      	bne.n	8002564 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254c:	4b7e      	ldr	r3, [pc, #504]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d05b      	beq.n	8002610 <HAL_RCC_OscConfig+0x108>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d157      	bne.n	8002610 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e242      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800256c:	d106      	bne.n	800257c <HAL_RCC_OscConfig+0x74>
 800256e:	4b76      	ldr	r3, [pc, #472]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a75      	ldr	r2, [pc, #468]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 8002574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e01d      	b.n	80025b8 <HAL_RCC_OscConfig+0xb0>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x98>
 8002586:	4b70      	ldr	r3, [pc, #448]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a6f      	ldr	r2, [pc, #444]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 800258c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4b6d      	ldr	r3, [pc, #436]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a6c      	ldr	r2, [pc, #432]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e00b      	b.n	80025b8 <HAL_RCC_OscConfig+0xb0>
 80025a0:	4b69      	ldr	r3, [pc, #420]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a68      	ldr	r2, [pc, #416]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 80025a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b66      	ldr	r3, [pc, #408]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a65      	ldr	r2, [pc, #404]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 80025b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d013      	beq.n	80025e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fe fb7a 	bl	8000cb8 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c8:	f7fe fb76 	bl	8000cb8 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e207      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025da:	4b5b      	ldr	r3, [pc, #364]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0xc0>
 80025e6:	e014      	b.n	8002612 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7fe fb66 	bl	8000cb8 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025f0:	f7fe fb62 	bl	8000cb8 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e1f3      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002602:	4b51      	ldr	r3, [pc, #324]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0xe8>
 800260e:	e000      	b.n	8002612 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d063      	beq.n	80026e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800261e:	4b4a      	ldr	r3, [pc, #296]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00b      	beq.n	8002642 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262a:	4b47      	ldr	r3, [pc, #284]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002632:	2b08      	cmp	r3, #8
 8002634:	d11c      	bne.n	8002670 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002636:	4b44      	ldr	r3, [pc, #272]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d116      	bne.n	8002670 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002642:	4b41      	ldr	r3, [pc, #260]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_RCC_OscConfig+0x152>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d001      	beq.n	800265a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e1c7      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4937      	ldr	r1, [pc, #220]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266e:	e03a      	b.n	80026e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d020      	beq.n	80026ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002678:	4b34      	ldr	r3, [pc, #208]	; (800274c <HAL_RCC_OscConfig+0x244>)
 800267a:	2201      	movs	r2, #1
 800267c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267e:	f7fe fb1b 	bl	8000cb8 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002686:	f7fe fb17 	bl	8000cb8 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e1a8      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002698:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a4:	4b28      	ldr	r3, [pc, #160]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4925      	ldr	r1, [pc, #148]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	600b      	str	r3, [r1, #0]
 80026b8:	e015      	b.n	80026e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_RCC_OscConfig+0x244>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fafa 	bl	8000cb8 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c8:	f7fe faf6 	bl	8000cb8 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e187      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026da:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d036      	beq.n	8002760 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d016      	beq.n	8002728 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fa:	4b15      	ldr	r3, [pc, #84]	; (8002750 <HAL_RCC_OscConfig+0x248>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7fe fada 	bl	8000cb8 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002708:	f7fe fad6 	bl	8000cb8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e167      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_RCC_OscConfig+0x240>)
 800271c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x200>
 8002726:	e01b      	b.n	8002760 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_RCC_OscConfig+0x248>)
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272e:	f7fe fac3 	bl	8000cb8 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002734:	e00e      	b.n	8002754 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002736:	f7fe fabf 	bl	8000cb8 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d907      	bls.n	8002754 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e150      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
 8002748:	40023800 	.word	0x40023800
 800274c:	42470000 	.word	0x42470000
 8002750:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002754:	4b88      	ldr	r3, [pc, #544]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 8002756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ea      	bne.n	8002736 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8097 	beq.w	800289c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002772:	4b81      	ldr	r3, [pc, #516]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10f      	bne.n	800279e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	4b7d      	ldr	r3, [pc, #500]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a7c      	ldr	r2, [pc, #496]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 8002788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b7a      	ldr	r3, [pc, #488]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279a:	2301      	movs	r3, #1
 800279c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279e:	4b77      	ldr	r3, [pc, #476]	; (800297c <HAL_RCC_OscConfig+0x474>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d118      	bne.n	80027dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027aa:	4b74      	ldr	r3, [pc, #464]	; (800297c <HAL_RCC_OscConfig+0x474>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a73      	ldr	r2, [pc, #460]	; (800297c <HAL_RCC_OscConfig+0x474>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b6:	f7fe fa7f 	bl	8000cb8 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027be:	f7fe fa7b 	bl	8000cb8 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e10c      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	4b6a      	ldr	r3, [pc, #424]	; (800297c <HAL_RCC_OscConfig+0x474>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_OscConfig+0x2ea>
 80027e4:	4b64      	ldr	r3, [pc, #400]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	4a63      	ldr	r2, [pc, #396]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6713      	str	r3, [r2, #112]	; 0x70
 80027f0:	e01c      	b.n	800282c <HAL_RCC_OscConfig+0x324>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b05      	cmp	r3, #5
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x30c>
 80027fa:	4b5f      	ldr	r3, [pc, #380]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a5e      	ldr	r2, [pc, #376]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	6713      	str	r3, [r2, #112]	; 0x70
 8002806:	4b5c      	ldr	r3, [pc, #368]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	4a5b      	ldr	r2, [pc, #364]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6713      	str	r3, [r2, #112]	; 0x70
 8002812:	e00b      	b.n	800282c <HAL_RCC_OscConfig+0x324>
 8002814:	4b58      	ldr	r3, [pc, #352]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	4a57      	ldr	r2, [pc, #348]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 800281a:	f023 0301 	bic.w	r3, r3, #1
 800281e:	6713      	str	r3, [r2, #112]	; 0x70
 8002820:	4b55      	ldr	r3, [pc, #340]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002824:	4a54      	ldr	r2, [pc, #336]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 8002826:	f023 0304 	bic.w	r3, r3, #4
 800282a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d015      	beq.n	8002860 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7fe fa40 	bl	8000cb8 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283c:	f7fe fa3c 	bl	8000cb8 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e0cb      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002852:	4b49      	ldr	r3, [pc, #292]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0ee      	beq.n	800283c <HAL_RCC_OscConfig+0x334>
 800285e:	e014      	b.n	800288a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002860:	f7fe fa2a 	bl	8000cb8 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002866:	e00a      	b.n	800287e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002868:	f7fe fa26 	bl	8000cb8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e0b5      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287e:	4b3e      	ldr	r3, [pc, #248]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1ee      	bne.n	8002868 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800288a:	7dfb      	ldrb	r3, [r7, #23]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d105      	bne.n	800289c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002890:	4b39      	ldr	r3, [pc, #228]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	4a38      	ldr	r2, [pc, #224]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 8002896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800289a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a1 	beq.w	80029e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028a6:	4b34      	ldr	r3, [pc, #208]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d05c      	beq.n	800296c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d141      	bne.n	800293e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ba:	4b31      	ldr	r3, [pc, #196]	; (8002980 <HAL_RCC_OscConfig+0x478>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fe f9fa 	bl	8000cb8 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe f9f6 	bl	8000cb8 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e087      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	4b27      	ldr	r3, [pc, #156]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69da      	ldr	r2, [r3, #28]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	019b      	lsls	r3, r3, #6
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fc:	085b      	lsrs	r3, r3, #1
 80028fe:	3b01      	subs	r3, #1
 8002900:	041b      	lsls	r3, r3, #16
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	061b      	lsls	r3, r3, #24
 800290a:	491b      	ldr	r1, [pc, #108]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <HAL_RCC_OscConfig+0x478>)
 8002912:	2201      	movs	r2, #1
 8002914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002916:	f7fe f9cf 	bl	8000cb8 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291e:	f7fe f9cb 	bl	8000cb8 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e05c      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x416>
 800293c:	e054      	b.n	80029e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <HAL_RCC_OscConfig+0x478>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7fe f9b8 	bl	8000cb8 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe f9b4 	bl	8000cb8 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e045      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_RCC_OscConfig+0x470>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x444>
 800296a:	e03d      	b.n	80029e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d107      	bne.n	8002984 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e038      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
 8002978:	40023800 	.word	0x40023800
 800297c:	40007000 	.word	0x40007000
 8002980:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <HAL_RCC_OscConfig+0x4ec>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d028      	beq.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d121      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d11a      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029b4:	4013      	ands	r3, r2
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029bc:	4293      	cmp	r3, r2
 80029be:	d111      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	085b      	lsrs	r3, r3, #1
 80029cc:	3b01      	subs	r3, #1
 80029ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d107      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800

080029f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0cc      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b68      	ldr	r3, [pc, #416]	; (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d90c      	bls.n	8002a34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b65      	ldr	r3, [pc, #404]	; (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b63      	ldr	r3, [pc, #396]	; (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0b8      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d020      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a4c:	4b59      	ldr	r3, [pc, #356]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4a58      	ldr	r2, [pc, #352]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a64:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a52      	ldr	r2, [pc, #328]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a70:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	494d      	ldr	r1, [pc, #308]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d044      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d119      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e07f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab6:	4b3f      	ldr	r3, [pc, #252]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e06f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e067      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad6:	4b37      	ldr	r3, [pc, #220]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f023 0203 	bic.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4934      	ldr	r1, [pc, #208]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae8:	f7fe f8e6 	bl	8000cb8 <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af0:	f7fe f8e2 	bl	8000cb8 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e04f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 020c 	and.w	r2, r3, #12
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1eb      	bne.n	8002af0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b18:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d20c      	bcs.n	8002b40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e032      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4916      	ldr	r1, [pc, #88]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	490e      	ldr	r1, [pc, #56]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b7e:	f000 f821 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	490a      	ldr	r1, [pc, #40]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	5ccb      	ldrb	r3, [r1, r3]
 8002b92:	fa22 f303 	lsr.w	r3, r2, r3
 8002b96:	4a09      	ldr	r2, [pc, #36]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe f846 	bl	8000c30 <HAL_InitTick>

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023c00 	.word	0x40023c00
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	08006cb8 	.word	0x08006cb8
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc8:	b094      	sub	sp, #80	; 0x50
 8002bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	647b      	str	r3, [r7, #68]	; 0x44
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bdc:	4b79      	ldr	r3, [pc, #484]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d00d      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x40>
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	f200 80e1 	bhi.w	8002db0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x3a>
 8002bf6:	e0db      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf8:	4b73      	ldr	r3, [pc, #460]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bfa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002bfc:	e0db      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bfe:	4b73      	ldr	r3, [pc, #460]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x208>)
 8002c00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c02:	e0d8      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c04:	4b6f      	ldr	r3, [pc, #444]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c0e:	4b6d      	ldr	r3, [pc, #436]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d063      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1a:	4b6a      	ldr	r3, [pc, #424]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	099b      	lsrs	r3, r3, #6
 8002c20:	2200      	movs	r2, #0
 8002c22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c2e:	2300      	movs	r3, #0
 8002c30:	637b      	str	r3, [r7, #52]	; 0x34
 8002c32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c36:	4622      	mov	r2, r4
 8002c38:	462b      	mov	r3, r5
 8002c3a:	f04f 0000 	mov.w	r0, #0
 8002c3e:	f04f 0100 	mov.w	r1, #0
 8002c42:	0159      	lsls	r1, r3, #5
 8002c44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c48:	0150      	lsls	r0, r2, #5
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4621      	mov	r1, r4
 8002c50:	1a51      	subs	r1, r2, r1
 8002c52:	6139      	str	r1, [r7, #16]
 8002c54:	4629      	mov	r1, r5
 8002c56:	eb63 0301 	sbc.w	r3, r3, r1
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c68:	4659      	mov	r1, fp
 8002c6a:	018b      	lsls	r3, r1, #6
 8002c6c:	4651      	mov	r1, sl
 8002c6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c72:	4651      	mov	r1, sl
 8002c74:	018a      	lsls	r2, r1, #6
 8002c76:	4651      	mov	r1, sl
 8002c78:	ebb2 0801 	subs.w	r8, r2, r1
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	eb63 0901 	sbc.w	r9, r3, r1
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c96:	4690      	mov	r8, r2
 8002c98:	4699      	mov	r9, r3
 8002c9a:	4623      	mov	r3, r4
 8002c9c:	eb18 0303 	adds.w	r3, r8, r3
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	462b      	mov	r3, r5
 8002ca4:	eb49 0303 	adc.w	r3, r9, r3
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	024b      	lsls	r3, r1, #9
 8002cba:	4621      	mov	r1, r4
 8002cbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	024a      	lsls	r2, r1, #9
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cca:	2200      	movs	r2, #0
 8002ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cd4:	f7fd fa7c 	bl	80001d0 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ce0:	e058      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce2:	4b38      	ldr	r3, [pc, #224]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	099b      	lsrs	r3, r3, #6
 8002ce8:	2200      	movs	r2, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	4611      	mov	r1, r2
 8002cee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cf2:	623b      	str	r3, [r7, #32]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cfc:	4642      	mov	r2, r8
 8002cfe:	464b      	mov	r3, r9
 8002d00:	f04f 0000 	mov.w	r0, #0
 8002d04:	f04f 0100 	mov.w	r1, #0
 8002d08:	0159      	lsls	r1, r3, #5
 8002d0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d0e:	0150      	lsls	r0, r2, #5
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4641      	mov	r1, r8
 8002d16:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d1a:	4649      	mov	r1, r9
 8002d1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d34:	ebb2 040a 	subs.w	r4, r2, sl
 8002d38:	eb63 050b 	sbc.w	r5, r3, fp
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	00eb      	lsls	r3, r5, #3
 8002d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d4a:	00e2      	lsls	r2, r4, #3
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	461d      	mov	r5, r3
 8002d50:	4643      	mov	r3, r8
 8002d52:	18e3      	adds	r3, r4, r3
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	464b      	mov	r3, r9
 8002d58:	eb45 0303 	adc.w	r3, r5, r3
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	028b      	lsls	r3, r1, #10
 8002d6e:	4621      	mov	r1, r4
 8002d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d74:	4621      	mov	r1, r4
 8002d76:	028a      	lsls	r2, r1, #10
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d7e:	2200      	movs	r2, #0
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	61fa      	str	r2, [r7, #28]
 8002d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d88:	f7fd fa22 	bl	80001d0 <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4613      	mov	r3, r2
 8002d92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002da4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dae:	e002      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002db2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3750      	adds	r7, #80	; 0x50
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	00f42400 	.word	0x00f42400
 8002dcc:	007a1200 	.word	0x007a1200

08002dd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3301      	adds	r3, #1
 8002de2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a13      	ldr	r2, [pc, #76]	; (8002e34 <USB_FlushTxFifo+0x64>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e01b      	b.n	8002e28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	daf2      	bge.n	8002dde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	019b      	lsls	r3, r3, #6
 8002e00:	f043 0220 	orr.w	r2, r3, #32
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <USB_FlushTxFifo+0x64>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e006      	b.n	8002e28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d0f0      	beq.n	8002e08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	00030d40 	.word	0x00030d40

08002e38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3301      	adds	r3, #1
 8002e48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4a11      	ldr	r2, [pc, #68]	; (8002e94 <USB_FlushRxFifo+0x5c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e018      	b.n	8002e88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	daf2      	bge.n	8002e44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2210      	movs	r2, #16
 8002e66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4a08      	ldr	r2, [pc, #32]	; (8002e94 <USB_FlushRxFifo+0x5c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e006      	b.n	8002e88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d0f0      	beq.n	8002e68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	00030d40 	.word	0x00030d40

08002e98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b08b      	sub	sp, #44	; 0x2c
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	089b      	lsrs	r3, r3, #2
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	623b      	str	r3, [r7, #32]
 8002ec2:	e014      	b.n	8002eee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	601a      	str	r2, [r3, #0]
    pDest++;
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	3301      	adds	r3, #1
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	3301      	adds	r3, #1
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	3301      	adds	r3, #1
 8002eec:	623b      	str	r3, [r7, #32]
 8002eee:	6a3a      	ldr	r2, [r7, #32]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d3e6      	bcc.n	8002ec4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8002ef6:	8bfb      	ldrh	r3, [r7, #30]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01e      	beq.n	8002f3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f06:	461a      	mov	r2, r3
 8002f08:	f107 0310 	add.w	r3, r7, #16
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	701a      	strb	r2, [r3, #0]
      i++;
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	3301      	adds	r3, #1
 8002f26:	623b      	str	r3, [r7, #32]
      pDest++;
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8002f2e:	8bfb      	ldrh	r3, [r7, #30]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8002f34:	8bfb      	ldrh	r3, [r7, #30]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1ea      	bne.n	8002f10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	372c      	adds	r7, #44	; 0x2c
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8002f60:	68fb      	ldr	r3, [r7, #12]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	460b      	mov	r3, r1
 8002f94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fa8:	f023 0303 	bic.w	r3, r3, #3
 8002fac:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	68f9      	ldr	r1, [r7, #12]
 8002fbe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d107      	bne.n	8002fdc <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002fd8:	6053      	str	r3, [r2, #4]
 8002fda:	e009      	b.n	8002ff0 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d106      	bne.n	8002ff0 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fe8:	461a      	mov	r2, r3
 8002fea:	f241 7370 	movw	r3, #6000	; 0x1770
 8002fee:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	b29b      	uxth	r3, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8003020:	b480      	push	{r7}
 8003022:	b089      	sub	sp, #36	; 0x24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	0c9b      	lsrs	r3, r3, #18
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	4413      	add	r3, r2
 8003056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0fdb      	lsrs	r3, r3, #31
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0320 	and.w	r3, r3, #32
 800306c:	2b20      	cmp	r3, #32
 800306e:	d104      	bne.n	800307a <USB_HC_Halt+0x5a>
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	e0c8      	b.n	800320c <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <USB_HC_Halt+0x66>
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d163      	bne.n	800314e <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	4413      	add	r3, r2
 800308e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	0151      	lsls	r1, r2, #5
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	440a      	add	r2, r1
 800309c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030a4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f040 80ab 	bne.w	800320a <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d133      	bne.n	8003128 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	0151      	lsls	r1, r2, #5
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	440a      	add	r2, r1
 80030d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030de:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	0151      	lsls	r1, r2, #5
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	440a      	add	r2, r1
 80030f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030fe:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3301      	adds	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800310c:	d81d      	bhi.n	800314a <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	4413      	add	r3, r2
 8003116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003124:	d0ec      	beq.n	8003100 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003126:	e070      	b.n	800320a <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	4413      	add	r3, r2
 8003130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	0151      	lsls	r1, r2, #5
 800313a:	69fa      	ldr	r2, [r7, #28]
 800313c:	440a      	add	r2, r1
 800313e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003142:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003146:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003148:	e05f      	b.n	800320a <USB_HC_Halt+0x1ea>
            break;
 800314a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800314c:	e05d      	b.n	800320a <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	4413      	add	r3, r2
 8003156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	0151      	lsls	r1, r2, #5
 8003160:	69fa      	ldr	r2, [r7, #28]
 8003162:	440a      	add	r2, r1
 8003164:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003168:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800316c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d133      	bne.n	80031e6 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	4413      	add	r3, r2
 8003186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	0151      	lsls	r1, r2, #5
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	440a      	add	r2, r1
 8003194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003198:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800319c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	0151      	lsls	r1, r2, #5
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	440a      	add	r2, r1
 80031b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031bc:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	3301      	adds	r3, #1
 80031c2:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ca:	d81d      	bhi.n	8003208 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031e2:	d0ec      	beq.n	80031be <USB_HC_Halt+0x19e>
 80031e4:	e011      	b.n	800320a <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	0151      	lsls	r1, r2, #5
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	440a      	add	r2, r1
 80031fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	e000      	b.n	800320a <USB_HC_Halt+0x1ea>
          break;
 8003208:	bf00      	nop
    }
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3724      	adds	r7, #36	; 0x24
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f103 0208 	add.w	r2, r3, #8
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f04f 32ff 	mov.w	r2, #4294967295
 8003230:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f103 0208 	add.w	r2, r3, #8
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f103 0208 	add.w	r2, r3, #8
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003272:	b480      	push	{r7}
 8003274:	b085      	sub	sp, #20
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	601a      	str	r2, [r3, #0]
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80032ba:	b480      	push	{r7}
 80032bc:	b085      	sub	sp, #20
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6892      	ldr	r2, [r2, #8]
 80032d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6852      	ldr	r2, [r2, #4]
 80032da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d103      	bne.n	80032ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	1e5a      	subs	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800330e:	b580      	push	{r7, lr}
 8003310:	b08e      	sub	sp, #56	; 0x38
 8003312:	af04      	add	r7, sp, #16
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
 800331a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800331c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003334:	bf00      	nop
 8003336:	e7fe      	b.n	8003336 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10a      	bne.n	8003354 <xTaskCreateStatic+0x46>
	__asm volatile
 800333e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003342:	f383 8811 	msr	BASEPRI, r3
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	61fb      	str	r3, [r7, #28]
}
 8003350:	bf00      	nop
 8003352:	e7fe      	b.n	8003352 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003354:	2354      	movs	r3, #84	; 0x54
 8003356:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b54      	cmp	r3, #84	; 0x54
 800335c:	d00a      	beq.n	8003374 <xTaskCreateStatic+0x66>
	__asm volatile
 800335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	61bb      	str	r3, [r7, #24]
}
 8003370:	bf00      	nop
 8003372:	e7fe      	b.n	8003372 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003374:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01e      	beq.n	80033ba <xTaskCreateStatic+0xac>
 800337c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800337e:	2b00      	cmp	r3, #0
 8003380:	d01b      	beq.n	80033ba <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800338a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	2202      	movs	r2, #2
 8003390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003394:	2300      	movs	r3, #0
 8003396:	9303      	str	r3, [sp, #12]
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	9302      	str	r3, [sp, #8]
 800339c:	f107 0314 	add.w	r3, r7, #20
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	68b9      	ldr	r1, [r7, #8]
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f850 	bl	8003452 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033b4:	f000 f8d4 	bl	8003560 <prvAddNewTaskToReadyList>
 80033b8:	e001      	b.n	80033be <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033be:	697b      	ldr	r3, [r7, #20]
	}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3728      	adds	r7, #40	; 0x28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08c      	sub	sp, #48	; 0x30
 80033cc:	af04      	add	r7, sp, #16
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033d8:	88fb      	ldrh	r3, [r7, #6]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fffb 	bl	80043d8 <pvPortMalloc>
 80033e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00e      	beq.n	8003408 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033ea:	2054      	movs	r0, #84	; 0x54
 80033ec:	f000 fff4 	bl	80043d8 <pvPortMalloc>
 80033f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
 80033fe:	e005      	b.n	800340c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003400:	6978      	ldr	r0, [r7, #20]
 8003402:	f001 f8b5 	bl	8004570 <vPortFree>
 8003406:	e001      	b.n	800340c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003408:	2300      	movs	r3, #0
 800340a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d017      	beq.n	8003442 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800341a:	88fa      	ldrh	r2, [r7, #6]
 800341c:	2300      	movs	r3, #0
 800341e:	9303      	str	r3, [sp, #12]
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	9302      	str	r3, [sp, #8]
 8003424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003426:	9301      	str	r3, [sp, #4]
 8003428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f80e 	bl	8003452 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003436:	69f8      	ldr	r0, [r7, #28]
 8003438:	f000 f892 	bl	8003560 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800343c:	2301      	movs	r3, #1
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	e002      	b.n	8003448 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003442:	f04f 33ff 	mov.w	r3, #4294967295
 8003446:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003448:	69bb      	ldr	r3, [r7, #24]
	}
 800344a:	4618      	mov	r0, r3
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b088      	sub	sp, #32
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800346a:	3b01      	subs	r3, #1
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	f023 0307 	bic.w	r3, r3, #7
 8003478:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <prvInitialiseNewTask+0x48>
	__asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	617b      	str	r3, [r7, #20]
}
 8003496:	bf00      	nop
 8003498:	e7fe      	b.n	8003498 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01f      	beq.n	80034e0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034a0:	2300      	movs	r3, #0
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	e012      	b.n	80034cc <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	4413      	add	r3, r2
 80034ac:	7819      	ldrb	r1, [r3, #0]
 80034ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	4413      	add	r3, r2
 80034b4:	3334      	adds	r3, #52	; 0x34
 80034b6:	460a      	mov	r2, r1
 80034b8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	4413      	add	r3, r2
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d006      	beq.n	80034d4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3301      	adds	r3, #1
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	2b0f      	cmp	r3, #15
 80034d0:	d9e9      	bls.n	80034a6 <prvInitialiseNewTask+0x54>
 80034d2:	e000      	b.n	80034d6 <prvInitialiseNewTask+0x84>
			{
				break;
 80034d4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034de:	e003      	b.n	80034e8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d901      	bls.n	80034f2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034ee:	2306      	movs	r3, #6
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034fc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	2200      	movs	r2, #0
 8003502:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	3304      	adds	r3, #4
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fea5 	bl	8003258 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	3318      	adds	r3, #24
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fea0 	bl	8003258 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800351c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	f1c3 0207 	rsb	r2, r3, #7
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800352c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	2200      	movs	r2, #0
 8003532:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	68f9      	ldr	r1, [r7, #12]
 8003540:	69b8      	ldr	r0, [r7, #24]
 8003542:	f000 fc99 	bl	8003e78 <pxPortInitialiseStack>
 8003546:	4602      	mov	r2, r0
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003556:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003558:	bf00      	nop
 800355a:	3720      	adds	r7, #32
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003560:	b5b0      	push	{r4, r5, r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af02      	add	r7, sp, #8
 8003566:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003568:	f000 fdb4 	bl	80040d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800356c:	4b39      	ldr	r3, [pc, #228]	; (8003654 <prvAddNewTaskToReadyList+0xf4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3301      	adds	r3, #1
 8003572:	4a38      	ldr	r2, [pc, #224]	; (8003654 <prvAddNewTaskToReadyList+0xf4>)
 8003574:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003576:	4b38      	ldr	r3, [pc, #224]	; (8003658 <prvAddNewTaskToReadyList+0xf8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800357e:	4a36      	ldr	r2, [pc, #216]	; (8003658 <prvAddNewTaskToReadyList+0xf8>)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003584:	4b33      	ldr	r3, [pc, #204]	; (8003654 <prvAddNewTaskToReadyList+0xf4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d110      	bne.n	80035ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800358c:	f000 fb98 	bl	8003cc0 <prvInitialiseTaskLists>
 8003590:	e00d      	b.n	80035ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003592:	4b32      	ldr	r3, [pc, #200]	; (800365c <prvAddNewTaskToReadyList+0xfc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800359a:	4b2f      	ldr	r3, [pc, #188]	; (8003658 <prvAddNewTaskToReadyList+0xf8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d802      	bhi.n	80035ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035a8:	4a2b      	ldr	r2, [pc, #172]	; (8003658 <prvAddNewTaskToReadyList+0xf8>)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035ae:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <prvAddNewTaskToReadyList+0x100>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3301      	adds	r3, #1
 80035b4:	4a2a      	ldr	r2, [pc, #168]	; (8003660 <prvAddNewTaskToReadyList+0x100>)
 80035b6:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d016      	beq.n	80035ec <prvAddNewTaskToReadyList+0x8c>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f002 fb87 	bl	8005cd4 <SEGGER_SYSVIEW_OnTaskCreate>
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	461d      	mov	r5, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	461c      	mov	r4, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	1ae3      	subs	r3, r4, r3
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	462b      	mov	r3, r5
 80035e8:	f001 f990 	bl	800490c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f002 fbf8 	bl	8005de4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	2201      	movs	r2, #1
 80035fa:	409a      	lsls	r2, r3
 80035fc:	4b19      	ldr	r3, [pc, #100]	; (8003664 <prvAddNewTaskToReadyList+0x104>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4313      	orrs	r3, r2
 8003602:	4a18      	ldr	r2, [pc, #96]	; (8003664 <prvAddNewTaskToReadyList+0x104>)
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4a15      	ldr	r2, [pc, #84]	; (8003668 <prvAddNewTaskToReadyList+0x108>)
 8003614:	441a      	add	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3304      	adds	r3, #4
 800361a:	4619      	mov	r1, r3
 800361c:	4610      	mov	r0, r2
 800361e:	f7ff fe28 	bl	8003272 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003622:	f000 fd87 	bl	8004134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003626:	4b0d      	ldr	r3, [pc, #52]	; (800365c <prvAddNewTaskToReadyList+0xfc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00e      	beq.n	800364c <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <prvAddNewTaskToReadyList+0xf8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	429a      	cmp	r2, r3
 800363a:	d207      	bcs.n	800364c <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <prvAddNewTaskToReadyList+0x10c>)
 800363e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bdb0      	pop	{r4, r5, r7, pc}
 8003654:	200006f8 	.word	0x200006f8
 8003658:	200005f8 	.word	0x200005f8
 800365c:	20000704 	.word	0x20000704
 8003660:	20000714 	.word	0x20000714
 8003664:	20000700 	.word	0x20000700
 8003668:	200005fc 	.word	0x200005fc
 800366c:	e000ed04 	.word	0xe000ed04

08003670 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003678:	f000 fd2c 	bl	80040d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <vTaskDelete+0x18>
 8003682:	4b46      	ldr	r3, [pc, #280]	; (800379c <vTaskDelete+0x12c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	e000      	b.n	800368a <vTaskDelete+0x1a>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3304      	adds	r3, #4
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fe12 	bl	80032ba <uxListRemove>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d115      	bne.n	80036c8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a0:	493f      	ldr	r1, [pc, #252]	; (80037a0 <vTaskDelete+0x130>)
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10a      	bne.n	80036c8 <vTaskDelete+0x58>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	2201      	movs	r2, #1
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43da      	mvns	r2, r3
 80036be:	4b39      	ldr	r3, [pc, #228]	; (80037a4 <vTaskDelete+0x134>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4013      	ands	r3, r2
 80036c4:	4a37      	ldr	r2, [pc, #220]	; (80037a4 <vTaskDelete+0x134>)
 80036c6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d004      	beq.n	80036da <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3318      	adds	r3, #24
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fdf0 	bl	80032ba <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80036da:	4b33      	ldr	r3, [pc, #204]	; (80037a8 <vTaskDelete+0x138>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3301      	adds	r3, #1
 80036e0:	4a31      	ldr	r2, [pc, #196]	; (80037a8 <vTaskDelete+0x138>)
 80036e2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80036e4:	4b2d      	ldr	r3, [pc, #180]	; (800379c <vTaskDelete+0x12c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d118      	bne.n	8003720 <vTaskDelete+0xb0>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	3304      	adds	r3, #4
 80036f2:	4619      	mov	r1, r3
 80036f4:	482d      	ldr	r0, [pc, #180]	; (80037ac <vTaskDelete+0x13c>)
 80036f6:	f7ff fdbc 	bl	8003272 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80036fa:	4b2d      	ldr	r3, [pc, #180]	; (80037b0 <vTaskDelete+0x140>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3301      	adds	r3, #1
 8003700:	4a2b      	ldr	r2, [pc, #172]	; (80037b0 <vTaskDelete+0x140>)
 8003702:	6013      	str	r3, [r2, #0]

				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
				traceTASK_DELETE( pxTCB );
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4618      	mov	r0, r3
 8003708:	f002 fbb0 	bl	8005e6c <SEGGER_SYSVIEW_ShrinkId>
 800370c:	4603      	mov	r3, r0
 800370e:	4619      	mov	r1, r3
 8003710:	2022      	movs	r0, #34	; 0x22
 8003712:	f001 fee7 	bl	80054e4 <SEGGER_SYSVIEW_RecordU32>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4618      	mov	r0, r3
 800371a:	f001 f95f 	bl	80049dc <SYSVIEW_DeleteTask>
 800371e:	e016      	b.n	800374e <vTaskDelete+0xde>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003720:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <vTaskDelete+0x144>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3b01      	subs	r3, #1
 8003726:	4a23      	ldr	r2, [pc, #140]	; (80037b4 <vTaskDelete+0x144>)
 8003728:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4618      	mov	r0, r3
 800372e:	f002 fb9d 	bl	8005e6c <SEGGER_SYSVIEW_ShrinkId>
 8003732:	4603      	mov	r3, r0
 8003734:	4619      	mov	r1, r3
 8003736:	2022      	movs	r0, #34	; 0x22
 8003738:	f001 fed4 	bl	80054e4 <SEGGER_SYSVIEW_RecordU32>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4618      	mov	r0, r3
 8003740:	f001 f94c 	bl	80049dc <SYSVIEW_DeleteTask>
				prvDeleteTCB( pxTCB );
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fb29 	bl	8003d9c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800374a:	f000 fb57 	bl	8003dfc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800374e:	f000 fcf1 	bl	8004134 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003752:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <vTaskDelete+0x148>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01b      	beq.n	8003792 <vTaskDelete+0x122>
		{
			if( pxTCB == pxCurrentTCB )
 800375a:	4b10      	ldr	r3, [pc, #64]	; (800379c <vTaskDelete+0x12c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	429a      	cmp	r2, r3
 8003762:	d116      	bne.n	8003792 <vTaskDelete+0x122>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003764:	4b15      	ldr	r3, [pc, #84]	; (80037bc <vTaskDelete+0x14c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <vTaskDelete+0x112>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	60bb      	str	r3, [r7, #8]
}
 800377e:	bf00      	nop
 8003780:	e7fe      	b.n	8003780 <vTaskDelete+0x110>
				portYIELD_WITHIN_API();
 8003782:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <vTaskDelete+0x150>)
 8003784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200005f8 	.word	0x200005f8
 80037a0:	200005fc 	.word	0x200005fc
 80037a4:	20000700 	.word	0x20000700
 80037a8:	20000714 	.word	0x20000714
 80037ac:	200006cc 	.word	0x200006cc
 80037b0:	200006e0 	.word	0x200006e0
 80037b4:	200006f8 	.word	0x200006f8
 80037b8:	20000704 	.word	0x20000704
 80037bc:	20000720 	.word	0x20000720
 80037c0:	e000ed04 	.word	0xe000ed04

080037c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037d2:	463a      	mov	r2, r7
 80037d4:	1d39      	adds	r1, r7, #4
 80037d6:	f107 0308 	add.w	r3, r7, #8
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fc fe7a 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037e0:	6839      	ldr	r1, [r7, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	9202      	str	r2, [sp, #8]
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	2300      	movs	r3, #0
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	2300      	movs	r3, #0
 80037f0:	460a      	mov	r2, r1
 80037f2:	4925      	ldr	r1, [pc, #148]	; (8003888 <vTaskStartScheduler+0xc4>)
 80037f4:	4825      	ldr	r0, [pc, #148]	; (800388c <vTaskStartScheduler+0xc8>)
 80037f6:	f7ff fd8a 	bl	800330e <xTaskCreateStatic>
 80037fa:	4603      	mov	r3, r0
 80037fc:	4a24      	ldr	r2, [pc, #144]	; (8003890 <vTaskStartScheduler+0xcc>)
 80037fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003800:	4b23      	ldr	r3, [pc, #140]	; (8003890 <vTaskStartScheduler+0xcc>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003808:	2301      	movs	r3, #1
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	e001      	b.n	8003812 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d124      	bne.n	8003862 <vTaskStartScheduler+0x9e>
	__asm volatile
 8003818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	613b      	str	r3, [r7, #16]
}
 800382a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800382c:	4b19      	ldr	r3, [pc, #100]	; (8003894 <vTaskStartScheduler+0xd0>)
 800382e:	f04f 32ff 	mov.w	r2, #4294967295
 8003832:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003834:	4b18      	ldr	r3, [pc, #96]	; (8003898 <vTaskStartScheduler+0xd4>)
 8003836:	2201      	movs	r2, #1
 8003838:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800383a:	4b18      	ldr	r3, [pc, #96]	; (800389c <vTaskStartScheduler+0xd8>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <vTaskStartScheduler+0xdc>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	4b12      	ldr	r3, [pc, #72]	; (8003890 <vTaskStartScheduler+0xcc>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d102      	bne.n	8003852 <vTaskStartScheduler+0x8e>
 800384c:	f002 fa26 	bl	8005c9c <SEGGER_SYSVIEW_OnIdle>
 8003850:	e004      	b.n	800385c <vTaskStartScheduler+0x98>
 8003852:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <vTaskStartScheduler+0xdc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f002 fa80 	bl	8005d5c <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800385c:	f000 fb98 	bl	8003f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003860:	e00e      	b.n	8003880 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003868:	d10a      	bne.n	8003880 <vTaskStartScheduler+0xbc>
	__asm volatile
 800386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	60fb      	str	r3, [r7, #12]
}
 800387c:	bf00      	nop
 800387e:	e7fe      	b.n	800387e <vTaskStartScheduler+0xba>
}
 8003880:	bf00      	nop
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	08006bf4 	.word	0x08006bf4
 800388c:	08003c91 	.word	0x08003c91
 8003890:	2000071c 	.word	0x2000071c
 8003894:	20000718 	.word	0x20000718
 8003898:	20000704 	.word	0x20000704
 800389c:	200006fc 	.word	0x200006fc
 80038a0:	200005f8 	.word	0x200005f8

080038a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038a8:	4b04      	ldr	r3, [pc, #16]	; (80038bc <vTaskSuspendAll+0x18>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3301      	adds	r3, #1
 80038ae:	4a03      	ldr	r2, [pc, #12]	; (80038bc <vTaskSuspendAll+0x18>)
 80038b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80038b2:	bf00      	nop
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	20000720 	.word	0x20000720

080038c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038ce:	4b43      	ldr	r3, [pc, #268]	; (80039dc <xTaskResumeAll+0x11c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10a      	bne.n	80038ec <xTaskResumeAll+0x2c>
	__asm volatile
 80038d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038da:	f383 8811 	msr	BASEPRI, r3
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	f3bf 8f4f 	dsb	sy
 80038e6:	603b      	str	r3, [r7, #0]
}
 80038e8:	bf00      	nop
 80038ea:	e7fe      	b.n	80038ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038ec:	f000 fbf2 	bl	80040d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038f0:	4b3a      	ldr	r3, [pc, #232]	; (80039dc <xTaskResumeAll+0x11c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	4a39      	ldr	r2, [pc, #228]	; (80039dc <xTaskResumeAll+0x11c>)
 80038f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038fa:	4b38      	ldr	r3, [pc, #224]	; (80039dc <xTaskResumeAll+0x11c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d165      	bne.n	80039ce <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003902:	4b37      	ldr	r3, [pc, #220]	; (80039e0 <xTaskResumeAll+0x120>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d061      	beq.n	80039ce <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800390a:	e032      	b.n	8003972 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800390c:	4b35      	ldr	r3, [pc, #212]	; (80039e4 <xTaskResumeAll+0x124>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3318      	adds	r3, #24
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fcce 	bl	80032ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	3304      	adds	r3, #4
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fcc9 	bl	80032ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4618      	mov	r0, r3
 800392c:	f002 fa5a 	bl	8005de4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	2201      	movs	r2, #1
 8003936:	409a      	lsls	r2, r3
 8003938:	4b2b      	ldr	r3, [pc, #172]	; (80039e8 <xTaskResumeAll+0x128>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4313      	orrs	r3, r2
 800393e:	4a2a      	ldr	r2, [pc, #168]	; (80039e8 <xTaskResumeAll+0x128>)
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4a27      	ldr	r2, [pc, #156]	; (80039ec <xTaskResumeAll+0x12c>)
 8003950:	441a      	add	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3304      	adds	r3, #4
 8003956:	4619      	mov	r1, r3
 8003958:	4610      	mov	r0, r2
 800395a:	f7ff fc8a 	bl	8003272 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003962:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <xTaskResumeAll+0x130>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	429a      	cmp	r2, r3
 800396a:	d302      	bcc.n	8003972 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800396c:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <xTaskResumeAll+0x134>)
 800396e:	2201      	movs	r2, #1
 8003970:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003972:	4b1c      	ldr	r3, [pc, #112]	; (80039e4 <xTaskResumeAll+0x124>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1c8      	bne.n	800390c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003980:	f000 fa3c 	bl	8003dfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003984:	4b1c      	ldr	r3, [pc, #112]	; (80039f8 <xTaskResumeAll+0x138>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d010      	beq.n	80039b2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003990:	f000 f858 	bl	8003a44 <xTaskIncrementTick>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800399a:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <xTaskResumeAll+0x134>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f1      	bne.n	8003990 <xTaskResumeAll+0xd0>

						xPendedTicks = 0;
 80039ac:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <xTaskResumeAll+0x138>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <xTaskResumeAll+0x134>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039ba:	2301      	movs	r3, #1
 80039bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039be:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <xTaskResumeAll+0x13c>)
 80039c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039ce:	f000 fbb1 	bl	8004134 <vPortExitCritical>

	return xAlreadyYielded;
 80039d2:	68bb      	ldr	r3, [r7, #8]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000720 	.word	0x20000720
 80039e0:	200006f8 	.word	0x200006f8
 80039e4:	200006b8 	.word	0x200006b8
 80039e8:	20000700 	.word	0x20000700
 80039ec:	200005fc 	.word	0x200005fc
 80039f0:	200005f8 	.word	0x200005f8
 80039f4:	2000070c 	.word	0x2000070c
 80039f8:	20000708 	.word	0x20000708
 80039fc:	e000ed04 	.word	0xe000ed04

08003a00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <xTaskGetTickCount+0x1c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a0c:	687b      	ldr	r3, [r7, #4]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	200006fc 	.word	0x200006fc

08003a20 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a26:	f000 fc3f 	bl	80042a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003a2e:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <xTaskGetTickCountFromISR+0x20>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a34:	683b      	ldr	r3, [r7, #0]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200006fc 	.word	0x200006fc

08003a44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a4e:	4b50      	ldr	r3, [pc, #320]	; (8003b90 <xTaskIncrementTick+0x14c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f040 8092 	bne.w	8003b7c <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a58:	4b4e      	ldr	r3, [pc, #312]	; (8003b94 <xTaskIncrementTick+0x150>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a60:	4a4c      	ldr	r2, [pc, #304]	; (8003b94 <xTaskIncrementTick+0x150>)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d120      	bne.n	8003aae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a6c:	4b4a      	ldr	r3, [pc, #296]	; (8003b98 <xTaskIncrementTick+0x154>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <xTaskIncrementTick+0x48>
	__asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	603b      	str	r3, [r7, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	e7fe      	b.n	8003a8a <xTaskIncrementTick+0x46>
 8003a8c:	4b42      	ldr	r3, [pc, #264]	; (8003b98 <xTaskIncrementTick+0x154>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	4b42      	ldr	r3, [pc, #264]	; (8003b9c <xTaskIncrementTick+0x158>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a40      	ldr	r2, [pc, #256]	; (8003b98 <xTaskIncrementTick+0x154>)
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4a40      	ldr	r2, [pc, #256]	; (8003b9c <xTaskIncrementTick+0x158>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	4b3f      	ldr	r3, [pc, #252]	; (8003ba0 <xTaskIncrementTick+0x15c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	4a3e      	ldr	r2, [pc, #248]	; (8003ba0 <xTaskIncrementTick+0x15c>)
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	f000 f9a7 	bl	8003dfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003aae:	4b3d      	ldr	r3, [pc, #244]	; (8003ba4 <xTaskIncrementTick+0x160>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d34c      	bcc.n	8003b52 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ab8:	4b37      	ldr	r3, [pc, #220]	; (8003b98 <xTaskIncrementTick+0x154>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ac2:	4b38      	ldr	r3, [pc, #224]	; (8003ba4 <xTaskIncrementTick+0x160>)
 8003ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac8:	601a      	str	r2, [r3, #0]
					break;
 8003aca:	e042      	b.n	8003b52 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003acc:	4b32      	ldr	r3, [pc, #200]	; (8003b98 <xTaskIncrementTick+0x154>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d203      	bcs.n	8003aec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ae4:	4a2f      	ldr	r2, [pc, #188]	; (8003ba4 <xTaskIncrementTick+0x160>)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003aea:	e032      	b.n	8003b52 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff fbe2 	bl	80032ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d004      	beq.n	8003b08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	3318      	adds	r3, #24
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff fbd9 	bl	80032ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f002 f96a 	bl	8005de4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	2201      	movs	r2, #1
 8003b16:	409a      	lsls	r2, r3
 8003b18:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <xTaskIncrementTick+0x164>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	4a22      	ldr	r2, [pc, #136]	; (8003ba8 <xTaskIncrementTick+0x164>)
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4a1f      	ldr	r2, [pc, #124]	; (8003bac <xTaskIncrementTick+0x168>)
 8003b30:	441a      	add	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	3304      	adds	r3, #4
 8003b36:	4619      	mov	r1, r3
 8003b38:	4610      	mov	r0, r2
 8003b3a:	f7ff fb9a 	bl	8003272 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b42:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <xTaskIncrementTick+0x16c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d3b5      	bcc.n	8003ab8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b50:	e7b2      	b.n	8003ab8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b52:	4b17      	ldr	r3, [pc, #92]	; (8003bb0 <xTaskIncrementTick+0x16c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b58:	4914      	ldr	r1, [pc, #80]	; (8003bac <xTaskIncrementTick+0x168>)
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d901      	bls.n	8003b6e <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b6e:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <xTaskIncrementTick+0x170>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 8003b76:	2301      	movs	r3, #1
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	e004      	b.n	8003b86 <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b7c:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <xTaskIncrementTick+0x174>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3301      	adds	r3, #1
 8003b82:	4a0d      	ldr	r2, [pc, #52]	; (8003bb8 <xTaskIncrementTick+0x174>)
 8003b84:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b86:	697b      	ldr	r3, [r7, #20]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000720 	.word	0x20000720
 8003b94:	200006fc 	.word	0x200006fc
 8003b98:	200006b0 	.word	0x200006b0
 8003b9c:	200006b4 	.word	0x200006b4
 8003ba0:	20000710 	.word	0x20000710
 8003ba4:	20000718 	.word	0x20000718
 8003ba8:	20000700 	.word	0x20000700
 8003bac:	200005fc 	.word	0x200005fc
 8003bb0:	200005f8 	.word	0x200005f8
 8003bb4:	2000070c 	.word	0x2000070c
 8003bb8:	20000708 	.word	0x20000708

08003bbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bc2:	4b2d      	ldr	r3, [pc, #180]	; (8003c78 <vTaskSwitchContext+0xbc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bca:	4b2c      	ldr	r3, [pc, #176]	; (8003c7c <vTaskSwitchContext+0xc0>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003bd0:	e04d      	b.n	8003c6e <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 8003bd2:	4b2a      	ldr	r3, [pc, #168]	; (8003c7c <vTaskSwitchContext+0xc0>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bd8:	4b29      	ldr	r3, [pc, #164]	; (8003c80 <vTaskSwitchContext+0xc4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	fab3 f383 	clz	r3, r3
 8003be4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003be6:	7afb      	ldrb	r3, [r7, #11]
 8003be8:	f1c3 031f 	rsb	r3, r3, #31
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	4925      	ldr	r1, [pc, #148]	; (8003c84 <vTaskSwitchContext+0xc8>)
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10a      	bne.n	8003c18 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	607b      	str	r3, [r7, #4]
}
 8003c14:	bf00      	nop
 8003c16:	e7fe      	b.n	8003c16 <vTaskSwitchContext+0x5a>
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <vTaskSwitchContext+0xc8>)
 8003c24:	4413      	add	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	3308      	adds	r3, #8
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d104      	bne.n	8003c48 <vTaskSwitchContext+0x8c>
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	4a0e      	ldr	r2, [pc, #56]	; (8003c88 <vTaskSwitchContext+0xcc>)
 8003c50:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8003c52:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <vTaskSwitchContext+0xcc>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <vTaskSwitchContext+0xd0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d102      	bne.n	8003c64 <vTaskSwitchContext+0xa8>
 8003c5e:	f002 f81d 	bl	8005c9c <SEGGER_SYSVIEW_OnIdle>
}
 8003c62:	e004      	b.n	8003c6e <vTaskSwitchContext+0xb2>
		traceTASK_SWITCHED_IN();
 8003c64:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <vTaskSwitchContext+0xcc>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f002 f877 	bl	8005d5c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003c6e:	bf00      	nop
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000720 	.word	0x20000720
 8003c7c:	2000070c 	.word	0x2000070c
 8003c80:	20000700 	.word	0x20000700
 8003c84:	200005fc 	.word	0x200005fc
 8003c88:	200005f8 	.word	0x200005f8
 8003c8c:	2000071c 	.word	0x2000071c

08003c90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c98:	f000 f852 	bl	8003d40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <prvIdleTask+0x28>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d9f9      	bls.n	8003c98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <prvIdleTask+0x2c>)
 8003ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003cb4:	e7f0      	b.n	8003c98 <prvIdleTask+0x8>
 8003cb6:	bf00      	nop
 8003cb8:	200005fc 	.word	0x200005fc
 8003cbc:	e000ed04 	.word	0xe000ed04

08003cc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	e00c      	b.n	8003ce6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4a12      	ldr	r2, [pc, #72]	; (8003d20 <prvInitialiseTaskLists+0x60>)
 8003cd8:	4413      	add	r3, r2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fa9c 	bl	8003218 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b06      	cmp	r3, #6
 8003cea:	d9ef      	bls.n	8003ccc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003cec:	480d      	ldr	r0, [pc, #52]	; (8003d24 <prvInitialiseTaskLists+0x64>)
 8003cee:	f7ff fa93 	bl	8003218 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cf2:	480d      	ldr	r0, [pc, #52]	; (8003d28 <prvInitialiseTaskLists+0x68>)
 8003cf4:	f7ff fa90 	bl	8003218 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cf8:	480c      	ldr	r0, [pc, #48]	; (8003d2c <prvInitialiseTaskLists+0x6c>)
 8003cfa:	f7ff fa8d 	bl	8003218 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cfe:	480c      	ldr	r0, [pc, #48]	; (8003d30 <prvInitialiseTaskLists+0x70>)
 8003d00:	f7ff fa8a 	bl	8003218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d04:	480b      	ldr	r0, [pc, #44]	; (8003d34 <prvInitialiseTaskLists+0x74>)
 8003d06:	f7ff fa87 	bl	8003218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <prvInitialiseTaskLists+0x78>)
 8003d0c:	4a05      	ldr	r2, [pc, #20]	; (8003d24 <prvInitialiseTaskLists+0x64>)
 8003d0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <prvInitialiseTaskLists+0x7c>)
 8003d12:	4a05      	ldr	r2, [pc, #20]	; (8003d28 <prvInitialiseTaskLists+0x68>)
 8003d14:	601a      	str	r2, [r3, #0]
}
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	200005fc 	.word	0x200005fc
 8003d24:	20000688 	.word	0x20000688
 8003d28:	2000069c 	.word	0x2000069c
 8003d2c:	200006b8 	.word	0x200006b8
 8003d30:	200006cc 	.word	0x200006cc
 8003d34:	200006e4 	.word	0x200006e4
 8003d38:	200006b0 	.word	0x200006b0
 8003d3c:	200006b4 	.word	0x200006b4

08003d40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d46:	e019      	b.n	8003d7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d48:	f000 f9c4 	bl	80040d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d4c:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <prvCheckTasksWaitingTermination+0x50>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff faae 	bl	80032ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <prvCheckTasksWaitingTermination+0x54>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	4a0b      	ldr	r2, [pc, #44]	; (8003d94 <prvCheckTasksWaitingTermination+0x54>)
 8003d66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <prvCheckTasksWaitingTermination+0x58>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	4a0a      	ldr	r2, [pc, #40]	; (8003d98 <prvCheckTasksWaitingTermination+0x58>)
 8003d70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d72:	f000 f9df 	bl	8004134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f810 	bl	8003d9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <prvCheckTasksWaitingTermination+0x58>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e1      	bne.n	8003d48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200006cc 	.word	0x200006cc
 8003d94:	200006f8 	.word	0x200006f8
 8003d98:	200006e0 	.word	0x200006e0

08003d9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d108      	bne.n	8003dc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fbdc 	bl	8004570 <vPortFree>
				vPortFree( pxTCB );
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fbd9 	bl	8004570 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003dbe:	e018      	b.n	8003df2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d103      	bne.n	8003dd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fbd0 	bl	8004570 <vPortFree>
	}
 8003dd0:	e00f      	b.n	8003df2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d00a      	beq.n	8003df2 <prvDeleteTCB+0x56>
	__asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	60fb      	str	r3, [r7, #12]
}
 8003dee:	bf00      	nop
 8003df0:	e7fe      	b.n	8003df0 <prvDeleteTCB+0x54>
	}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e02:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <prvResetNextTaskUnblockTime+0x38>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d104      	bne.n	8003e16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <prvResetNextTaskUnblockTime+0x3c>)
 8003e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e14:	e008      	b.n	8003e28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <prvResetNextTaskUnblockTime+0x38>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4a04      	ldr	r2, [pc, #16]	; (8003e38 <prvResetNextTaskUnblockTime+0x3c>)
 8003e26:	6013      	str	r3, [r2, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	200006b0 	.word	0x200006b0
 8003e38:	20000718 	.word	0x20000718

08003e3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e42:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <xTaskGetSchedulerState+0x34>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	e008      	b.n	8003e62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e50:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <xTaskGetSchedulerState+0x38>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d102      	bne.n	8003e5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	607b      	str	r3, [r7, #4]
 8003e5c:	e001      	b.n	8003e62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e62:	687b      	ldr	r3, [r7, #4]
	}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	20000704 	.word	0x20000704
 8003e74:	20000720 	.word	0x20000720

08003e78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3b04      	subs	r3, #4
 8003e88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3b04      	subs	r3, #4
 8003e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f023 0201 	bic.w	r2, r3, #1
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3b04      	subs	r3, #4
 8003ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ea8:	4a0c      	ldr	r2, [pc, #48]	; (8003edc <pxPortInitialiseStack+0x64>)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3b14      	subs	r3, #20
 8003eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3b04      	subs	r3, #4
 8003ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f06f 0202 	mvn.w	r2, #2
 8003ec6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3b20      	subs	r3, #32
 8003ecc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ece:	68fb      	ldr	r3, [r7, #12]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	08003ee1 	.word	0x08003ee1

08003ee0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003eea:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <prvTaskExitError+0x54>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef2:	d00a      	beq.n	8003f0a <prvTaskExitError+0x2a>
	__asm volatile
 8003ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	60fb      	str	r3, [r7, #12]
}
 8003f06:	bf00      	nop
 8003f08:	e7fe      	b.n	8003f08 <prvTaskExitError+0x28>
	__asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	60bb      	str	r3, [r7, #8]
}
 8003f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f1e:	bf00      	nop
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0fc      	beq.n	8003f20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	2000000c 	.word	0x2000000c
	...

08003f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f40:	4b07      	ldr	r3, [pc, #28]	; (8003f60 <pxCurrentTCBConst2>)
 8003f42:	6819      	ldr	r1, [r3, #0]
 8003f44:	6808      	ldr	r0, [r1, #0]
 8003f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f4a:	f380 8809 	msr	PSP, r0
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f04f 0000 	mov.w	r0, #0
 8003f56:	f380 8811 	msr	BASEPRI, r0
 8003f5a:	4770      	bx	lr
 8003f5c:	f3af 8000 	nop.w

08003f60 <pxCurrentTCBConst2>:
 8003f60:	200005f8 	.word	0x200005f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop

08003f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003f68:	4808      	ldr	r0, [pc, #32]	; (8003f8c <prvPortStartFirstTask+0x24>)
 8003f6a:	6800      	ldr	r0, [r0, #0]
 8003f6c:	6800      	ldr	r0, [r0, #0]
 8003f6e:	f380 8808 	msr	MSP, r0
 8003f72:	f04f 0000 	mov.w	r0, #0
 8003f76:	f380 8814 	msr	CONTROL, r0
 8003f7a:	b662      	cpsie	i
 8003f7c:	b661      	cpsie	f
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	df00      	svc	0
 8003f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f8a:	bf00      	nop
 8003f8c:	e000ed08 	.word	0xe000ed08

08003f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f96:	4b46      	ldr	r3, [pc, #280]	; (80040b0 <xPortStartScheduler+0x120>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a46      	ldr	r2, [pc, #280]	; (80040b4 <xPortStartScheduler+0x124>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d10a      	bne.n	8003fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	613b      	str	r3, [r7, #16]
}
 8003fb2:	bf00      	nop
 8003fb4:	e7fe      	b.n	8003fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fb6:	4b3e      	ldr	r3, [pc, #248]	; (80040b0 <xPortStartScheduler+0x120>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a3f      	ldr	r2, [pc, #252]	; (80040b8 <xPortStartScheduler+0x128>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d10a      	bne.n	8003fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	60fb      	str	r3, [r7, #12]
}
 8003fd2:	bf00      	nop
 8003fd4:	e7fe      	b.n	8003fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fd6:	4b39      	ldr	r3, [pc, #228]	; (80040bc <xPortStartScheduler+0x12c>)
 8003fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	22ff      	movs	r2, #255	; 0xff
 8003fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <xPortStartScheduler+0x130>)
 8003ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ffe:	4b31      	ldr	r3, [pc, #196]	; (80040c4 <xPortStartScheduler+0x134>)
 8004000:	2207      	movs	r2, #7
 8004002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004004:	e009      	b.n	800401a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004006:	4b2f      	ldr	r3, [pc, #188]	; (80040c4 <xPortStartScheduler+0x134>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3b01      	subs	r3, #1
 800400c:	4a2d      	ldr	r2, [pc, #180]	; (80040c4 <xPortStartScheduler+0x134>)
 800400e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	b2db      	uxtb	r3, r3
 8004018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800401a:	78fb      	ldrb	r3, [r7, #3]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004022:	2b80      	cmp	r3, #128	; 0x80
 8004024:	d0ef      	beq.n	8004006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004026:	4b27      	ldr	r3, [pc, #156]	; (80040c4 <xPortStartScheduler+0x134>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f1c3 0307 	rsb	r3, r3, #7
 800402e:	2b04      	cmp	r3, #4
 8004030:	d00a      	beq.n	8004048 <xPortStartScheduler+0xb8>
	__asm volatile
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	60bb      	str	r3, [r7, #8]
}
 8004044:	bf00      	nop
 8004046:	e7fe      	b.n	8004046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004048:	4b1e      	ldr	r3, [pc, #120]	; (80040c4 <xPortStartScheduler+0x134>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	021b      	lsls	r3, r3, #8
 800404e:	4a1d      	ldr	r2, [pc, #116]	; (80040c4 <xPortStartScheduler+0x134>)
 8004050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004052:	4b1c      	ldr	r3, [pc, #112]	; (80040c4 <xPortStartScheduler+0x134>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800405a:	4a1a      	ldr	r2, [pc, #104]	; (80040c4 <xPortStartScheduler+0x134>)
 800405c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	b2da      	uxtb	r2, r3
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004066:	4b18      	ldr	r3, [pc, #96]	; (80040c8 <xPortStartScheduler+0x138>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a17      	ldr	r2, [pc, #92]	; (80040c8 <xPortStartScheduler+0x138>)
 800406c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004072:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <xPortStartScheduler+0x138>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a14      	ldr	r2, [pc, #80]	; (80040c8 <xPortStartScheduler+0x138>)
 8004078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800407c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800407e:	f000 f8e5 	bl	800424c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004082:	4b12      	ldr	r3, [pc, #72]	; (80040cc <xPortStartScheduler+0x13c>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004088:	f000 f904 	bl	8004294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800408c:	4b10      	ldr	r3, [pc, #64]	; (80040d0 <xPortStartScheduler+0x140>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a0f      	ldr	r2, [pc, #60]	; (80040d0 <xPortStartScheduler+0x140>)
 8004092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004098:	f7ff ff66 	bl	8003f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800409c:	f7ff fd8e 	bl	8003bbc <vTaskSwitchContext>
	prvTaskExitError();
 80040a0:	f7ff ff1e 	bl	8003ee0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	e000ed00 	.word	0xe000ed00
 80040b4:	410fc271 	.word	0x410fc271
 80040b8:	410fc270 	.word	0x410fc270
 80040bc:	e000e400 	.word	0xe000e400
 80040c0:	20000724 	.word	0x20000724
 80040c4:	20000728 	.word	0x20000728
 80040c8:	e000ed20 	.word	0xe000ed20
 80040cc:	2000000c 	.word	0x2000000c
 80040d0:	e000ef34 	.word	0xe000ef34

080040d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	607b      	str	r3, [r7, #4]
}
 80040ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80040ee:	4b0f      	ldr	r3, [pc, #60]	; (800412c <vPortEnterCritical+0x58>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3301      	adds	r3, #1
 80040f4:	4a0d      	ldr	r2, [pc, #52]	; (800412c <vPortEnterCritical+0x58>)
 80040f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80040f8:	4b0c      	ldr	r3, [pc, #48]	; (800412c <vPortEnterCritical+0x58>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d10f      	bne.n	8004120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <vPortEnterCritical+0x5c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <vPortEnterCritical+0x4c>
	__asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	603b      	str	r3, [r7, #0]
}
 800411c:	bf00      	nop
 800411e:	e7fe      	b.n	800411e <vPortEnterCritical+0x4a>
	}
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	2000000c 	.word	0x2000000c
 8004130:	e000ed04 	.word	0xe000ed04

08004134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800413a:	4b12      	ldr	r3, [pc, #72]	; (8004184 <vPortExitCritical+0x50>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10a      	bne.n	8004158 <vPortExitCritical+0x24>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	607b      	str	r3, [r7, #4]
}
 8004154:	bf00      	nop
 8004156:	e7fe      	b.n	8004156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004158:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <vPortExitCritical+0x50>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3b01      	subs	r3, #1
 800415e:	4a09      	ldr	r2, [pc, #36]	; (8004184 <vPortExitCritical+0x50>)
 8004160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004162:	4b08      	ldr	r3, [pc, #32]	; (8004184 <vPortExitCritical+0x50>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d105      	bne.n	8004176 <vPortExitCritical+0x42>
 800416a:	2300      	movs	r3, #0
 800416c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	2000000c 	.word	0x2000000c
	...

08004190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004190:	f3ef 8009 	mrs	r0, PSP
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	4b15      	ldr	r3, [pc, #84]	; (80041f0 <pxCurrentTCBConst>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	f01e 0f10 	tst.w	lr, #16
 80041a0:	bf08      	it	eq
 80041a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041aa:	6010      	str	r0, [r2, #0]
 80041ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80041b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80041b4:	f380 8811 	msr	BASEPRI, r0
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f7ff fcfc 	bl	8003bbc <vTaskSwitchContext>
 80041c4:	f04f 0000 	mov.w	r0, #0
 80041c8:	f380 8811 	msr	BASEPRI, r0
 80041cc:	bc09      	pop	{r0, r3}
 80041ce:	6819      	ldr	r1, [r3, #0]
 80041d0:	6808      	ldr	r0, [r1, #0]
 80041d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d6:	f01e 0f10 	tst.w	lr, #16
 80041da:	bf08      	it	eq
 80041dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041e0:	f380 8809 	msr	PSP, r0
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	f3af 8000 	nop.w

080041f0 <pxCurrentTCBConst>:
 80041f0:	200005f8 	.word	0x200005f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop

080041f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
	__asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	607b      	str	r3, [r7, #4]
}
 8004210:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8004212:	f001 fcc9 	bl	8005ba8 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004216:	f7ff fc15 	bl	8003a44 <xTaskIncrementTick>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d006      	beq.n	800422e <xPortSysTickHandler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8004220:	f001 fd20 	bl	8005c64 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004224:	4b08      	ldr	r3, [pc, #32]	; (8004248 <xPortSysTickHandler+0x50>)
 8004226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	e001      	b.n	8004232 <xPortSysTickHandler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 800422e:	f001 fcfd 	bl	8005c2c <SEGGER_SYSVIEW_RecordExitISR>
 8004232:	2300      	movs	r3, #0
 8004234:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	f383 8811 	msr	BASEPRI, r3
}
 800423c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <vPortSetupTimerInterrupt+0x34>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <vPortSetupTimerInterrupt+0x38>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800425c:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <vPortSetupTimerInterrupt+0x3c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0a      	ldr	r2, [pc, #40]	; (800428c <vPortSetupTimerInterrupt+0x40>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	099b      	lsrs	r3, r3, #6
 8004268:	4a09      	ldr	r2, [pc, #36]	; (8004290 <vPortSetupTimerInterrupt+0x44>)
 800426a:	3b01      	subs	r3, #1
 800426c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800426e:	4b04      	ldr	r3, [pc, #16]	; (8004280 <vPortSetupTimerInterrupt+0x34>)
 8004270:	2207      	movs	r2, #7
 8004272:	601a      	str	r2, [r3, #0]
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	e000e010 	.word	0xe000e010
 8004284:	e000e018 	.word	0xe000e018
 8004288:	20000000 	.word	0x20000000
 800428c:	10624dd3 	.word	0x10624dd3
 8004290:	e000e014 	.word	0xe000e014

08004294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80042a4 <vPortEnableVFP+0x10>
 8004298:	6801      	ldr	r1, [r0, #0]
 800429a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800429e:	6001      	str	r1, [r0, #0]
 80042a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80042a2:	bf00      	nop
 80042a4:	e000ed88 	.word	0xe000ed88

080042a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/


	void vPortValidateInterruptPriority( void )
	{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80042ae:	f3ef 8305 	mrs	r3, IPSR
 80042b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b0f      	cmp	r3, #15
 80042b8:	d914      	bls.n	80042e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80042ba:	4a17      	ldr	r2, [pc, #92]	; (8004318 <vPortValidateInterruptPriority+0x70>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80042c4:	4b15      	ldr	r3, [pc, #84]	; (800431c <vPortValidateInterruptPriority+0x74>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	7afa      	ldrb	r2, [r7, #11]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d20a      	bcs.n	80042e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	607b      	str	r3, [r7, #4]
}
 80042e0:	bf00      	nop
 80042e2:	e7fe      	b.n	80042e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <vPortValidateInterruptPriority+0x78>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042ec:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <vPortValidateInterruptPriority+0x7c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d90a      	bls.n	800430a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	603b      	str	r3, [r7, #0]
}
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <vPortValidateInterruptPriority+0x60>
	}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	e000e3f0 	.word	0xe000e3f0
 800431c:	20000724 	.word	0x20000724
 8004320:	e000ed0c 	.word	0xe000ed0c
 8004324:	20000728 	.word	0x20000728

08004328 <vSetVarulMaxPRIGROUPValuE>:

#if( configASSERT_DEFINED == 1 )

void vSetVarulMaxPRIGROUPValuE( void )
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
	// copy code port.c line 299 to 359

#if( configASSERT_DEFINED == 1 )
{
	volatile uint32_t ulOriginalPriority;
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800432e:	4b27      	ldr	r3, [pc, #156]	; (80043cc <vSetVarulMaxPRIGROUPValuE+0xa4>)
 8004330:	60fb      	str	r3, [r7, #12]
	functions can be called.  ISR safe functions are those that end in
	"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
	ensure interrupt entry is as fast and simple as possible.

	Save the interrupt priority value that is about to be clobbered. */
	ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	607b      	str	r3, [r7, #4]

	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	22ff      	movs	r2, #255	; 0xff
 800433e:	701a      	strb	r2, [r3, #0]

	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	70fb      	strb	r3, [r7, #3]

	/* Use the same mask on the maximum system call priority. */
	ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004350:	b2da      	uxtb	r2, r3
 8004352:	4b1f      	ldr	r3, [pc, #124]	; (80043d0 <vSetVarulMaxPRIGROUPValuE+0xa8>)
 8004354:	701a      	strb	r2, [r3, #0]

	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004356:	4b1f      	ldr	r3, [pc, #124]	; (80043d4 <vSetVarulMaxPRIGROUPValuE+0xac>)
 8004358:	2207      	movs	r2, #7
 800435a:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800435c:	e009      	b.n	8004372 <vSetVarulMaxPRIGROUPValuE+0x4a>
	{
		ulMaxPRIGROUPValue--;
 800435e:	4b1d      	ldr	r3, [pc, #116]	; (80043d4 <vSetVarulMaxPRIGROUPValuE+0xac>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3b01      	subs	r3, #1
 8004364:	4a1b      	ldr	r2, [pc, #108]	; (80043d4 <vSetVarulMaxPRIGROUPValuE+0xac>)
 8004366:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	70fb      	strb	r3, [r7, #3]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437a:	2b80      	cmp	r3, #128	; 0x80
 800437c:	d0ef      	beq.n	800435e <vSetVarulMaxPRIGROUPValuE+0x36>
	#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800437e:	4b15      	ldr	r3, [pc, #84]	; (80043d4 <vSetVarulMaxPRIGROUPValuE+0xac>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f1c3 0307 	rsb	r3, r3, #7
 8004386:	2b04      	cmp	r3, #4
 8004388:	d00a      	beq.n	80043a0 <vSetVarulMaxPRIGROUPValuE+0x78>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	60bb      	str	r3, [r7, #8]
}
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <vSetVarulMaxPRIGROUPValuE+0x76>
	}
	#endif

	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043a0:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	4a0b      	ldr	r2, [pc, #44]	; (80043d4 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80043a8:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043aa:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043b2:	4a08      	ldr	r2, [pc, #32]	; (80043d4 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80043b4:	6013      	str	r3, [r2, #0]

	/* Restore the clobbered interrupt priority register to its original
	value. */
	*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	701a      	strb	r2, [r3, #0]
}
#endif /* conifgASSERT_DEFINED */


}
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	e000e400 	.word	0xe000e400
 80043d0:	20000724 	.word	0x20000724
 80043d4:	20000728 	.word	0x20000728

080043d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08a      	sub	sp, #40	; 0x28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80043e4:	f7ff fa5e 	bl	80038a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80043e8:	4b5b      	ldr	r3, [pc, #364]	; (8004558 <pvPortMalloc+0x180>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80043f0:	f000 f920 	bl	8004634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80043f4:	4b59      	ldr	r3, [pc, #356]	; (800455c <pvPortMalloc+0x184>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f040 8093 	bne.w	8004528 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d01d      	beq.n	8004444 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004408:	2208      	movs	r2, #8
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4413      	add	r3, r2
 800440e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	2b00      	cmp	r3, #0
 8004418:	d014      	beq.n	8004444 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f023 0307 	bic.w	r3, r3, #7
 8004420:	3308      	adds	r3, #8
 8004422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <pvPortMalloc+0x6c>
	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	617b      	str	r3, [r7, #20]
}
 8004440:	bf00      	nop
 8004442:	e7fe      	b.n	8004442 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d06e      	beq.n	8004528 <pvPortMalloc+0x150>
 800444a:	4b45      	ldr	r3, [pc, #276]	; (8004560 <pvPortMalloc+0x188>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	429a      	cmp	r2, r3
 8004452:	d869      	bhi.n	8004528 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004454:	4b43      	ldr	r3, [pc, #268]	; (8004564 <pvPortMalloc+0x18c>)
 8004456:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004458:	4b42      	ldr	r3, [pc, #264]	; (8004564 <pvPortMalloc+0x18c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800445e:	e004      	b.n	800446a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	429a      	cmp	r2, r3
 8004472:	d903      	bls.n	800447c <pvPortMalloc+0xa4>
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f1      	bne.n	8004460 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800447c:	4b36      	ldr	r3, [pc, #216]	; (8004558 <pvPortMalloc+0x180>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004482:	429a      	cmp	r2, r3
 8004484:	d050      	beq.n	8004528 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2208      	movs	r2, #8
 800448c:	4413      	add	r3, r2
 800448e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	1ad2      	subs	r2, r2, r3
 80044a0:	2308      	movs	r3, #8
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d91f      	bls.n	80044e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4413      	add	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <pvPortMalloc+0xf8>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	613b      	str	r3, [r7, #16]
}
 80044cc:	bf00      	nop
 80044ce:	e7fe      	b.n	80044ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	1ad2      	subs	r2, r2, r3
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044e2:	69b8      	ldr	r0, [r7, #24]
 80044e4:	f000 f908 	bl	80046f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044e8:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <pvPortMalloc+0x188>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	4a1b      	ldr	r2, [pc, #108]	; (8004560 <pvPortMalloc+0x188>)
 80044f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044f6:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <pvPortMalloc+0x188>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <pvPortMalloc+0x190>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d203      	bcs.n	800450a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004502:	4b17      	ldr	r3, [pc, #92]	; (8004560 <pvPortMalloc+0x188>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a18      	ldr	r2, [pc, #96]	; (8004568 <pvPortMalloc+0x190>)
 8004508:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	4b13      	ldr	r3, [pc, #76]	; (800455c <pvPortMalloc+0x184>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	431a      	orrs	r2, r3
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800451e:	4b13      	ldr	r3, [pc, #76]	; (800456c <pvPortMalloc+0x194>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3301      	adds	r3, #1
 8004524:	4a11      	ldr	r2, [pc, #68]	; (800456c <pvPortMalloc+0x194>)
 8004526:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004528:	f7ff f9ca 	bl	80038c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <pvPortMalloc+0x174>
	__asm volatile
 8004536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	60fb      	str	r3, [r7, #12]
}
 8004548:	bf00      	nop
 800454a:	e7fe      	b.n	800454a <pvPortMalloc+0x172>
	return pvReturn;
 800454c:	69fb      	ldr	r3, [r7, #28]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3728      	adds	r7, #40	; 0x28
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20004334 	.word	0x20004334
 800455c:	20004348 	.word	0x20004348
 8004560:	20004338 	.word	0x20004338
 8004564:	2000432c 	.word	0x2000432c
 8004568:	2000433c 	.word	0x2000433c
 800456c:	20004340 	.word	0x20004340

08004570 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d04d      	beq.n	800461e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004582:	2308      	movs	r3, #8
 8004584:	425b      	negs	r3, r3
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4413      	add	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	4b24      	ldr	r3, [pc, #144]	; (8004628 <vPortFree+0xb8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <vPortFree+0x44>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	60fb      	str	r3, [r7, #12]
}
 80045b0:	bf00      	nop
 80045b2:	e7fe      	b.n	80045b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <vPortFree+0x62>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	60bb      	str	r3, [r7, #8]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <vPortFree+0xb8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4013      	ands	r3, r2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01e      	beq.n	800461e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d11a      	bne.n	800461e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <vPortFree+0xb8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	401a      	ands	r2, r3
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80045f8:	f7ff f954 	bl	80038a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	4b0a      	ldr	r3, [pc, #40]	; (800462c <vPortFree+0xbc>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4413      	add	r3, r2
 8004606:	4a09      	ldr	r2, [pc, #36]	; (800462c <vPortFree+0xbc>)
 8004608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800460a:	6938      	ldr	r0, [r7, #16]
 800460c:	f000 f874 	bl	80046f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004610:	4b07      	ldr	r3, [pc, #28]	; (8004630 <vPortFree+0xc0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	4a06      	ldr	r2, [pc, #24]	; (8004630 <vPortFree+0xc0>)
 8004618:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800461a:	f7ff f951 	bl	80038c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800461e:	bf00      	nop
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20004348 	.word	0x20004348
 800462c:	20004338 	.word	0x20004338
 8004630:	20004344 	.word	0x20004344

08004634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800463a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800463e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004640:	4b27      	ldr	r3, [pc, #156]	; (80046e0 <prvHeapInit+0xac>)
 8004642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00c      	beq.n	8004668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3307      	adds	r3, #7
 8004652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0307 	bic.w	r3, r3, #7
 800465a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	4a1f      	ldr	r2, [pc, #124]	; (80046e0 <prvHeapInit+0xac>)
 8004664:	4413      	add	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800466c:	4a1d      	ldr	r2, [pc, #116]	; (80046e4 <prvHeapInit+0xb0>)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004672:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <prvHeapInit+0xb0>)
 8004674:	2200      	movs	r2, #0
 8004676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	4413      	add	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004680:	2208      	movs	r2, #8
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	1a9b      	subs	r3, r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0307 	bic.w	r3, r3, #7
 800468e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4a15      	ldr	r2, [pc, #84]	; (80046e8 <prvHeapInit+0xb4>)
 8004694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004696:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <prvHeapInit+0xb4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2200      	movs	r2, #0
 800469c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800469e:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <prvHeapInit+0xb4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	1ad2      	subs	r2, r2, r3
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <prvHeapInit+0xb4>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	4a0a      	ldr	r2, [pc, #40]	; (80046ec <prvHeapInit+0xb8>)
 80046c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	4a09      	ldr	r2, [pc, #36]	; (80046f0 <prvHeapInit+0xbc>)
 80046ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046cc:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <prvHeapInit+0xc0>)
 80046ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80046d2:	601a      	str	r2, [r3, #0]
}
 80046d4:	bf00      	nop
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	2000072c 	.word	0x2000072c
 80046e4:	2000432c 	.word	0x2000432c
 80046e8:	20004334 	.word	0x20004334
 80046ec:	2000433c 	.word	0x2000433c
 80046f0:	20004338 	.word	0x20004338
 80046f4:	20004348 	.word	0x20004348

080046f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004700:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <prvInsertBlockIntoFreeList+0xac>)
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e002      	b.n	800470c <prvInsertBlockIntoFreeList+0x14>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	429a      	cmp	r2, r3
 8004714:	d8f7      	bhi.n	8004706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	4413      	add	r3, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	429a      	cmp	r2, r3
 8004726:	d108      	bne.n	800473a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	441a      	add	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	441a      	add	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d118      	bne.n	8004780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d00d      	beq.n	8004776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	441a      	add	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	e008      	b.n	8004788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004776:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	e003      	b.n	8004788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	429a      	cmp	r2, r3
 800478e:	d002      	beq.n	8004796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	2000432c 	.word	0x2000432c
 80047a8:	20004334 	.word	0x20004334

080047ac <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80047b0:	4803      	ldr	r0, [pc, #12]	; (80047c0 <_cbSendSystemDesc+0x14>)
 80047b2:	f001 f9a3 	bl	8005afc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80047b6:	4803      	ldr	r0, [pc, #12]	; (80047c4 <_cbSendSystemDesc+0x18>)
 80047b8:	f001 f9a0 	bl	8005afc <SEGGER_SYSVIEW_SendSysDesc>
}
 80047bc:	bf00      	nop
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	08006bfc 	.word	0x08006bfc
 80047c4:	08006c30 	.word	0x08006c30

080047c8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80047cc:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <SEGGER_SYSVIEW_Conf+0x20>)
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <SEGGER_SYSVIEW_Conf+0x20>)
 80047d2:	6819      	ldr	r1, [r3, #0]
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <SEGGER_SYSVIEW_Conf+0x24>)
 80047d6:	4a06      	ldr	r2, [pc, #24]	; (80047f0 <SEGGER_SYSVIEW_Conf+0x28>)
 80047d8:	f000 fe18 	bl	800540c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80047dc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80047e0:	f000 fe52 	bl	8005488 <SEGGER_SYSVIEW_SetRAMBase>
}
 80047e4:	bf00      	nop
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20000000 	.word	0x20000000
 80047ec:	080047ad 	.word	0x080047ad
 80047f0:	08006cc8 	.word	0x08006cc8

080047f4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80047f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80047fa:	2300      	movs	r3, #0
 80047fc:	607b      	str	r3, [r7, #4]
 80047fe:	e033      	b.n	8004868 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004800:	491e      	ldr	r1, [pc, #120]	; (800487c <_cbSendTaskList+0x88>)
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	491a      	ldr	r1, [pc, #104]	; (800487c <_cbSendTaskList+0x88>)
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	3304      	adds	r3, #4
 8004820:	6819      	ldr	r1, [r3, #0]
 8004822:	4c16      	ldr	r4, [pc, #88]	; (800487c <_cbSendTaskList+0x88>)
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4423      	add	r3, r4
 8004830:	3308      	adds	r3, #8
 8004832:	681c      	ldr	r4, [r3, #0]
 8004834:	4d11      	ldr	r5, [pc, #68]	; (800487c <_cbSendTaskList+0x88>)
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	442b      	add	r3, r5
 8004842:	330c      	adds	r3, #12
 8004844:	681d      	ldr	r5, [r3, #0]
 8004846:	4e0d      	ldr	r6, [pc, #52]	; (800487c <_cbSendTaskList+0x88>)
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4433      	add	r3, r6
 8004854:	3310      	adds	r3, #16
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	462b      	mov	r3, r5
 800485c:	4622      	mov	r2, r4
 800485e:	f000 f979 	bl	8004b54 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3301      	adds	r3, #1
 8004866:	607b      	str	r3, [r7, #4]
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <_cbSendTaskList+0x8c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	429a      	cmp	r2, r3
 8004870:	d3c6      	bcc.n	8004800 <_cbSendTaskList+0xc>
  }
}
 8004872:	bf00      	nop
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800487c:	2000434c 	.word	0x2000434c
 8004880:	200043ec 	.word	0x200043ec

08004884 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004888:	b082      	sub	sp, #8
 800488a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800488c:	f7ff f8c8 	bl	8003a20 <xTaskGetTickCountFromISR>
 8004890:	4603      	mov	r3, r0
 8004892:	2200      	movs	r2, #0
 8004894:	469a      	mov	sl, r3
 8004896:	4693      	mov	fp, r2
 8004898:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800489c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	f04f 0a00 	mov.w	sl, #0
 80048a8:	f04f 0b00 	mov.w	fp, #0
 80048ac:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80048b0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80048b4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80048b8:	4652      	mov	r2, sl
 80048ba:	465b      	mov	r3, fp
 80048bc:	1a14      	subs	r4, r2, r0
 80048be:	eb63 0501 	sbc.w	r5, r3, r1
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	00ab      	lsls	r3, r5, #2
 80048cc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80048d0:	00a2      	lsls	r2, r4, #2
 80048d2:	4614      	mov	r4, r2
 80048d4:	461d      	mov	r5, r3
 80048d6:	eb14 0800 	adds.w	r8, r4, r0
 80048da:	eb45 0901 	adc.w	r9, r5, r1
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048f2:	4690      	mov	r8, r2
 80048f4:	4699      	mov	r9, r3
 80048f6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80048fa:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80048fe:	4610      	mov	r0, r2
 8004900:	4619      	mov	r1, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800490c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800491a:	2205      	movs	r2, #5
 800491c:	492b      	ldr	r1, [pc, #172]	; (80049cc <SYSVIEW_AddTask+0xc0>)
 800491e:	68b8      	ldr	r0, [r7, #8]
 8004920:	f001 fc18 	bl	8006154 <memcmp>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d04b      	beq.n	80049c2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800492a:	4b29      	ldr	r3, [pc, #164]	; (80049d0 <SYSVIEW_AddTask+0xc4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b07      	cmp	r3, #7
 8004930:	d903      	bls.n	800493a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004932:	4828      	ldr	r0, [pc, #160]	; (80049d4 <SYSVIEW_AddTask+0xc8>)
 8004934:	f001 fb88 	bl	8006048 <SEGGER_SYSVIEW_Warn>
    return;
 8004938:	e044      	b.n	80049c4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800493a:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <SYSVIEW_AddTask+0xc4>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4926      	ldr	r1, [pc, #152]	; (80049d8 <SYSVIEW_AddTask+0xcc>)
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800494e:	4b20      	ldr	r3, [pc, #128]	; (80049d0 <SYSVIEW_AddTask+0xc4>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	4921      	ldr	r1, [pc, #132]	; (80049d8 <SYSVIEW_AddTask+0xcc>)
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	3304      	adds	r3, #4
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004964:	4b1a      	ldr	r3, [pc, #104]	; (80049d0 <SYSVIEW_AddTask+0xc4>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	491b      	ldr	r1, [pc, #108]	; (80049d8 <SYSVIEW_AddTask+0xcc>)
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	440b      	add	r3, r1
 8004974:	3308      	adds	r3, #8
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800497a:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <SYSVIEW_AddTask+0xc4>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	4916      	ldr	r1, [pc, #88]	; (80049d8 <SYSVIEW_AddTask+0xcc>)
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	330c      	adds	r3, #12
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004990:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <SYSVIEW_AddTask+0xc4>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	4910      	ldr	r1, [pc, #64]	; (80049d8 <SYSVIEW_AddTask+0xcc>)
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	3310      	adds	r3, #16
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80049a6:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <SYSVIEW_AddTask+0xc4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3301      	adds	r3, #1
 80049ac:	4a08      	ldr	r2, [pc, #32]	; (80049d0 <SYSVIEW_AddTask+0xc4>)
 80049ae:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	68b9      	ldr	r1, [r7, #8]
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 f8ca 	bl	8004b54 <SYSVIEW_SendTaskInfo>
 80049c0:	e000      	b.n	80049c4 <SYSVIEW_AddTask+0xb8>
    return;
 80049c2:	bf00      	nop

}
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	08006c40 	.word	0x08006c40
 80049d0:	200043ec 	.word	0x200043ec
 80049d4:	08006c48 	.word	0x08006c48
 80049d8:	2000434c 	.word	0x2000434c

080049dc <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80049e4:	4b59      	ldr	r3, [pc, #356]	; (8004b4c <SYSVIEW_DeleteTask+0x170>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 80ab 	beq.w	8004b44 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	e00d      	b.n	8004a10 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80049f4:	4956      	ldr	r1, [pc, #344]	; (8004b50 <SYSVIEW_DeleteTask+0x174>)
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d008      	beq.n	8004a1c <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	4b4e      	ldr	r3, [pc, #312]	; (8004b4c <SYSVIEW_DeleteTask+0x170>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d3ec      	bcc.n	80049f4 <SYSVIEW_DeleteTask+0x18>
 8004a1a:	e000      	b.n	8004a1e <SYSVIEW_DeleteTask+0x42>
      break;
 8004a1c:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8004a1e:	4b4b      	ldr	r3, [pc, #300]	; (8004b4c <SYSVIEW_DeleteTask+0x170>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d111      	bne.n	8004a4e <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4a46      	ldr	r2, [pc, #280]	; (8004b50 <SYSVIEW_DeleteTask+0x174>)
 8004a36:	4413      	add	r3, r2
 8004a38:	2214      	movs	r2, #20
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f001 fba7 	bl	8006190 <memset>
    _NumTasks--;
 8004a42:	4b42      	ldr	r3, [pc, #264]	; (8004b4c <SYSVIEW_DeleteTask+0x170>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	4a40      	ldr	r2, [pc, #256]	; (8004b4c <SYSVIEW_DeleteTask+0x170>)
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	e07b      	b.n	8004b46 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8004a4e:	4b3f      	ldr	r3, [pc, #252]	; (8004b4c <SYSVIEW_DeleteTask+0x170>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d276      	bcs.n	8004b46 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8004a58:	4b3c      	ldr	r3, [pc, #240]	; (8004b4c <SYSVIEW_DeleteTask+0x170>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	1e5a      	subs	r2, r3, #1
 8004a5e:	493c      	ldr	r1, [pc, #240]	; (8004b50 <SYSVIEW_DeleteTask+0x174>)
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	6819      	ldr	r1, [r3, #0]
 8004a6c:	4838      	ldr	r0, [pc, #224]	; (8004b50 <SYSVIEW_DeleteTask+0x174>)
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4403      	add	r3, r0
 8004a7a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004a7c:	4b33      	ldr	r3, [pc, #204]	; (8004b4c <SYSVIEW_DeleteTask+0x170>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	1e5a      	subs	r2, r3, #1
 8004a82:	4933      	ldr	r1, [pc, #204]	; (8004b50 <SYSVIEW_DeleteTask+0x174>)
 8004a84:	4613      	mov	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	3304      	adds	r3, #4
 8004a90:	6819      	ldr	r1, [r3, #0]
 8004a92:	482f      	ldr	r0, [pc, #188]	; (8004b50 <SYSVIEW_DeleteTask+0x174>)
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4403      	add	r3, r0
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004aa4:	4b29      	ldr	r3, [pc, #164]	; (8004b4c <SYSVIEW_DeleteTask+0x170>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	1e5a      	subs	r2, r3, #1
 8004aaa:	4929      	ldr	r1, [pc, #164]	; (8004b50 <SYSVIEW_DeleteTask+0x174>)
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	6819      	ldr	r1, [r3, #0]
 8004aba:	4825      	ldr	r0, [pc, #148]	; (8004b50 <SYSVIEW_DeleteTask+0x174>)
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4403      	add	r3, r0
 8004ac8:	3308      	adds	r3, #8
 8004aca:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004acc:	4b1f      	ldr	r3, [pc, #124]	; (8004b4c <SYSVIEW_DeleteTask+0x170>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	1e5a      	subs	r2, r3, #1
 8004ad2:	491f      	ldr	r1, [pc, #124]	; (8004b50 <SYSVIEW_DeleteTask+0x174>)
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	330c      	adds	r3, #12
 8004ae0:	6819      	ldr	r1, [r3, #0]
 8004ae2:	481b      	ldr	r0, [pc, #108]	; (8004b50 <SYSVIEW_DeleteTask+0x174>)
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4403      	add	r3, r0
 8004af0:	330c      	adds	r3, #12
 8004af2:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004af4:	4b15      	ldr	r3, [pc, #84]	; (8004b4c <SYSVIEW_DeleteTask+0x170>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	1e5a      	subs	r2, r3, #1
 8004afa:	4915      	ldr	r1, [pc, #84]	; (8004b50 <SYSVIEW_DeleteTask+0x174>)
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	3310      	adds	r3, #16
 8004b08:	6819      	ldr	r1, [r3, #0]
 8004b0a:	4811      	ldr	r0, [pc, #68]	; (8004b50 <SYSVIEW_DeleteTask+0x174>)
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4403      	add	r3, r0
 8004b18:	3310      	adds	r3, #16
 8004b1a:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <SYSVIEW_DeleteTask+0x170>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	1e5a      	subs	r2, r3, #1
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4a09      	ldr	r2, [pc, #36]	; (8004b50 <SYSVIEW_DeleteTask+0x174>)
 8004b2c:	4413      	add	r3, r2
 8004b2e:	2214      	movs	r2, #20
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f001 fb2c 	bl	8006190 <memset>
    _NumTasks--;
 8004b38:	4b04      	ldr	r3, [pc, #16]	; (8004b4c <SYSVIEW_DeleteTask+0x170>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	4a03      	ldr	r2, [pc, #12]	; (8004b4c <SYSVIEW_DeleteTask+0x170>)
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	e000      	b.n	8004b46 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8004b44:	bf00      	nop
  }
}
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	200043ec 	.word	0x200043ec
 8004b50:	2000434c 	.word	0x2000434c

08004b54 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08a      	sub	sp, #40	; 0x28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004b62:	f107 0314 	add.w	r3, r7, #20
 8004b66:	2214      	movs	r2, #20
 8004b68:	2100      	movs	r1, #0
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f001 fb10 	bl	8006190 <memset>
  TaskInfo.TaskID     = TaskID;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004b84:	f107 0314 	add.w	r3, r7, #20
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 febd 	bl	8005908 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004b8e:	bf00      	nop
 8004b90:	3728      	adds	r7, #40	; 0x28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8004b9e:	4b21      	ldr	r3, [pc, #132]	; (8004c24 <_DoInit+0x8c>)
 8004ba0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2203      	movs	r2, #3
 8004bac:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <_DoInit+0x90>)
 8004bb2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a1d      	ldr	r2, [pc, #116]	; (8004c2c <_DoInit+0x94>)
 8004bb8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bc0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a14      	ldr	r2, [pc, #80]	; (8004c28 <_DoInit+0x90>)
 8004bd8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a14      	ldr	r2, [pc, #80]	; (8004c30 <_DoInit+0x98>)
 8004bde:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2210      	movs	r2, #16
 8004be4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3307      	adds	r3, #7
 8004bfc:	4a0d      	ldr	r2, [pc, #52]	; (8004c34 <_DoInit+0x9c>)
 8004bfe:	6810      	ldr	r0, [r2, #0]
 8004c00:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a0c      	ldr	r2, [pc, #48]	; (8004c38 <_DoInit+0xa0>)
 8004c06:	6810      	ldr	r0, [r2, #0]
 8004c08:	6018      	str	r0, [r3, #0]
 8004c0a:	8891      	ldrh	r1, [r2, #4]
 8004c0c:	7992      	ldrb	r2, [r2, #6]
 8004c0e:	8099      	strh	r1, [r3, #4]
 8004c10:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	719a      	strb	r2, [r3, #6]
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	200043f0 	.word	0x200043f0
 8004c28:	08006c98 	.word	0x08006c98
 8004c2c:	20004498 	.word	0x20004498
 8004c30:	20004898 	.word	0x20004898
 8004c34:	08006ca4 	.word	0x08006ca4
 8004c38:	08006ca8 	.word	0x08006ca8

08004c3c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08a      	sub	sp, #40	; 0x28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8004c48:	4b3c      	ldr	r3, [pc, #240]	; (8004d3c <SEGGER_RTT_ReadNoLock+0x100>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <SEGGER_RTT_ReadNoLock+0x18>
 8004c50:	f7ff ffa2 	bl	8004b98 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4613      	mov	r3, r2
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	4413      	add	r3, r2
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	3360      	adds	r3, #96	; 0x60
 8004c60:	4a36      	ldr	r2, [pc, #216]	; (8004d3c <SEGGER_RTT_ReadNoLock+0x100>)
 8004c62:	4413      	add	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8004c76:	2300      	movs	r3, #0
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004c7a:	6a3a      	ldr	r2, [r7, #32]
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d92a      	bls.n	8004cd8 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4293      	cmp	r3, r2
 8004c92:	bf28      	it	cs
 8004c94:	4613      	movcs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	69f8      	ldr	r0, [r7, #28]
 8004ca6:	f001 fa65 	bl	8006174 <memcpy>
    NumBytesRead += NumBytesRem;
 8004caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	4413      	add	r3, r2
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004cc2:	6a3a      	ldr	r2, [r7, #32]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	6a3a      	ldr	r2, [r7, #32]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d101      	bne.n	8004cd8 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	bf28      	it	cs
 8004ce8:	4613      	movcs	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d018      	beq.n	8004d24 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	69f8      	ldr	r0, [r7, #28]
 8004d00:	f001 fa38 	bl	8006174 <memcpy>
    NumBytesRead += NumBytesRem;
 8004d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4413      	add	r3, r2
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4413      	add	r3, r2
 8004d12:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004d1c:	6a3a      	ldr	r2, [r7, #32]
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	4413      	add	r3, r2
 8004d22:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	6a3a      	ldr	r2, [r7, #32]
 8004d2e:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3728      	adds	r7, #40	; 0x28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200043f0 	.word	0x200043f0

08004d40 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	; 0x28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	4613      	mov	r3, r2
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	4413      	add	r3, r2
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	4a3f      	ldr	r2, [pc, #252]	; (8004e5c <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8004d5e:	4413      	add	r3, r2
 8004d60:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8004d6e:	69fa      	ldr	r2, [r7, #28]
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d854      	bhi.n	8004e20 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d30f      	bcc.n	8004daa <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	4413      	add	r3, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d96:	4618      	mov	r0, r3
 8004d98:	f001 f9ec 	bl	8006174 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	441a      	add	r2, r3
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e054      	b.n	8004e54 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d34b      	bcc.n	8004e52 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d90e      	bls.n	8004dea <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f001 f9cb 	bl	8006174 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	441a      	add	r2, r3
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	60da      	str	r2, [r3, #12]
 8004de8:	e018      	b.n	8004e1c <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	4413      	add	r3, r2
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004df6:	4618      	mov	r0, r3
 8004df8:	f001 f9bc 	bl	8006174 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	6858      	ldr	r0, [r3, #4]
 8004e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	18d1      	adds	r1, r2, r3
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f001 f9b1 	bl	8006174 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad2      	subs	r2, r2, r3
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e019      	b.n	8004e54 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d30f      	bcc.n	8004e52 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	4413      	add	r3, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f001 f998 	bl	8006174 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	441a      	add	r2, r3
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e000      	b.n	8004e54 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3728      	adds	r7, #40	; 0x28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	200043f0 	.word	0x200043f0

08004e60 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8004e6e:	4b30      	ldr	r3, [pc, #192]	; (8004f30 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8004e76:	f7ff fe8f 	bl	8004b98 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8004e7a:	4b2d      	ldr	r3, [pc, #180]	; (8004f30 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d24c      	bcs.n	8004f20 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8004e86:	f3ef 8311 	mrs	r3, BASEPRI
 8004e8a:	f04f 0120 	mov.w	r1, #32
 8004e8e:	f381 8811 	msr	BASEPRI, r1
 8004e92:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d032      	beq.n	8004f00 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8004e9a:	4925      	ldr	r1, [pc, #148]	; (8004f30 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	4413      	add	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	440b      	add	r3, r1
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004eae:	4920      	ldr	r1, [pc, #128]	; (8004f30 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	4413      	add	r3, r2
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	440b      	add	r3, r1
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004ec4:	491a      	ldr	r1, [pc, #104]	; (8004f30 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	4413      	add	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	440b      	add	r3, r1
 8004ed2:	3320      	adds	r3, #32
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8004ed8:	4915      	ldr	r1, [pc, #84]	; (8004f30 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4613      	mov	r3, r2
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	4413      	add	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	440b      	add	r3, r1
 8004ee6:	3328      	adds	r3, #40	; 0x28
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8004eec:	4910      	ldr	r1, [pc, #64]	; (8004f30 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	4413      	add	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	440b      	add	r3, r1
 8004efa:	3324      	adds	r3, #36	; 0x24
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8004f00:	490b      	ldr	r1, [pc, #44]	; (8004f30 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4613      	mov	r3, r2
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	4413      	add	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	440b      	add	r3, r1
 8004f0e:	332c      	adds	r3, #44	; 0x2c
 8004f10:	6a3a      	ldr	r2, [r7, #32]
 8004f12:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	e002      	b.n	8004f26 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8004f20:	f04f 33ff 	mov.w	r3, #4294967295
 8004f24:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004f26:	697b      	ldr	r3, [r7, #20]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	200043f0 	.word	0x200043f0

08004f34 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8004f42:	4b30      	ldr	r3, [pc, #192]	; (8005004 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8004f4a:	f7ff fe25 	bl	8004b98 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8004f4e:	4b2d      	ldr	r3, [pc, #180]	; (8005004 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	461a      	mov	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d24b      	bcs.n	8004ff2 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8004f5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f5e:	f04f 0120 	mov.w	r1, #32
 8004f62:	f381 8811 	msr	BASEPRI, r1
 8004f66:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d031      	beq.n	8004fd2 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8004f6e:	4925      	ldr	r1, [pc, #148]	; (8005004 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4613      	mov	r3, r2
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	4413      	add	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	440b      	add	r3, r1
 8004f7c:	3360      	adds	r3, #96	; 0x60
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004f82:	4920      	ldr	r1, [pc, #128]	; (8005004 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4613      	mov	r3, r2
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	4413      	add	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	440b      	add	r3, r1
 8004f90:	3364      	adds	r3, #100	; 0x64
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004f96:	491b      	ldr	r1, [pc, #108]	; (8005004 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4413      	add	r3, r2
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	440b      	add	r3, r1
 8004fa4:	3368      	adds	r3, #104	; 0x68
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8004faa:	4916      	ldr	r1, [pc, #88]	; (8005004 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	4413      	add	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3370      	adds	r3, #112	; 0x70
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8004fbe:	4911      	ldr	r1, [pc, #68]	; (8005004 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	4413      	add	r3, r2
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	440b      	add	r3, r1
 8004fcc:	336c      	adds	r3, #108	; 0x6c
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8004fd2:	490c      	ldr	r1, [pc, #48]	; (8005004 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	4413      	add	r3, r2
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	440b      	add	r3, r1
 8004fe0:	3374      	adds	r3, #116	; 0x74
 8004fe2:	6a3a      	ldr	r2, [r7, #32]
 8004fe4:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	e002      	b.n	8004ff8 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8004ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff6:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004ff8:	697b      	ldr	r3, [r7, #20]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	200043f0 	.word	0x200043f0

08005008 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005018:	e002      	b.n	8005020 <_EncodeStr+0x18>
    Len++;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	3301      	adds	r3, #1
 800501e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4413      	add	r3, r2
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1f6      	bne.n	800501a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d901      	bls.n	8005038 <_EncodeStr+0x30>
    Len = Limit;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2bfe      	cmp	r3, #254	; 0xfe
 800503c:	d806      	bhi.n	800504c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	60fa      	str	r2, [r7, #12]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	e011      	b.n	8005070 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	60fa      	str	r2, [r7, #12]
 8005052:	22ff      	movs	r2, #255	; 0xff
 8005054:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	60fa      	str	r2, [r7, #12]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	0a19      	lsrs	r1, r3, #8
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	60fa      	str	r2, [r7, #12]
 800506c:	b2ca      	uxtb	r2, r1
 800506e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005074:	e00a      	b.n	800508c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	1c53      	adds	r3, r2, #1
 800507a:	60bb      	str	r3, [r7, #8]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	1c59      	adds	r1, r3, #1
 8005080:	60f9      	str	r1, [r7, #12]
 8005082:	7812      	ldrb	r2, [r2, #0]
 8005084:	701a      	strb	r2, [r3, #0]
    n++;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	3301      	adds	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	429a      	cmp	r2, r3
 8005092:	d3f0      	bcc.n	8005076 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005094:	68fb      	ldr	r3, [r7, #12]
}
 8005096:	4618      	mov	r0, r3
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3304      	adds	r3, #4
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
	...

080050bc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050c2:	1cfb      	adds	r3, r7, #3
 80050c4:	2201      	movs	r2, #1
 80050c6:	4619      	mov	r1, r3
 80050c8:	2001      	movs	r0, #1
 80050ca:	f7ff fdb7 	bl	8004c3c <SEGGER_RTT_ReadNoLock>
 80050ce:	4603      	mov	r3, r0
 80050d0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	dd4c      	ble.n	8005172 <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	2b07      	cmp	r3, #7
 80050dc:	dc16      	bgt.n	800510c <_HandleIncomingPacket+0x50>
 80050de:	2b00      	cmp	r3, #0
 80050e0:	dd3c      	ble.n	800515c <_HandleIncomingPacket+0xa0>
 80050e2:	3b01      	subs	r3, #1
 80050e4:	2b06      	cmp	r3, #6
 80050e6:	d839      	bhi.n	800515c <_HandleIncomingPacket+0xa0>
 80050e8:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <_HandleIncomingPacket+0x34>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005113 	.word	0x08005113
 80050f4:	08005119 	.word	0x08005119
 80050f8:	0800511f 	.word	0x0800511f
 80050fc:	08005125 	.word	0x08005125
 8005100:	0800512b 	.word	0x0800512b
 8005104:	08005131 	.word	0x08005131
 8005108:	08005137 	.word	0x08005137
 800510c:	2b80      	cmp	r3, #128	; 0x80
 800510e:	d015      	beq.n	800513c <_HandleIncomingPacket+0x80>
 8005110:	e024      	b.n	800515c <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005112:	f000 fa7d 	bl	8005610 <SEGGER_SYSVIEW_Start>
      break;
 8005116:	e031      	b.n	800517c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005118:	f000 fb36 	bl	8005788 <SEGGER_SYSVIEW_Stop>
      break;
 800511c:	e02e      	b.n	800517c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800511e:	f000 fd11 	bl	8005b44 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005122:	e02b      	b.n	800517c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005124:	f000 fcd6 	bl	8005ad4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005128:	e028      	b.n	800517c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800512a:	f000 fb53 	bl	80057d4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800512e:	e025      	b.n	800517c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005130:	f000 ff4c 	bl	8005fcc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005134:	e022      	b.n	800517c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005136:	f000 ff2b 	bl	8005f90 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800513a:	e01f      	b.n	800517c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800513c:	1cfb      	adds	r3, r7, #3
 800513e:	2201      	movs	r2, #1
 8005140:	4619      	mov	r1, r3
 8005142:	2001      	movs	r0, #1
 8005144:	f7ff fd7a 	bl	8004c3c <SEGGER_RTT_ReadNoLock>
 8005148:	4603      	mov	r3, r0
 800514a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	dd11      	ble.n	8005176 <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005152:	78fb      	ldrb	r3, [r7, #3]
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fe9b 	bl	8005e90 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800515a:	e00c      	b.n	8005176 <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800515c:	78fb      	ldrb	r3, [r7, #3]
 800515e:	b25b      	sxtb	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	da0a      	bge.n	800517a <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005164:	1cfb      	adds	r3, r7, #3
 8005166:	2201      	movs	r2, #1
 8005168:	4619      	mov	r1, r3
 800516a:	2001      	movs	r0, #1
 800516c:	f7ff fd66 	bl	8004c3c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005170:	e003      	b.n	800517a <_HandleIncomingPacket+0xbe>
    }
  }
 8005172:	bf00      	nop
 8005174:	e002      	b.n	800517c <_HandleIncomingPacket+0xc0>
      break;
 8005176:	bf00      	nop
 8005178:	e000      	b.n	800517c <_HandleIncomingPacket+0xc0>
      break;
 800517a:	bf00      	nop
}
 800517c:	bf00      	nop
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005184:	b580      	push	{r7, lr}
 8005186:	b08c      	sub	sp, #48	; 0x30
 8005188:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800518a:	2301      	movs	r3, #1
 800518c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800518e:	1d3b      	adds	r3, r7, #4
 8005190:	3301      	adds	r3, #1
 8005192:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005198:	4b30      	ldr	r3, [pc, #192]	; (800525c <_TrySendOverflowPacket+0xd8>)
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	62bb      	str	r3, [r7, #40]	; 0x28
 800519e:	e00b      	b.n	80051b8 <_TrySendOverflowPacket+0x34>
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a6:	1c59      	adds	r1, r3, #1
 80051a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	09db      	lsrs	r3, r3, #7
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	2b7f      	cmp	r3, #127	; 0x7f
 80051bc:	d8f0      	bhi.n	80051a0 <_TrySendOverflowPacket+0x1c>
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051cc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80051ce:	4b24      	ldr	r3, [pc, #144]	; (8005260 <_TrySendOverflowPacket+0xdc>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80051d4:	4b21      	ldr	r3, [pc, #132]	; (800525c <_TrySendOverflowPacket+0xd8>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	623b      	str	r3, [r7, #32]
 80051e6:	e00b      	b.n	8005200 <_TrySendOverflowPacket+0x7c>
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	1c59      	adds	r1, r3, #1
 80051f0:	6279      	str	r1, [r7, #36]	; 0x24
 80051f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	09db      	lsrs	r3, r3, #7
 80051fe:	623b      	str	r3, [r7, #32]
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	2b7f      	cmp	r3, #127	; 0x7f
 8005204:	d8f0      	bhi.n	80051e8 <_TrySendOverflowPacket+0x64>
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	627a      	str	r2, [r7, #36]	; 0x24
 800520c:	6a3a      	ldr	r2, [r7, #32]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005216:	1d3b      	adds	r3, r7, #4
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	461a      	mov	r2, r3
 800521e:	1d3b      	adds	r3, r7, #4
 8005220:	4619      	mov	r1, r3
 8005222:	2001      	movs	r0, #1
 8005224:	f7ff fd8c 	bl	8004d40 <SEGGER_RTT_WriteSkipNoLock>
 8005228:	4603      	mov	r3, r0
 800522a:	613b      	str	r3, [r7, #16]
  if (Status) {
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d009      	beq.n	8005246 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005232:	4a0a      	ldr	r2, [pc, #40]	; (800525c <_TrySendOverflowPacket+0xd8>)
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005238:	4b08      	ldr	r3, [pc, #32]	; (800525c <_TrySendOverflowPacket+0xd8>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	3b01      	subs	r3, #1
 800523e:	b2da      	uxtb	r2, r3
 8005240:	4b06      	ldr	r3, [pc, #24]	; (800525c <_TrySendOverflowPacket+0xd8>)
 8005242:	701a      	strb	r2, [r3, #0]
 8005244:	e004      	b.n	8005250 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005246:	4b05      	ldr	r3, [pc, #20]	; (800525c <_TrySendOverflowPacket+0xd8>)
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	3301      	adds	r3, #1
 800524c:	4a03      	ldr	r2, [pc, #12]	; (800525c <_TrySendOverflowPacket+0xd8>)
 800524e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005250:	693b      	ldr	r3, [r7, #16]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3730      	adds	r7, #48	; 0x30
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	200068b0 	.word	0x200068b0
 8005260:	e0001004 	.word	0xe0001004

08005264 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005264:	b580      	push	{r7, lr}
 8005266:	b08a      	sub	sp, #40	; 0x28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005270:	4b63      	ldr	r3, [pc, #396]	; (8005400 <_SendPacket+0x19c>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d010      	beq.n	800529a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005278:	4b61      	ldr	r3, [pc, #388]	; (8005400 <_SendPacket+0x19c>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 80a1 	beq.w	80053c4 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005282:	4b5f      	ldr	r3, [pc, #380]	; (8005400 <_SendPacket+0x19c>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d109      	bne.n	800529e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800528a:	f7ff ff7b 	bl	8005184 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800528e:	4b5c      	ldr	r3, [pc, #368]	; (8005400 <_SendPacket+0x19c>)
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	2b01      	cmp	r3, #1
 8005294:	f040 8098 	bne.w	80053c8 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8005298:	e001      	b.n	800529e <_SendPacket+0x3a>
    goto Send;
 800529a:	bf00      	nop
 800529c:	e000      	b.n	80052a0 <_SendPacket+0x3c>
Send:
 800529e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b1f      	cmp	r3, #31
 80052a4:	d809      	bhi.n	80052ba <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80052a6:	4b56      	ldr	r3, [pc, #344]	; (8005400 <_SendPacket+0x19c>)
 80052a8:	69da      	ldr	r2, [r3, #28]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f040 8089 	bne.w	80053cc <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b17      	cmp	r3, #23
 80052be:	d807      	bhi.n	80052d0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	e03d      	b.n	800534c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	2b7f      	cmp	r3, #127	; 0x7f
 80052dc:	d912      	bls.n	8005304 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	09da      	lsrs	r2, r3, #7
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	3a01      	subs	r2, #1
 80052f6:	60fa      	str	r2, [r7, #12]
 80052f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	e006      	b.n	8005312 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3b01      	subs	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	b2da      	uxtb	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b7f      	cmp	r3, #127	; 0x7f
 8005316:	d912      	bls.n	800533e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	09da      	lsrs	r2, r3, #7
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3b01      	subs	r3, #1
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	b2db      	uxtb	r3, r3
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	3a01      	subs	r2, #1
 8005330:	60fa      	str	r2, [r7, #12]
 8005332:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005336:	b2da      	uxtb	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	701a      	strb	r2, [r3, #0]
 800533c:	e006      	b.n	800534c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3b01      	subs	r3, #1
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800534c:	4b2d      	ldr	r3, [pc, #180]	; (8005404 <_SendPacket+0x1a0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005352:	4b2b      	ldr	r3, [pc, #172]	; (8005400 <_SendPacket+0x19c>)
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	623b      	str	r3, [r7, #32]
 8005364:	e00b      	b.n	800537e <_SendPacket+0x11a>
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	b2da      	uxtb	r2, r3
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	1c59      	adds	r1, r3, #1
 800536e:	6279      	str	r1, [r7, #36]	; 0x24
 8005370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	09db      	lsrs	r3, r3, #7
 800537c:	623b      	str	r3, [r7, #32]
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	2b7f      	cmp	r3, #127	; 0x7f
 8005382:	d8f0      	bhi.n	8005366 <_SendPacket+0x102>
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	627a      	str	r2, [r7, #36]	; 0x24
 800538a:	6a3a      	ldr	r2, [r7, #32]
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	461a      	mov	r2, r3
 800539c:	68f9      	ldr	r1, [r7, #12]
 800539e:	2001      	movs	r0, #1
 80053a0:	f7ff fcce 	bl	8004d40 <SEGGER_RTT_WriteSkipNoLock>
 80053a4:	4603      	mov	r3, r0
 80053a6:	613b      	str	r3, [r7, #16]
  if (Status) {
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80053ae:	4a14      	ldr	r2, [pc, #80]	; (8005400 <_SendPacket+0x19c>)
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	60d3      	str	r3, [r2, #12]
 80053b4:	e00b      	b.n	80053ce <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80053b6:	4b12      	ldr	r3, [pc, #72]	; (8005400 <_SendPacket+0x19c>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	3301      	adds	r3, #1
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	4b10      	ldr	r3, [pc, #64]	; (8005400 <_SendPacket+0x19c>)
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	e004      	b.n	80053ce <_SendPacket+0x16a>
    goto SendDone;
 80053c4:	bf00      	nop
 80053c6:	e002      	b.n	80053ce <_SendPacket+0x16a>
      goto SendDone;
 80053c8:	bf00      	nop
 80053ca:	e000      	b.n	80053ce <_SendPacket+0x16a>
      goto SendDone;
 80053cc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80053ce:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <_SendPacket+0x1a4>)
 80053d0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80053d4:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <_SendPacket+0x1a4>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053da:	429a      	cmp	r2, r3
 80053dc:	d00b      	beq.n	80053f6 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80053de:	4b08      	ldr	r3, [pc, #32]	; (8005400 <_SendPacket+0x19c>)
 80053e0:	789b      	ldrb	r3, [r3, #2]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d107      	bne.n	80053f6 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80053e6:	4b06      	ldr	r3, [pc, #24]	; (8005400 <_SendPacket+0x19c>)
 80053e8:	2201      	movs	r2, #1
 80053ea:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80053ec:	f7ff fe66 	bl	80050bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80053f0:	4b03      	ldr	r3, [pc, #12]	; (8005400 <_SendPacket+0x19c>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80053f6:	bf00      	nop
 80053f8:	3728      	adds	r7, #40	; 0x28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	200068b0 	.word	0x200068b0
 8005404:	e0001004 	.word	0xe0001004
 8005408:	200043f0 	.word	0x200043f0

0800540c <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af02      	add	r7, sp, #8
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800541a:	2300      	movs	r3, #0
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005422:	4a14      	ldr	r2, [pc, #80]	; (8005474 <SEGGER_SYSVIEW_Init+0x68>)
 8005424:	4914      	ldr	r1, [pc, #80]	; (8005478 <SEGGER_SYSVIEW_Init+0x6c>)
 8005426:	2001      	movs	r0, #1
 8005428:	f7ff fd1a 	bl	8004e60 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800542c:	2300      	movs	r3, #0
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	2308      	movs	r3, #8
 8005432:	4a12      	ldr	r2, [pc, #72]	; (800547c <SEGGER_SYSVIEW_Init+0x70>)
 8005434:	4910      	ldr	r1, [pc, #64]	; (8005478 <SEGGER_SYSVIEW_Init+0x6c>)
 8005436:	2001      	movs	r0, #1
 8005438:	f7ff fd7c 	bl	8004f34 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800543c:	4b10      	ldr	r3, [pc, #64]	; (8005480 <SEGGER_SYSVIEW_Init+0x74>)
 800543e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005442:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005444:	4b0f      	ldr	r3, [pc, #60]	; (8005484 <SEGGER_SYSVIEW_Init+0x78>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a0d      	ldr	r2, [pc, #52]	; (8005480 <SEGGER_SYSVIEW_Init+0x74>)
 800544a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800544c:	4a0c      	ldr	r2, [pc, #48]	; (8005480 <SEGGER_SYSVIEW_Init+0x74>)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005452:	4a0b      	ldr	r2, [pc, #44]	; (8005480 <SEGGER_SYSVIEW_Init+0x74>)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005458:	4a09      	ldr	r2, [pc, #36]	; (8005480 <SEGGER_SYSVIEW_Init+0x74>)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800545e:	4a08      	ldr	r2, [pc, #32]	; (8005480 <SEGGER_SYSVIEW_Init+0x74>)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005464:	4b06      	ldr	r3, [pc, #24]	; (8005480 <SEGGER_SYSVIEW_Init+0x74>)
 8005466:	2200      	movs	r2, #0
 8005468:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800546a:	bf00      	nop
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	200048a8 	.word	0x200048a8
 8005478:	08006cb0 	.word	0x08006cb0
 800547c:	200068a8 	.word	0x200068a8
 8005480:	200068b0 	.word	0x200068b0
 8005484:	e0001004 	.word	0xe0001004

08005488 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005490:	4a04      	ldr	r2, [pc, #16]	; (80054a4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6113      	str	r3, [r2, #16]
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	200068b0 	.word	0x200068b0

080054a8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80054b0:	f3ef 8311 	mrs	r3, BASEPRI
 80054b4:	f04f 0120 	mov.w	r1, #32
 80054b8:	f381 8811 	msr	BASEPRI, r1
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	4808      	ldr	r0, [pc, #32]	; (80054e0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80054c0:	f7ff fdef 	bl	80050a2 <_PreparePacket>
 80054c4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	68b8      	ldr	r0, [r7, #8]
 80054cc:	f7ff feca 	bl	8005264 <_SendPacket>
  RECORD_END();
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f383 8811 	msr	BASEPRI, r3
}
 80054d6:	bf00      	nop
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	200068e0 	.word	0x200068e0

080054e4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054ee:	f3ef 8311 	mrs	r3, BASEPRI
 80054f2:	f04f 0120 	mov.w	r1, #32
 80054f6:	f381 8811 	msr	BASEPRI, r1
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	4816      	ldr	r0, [pc, #88]	; (8005558 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80054fe:	f7ff fdd0 	bl	80050a2 <_PreparePacket>
 8005502:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	61bb      	str	r3, [r7, #24]
 8005510:	e00b      	b.n	800552a <SEGGER_SYSVIEW_RecordU32+0x46>
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	b2da      	uxtb	r2, r3
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	1c59      	adds	r1, r3, #1
 800551a:	61f9      	str	r1, [r7, #28]
 800551c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	701a      	strb	r2, [r3, #0]
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	09db      	lsrs	r3, r3, #7
 8005528:	61bb      	str	r3, [r7, #24]
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	2b7f      	cmp	r3, #127	; 0x7f
 800552e:	d8f0      	bhi.n	8005512 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	61fa      	str	r2, [r7, #28]
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	b2d2      	uxtb	r2, r2
 800553a:	701a      	strb	r2, [r3, #0]
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	68f9      	ldr	r1, [r7, #12]
 8005544:	6938      	ldr	r0, [r7, #16]
 8005546:	f7ff fe8d 	bl	8005264 <_SendPacket>
  RECORD_END();
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f383 8811 	msr	BASEPRI, r3
}
 8005550:	bf00      	nop
 8005552:	3720      	adds	r7, #32
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	200068e0 	.word	0x200068e0

0800555c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800555c:	b580      	push	{r7, lr}
 800555e:	b08c      	sub	sp, #48	; 0x30
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005568:	f3ef 8311 	mrs	r3, BASEPRI
 800556c:	f04f 0120 	mov.w	r1, #32
 8005570:	f381 8811 	msr	BASEPRI, r1
 8005574:	61fb      	str	r3, [r7, #28]
 8005576:	4825      	ldr	r0, [pc, #148]	; (800560c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005578:	f7ff fd93 	bl	80050a2 <_PreparePacket>
 800557c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	62bb      	str	r3, [r7, #40]	; 0x28
 800558a:	e00b      	b.n	80055a4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	b2da      	uxtb	r2, r3
 8005590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005592:	1c59      	adds	r1, r3, #1
 8005594:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005596:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	09db      	lsrs	r3, r3, #7
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a6:	2b7f      	cmp	r3, #127	; 0x7f
 80055a8:	d8f0      	bhi.n	800558c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80055aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	623b      	str	r3, [r7, #32]
 80055c2:	e00b      	b.n	80055dc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	1c59      	adds	r1, r3, #1
 80055cc:	6279      	str	r1, [r7, #36]	; 0x24
 80055ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	09db      	lsrs	r3, r3, #7
 80055da:	623b      	str	r3, [r7, #32]
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	2b7f      	cmp	r3, #127	; 0x7f
 80055e0:	d8f0      	bhi.n	80055c4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	627a      	str	r2, [r7, #36]	; 0x24
 80055e8:	6a3a      	ldr	r2, [r7, #32]
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	6979      	ldr	r1, [r7, #20]
 80055f6:	69b8      	ldr	r0, [r7, #24]
 80055f8:	f7ff fe34 	bl	8005264 <_SendPacket>
  RECORD_END();
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f383 8811 	msr	BASEPRI, r3
}
 8005602:	bf00      	nop
 8005604:	3730      	adds	r7, #48	; 0x30
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	200068e0 	.word	0x200068e0

08005610 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005610:	b580      	push	{r7, lr}
 8005612:	b08c      	sub	sp, #48	; 0x30
 8005614:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005616:	4b59      	ldr	r3, [pc, #356]	; (800577c <SEGGER_SYSVIEW_Start+0x16c>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	f040 80aa 	bne.w	8005774 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8005620:	4b56      	ldr	r3, [pc, #344]	; (800577c <SEGGER_SYSVIEW_Start+0x16c>)
 8005622:	2201      	movs	r2, #1
 8005624:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005626:	f3ef 8311 	mrs	r3, BASEPRI
 800562a:	f04f 0120 	mov.w	r1, #32
 800562e:	f381 8811 	msr	BASEPRI, r1
 8005632:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005634:	220a      	movs	r2, #10
 8005636:	4952      	ldr	r1, [pc, #328]	; (8005780 <SEGGER_SYSVIEW_Start+0x170>)
 8005638:	2001      	movs	r0, #1
 800563a:	f7ff fb81 	bl	8004d40 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005644:	200a      	movs	r0, #10
 8005646:	f7ff ff2f 	bl	80054a8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800564a:	f3ef 8311 	mrs	r3, BASEPRI
 800564e:	f04f 0120 	mov.w	r1, #32
 8005652:	f381 8811 	msr	BASEPRI, r1
 8005656:	60bb      	str	r3, [r7, #8]
 8005658:	484a      	ldr	r0, [pc, #296]	; (8005784 <SEGGER_SYSVIEW_Start+0x174>)
 800565a:	f7ff fd22 	bl	80050a2 <_PreparePacket>
 800565e:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005668:	4b44      	ldr	r3, [pc, #272]	; (800577c <SEGGER_SYSVIEW_Start+0x16c>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	62bb      	str	r3, [r7, #40]	; 0x28
 800566e:	e00b      	b.n	8005688 <SEGGER_SYSVIEW_Start+0x78>
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	b2da      	uxtb	r2, r3
 8005674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005676:	1c59      	adds	r1, r3, #1
 8005678:	62f9      	str	r1, [r7, #44]	; 0x2c
 800567a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	09db      	lsrs	r3, r3, #7
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	2b7f      	cmp	r3, #127	; 0x7f
 800568c:	d8f0      	bhi.n	8005670 <SEGGER_SYSVIEW_Start+0x60>
 800568e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
 80056a2:	4b36      	ldr	r3, [pc, #216]	; (800577c <SEGGER_SYSVIEW_Start+0x16c>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	623b      	str	r3, [r7, #32]
 80056a8:	e00b      	b.n	80056c2 <SEGGER_SYSVIEW_Start+0xb2>
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	1c59      	adds	r1, r3, #1
 80056b2:	6279      	str	r1, [r7, #36]	; 0x24
 80056b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	09db      	lsrs	r3, r3, #7
 80056c0:	623b      	str	r3, [r7, #32]
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	2b7f      	cmp	r3, #127	; 0x7f
 80056c6:	d8f0      	bhi.n	80056aa <SEGGER_SYSVIEW_Start+0x9a>
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	627a      	str	r2, [r7, #36]	; 0x24
 80056ce:	6a3a      	ldr	r2, [r7, #32]
 80056d0:	b2d2      	uxtb	r2, r2
 80056d2:	701a      	strb	r2, [r3, #0]
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	61fb      	str	r3, [r7, #28]
 80056dc:	4b27      	ldr	r3, [pc, #156]	; (800577c <SEGGER_SYSVIEW_Start+0x16c>)
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	e00b      	b.n	80056fc <SEGGER_SYSVIEW_Start+0xec>
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	1c59      	adds	r1, r3, #1
 80056ec:	61f9      	str	r1, [r7, #28]
 80056ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	701a      	strb	r2, [r3, #0]
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	09db      	lsrs	r3, r3, #7
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005700:	d8f0      	bhi.n	80056e4 <SEGGER_SYSVIEW_Start+0xd4>
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	61fa      	str	r2, [r7, #28]
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	2302      	movs	r3, #2
 8005718:	613b      	str	r3, [r7, #16]
 800571a:	e00b      	b.n	8005734 <SEGGER_SYSVIEW_Start+0x124>
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	b2da      	uxtb	r2, r3
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	1c59      	adds	r1, r3, #1
 8005724:	6179      	str	r1, [r7, #20]
 8005726:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	09db      	lsrs	r3, r3, #7
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	2b7f      	cmp	r3, #127	; 0x7f
 8005738:	d8f0      	bhi.n	800571c <SEGGER_SYSVIEW_Start+0x10c>
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	617a      	str	r2, [r7, #20]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800574a:	2218      	movs	r2, #24
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff fd88 	bl	8005264 <_SendPacket>
      RECORD_END();
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800575a:	4b08      	ldr	r3, [pc, #32]	; (800577c <SEGGER_SYSVIEW_Start+0x16c>)
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005762:	4b06      	ldr	r3, [pc, #24]	; (800577c <SEGGER_SYSVIEW_Start+0x16c>)
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005768:	f000 f9ec 	bl	8005b44 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800576c:	f000 f9b2 	bl	8005ad4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005770:	f000 fc2c 	bl	8005fcc <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8005774:	bf00      	nop
 8005776:	3730      	adds	r7, #48	; 0x30
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	200068b0 	.word	0x200068b0
 8005780:	08006cd0 	.word	0x08006cd0
 8005784:	200068e0 	.word	0x200068e0

08005788 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800578e:	f3ef 8311 	mrs	r3, BASEPRI
 8005792:	f04f 0120 	mov.w	r1, #32
 8005796:	f381 8811 	msr	BASEPRI, r1
 800579a:	607b      	str	r3, [r7, #4]
 800579c:	480b      	ldr	r0, [pc, #44]	; (80057cc <SEGGER_SYSVIEW_Stop+0x44>)
 800579e:	f7ff fc80 	bl	80050a2 <_PreparePacket>
 80057a2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80057a4:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <SEGGER_SYSVIEW_Stop+0x48>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d007      	beq.n	80057bc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80057ac:	220b      	movs	r2, #11
 80057ae:	6839      	ldr	r1, [r7, #0]
 80057b0:	6838      	ldr	r0, [r7, #0]
 80057b2:	f7ff fd57 	bl	8005264 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80057b6:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <SEGGER_SYSVIEW_Stop+0x48>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f383 8811 	msr	BASEPRI, r3
}
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	200068e0 	.word	0x200068e0
 80057d0:	200068b0 	.word	0x200068b0

080057d4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08c      	sub	sp, #48	; 0x30
 80057d8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80057da:	f3ef 8311 	mrs	r3, BASEPRI
 80057de:	f04f 0120 	mov.w	r1, #32
 80057e2:	f381 8811 	msr	BASEPRI, r1
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	4845      	ldr	r0, [pc, #276]	; (8005900 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80057ea:	f7ff fc5a 	bl	80050a2 <_PreparePacket>
 80057ee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f8:	4b42      	ldr	r3, [pc, #264]	; (8005904 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80057fe:	e00b      	b.n	8005818 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	b2da      	uxtb	r2, r3
 8005804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005806:	1c59      	adds	r1, r3, #1
 8005808:	62f9      	str	r1, [r7, #44]	; 0x2c
 800580a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	09db      	lsrs	r3, r3, #7
 8005816:	62bb      	str	r3, [r7, #40]	; 0x28
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	2b7f      	cmp	r3, #127	; 0x7f
 800581c:	d8f0      	bhi.n	8005800 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
 8005832:	4b34      	ldr	r3, [pc, #208]	; (8005904 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	623b      	str	r3, [r7, #32]
 8005838:	e00b      	b.n	8005852 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	b2da      	uxtb	r2, r3
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	1c59      	adds	r1, r3, #1
 8005842:	6279      	str	r1, [r7, #36]	; 0x24
 8005844:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	09db      	lsrs	r3, r3, #7
 8005850:	623b      	str	r3, [r7, #32]
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	2b7f      	cmp	r3, #127	; 0x7f
 8005856:	d8f0      	bhi.n	800583a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	627a      	str	r2, [r7, #36]	; 0x24
 800585e:	6a3a      	ldr	r2, [r7, #32]
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	61fb      	str	r3, [r7, #28]
 800586c:	4b25      	ldr	r3, [pc, #148]	; (8005904 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	e00b      	b.n	800588c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	b2da      	uxtb	r2, r3
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	1c59      	adds	r1, r3, #1
 800587c:	61f9      	str	r1, [r7, #28]
 800587e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	09db      	lsrs	r3, r3, #7
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	2b7f      	cmp	r3, #127	; 0x7f
 8005890:	d8f0      	bhi.n	8005874 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	61fa      	str	r2, [r7, #28]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	2302      	movs	r3, #2
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	e00b      	b.n	80058c4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	1c59      	adds	r1, r3, #1
 80058b4:	6179      	str	r1, [r7, #20]
 80058b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	09db      	lsrs	r3, r3, #7
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2b7f      	cmp	r3, #127	; 0x7f
 80058c8:	d8f0      	bhi.n	80058ac <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	617a      	str	r2, [r7, #20]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80058da:	2218      	movs	r2, #24
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	68b8      	ldr	r0, [r7, #8]
 80058e0:	f7ff fcc0 	bl	8005264 <_SendPacket>
  RECORD_END();
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80058ea:	4b06      	ldr	r3, [pc, #24]	; (8005904 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80058f2:	4b04      	ldr	r3, [pc, #16]	; (8005904 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	4798      	blx	r3
  }
}
 80058f8:	bf00      	nop
 80058fa:	3730      	adds	r7, #48	; 0x30
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	200068e0 	.word	0x200068e0
 8005904:	200068b0 	.word	0x200068b0

08005908 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005908:	b580      	push	{r7, lr}
 800590a:	b092      	sub	sp, #72	; 0x48
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005910:	f3ef 8311 	mrs	r3, BASEPRI
 8005914:	f04f 0120 	mov.w	r1, #32
 8005918:	f381 8811 	msr	BASEPRI, r1
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	486b      	ldr	r0, [pc, #428]	; (8005acc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005920:	f7ff fbbf 	bl	80050a2 <_PreparePacket>
 8005924:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	647b      	str	r3, [r7, #68]	; 0x44
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4b67      	ldr	r3, [pc, #412]	; (8005ad0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	089b      	lsrs	r3, r3, #2
 800593a:	643b      	str	r3, [r7, #64]	; 0x40
 800593c:	e00b      	b.n	8005956 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 800593e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005940:	b2da      	uxtb	r2, r3
 8005942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005944:	1c59      	adds	r1, r3, #1
 8005946:	6479      	str	r1, [r7, #68]	; 0x44
 8005948:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005952:	09db      	lsrs	r3, r3, #7
 8005954:	643b      	str	r3, [r7, #64]	; 0x40
 8005956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005958:	2b7f      	cmp	r3, #127	; 0x7f
 800595a:	d8f0      	bhi.n	800593e <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 800595c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	647a      	str	r2, [r7, #68]	; 0x44
 8005962:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	701a      	strb	r2, [r3, #0]
 8005968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800596a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	63bb      	str	r3, [r7, #56]	; 0x38
 8005976:	e00b      	b.n	8005990 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	b2da      	uxtb	r2, r3
 800597c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597e:	1c59      	adds	r1, r3, #1
 8005980:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005982:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	701a      	strb	r2, [r3, #0]
 800598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598c:	09db      	lsrs	r3, r3, #7
 800598e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005992:	2b7f      	cmp	r3, #127	; 0x7f
 8005994:	d8f0      	bhi.n	8005978 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8005996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800599c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]
 80059a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a4:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2220      	movs	r2, #32
 80059ac:	4619      	mov	r1, r3
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f7ff fb2a 	bl	8005008 <_EncodeStr>
 80059b4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80059b6:	2209      	movs	r2, #9
 80059b8:	68f9      	ldr	r1, [r7, #12]
 80059ba:	6938      	ldr	r0, [r7, #16]
 80059bc:	f7ff fc52 	bl	8005264 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	637b      	str	r3, [r7, #52]	; 0x34
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	4b40      	ldr	r3, [pc, #256]	; (8005ad0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	089b      	lsrs	r3, r3, #2
 80059d4:	633b      	str	r3, [r7, #48]	; 0x30
 80059d6:	e00b      	b.n	80059f0 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059de:	1c59      	adds	r1, r3, #1
 80059e0:	6379      	str	r1, [r7, #52]	; 0x34
 80059e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	09db      	lsrs	r3, r3, #7
 80059ee:	633b      	str	r3, [r7, #48]	; 0x30
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	2b7f      	cmp	r3, #127	; 0x7f
 80059f4:	d8f0      	bhi.n	80059d8 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80059f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	637a      	str	r2, [r7, #52]	; 0x34
 80059fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a10:	e00b      	b.n	8005a2a <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	1c59      	adds	r1, r3, #1
 8005a1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	09db      	lsrs	r3, r3, #7
 8005a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a2e:	d8f0      	bhi.n	8005a12 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8005a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	623b      	str	r3, [r7, #32]
 8005a4a:	e00b      	b.n	8005a64 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	1c59      	adds	r1, r3, #1
 8005a54:	6279      	str	r1, [r7, #36]	; 0x24
 8005a56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	09db      	lsrs	r3, r3, #7
 8005a62:	623b      	str	r3, [r7, #32]
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	2b7f      	cmp	r3, #127	; 0x7f
 8005a68:	d8f0      	bhi.n	8005a4c <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	627a      	str	r2, [r7, #36]	; 0x24
 8005a70:	6a3a      	ldr	r2, [r7, #32]
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61bb      	str	r3, [r7, #24]
 8005a82:	e00b      	b.n	8005a9c <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	1c59      	adds	r1, r3, #1
 8005a8c:	61f9      	str	r1, [r7, #28]
 8005a8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	09db      	lsrs	r3, r3, #7
 8005a9a:	61bb      	str	r3, [r7, #24]
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005aa0:	d8f0      	bhi.n	8005a84 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	61fa      	str	r2, [r7, #28]
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005ab2:	2215      	movs	r2, #21
 8005ab4:	68f9      	ldr	r1, [r7, #12]
 8005ab6:	6938      	ldr	r0, [r7, #16]
 8005ab8:	f7ff fbd4 	bl	8005264 <_SendPacket>
  RECORD_END();
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f383 8811 	msr	BASEPRI, r3
}
 8005ac2:	bf00      	nop
 8005ac4:	3748      	adds	r7, #72	; 0x48
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	200068e0 	.word	0x200068e0
 8005ad0:	200068b0 	.word	0x200068b0

08005ad4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005ad8:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d008      	beq.n	8005af2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005ae0:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005aea:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	4798      	blx	r3
  }
}
 8005af2:	bf00      	nop
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	200068b0 	.word	0x200068b0

08005afc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b04:	f3ef 8311 	mrs	r3, BASEPRI
 8005b08:	f04f 0120 	mov.w	r1, #32
 8005b0c:	f381 8811 	msr	BASEPRI, r1
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	480b      	ldr	r0, [pc, #44]	; (8005b40 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005b14:	f7ff fac5 	bl	80050a2 <_PreparePacket>
 8005b18:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b1a:	2280      	movs	r2, #128	; 0x80
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	6938      	ldr	r0, [r7, #16]
 8005b20:	f7ff fa72 	bl	8005008 <_EncodeStr>
 8005b24:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005b26:	220e      	movs	r2, #14
 8005b28:	68f9      	ldr	r1, [r7, #12]
 8005b2a:	6938      	ldr	r0, [r7, #16]
 8005b2c:	f7ff fb9a 	bl	8005264 <_SendPacket>
  RECORD_END();
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f383 8811 	msr	BASEPRI, r3
}
 8005b36:	bf00      	nop
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	200068e0 	.word	0x200068e0

08005b44 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005b44:	b590      	push	{r4, r7, lr}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005b4a:	4b15      	ldr	r3, [pc, #84]	; (8005ba0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d01a      	beq.n	8005b88 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005b52:	4b13      	ldr	r3, [pc, #76]	; (8005ba0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d015      	beq.n	8005b88 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005b5c:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4798      	blx	r3
 8005b64:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005b68:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005b6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b6e:	f04f 0200 	mov.w	r2, #0
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	000a      	movs	r2, r1
 8005b78:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	4621      	mov	r1, r4
 8005b80:	200d      	movs	r0, #13
 8005b82:	f7ff fceb 	bl	800555c <SEGGER_SYSVIEW_RecordU32x2>
 8005b86:	e006      	b.n	8005b96 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005b88:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	200c      	movs	r0, #12
 8005b90:	f7ff fca8 	bl	80054e4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd90      	pop	{r4, r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	200068b0 	.word	0x200068b0
 8005ba4:	e0001004 	.word	0xe0001004

08005ba8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005bae:	f3ef 8311 	mrs	r3, BASEPRI
 8005bb2:	f04f 0120 	mov.w	r1, #32
 8005bb6:	f381 8811 	msr	BASEPRI, r1
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	4819      	ldr	r0, [pc, #100]	; (8005c24 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005bbe:	f7ff fa70 	bl	80050a2 <_PreparePacket>
 8005bc2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005bc8:	4b17      	ldr	r3, [pc, #92]	; (8005c28 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	613b      	str	r3, [r7, #16]
 8005bda:	e00b      	b.n	8005bf4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	1c59      	adds	r1, r3, #1
 8005be4:	6179      	str	r1, [r7, #20]
 8005be6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bea:	b2d2      	uxtb	r2, r2
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	09db      	lsrs	r3, r3, #7
 8005bf2:	613b      	str	r3, [r7, #16]
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8005bf8:	d8f0      	bhi.n	8005bdc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	617a      	str	r2, [r7, #20]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	6879      	ldr	r1, [r7, #4]
 8005c0e:	68b8      	ldr	r0, [r7, #8]
 8005c10:	f7ff fb28 	bl	8005264 <_SendPacket>
  RECORD_END();
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f383 8811 	msr	BASEPRI, r3
}
 8005c1a:	bf00      	nop
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	200068e0 	.word	0x200068e0
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c32:	f3ef 8311 	mrs	r3, BASEPRI
 8005c36:	f04f 0120 	mov.w	r1, #32
 8005c3a:	f381 8811 	msr	BASEPRI, r1
 8005c3e:	607b      	str	r3, [r7, #4]
 8005c40:	4807      	ldr	r0, [pc, #28]	; (8005c60 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005c42:	f7ff fa2e 	bl	80050a2 <_PreparePacket>
 8005c46:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005c48:	2203      	movs	r2, #3
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	6838      	ldr	r0, [r7, #0]
 8005c4e:	f7ff fb09 	bl	8005264 <_SendPacket>
  RECORD_END();
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f383 8811 	msr	BASEPRI, r3
}
 8005c58:	bf00      	nop
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	200068e0 	.word	0x200068e0

08005c64 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c6e:	f04f 0120 	mov.w	r1, #32
 8005c72:	f381 8811 	msr	BASEPRI, r1
 8005c76:	607b      	str	r3, [r7, #4]
 8005c78:	4807      	ldr	r0, [pc, #28]	; (8005c98 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005c7a:	f7ff fa12 	bl	80050a2 <_PreparePacket>
 8005c7e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005c80:	2212      	movs	r2, #18
 8005c82:	6839      	ldr	r1, [r7, #0]
 8005c84:	6838      	ldr	r0, [r7, #0]
 8005c86:	f7ff faed 	bl	8005264 <_SendPacket>
  RECORD_END();
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f383 8811 	msr	BASEPRI, r3
}
 8005c90:	bf00      	nop
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	200068e0 	.word	0x200068e0

08005c9c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ca2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ca6:	f04f 0120 	mov.w	r1, #32
 8005caa:	f381 8811 	msr	BASEPRI, r1
 8005cae:	607b      	str	r3, [r7, #4]
 8005cb0:	4807      	ldr	r0, [pc, #28]	; (8005cd0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005cb2:	f7ff f9f6 	bl	80050a2 <_PreparePacket>
 8005cb6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005cb8:	2211      	movs	r2, #17
 8005cba:	6839      	ldr	r1, [r7, #0]
 8005cbc:	6838      	ldr	r0, [r7, #0]
 8005cbe:	f7ff fad1 	bl	8005264 <_SendPacket>
  RECORD_END();
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f383 8811 	msr	BASEPRI, r3
}
 8005cc8:	bf00      	nop
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	200068e0 	.word	0x200068e0

08005cd4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005cdc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ce0:	f04f 0120 	mov.w	r1, #32
 8005ce4:	f381 8811 	msr	BASEPRI, r1
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	481a      	ldr	r0, [pc, #104]	; (8005d54 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005cec:	f7ff f9d9 	bl	80050a2 <_PreparePacket>
 8005cf0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005cf6:	4b18      	ldr	r3, [pc, #96]	; (8005d58 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	089b      	lsrs	r3, r3, #2
 8005d00:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	61fb      	str	r3, [r7, #28]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	e00b      	b.n	8005d24 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	1c59      	adds	r1, r3, #1
 8005d14:	61f9      	str	r1, [r7, #28]
 8005d16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	09db      	lsrs	r3, r3, #7
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	2b7f      	cmp	r3, #127	; 0x7f
 8005d28:	d8f0      	bhi.n	8005d0c <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	61fa      	str	r2, [r7, #28]
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005d3a:	2208      	movs	r2, #8
 8005d3c:	68f9      	ldr	r1, [r7, #12]
 8005d3e:	6938      	ldr	r0, [r7, #16]
 8005d40:	f7ff fa90 	bl	8005264 <_SendPacket>
  RECORD_END();
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f383 8811 	msr	BASEPRI, r3
}
 8005d4a:	bf00      	nop
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	200068e0 	.word	0x200068e0
 8005d58:	200068b0 	.word	0x200068b0

08005d5c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d64:	f3ef 8311 	mrs	r3, BASEPRI
 8005d68:	f04f 0120 	mov.w	r1, #32
 8005d6c:	f381 8811 	msr	BASEPRI, r1
 8005d70:	617b      	str	r3, [r7, #20]
 8005d72:	481a      	ldr	r0, [pc, #104]	; (8005ddc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005d74:	f7ff f995 	bl	80050a2 <_PreparePacket>
 8005d78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005d7e:	4b18      	ldr	r3, [pc, #96]	; (8005de0 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	089b      	lsrs	r3, r3, #2
 8005d88:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	e00b      	b.n	8005dac <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	1c59      	adds	r1, r3, #1
 8005d9c:	61f9      	str	r1, [r7, #28]
 8005d9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	09db      	lsrs	r3, r3, #7
 8005daa:	61bb      	str	r3, [r7, #24]
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	2b7f      	cmp	r3, #127	; 0x7f
 8005db0:	d8f0      	bhi.n	8005d94 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	61fa      	str	r2, [r7, #28]
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	68f9      	ldr	r1, [r7, #12]
 8005dc6:	6938      	ldr	r0, [r7, #16]
 8005dc8:	f7ff fa4c 	bl	8005264 <_SendPacket>
  RECORD_END();
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f383 8811 	msr	BASEPRI, r3
}
 8005dd2:	bf00      	nop
 8005dd4:	3720      	adds	r7, #32
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	200068e0 	.word	0x200068e0
 8005de0:	200068b0 	.word	0x200068b0

08005de4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005dec:	f3ef 8311 	mrs	r3, BASEPRI
 8005df0:	f04f 0120 	mov.w	r1, #32
 8005df4:	f381 8811 	msr	BASEPRI, r1
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	481a      	ldr	r0, [pc, #104]	; (8005e64 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005dfc:	f7ff f951 	bl	80050a2 <_PreparePacket>
 8005e00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005e06:	4b18      	ldr	r3, [pc, #96]	; (8005e68 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	089b      	lsrs	r3, r3, #2
 8005e10:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	61fb      	str	r3, [r7, #28]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	e00b      	b.n	8005e34 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	1c59      	adds	r1, r3, #1
 8005e24:	61f9      	str	r1, [r7, #28]
 8005e26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	09db      	lsrs	r3, r3, #7
 8005e32:	61bb      	str	r3, [r7, #24]
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	2b7f      	cmp	r3, #127	; 0x7f
 8005e38:	d8f0      	bhi.n	8005e1c <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	61fa      	str	r2, [r7, #28]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	b2d2      	uxtb	r2, r2
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005e4a:	2206      	movs	r2, #6
 8005e4c:	68f9      	ldr	r1, [r7, #12]
 8005e4e:	6938      	ldr	r0, [r7, #16]
 8005e50:	f7ff fa08 	bl	8005264 <_SendPacket>
  RECORD_END();
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f383 8811 	msr	BASEPRI, r3
}
 8005e5a:	bf00      	nop
 8005e5c:	3720      	adds	r7, #32
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	200068e0 	.word	0x200068e0
 8005e68:	200068b0 	.word	0x200068b0

08005e6c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005e74:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	089b      	lsrs	r3, r3, #2
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	200068b0 	.word	0x200068b0

08005e90 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08c      	sub	sp, #48	; 0x30
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	4603      	mov	r3, r0
 8005e98:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005e9a:	4b3b      	ldr	r3, [pc, #236]	; (8005f88 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d06d      	beq.n	8005f7e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005ea2:	4b39      	ldr	r3, [pc, #228]	; (8005f88 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eac:	e008      	b.n	8005ec0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d007      	beq.n	8005eca <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec0:	79fb      	ldrb	r3, [r7, #7]
 8005ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d3f2      	bcc.n	8005eae <SEGGER_SYSVIEW_SendModule+0x1e>
 8005ec8:	e000      	b.n	8005ecc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005eca:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d055      	beq.n	8005f7e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ed2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ed6:	f04f 0120 	mov.w	r1, #32
 8005eda:	f381 8811 	msr	BASEPRI, r1
 8005ede:	617b      	str	r3, [r7, #20]
 8005ee0:	482a      	ldr	r0, [pc, #168]	; (8005f8c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005ee2:	f7ff f8de 	bl	80050a2 <_PreparePacket>
 8005ee6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	623b      	str	r3, [r7, #32]
 8005ef4:	e00b      	b.n	8005f0e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	1c59      	adds	r1, r3, #1
 8005efe:	6279      	str	r1, [r7, #36]	; 0x24
 8005f00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	09db      	lsrs	r3, r3, #7
 8005f0c:	623b      	str	r3, [r7, #32]
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	2b7f      	cmp	r3, #127	; 0x7f
 8005f12:	d8f0      	bhi.n	8005ef6 <SEGGER_SYSVIEW_SendModule+0x66>
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	627a      	str	r2, [r7, #36]	; 0x24
 8005f1a:	6a3a      	ldr	r2, [r7, #32]
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	61fb      	str	r3, [r7, #28]
 8005f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	61bb      	str	r3, [r7, #24]
 8005f2e:	e00b      	b.n	8005f48 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	1c59      	adds	r1, r3, #1
 8005f38:	61f9      	str	r1, [r7, #28]
 8005f3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	09db      	lsrs	r3, r3, #7
 8005f46:	61bb      	str	r3, [r7, #24]
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f4c:	d8f0      	bhi.n	8005f30 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	61fa      	str	r2, [r7, #28]
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	701a      	strb	r2, [r3, #0]
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2280      	movs	r2, #128	; 0x80
 8005f64:	4619      	mov	r1, r3
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f7ff f84e 	bl	8005008 <_EncodeStr>
 8005f6c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005f6e:	2216      	movs	r2, #22
 8005f70:	68f9      	ldr	r1, [r7, #12]
 8005f72:	6938      	ldr	r0, [r7, #16]
 8005f74:	f7ff f976 	bl	8005264 <_SendPacket>
      RECORD_END();
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005f7e:	bf00      	nop
 8005f80:	3730      	adds	r7, #48	; 0x30
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	200068d8 	.word	0x200068d8
 8005f8c:	200068e0 	.word	0x200068e0

08005f90 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005f96:	4b0c      	ldr	r3, [pc, #48]	; (8005fc8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00f      	beq.n	8005fbe <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005f9e:	4b0a      	ldr	r3, [pc, #40]	; (8005fc8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f2      	bne.n	8005fa4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005fbe:	bf00      	nop
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	200068d8 	.word	0x200068d8

08005fcc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005fd2:	f3ef 8311 	mrs	r3, BASEPRI
 8005fd6:	f04f 0120 	mov.w	r1, #32
 8005fda:	f381 8811 	msr	BASEPRI, r1
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	4817      	ldr	r0, [pc, #92]	; (8006040 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005fe2:	f7ff f85e 	bl	80050a2 <_PreparePacket>
 8005fe6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	4b14      	ldr	r3, [pc, #80]	; (8006044 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	e00b      	b.n	8006010 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	1c59      	adds	r1, r3, #1
 8006000:	6179      	str	r1, [r7, #20]
 8006002:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	09db      	lsrs	r3, r3, #7
 800600e:	613b      	str	r3, [r7, #16]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b7f      	cmp	r3, #127	; 0x7f
 8006014:	d8f0      	bhi.n	8005ff8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	617a      	str	r2, [r7, #20]
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006026:	221b      	movs	r2, #27
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	68b8      	ldr	r0, [r7, #8]
 800602c:	f7ff f91a 	bl	8005264 <_SendPacket>
  RECORD_END();
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f383 8811 	msr	BASEPRI, r3
}
 8006036:	bf00      	nop
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	200068e0 	.word	0x200068e0
 8006044:	200068dc 	.word	0x200068dc

08006048 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006048:	b580      	push	{r7, lr}
 800604a:	b08a      	sub	sp, #40	; 0x28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006050:	f3ef 8311 	mrs	r3, BASEPRI
 8006054:	f04f 0120 	mov.w	r1, #32
 8006058:	f381 8811 	msr	BASEPRI, r1
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	4827      	ldr	r0, [pc, #156]	; (80060fc <SEGGER_SYSVIEW_Warn+0xb4>)
 8006060:	f7ff f81f 	bl	80050a2 <_PreparePacket>
 8006064:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006066:	2280      	movs	r2, #128	; 0x80
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	6938      	ldr	r0, [r7, #16]
 800606c:	f7fe ffcc 	bl	8005008 <_EncodeStr>
 8006070:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
 8006076:	2301      	movs	r3, #1
 8006078:	623b      	str	r3, [r7, #32]
 800607a:	e00b      	b.n	8006094 <SEGGER_SYSVIEW_Warn+0x4c>
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	b2da      	uxtb	r2, r3
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	1c59      	adds	r1, r3, #1
 8006084:	6279      	str	r1, [r7, #36]	; 0x24
 8006086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	09db      	lsrs	r3, r3, #7
 8006092:	623b      	str	r3, [r7, #32]
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	2b7f      	cmp	r3, #127	; 0x7f
 8006098:	d8f0      	bhi.n	800607c <SEGGER_SYSVIEW_Warn+0x34>
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	627a      	str	r2, [r7, #36]	; 0x24
 80060a0:	6a3a      	ldr	r2, [r7, #32]
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	61fb      	str	r3, [r7, #28]
 80060ae:	2300      	movs	r3, #0
 80060b0:	61bb      	str	r3, [r7, #24]
 80060b2:	e00b      	b.n	80060cc <SEGGER_SYSVIEW_Warn+0x84>
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	1c59      	adds	r1, r3, #1
 80060bc:	61f9      	str	r1, [r7, #28]
 80060be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	09db      	lsrs	r3, r3, #7
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	2b7f      	cmp	r3, #127	; 0x7f
 80060d0:	d8f0      	bhi.n	80060b4 <SEGGER_SYSVIEW_Warn+0x6c>
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	61fa      	str	r2, [r7, #28]
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060e2:	221a      	movs	r2, #26
 80060e4:	68f9      	ldr	r1, [r7, #12]
 80060e6:	6938      	ldr	r0, [r7, #16]
 80060e8:	f7ff f8bc 	bl	8005264 <_SendPacket>
  RECORD_END();
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f383 8811 	msr	BASEPRI, r3
}
 80060f2:	bf00      	nop
 80060f4:	3728      	adds	r7, #40	; 0x28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	200068e0 	.word	0x200068e0

08006100 <__errno>:
 8006100:	4b01      	ldr	r3, [pc, #4]	; (8006108 <__errno+0x8>)
 8006102:	6818      	ldr	r0, [r3, #0]
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	20000010 	.word	0x20000010

0800610c <__libc_init_array>:
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	4d0d      	ldr	r5, [pc, #52]	; (8006144 <__libc_init_array+0x38>)
 8006110:	4c0d      	ldr	r4, [pc, #52]	; (8006148 <__libc_init_array+0x3c>)
 8006112:	1b64      	subs	r4, r4, r5
 8006114:	10a4      	asrs	r4, r4, #2
 8006116:	2600      	movs	r6, #0
 8006118:	42a6      	cmp	r6, r4
 800611a:	d109      	bne.n	8006130 <__libc_init_array+0x24>
 800611c:	4d0b      	ldr	r5, [pc, #44]	; (800614c <__libc_init_array+0x40>)
 800611e:	4c0c      	ldr	r4, [pc, #48]	; (8006150 <__libc_init_array+0x44>)
 8006120:	f000 fd3c 	bl	8006b9c <_init>
 8006124:	1b64      	subs	r4, r4, r5
 8006126:	10a4      	asrs	r4, r4, #2
 8006128:	2600      	movs	r6, #0
 800612a:	42a6      	cmp	r6, r4
 800612c:	d105      	bne.n	800613a <__libc_init_array+0x2e>
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	f855 3b04 	ldr.w	r3, [r5], #4
 8006134:	4798      	blx	r3
 8006136:	3601      	adds	r6, #1
 8006138:	e7ee      	b.n	8006118 <__libc_init_array+0xc>
 800613a:	f855 3b04 	ldr.w	r3, [r5], #4
 800613e:	4798      	blx	r3
 8006140:	3601      	adds	r6, #1
 8006142:	e7f2      	b.n	800612a <__libc_init_array+0x1e>
 8006144:	08006d48 	.word	0x08006d48
 8006148:	08006d48 	.word	0x08006d48
 800614c:	08006d48 	.word	0x08006d48
 8006150:	08006d4c 	.word	0x08006d4c

08006154 <memcmp>:
 8006154:	b510      	push	{r4, lr}
 8006156:	3901      	subs	r1, #1
 8006158:	4402      	add	r2, r0
 800615a:	4290      	cmp	r0, r2
 800615c:	d101      	bne.n	8006162 <memcmp+0xe>
 800615e:	2000      	movs	r0, #0
 8006160:	e005      	b.n	800616e <memcmp+0x1a>
 8006162:	7803      	ldrb	r3, [r0, #0]
 8006164:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006168:	42a3      	cmp	r3, r4
 800616a:	d001      	beq.n	8006170 <memcmp+0x1c>
 800616c:	1b18      	subs	r0, r3, r4
 800616e:	bd10      	pop	{r4, pc}
 8006170:	3001      	adds	r0, #1
 8006172:	e7f2      	b.n	800615a <memcmp+0x6>

08006174 <memcpy>:
 8006174:	440a      	add	r2, r1
 8006176:	4291      	cmp	r1, r2
 8006178:	f100 33ff 	add.w	r3, r0, #4294967295
 800617c:	d100      	bne.n	8006180 <memcpy+0xc>
 800617e:	4770      	bx	lr
 8006180:	b510      	push	{r4, lr}
 8006182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800618a:	4291      	cmp	r1, r2
 800618c:	d1f9      	bne.n	8006182 <memcpy+0xe>
 800618e:	bd10      	pop	{r4, pc}

08006190 <memset>:
 8006190:	4402      	add	r2, r0
 8006192:	4603      	mov	r3, r0
 8006194:	4293      	cmp	r3, r2
 8006196:	d100      	bne.n	800619a <memset+0xa>
 8006198:	4770      	bx	lr
 800619a:	f803 1b01 	strb.w	r1, [r3], #1
 800619e:	e7f9      	b.n	8006194 <memset+0x4>

080061a0 <_puts_r>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	460e      	mov	r6, r1
 80061a4:	4605      	mov	r5, r0
 80061a6:	b118      	cbz	r0, 80061b0 <_puts_r+0x10>
 80061a8:	6983      	ldr	r3, [r0, #24]
 80061aa:	b90b      	cbnz	r3, 80061b0 <_puts_r+0x10>
 80061ac:	f000 fa48 	bl	8006640 <__sinit>
 80061b0:	69ab      	ldr	r3, [r5, #24]
 80061b2:	68ac      	ldr	r4, [r5, #8]
 80061b4:	b913      	cbnz	r3, 80061bc <_puts_r+0x1c>
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 fa42 	bl	8006640 <__sinit>
 80061bc:	4b2c      	ldr	r3, [pc, #176]	; (8006270 <_puts_r+0xd0>)
 80061be:	429c      	cmp	r4, r3
 80061c0:	d120      	bne.n	8006204 <_puts_r+0x64>
 80061c2:	686c      	ldr	r4, [r5, #4]
 80061c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061c6:	07db      	lsls	r3, r3, #31
 80061c8:	d405      	bmi.n	80061d6 <_puts_r+0x36>
 80061ca:	89a3      	ldrh	r3, [r4, #12]
 80061cc:	0598      	lsls	r0, r3, #22
 80061ce:	d402      	bmi.n	80061d6 <_puts_r+0x36>
 80061d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061d2:	f000 fad3 	bl	800677c <__retarget_lock_acquire_recursive>
 80061d6:	89a3      	ldrh	r3, [r4, #12]
 80061d8:	0719      	lsls	r1, r3, #28
 80061da:	d51d      	bpl.n	8006218 <_puts_r+0x78>
 80061dc:	6923      	ldr	r3, [r4, #16]
 80061de:	b1db      	cbz	r3, 8006218 <_puts_r+0x78>
 80061e0:	3e01      	subs	r6, #1
 80061e2:	68a3      	ldr	r3, [r4, #8]
 80061e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80061e8:	3b01      	subs	r3, #1
 80061ea:	60a3      	str	r3, [r4, #8]
 80061ec:	bb39      	cbnz	r1, 800623e <_puts_r+0x9e>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	da38      	bge.n	8006264 <_puts_r+0xc4>
 80061f2:	4622      	mov	r2, r4
 80061f4:	210a      	movs	r1, #10
 80061f6:	4628      	mov	r0, r5
 80061f8:	f000 f848 	bl	800628c <__swbuf_r>
 80061fc:	3001      	adds	r0, #1
 80061fe:	d011      	beq.n	8006224 <_puts_r+0x84>
 8006200:	250a      	movs	r5, #10
 8006202:	e011      	b.n	8006228 <_puts_r+0x88>
 8006204:	4b1b      	ldr	r3, [pc, #108]	; (8006274 <_puts_r+0xd4>)
 8006206:	429c      	cmp	r4, r3
 8006208:	d101      	bne.n	800620e <_puts_r+0x6e>
 800620a:	68ac      	ldr	r4, [r5, #8]
 800620c:	e7da      	b.n	80061c4 <_puts_r+0x24>
 800620e:	4b1a      	ldr	r3, [pc, #104]	; (8006278 <_puts_r+0xd8>)
 8006210:	429c      	cmp	r4, r3
 8006212:	bf08      	it	eq
 8006214:	68ec      	ldreq	r4, [r5, #12]
 8006216:	e7d5      	b.n	80061c4 <_puts_r+0x24>
 8006218:	4621      	mov	r1, r4
 800621a:	4628      	mov	r0, r5
 800621c:	f000 f888 	bl	8006330 <__swsetup_r>
 8006220:	2800      	cmp	r0, #0
 8006222:	d0dd      	beq.n	80061e0 <_puts_r+0x40>
 8006224:	f04f 35ff 	mov.w	r5, #4294967295
 8006228:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800622a:	07da      	lsls	r2, r3, #31
 800622c:	d405      	bmi.n	800623a <_puts_r+0x9a>
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	059b      	lsls	r3, r3, #22
 8006232:	d402      	bmi.n	800623a <_puts_r+0x9a>
 8006234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006236:	f000 faa2 	bl	800677e <__retarget_lock_release_recursive>
 800623a:	4628      	mov	r0, r5
 800623c:	bd70      	pop	{r4, r5, r6, pc}
 800623e:	2b00      	cmp	r3, #0
 8006240:	da04      	bge.n	800624c <_puts_r+0xac>
 8006242:	69a2      	ldr	r2, [r4, #24]
 8006244:	429a      	cmp	r2, r3
 8006246:	dc06      	bgt.n	8006256 <_puts_r+0xb6>
 8006248:	290a      	cmp	r1, #10
 800624a:	d004      	beq.n	8006256 <_puts_r+0xb6>
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	6022      	str	r2, [r4, #0]
 8006252:	7019      	strb	r1, [r3, #0]
 8006254:	e7c5      	b.n	80061e2 <_puts_r+0x42>
 8006256:	4622      	mov	r2, r4
 8006258:	4628      	mov	r0, r5
 800625a:	f000 f817 	bl	800628c <__swbuf_r>
 800625e:	3001      	adds	r0, #1
 8006260:	d1bf      	bne.n	80061e2 <_puts_r+0x42>
 8006262:	e7df      	b.n	8006224 <_puts_r+0x84>
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	250a      	movs	r5, #10
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	6022      	str	r2, [r4, #0]
 800626c:	701d      	strb	r5, [r3, #0]
 800626e:	e7db      	b.n	8006228 <_puts_r+0x88>
 8006270:	08006d00 	.word	0x08006d00
 8006274:	08006d20 	.word	0x08006d20
 8006278:	08006ce0 	.word	0x08006ce0

0800627c <puts>:
 800627c:	4b02      	ldr	r3, [pc, #8]	; (8006288 <puts+0xc>)
 800627e:	4601      	mov	r1, r0
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	f7ff bf8d 	b.w	80061a0 <_puts_r>
 8006286:	bf00      	nop
 8006288:	20000010 	.word	0x20000010

0800628c <__swbuf_r>:
 800628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628e:	460e      	mov	r6, r1
 8006290:	4614      	mov	r4, r2
 8006292:	4605      	mov	r5, r0
 8006294:	b118      	cbz	r0, 800629e <__swbuf_r+0x12>
 8006296:	6983      	ldr	r3, [r0, #24]
 8006298:	b90b      	cbnz	r3, 800629e <__swbuf_r+0x12>
 800629a:	f000 f9d1 	bl	8006640 <__sinit>
 800629e:	4b21      	ldr	r3, [pc, #132]	; (8006324 <__swbuf_r+0x98>)
 80062a0:	429c      	cmp	r4, r3
 80062a2:	d12b      	bne.n	80062fc <__swbuf_r+0x70>
 80062a4:	686c      	ldr	r4, [r5, #4]
 80062a6:	69a3      	ldr	r3, [r4, #24]
 80062a8:	60a3      	str	r3, [r4, #8]
 80062aa:	89a3      	ldrh	r3, [r4, #12]
 80062ac:	071a      	lsls	r2, r3, #28
 80062ae:	d52f      	bpl.n	8006310 <__swbuf_r+0x84>
 80062b0:	6923      	ldr	r3, [r4, #16]
 80062b2:	b36b      	cbz	r3, 8006310 <__swbuf_r+0x84>
 80062b4:	6923      	ldr	r3, [r4, #16]
 80062b6:	6820      	ldr	r0, [r4, #0]
 80062b8:	1ac0      	subs	r0, r0, r3
 80062ba:	6963      	ldr	r3, [r4, #20]
 80062bc:	b2f6      	uxtb	r6, r6
 80062be:	4283      	cmp	r3, r0
 80062c0:	4637      	mov	r7, r6
 80062c2:	dc04      	bgt.n	80062ce <__swbuf_r+0x42>
 80062c4:	4621      	mov	r1, r4
 80062c6:	4628      	mov	r0, r5
 80062c8:	f000 f926 	bl	8006518 <_fflush_r>
 80062cc:	bb30      	cbnz	r0, 800631c <__swbuf_r+0x90>
 80062ce:	68a3      	ldr	r3, [r4, #8]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	60a3      	str	r3, [r4, #8]
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	1c5a      	adds	r2, r3, #1
 80062d8:	6022      	str	r2, [r4, #0]
 80062da:	701e      	strb	r6, [r3, #0]
 80062dc:	6963      	ldr	r3, [r4, #20]
 80062de:	3001      	adds	r0, #1
 80062e0:	4283      	cmp	r3, r0
 80062e2:	d004      	beq.n	80062ee <__swbuf_r+0x62>
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	07db      	lsls	r3, r3, #31
 80062e8:	d506      	bpl.n	80062f8 <__swbuf_r+0x6c>
 80062ea:	2e0a      	cmp	r6, #10
 80062ec:	d104      	bne.n	80062f8 <__swbuf_r+0x6c>
 80062ee:	4621      	mov	r1, r4
 80062f0:	4628      	mov	r0, r5
 80062f2:	f000 f911 	bl	8006518 <_fflush_r>
 80062f6:	b988      	cbnz	r0, 800631c <__swbuf_r+0x90>
 80062f8:	4638      	mov	r0, r7
 80062fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062fc:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <__swbuf_r+0x9c>)
 80062fe:	429c      	cmp	r4, r3
 8006300:	d101      	bne.n	8006306 <__swbuf_r+0x7a>
 8006302:	68ac      	ldr	r4, [r5, #8]
 8006304:	e7cf      	b.n	80062a6 <__swbuf_r+0x1a>
 8006306:	4b09      	ldr	r3, [pc, #36]	; (800632c <__swbuf_r+0xa0>)
 8006308:	429c      	cmp	r4, r3
 800630a:	bf08      	it	eq
 800630c:	68ec      	ldreq	r4, [r5, #12]
 800630e:	e7ca      	b.n	80062a6 <__swbuf_r+0x1a>
 8006310:	4621      	mov	r1, r4
 8006312:	4628      	mov	r0, r5
 8006314:	f000 f80c 	bl	8006330 <__swsetup_r>
 8006318:	2800      	cmp	r0, #0
 800631a:	d0cb      	beq.n	80062b4 <__swbuf_r+0x28>
 800631c:	f04f 37ff 	mov.w	r7, #4294967295
 8006320:	e7ea      	b.n	80062f8 <__swbuf_r+0x6c>
 8006322:	bf00      	nop
 8006324:	08006d00 	.word	0x08006d00
 8006328:	08006d20 	.word	0x08006d20
 800632c:	08006ce0 	.word	0x08006ce0

08006330 <__swsetup_r>:
 8006330:	4b32      	ldr	r3, [pc, #200]	; (80063fc <__swsetup_r+0xcc>)
 8006332:	b570      	push	{r4, r5, r6, lr}
 8006334:	681d      	ldr	r5, [r3, #0]
 8006336:	4606      	mov	r6, r0
 8006338:	460c      	mov	r4, r1
 800633a:	b125      	cbz	r5, 8006346 <__swsetup_r+0x16>
 800633c:	69ab      	ldr	r3, [r5, #24]
 800633e:	b913      	cbnz	r3, 8006346 <__swsetup_r+0x16>
 8006340:	4628      	mov	r0, r5
 8006342:	f000 f97d 	bl	8006640 <__sinit>
 8006346:	4b2e      	ldr	r3, [pc, #184]	; (8006400 <__swsetup_r+0xd0>)
 8006348:	429c      	cmp	r4, r3
 800634a:	d10f      	bne.n	800636c <__swsetup_r+0x3c>
 800634c:	686c      	ldr	r4, [r5, #4]
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006354:	0719      	lsls	r1, r3, #28
 8006356:	d42c      	bmi.n	80063b2 <__swsetup_r+0x82>
 8006358:	06dd      	lsls	r5, r3, #27
 800635a:	d411      	bmi.n	8006380 <__swsetup_r+0x50>
 800635c:	2309      	movs	r3, #9
 800635e:	6033      	str	r3, [r6, #0]
 8006360:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006364:	81a3      	strh	r3, [r4, #12]
 8006366:	f04f 30ff 	mov.w	r0, #4294967295
 800636a:	e03e      	b.n	80063ea <__swsetup_r+0xba>
 800636c:	4b25      	ldr	r3, [pc, #148]	; (8006404 <__swsetup_r+0xd4>)
 800636e:	429c      	cmp	r4, r3
 8006370:	d101      	bne.n	8006376 <__swsetup_r+0x46>
 8006372:	68ac      	ldr	r4, [r5, #8]
 8006374:	e7eb      	b.n	800634e <__swsetup_r+0x1e>
 8006376:	4b24      	ldr	r3, [pc, #144]	; (8006408 <__swsetup_r+0xd8>)
 8006378:	429c      	cmp	r4, r3
 800637a:	bf08      	it	eq
 800637c:	68ec      	ldreq	r4, [r5, #12]
 800637e:	e7e6      	b.n	800634e <__swsetup_r+0x1e>
 8006380:	0758      	lsls	r0, r3, #29
 8006382:	d512      	bpl.n	80063aa <__swsetup_r+0x7a>
 8006384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006386:	b141      	cbz	r1, 800639a <__swsetup_r+0x6a>
 8006388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800638c:	4299      	cmp	r1, r3
 800638e:	d002      	beq.n	8006396 <__swsetup_r+0x66>
 8006390:	4630      	mov	r0, r6
 8006392:	f000 fa5b 	bl	800684c <_free_r>
 8006396:	2300      	movs	r3, #0
 8006398:	6363      	str	r3, [r4, #52]	; 0x34
 800639a:	89a3      	ldrh	r3, [r4, #12]
 800639c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063a0:	81a3      	strh	r3, [r4, #12]
 80063a2:	2300      	movs	r3, #0
 80063a4:	6063      	str	r3, [r4, #4]
 80063a6:	6923      	ldr	r3, [r4, #16]
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	f043 0308 	orr.w	r3, r3, #8
 80063b0:	81a3      	strh	r3, [r4, #12]
 80063b2:	6923      	ldr	r3, [r4, #16]
 80063b4:	b94b      	cbnz	r3, 80063ca <__swsetup_r+0x9a>
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c0:	d003      	beq.n	80063ca <__swsetup_r+0x9a>
 80063c2:	4621      	mov	r1, r4
 80063c4:	4630      	mov	r0, r6
 80063c6:	f000 fa01 	bl	80067cc <__smakebuf_r>
 80063ca:	89a0      	ldrh	r0, [r4, #12]
 80063cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063d0:	f010 0301 	ands.w	r3, r0, #1
 80063d4:	d00a      	beq.n	80063ec <__swsetup_r+0xbc>
 80063d6:	2300      	movs	r3, #0
 80063d8:	60a3      	str	r3, [r4, #8]
 80063da:	6963      	ldr	r3, [r4, #20]
 80063dc:	425b      	negs	r3, r3
 80063de:	61a3      	str	r3, [r4, #24]
 80063e0:	6923      	ldr	r3, [r4, #16]
 80063e2:	b943      	cbnz	r3, 80063f6 <__swsetup_r+0xc6>
 80063e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063e8:	d1ba      	bne.n	8006360 <__swsetup_r+0x30>
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	0781      	lsls	r1, r0, #30
 80063ee:	bf58      	it	pl
 80063f0:	6963      	ldrpl	r3, [r4, #20]
 80063f2:	60a3      	str	r3, [r4, #8]
 80063f4:	e7f4      	b.n	80063e0 <__swsetup_r+0xb0>
 80063f6:	2000      	movs	r0, #0
 80063f8:	e7f7      	b.n	80063ea <__swsetup_r+0xba>
 80063fa:	bf00      	nop
 80063fc:	20000010 	.word	0x20000010
 8006400:	08006d00 	.word	0x08006d00
 8006404:	08006d20 	.word	0x08006d20
 8006408:	08006ce0 	.word	0x08006ce0

0800640c <__sflush_r>:
 800640c:	898a      	ldrh	r2, [r1, #12]
 800640e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006412:	4605      	mov	r5, r0
 8006414:	0710      	lsls	r0, r2, #28
 8006416:	460c      	mov	r4, r1
 8006418:	d458      	bmi.n	80064cc <__sflush_r+0xc0>
 800641a:	684b      	ldr	r3, [r1, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	dc05      	bgt.n	800642c <__sflush_r+0x20>
 8006420:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006422:	2b00      	cmp	r3, #0
 8006424:	dc02      	bgt.n	800642c <__sflush_r+0x20>
 8006426:	2000      	movs	r0, #0
 8006428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800642c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800642e:	2e00      	cmp	r6, #0
 8006430:	d0f9      	beq.n	8006426 <__sflush_r+0x1a>
 8006432:	2300      	movs	r3, #0
 8006434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006438:	682f      	ldr	r7, [r5, #0]
 800643a:	602b      	str	r3, [r5, #0]
 800643c:	d032      	beq.n	80064a4 <__sflush_r+0x98>
 800643e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	075a      	lsls	r2, r3, #29
 8006444:	d505      	bpl.n	8006452 <__sflush_r+0x46>
 8006446:	6863      	ldr	r3, [r4, #4]
 8006448:	1ac0      	subs	r0, r0, r3
 800644a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800644c:	b10b      	cbz	r3, 8006452 <__sflush_r+0x46>
 800644e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006450:	1ac0      	subs	r0, r0, r3
 8006452:	2300      	movs	r3, #0
 8006454:	4602      	mov	r2, r0
 8006456:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006458:	6a21      	ldr	r1, [r4, #32]
 800645a:	4628      	mov	r0, r5
 800645c:	47b0      	blx	r6
 800645e:	1c43      	adds	r3, r0, #1
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	d106      	bne.n	8006472 <__sflush_r+0x66>
 8006464:	6829      	ldr	r1, [r5, #0]
 8006466:	291d      	cmp	r1, #29
 8006468:	d82c      	bhi.n	80064c4 <__sflush_r+0xb8>
 800646a:	4a2a      	ldr	r2, [pc, #168]	; (8006514 <__sflush_r+0x108>)
 800646c:	40ca      	lsrs	r2, r1
 800646e:	07d6      	lsls	r6, r2, #31
 8006470:	d528      	bpl.n	80064c4 <__sflush_r+0xb8>
 8006472:	2200      	movs	r2, #0
 8006474:	6062      	str	r2, [r4, #4]
 8006476:	04d9      	lsls	r1, r3, #19
 8006478:	6922      	ldr	r2, [r4, #16]
 800647a:	6022      	str	r2, [r4, #0]
 800647c:	d504      	bpl.n	8006488 <__sflush_r+0x7c>
 800647e:	1c42      	adds	r2, r0, #1
 8006480:	d101      	bne.n	8006486 <__sflush_r+0x7a>
 8006482:	682b      	ldr	r3, [r5, #0]
 8006484:	b903      	cbnz	r3, 8006488 <__sflush_r+0x7c>
 8006486:	6560      	str	r0, [r4, #84]	; 0x54
 8006488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800648a:	602f      	str	r7, [r5, #0]
 800648c:	2900      	cmp	r1, #0
 800648e:	d0ca      	beq.n	8006426 <__sflush_r+0x1a>
 8006490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006494:	4299      	cmp	r1, r3
 8006496:	d002      	beq.n	800649e <__sflush_r+0x92>
 8006498:	4628      	mov	r0, r5
 800649a:	f000 f9d7 	bl	800684c <_free_r>
 800649e:	2000      	movs	r0, #0
 80064a0:	6360      	str	r0, [r4, #52]	; 0x34
 80064a2:	e7c1      	b.n	8006428 <__sflush_r+0x1c>
 80064a4:	6a21      	ldr	r1, [r4, #32]
 80064a6:	2301      	movs	r3, #1
 80064a8:	4628      	mov	r0, r5
 80064aa:	47b0      	blx	r6
 80064ac:	1c41      	adds	r1, r0, #1
 80064ae:	d1c7      	bne.n	8006440 <__sflush_r+0x34>
 80064b0:	682b      	ldr	r3, [r5, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0c4      	beq.n	8006440 <__sflush_r+0x34>
 80064b6:	2b1d      	cmp	r3, #29
 80064b8:	d001      	beq.n	80064be <__sflush_r+0xb2>
 80064ba:	2b16      	cmp	r3, #22
 80064bc:	d101      	bne.n	80064c2 <__sflush_r+0xb6>
 80064be:	602f      	str	r7, [r5, #0]
 80064c0:	e7b1      	b.n	8006426 <__sflush_r+0x1a>
 80064c2:	89a3      	ldrh	r3, [r4, #12]
 80064c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064c8:	81a3      	strh	r3, [r4, #12]
 80064ca:	e7ad      	b.n	8006428 <__sflush_r+0x1c>
 80064cc:	690f      	ldr	r7, [r1, #16]
 80064ce:	2f00      	cmp	r7, #0
 80064d0:	d0a9      	beq.n	8006426 <__sflush_r+0x1a>
 80064d2:	0793      	lsls	r3, r2, #30
 80064d4:	680e      	ldr	r6, [r1, #0]
 80064d6:	bf08      	it	eq
 80064d8:	694b      	ldreq	r3, [r1, #20]
 80064da:	600f      	str	r7, [r1, #0]
 80064dc:	bf18      	it	ne
 80064de:	2300      	movne	r3, #0
 80064e0:	eba6 0807 	sub.w	r8, r6, r7
 80064e4:	608b      	str	r3, [r1, #8]
 80064e6:	f1b8 0f00 	cmp.w	r8, #0
 80064ea:	dd9c      	ble.n	8006426 <__sflush_r+0x1a>
 80064ec:	6a21      	ldr	r1, [r4, #32]
 80064ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064f0:	4643      	mov	r3, r8
 80064f2:	463a      	mov	r2, r7
 80064f4:	4628      	mov	r0, r5
 80064f6:	47b0      	blx	r6
 80064f8:	2800      	cmp	r0, #0
 80064fa:	dc06      	bgt.n	800650a <__sflush_r+0xfe>
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006502:	81a3      	strh	r3, [r4, #12]
 8006504:	f04f 30ff 	mov.w	r0, #4294967295
 8006508:	e78e      	b.n	8006428 <__sflush_r+0x1c>
 800650a:	4407      	add	r7, r0
 800650c:	eba8 0800 	sub.w	r8, r8, r0
 8006510:	e7e9      	b.n	80064e6 <__sflush_r+0xda>
 8006512:	bf00      	nop
 8006514:	20400001 	.word	0x20400001

08006518 <_fflush_r>:
 8006518:	b538      	push	{r3, r4, r5, lr}
 800651a:	690b      	ldr	r3, [r1, #16]
 800651c:	4605      	mov	r5, r0
 800651e:	460c      	mov	r4, r1
 8006520:	b913      	cbnz	r3, 8006528 <_fflush_r+0x10>
 8006522:	2500      	movs	r5, #0
 8006524:	4628      	mov	r0, r5
 8006526:	bd38      	pop	{r3, r4, r5, pc}
 8006528:	b118      	cbz	r0, 8006532 <_fflush_r+0x1a>
 800652a:	6983      	ldr	r3, [r0, #24]
 800652c:	b90b      	cbnz	r3, 8006532 <_fflush_r+0x1a>
 800652e:	f000 f887 	bl	8006640 <__sinit>
 8006532:	4b14      	ldr	r3, [pc, #80]	; (8006584 <_fflush_r+0x6c>)
 8006534:	429c      	cmp	r4, r3
 8006536:	d11b      	bne.n	8006570 <_fflush_r+0x58>
 8006538:	686c      	ldr	r4, [r5, #4]
 800653a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0ef      	beq.n	8006522 <_fflush_r+0xa>
 8006542:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006544:	07d0      	lsls	r0, r2, #31
 8006546:	d404      	bmi.n	8006552 <_fflush_r+0x3a>
 8006548:	0599      	lsls	r1, r3, #22
 800654a:	d402      	bmi.n	8006552 <_fflush_r+0x3a>
 800654c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800654e:	f000 f915 	bl	800677c <__retarget_lock_acquire_recursive>
 8006552:	4628      	mov	r0, r5
 8006554:	4621      	mov	r1, r4
 8006556:	f7ff ff59 	bl	800640c <__sflush_r>
 800655a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800655c:	07da      	lsls	r2, r3, #31
 800655e:	4605      	mov	r5, r0
 8006560:	d4e0      	bmi.n	8006524 <_fflush_r+0xc>
 8006562:	89a3      	ldrh	r3, [r4, #12]
 8006564:	059b      	lsls	r3, r3, #22
 8006566:	d4dd      	bmi.n	8006524 <_fflush_r+0xc>
 8006568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800656a:	f000 f908 	bl	800677e <__retarget_lock_release_recursive>
 800656e:	e7d9      	b.n	8006524 <_fflush_r+0xc>
 8006570:	4b05      	ldr	r3, [pc, #20]	; (8006588 <_fflush_r+0x70>)
 8006572:	429c      	cmp	r4, r3
 8006574:	d101      	bne.n	800657a <_fflush_r+0x62>
 8006576:	68ac      	ldr	r4, [r5, #8]
 8006578:	e7df      	b.n	800653a <_fflush_r+0x22>
 800657a:	4b04      	ldr	r3, [pc, #16]	; (800658c <_fflush_r+0x74>)
 800657c:	429c      	cmp	r4, r3
 800657e:	bf08      	it	eq
 8006580:	68ec      	ldreq	r4, [r5, #12]
 8006582:	e7da      	b.n	800653a <_fflush_r+0x22>
 8006584:	08006d00 	.word	0x08006d00
 8006588:	08006d20 	.word	0x08006d20
 800658c:	08006ce0 	.word	0x08006ce0

08006590 <std>:
 8006590:	2300      	movs	r3, #0
 8006592:	b510      	push	{r4, lr}
 8006594:	4604      	mov	r4, r0
 8006596:	e9c0 3300 	strd	r3, r3, [r0]
 800659a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800659e:	6083      	str	r3, [r0, #8]
 80065a0:	8181      	strh	r1, [r0, #12]
 80065a2:	6643      	str	r3, [r0, #100]	; 0x64
 80065a4:	81c2      	strh	r2, [r0, #14]
 80065a6:	6183      	str	r3, [r0, #24]
 80065a8:	4619      	mov	r1, r3
 80065aa:	2208      	movs	r2, #8
 80065ac:	305c      	adds	r0, #92	; 0x5c
 80065ae:	f7ff fdef 	bl	8006190 <memset>
 80065b2:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <std+0x38>)
 80065b4:	6263      	str	r3, [r4, #36]	; 0x24
 80065b6:	4b05      	ldr	r3, [pc, #20]	; (80065cc <std+0x3c>)
 80065b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80065ba:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <std+0x40>)
 80065bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065be:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <std+0x44>)
 80065c0:	6224      	str	r4, [r4, #32]
 80065c2:	6323      	str	r3, [r4, #48]	; 0x30
 80065c4:	bd10      	pop	{r4, pc}
 80065c6:	bf00      	nop
 80065c8:	08006a2d 	.word	0x08006a2d
 80065cc:	08006a4f 	.word	0x08006a4f
 80065d0:	08006a87 	.word	0x08006a87
 80065d4:	08006aab 	.word	0x08006aab

080065d8 <_cleanup_r>:
 80065d8:	4901      	ldr	r1, [pc, #4]	; (80065e0 <_cleanup_r+0x8>)
 80065da:	f000 b8af 	b.w	800673c <_fwalk_reent>
 80065de:	bf00      	nop
 80065e0:	08006519 	.word	0x08006519

080065e4 <__sfmoreglue>:
 80065e4:	b570      	push	{r4, r5, r6, lr}
 80065e6:	2268      	movs	r2, #104	; 0x68
 80065e8:	1e4d      	subs	r5, r1, #1
 80065ea:	4355      	muls	r5, r2
 80065ec:	460e      	mov	r6, r1
 80065ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80065f2:	f000 f997 	bl	8006924 <_malloc_r>
 80065f6:	4604      	mov	r4, r0
 80065f8:	b140      	cbz	r0, 800660c <__sfmoreglue+0x28>
 80065fa:	2100      	movs	r1, #0
 80065fc:	e9c0 1600 	strd	r1, r6, [r0]
 8006600:	300c      	adds	r0, #12
 8006602:	60a0      	str	r0, [r4, #8]
 8006604:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006608:	f7ff fdc2 	bl	8006190 <memset>
 800660c:	4620      	mov	r0, r4
 800660e:	bd70      	pop	{r4, r5, r6, pc}

08006610 <__sfp_lock_acquire>:
 8006610:	4801      	ldr	r0, [pc, #4]	; (8006618 <__sfp_lock_acquire+0x8>)
 8006612:	f000 b8b3 	b.w	800677c <__retarget_lock_acquire_recursive>
 8006616:	bf00      	nop
 8006618:	200069c4 	.word	0x200069c4

0800661c <__sfp_lock_release>:
 800661c:	4801      	ldr	r0, [pc, #4]	; (8006624 <__sfp_lock_release+0x8>)
 800661e:	f000 b8ae 	b.w	800677e <__retarget_lock_release_recursive>
 8006622:	bf00      	nop
 8006624:	200069c4 	.word	0x200069c4

08006628 <__sinit_lock_acquire>:
 8006628:	4801      	ldr	r0, [pc, #4]	; (8006630 <__sinit_lock_acquire+0x8>)
 800662a:	f000 b8a7 	b.w	800677c <__retarget_lock_acquire_recursive>
 800662e:	bf00      	nop
 8006630:	200069c5 	.word	0x200069c5

08006634 <__sinit_lock_release>:
 8006634:	4801      	ldr	r0, [pc, #4]	; (800663c <__sinit_lock_release+0x8>)
 8006636:	f000 b8a2 	b.w	800677e <__retarget_lock_release_recursive>
 800663a:	bf00      	nop
 800663c:	200069c5 	.word	0x200069c5

08006640 <__sinit>:
 8006640:	b510      	push	{r4, lr}
 8006642:	4604      	mov	r4, r0
 8006644:	f7ff fff0 	bl	8006628 <__sinit_lock_acquire>
 8006648:	69a3      	ldr	r3, [r4, #24]
 800664a:	b11b      	cbz	r3, 8006654 <__sinit+0x14>
 800664c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006650:	f7ff bff0 	b.w	8006634 <__sinit_lock_release>
 8006654:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006658:	6523      	str	r3, [r4, #80]	; 0x50
 800665a:	4b13      	ldr	r3, [pc, #76]	; (80066a8 <__sinit+0x68>)
 800665c:	4a13      	ldr	r2, [pc, #76]	; (80066ac <__sinit+0x6c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	62a2      	str	r2, [r4, #40]	; 0x28
 8006662:	42a3      	cmp	r3, r4
 8006664:	bf04      	itt	eq
 8006666:	2301      	moveq	r3, #1
 8006668:	61a3      	streq	r3, [r4, #24]
 800666a:	4620      	mov	r0, r4
 800666c:	f000 f820 	bl	80066b0 <__sfp>
 8006670:	6060      	str	r0, [r4, #4]
 8006672:	4620      	mov	r0, r4
 8006674:	f000 f81c 	bl	80066b0 <__sfp>
 8006678:	60a0      	str	r0, [r4, #8]
 800667a:	4620      	mov	r0, r4
 800667c:	f000 f818 	bl	80066b0 <__sfp>
 8006680:	2200      	movs	r2, #0
 8006682:	60e0      	str	r0, [r4, #12]
 8006684:	2104      	movs	r1, #4
 8006686:	6860      	ldr	r0, [r4, #4]
 8006688:	f7ff ff82 	bl	8006590 <std>
 800668c:	68a0      	ldr	r0, [r4, #8]
 800668e:	2201      	movs	r2, #1
 8006690:	2109      	movs	r1, #9
 8006692:	f7ff ff7d 	bl	8006590 <std>
 8006696:	68e0      	ldr	r0, [r4, #12]
 8006698:	2202      	movs	r2, #2
 800669a:	2112      	movs	r1, #18
 800669c:	f7ff ff78 	bl	8006590 <std>
 80066a0:	2301      	movs	r3, #1
 80066a2:	61a3      	str	r3, [r4, #24]
 80066a4:	e7d2      	b.n	800664c <__sinit+0xc>
 80066a6:	bf00      	nop
 80066a8:	08006cdc 	.word	0x08006cdc
 80066ac:	080065d9 	.word	0x080065d9

080066b0 <__sfp>:
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b2:	4607      	mov	r7, r0
 80066b4:	f7ff ffac 	bl	8006610 <__sfp_lock_acquire>
 80066b8:	4b1e      	ldr	r3, [pc, #120]	; (8006734 <__sfp+0x84>)
 80066ba:	681e      	ldr	r6, [r3, #0]
 80066bc:	69b3      	ldr	r3, [r6, #24]
 80066be:	b913      	cbnz	r3, 80066c6 <__sfp+0x16>
 80066c0:	4630      	mov	r0, r6
 80066c2:	f7ff ffbd 	bl	8006640 <__sinit>
 80066c6:	3648      	adds	r6, #72	; 0x48
 80066c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	d503      	bpl.n	80066d8 <__sfp+0x28>
 80066d0:	6833      	ldr	r3, [r6, #0]
 80066d2:	b30b      	cbz	r3, 8006718 <__sfp+0x68>
 80066d4:	6836      	ldr	r6, [r6, #0]
 80066d6:	e7f7      	b.n	80066c8 <__sfp+0x18>
 80066d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80066dc:	b9d5      	cbnz	r5, 8006714 <__sfp+0x64>
 80066de:	4b16      	ldr	r3, [pc, #88]	; (8006738 <__sfp+0x88>)
 80066e0:	60e3      	str	r3, [r4, #12]
 80066e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80066e6:	6665      	str	r5, [r4, #100]	; 0x64
 80066e8:	f000 f847 	bl	800677a <__retarget_lock_init_recursive>
 80066ec:	f7ff ff96 	bl	800661c <__sfp_lock_release>
 80066f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80066f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80066f8:	6025      	str	r5, [r4, #0]
 80066fa:	61a5      	str	r5, [r4, #24]
 80066fc:	2208      	movs	r2, #8
 80066fe:	4629      	mov	r1, r5
 8006700:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006704:	f7ff fd44 	bl	8006190 <memset>
 8006708:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800670c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006710:	4620      	mov	r0, r4
 8006712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006714:	3468      	adds	r4, #104	; 0x68
 8006716:	e7d9      	b.n	80066cc <__sfp+0x1c>
 8006718:	2104      	movs	r1, #4
 800671a:	4638      	mov	r0, r7
 800671c:	f7ff ff62 	bl	80065e4 <__sfmoreglue>
 8006720:	4604      	mov	r4, r0
 8006722:	6030      	str	r0, [r6, #0]
 8006724:	2800      	cmp	r0, #0
 8006726:	d1d5      	bne.n	80066d4 <__sfp+0x24>
 8006728:	f7ff ff78 	bl	800661c <__sfp_lock_release>
 800672c:	230c      	movs	r3, #12
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	e7ee      	b.n	8006710 <__sfp+0x60>
 8006732:	bf00      	nop
 8006734:	08006cdc 	.word	0x08006cdc
 8006738:	ffff0001 	.word	0xffff0001

0800673c <_fwalk_reent>:
 800673c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006740:	4606      	mov	r6, r0
 8006742:	4688      	mov	r8, r1
 8006744:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006748:	2700      	movs	r7, #0
 800674a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800674e:	f1b9 0901 	subs.w	r9, r9, #1
 8006752:	d505      	bpl.n	8006760 <_fwalk_reent+0x24>
 8006754:	6824      	ldr	r4, [r4, #0]
 8006756:	2c00      	cmp	r4, #0
 8006758:	d1f7      	bne.n	800674a <_fwalk_reent+0xe>
 800675a:	4638      	mov	r0, r7
 800675c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006760:	89ab      	ldrh	r3, [r5, #12]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d907      	bls.n	8006776 <_fwalk_reent+0x3a>
 8006766:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800676a:	3301      	adds	r3, #1
 800676c:	d003      	beq.n	8006776 <_fwalk_reent+0x3a>
 800676e:	4629      	mov	r1, r5
 8006770:	4630      	mov	r0, r6
 8006772:	47c0      	blx	r8
 8006774:	4307      	orrs	r7, r0
 8006776:	3568      	adds	r5, #104	; 0x68
 8006778:	e7e9      	b.n	800674e <_fwalk_reent+0x12>

0800677a <__retarget_lock_init_recursive>:
 800677a:	4770      	bx	lr

0800677c <__retarget_lock_acquire_recursive>:
 800677c:	4770      	bx	lr

0800677e <__retarget_lock_release_recursive>:
 800677e:	4770      	bx	lr

08006780 <__swhatbuf_r>:
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	460e      	mov	r6, r1
 8006784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006788:	2900      	cmp	r1, #0
 800678a:	b096      	sub	sp, #88	; 0x58
 800678c:	4614      	mov	r4, r2
 800678e:	461d      	mov	r5, r3
 8006790:	da08      	bge.n	80067a4 <__swhatbuf_r+0x24>
 8006792:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	602a      	str	r2, [r5, #0]
 800679a:	061a      	lsls	r2, r3, #24
 800679c:	d410      	bmi.n	80067c0 <__swhatbuf_r+0x40>
 800679e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067a2:	e00e      	b.n	80067c2 <__swhatbuf_r+0x42>
 80067a4:	466a      	mov	r2, sp
 80067a6:	f000 f9a7 	bl	8006af8 <_fstat_r>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	dbf1      	blt.n	8006792 <__swhatbuf_r+0x12>
 80067ae:	9a01      	ldr	r2, [sp, #4]
 80067b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067b8:	425a      	negs	r2, r3
 80067ba:	415a      	adcs	r2, r3
 80067bc:	602a      	str	r2, [r5, #0]
 80067be:	e7ee      	b.n	800679e <__swhatbuf_r+0x1e>
 80067c0:	2340      	movs	r3, #64	; 0x40
 80067c2:	2000      	movs	r0, #0
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	b016      	add	sp, #88	; 0x58
 80067c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080067cc <__smakebuf_r>:
 80067cc:	898b      	ldrh	r3, [r1, #12]
 80067ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067d0:	079d      	lsls	r5, r3, #30
 80067d2:	4606      	mov	r6, r0
 80067d4:	460c      	mov	r4, r1
 80067d6:	d507      	bpl.n	80067e8 <__smakebuf_r+0x1c>
 80067d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	6123      	str	r3, [r4, #16]
 80067e0:	2301      	movs	r3, #1
 80067e2:	6163      	str	r3, [r4, #20]
 80067e4:	b002      	add	sp, #8
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	ab01      	add	r3, sp, #4
 80067ea:	466a      	mov	r2, sp
 80067ec:	f7ff ffc8 	bl	8006780 <__swhatbuf_r>
 80067f0:	9900      	ldr	r1, [sp, #0]
 80067f2:	4605      	mov	r5, r0
 80067f4:	4630      	mov	r0, r6
 80067f6:	f000 f895 	bl	8006924 <_malloc_r>
 80067fa:	b948      	cbnz	r0, 8006810 <__smakebuf_r+0x44>
 80067fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006800:	059a      	lsls	r2, r3, #22
 8006802:	d4ef      	bmi.n	80067e4 <__smakebuf_r+0x18>
 8006804:	f023 0303 	bic.w	r3, r3, #3
 8006808:	f043 0302 	orr.w	r3, r3, #2
 800680c:	81a3      	strh	r3, [r4, #12]
 800680e:	e7e3      	b.n	80067d8 <__smakebuf_r+0xc>
 8006810:	4b0d      	ldr	r3, [pc, #52]	; (8006848 <__smakebuf_r+0x7c>)
 8006812:	62b3      	str	r3, [r6, #40]	; 0x28
 8006814:	89a3      	ldrh	r3, [r4, #12]
 8006816:	6020      	str	r0, [r4, #0]
 8006818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681c:	81a3      	strh	r3, [r4, #12]
 800681e:	9b00      	ldr	r3, [sp, #0]
 8006820:	6163      	str	r3, [r4, #20]
 8006822:	9b01      	ldr	r3, [sp, #4]
 8006824:	6120      	str	r0, [r4, #16]
 8006826:	b15b      	cbz	r3, 8006840 <__smakebuf_r+0x74>
 8006828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800682c:	4630      	mov	r0, r6
 800682e:	f000 f975 	bl	8006b1c <_isatty_r>
 8006832:	b128      	cbz	r0, 8006840 <__smakebuf_r+0x74>
 8006834:	89a3      	ldrh	r3, [r4, #12]
 8006836:	f023 0303 	bic.w	r3, r3, #3
 800683a:	f043 0301 	orr.w	r3, r3, #1
 800683e:	81a3      	strh	r3, [r4, #12]
 8006840:	89a0      	ldrh	r0, [r4, #12]
 8006842:	4305      	orrs	r5, r0
 8006844:	81a5      	strh	r5, [r4, #12]
 8006846:	e7cd      	b.n	80067e4 <__smakebuf_r+0x18>
 8006848:	080065d9 	.word	0x080065d9

0800684c <_free_r>:
 800684c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800684e:	2900      	cmp	r1, #0
 8006850:	d044      	beq.n	80068dc <_free_r+0x90>
 8006852:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006856:	9001      	str	r0, [sp, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	f1a1 0404 	sub.w	r4, r1, #4
 800685e:	bfb8      	it	lt
 8006860:	18e4      	addlt	r4, r4, r3
 8006862:	f000 f97d 	bl	8006b60 <__malloc_lock>
 8006866:	4a1e      	ldr	r2, [pc, #120]	; (80068e0 <_free_r+0x94>)
 8006868:	9801      	ldr	r0, [sp, #4]
 800686a:	6813      	ldr	r3, [r2, #0]
 800686c:	b933      	cbnz	r3, 800687c <_free_r+0x30>
 800686e:	6063      	str	r3, [r4, #4]
 8006870:	6014      	str	r4, [r2, #0]
 8006872:	b003      	add	sp, #12
 8006874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006878:	f000 b978 	b.w	8006b6c <__malloc_unlock>
 800687c:	42a3      	cmp	r3, r4
 800687e:	d908      	bls.n	8006892 <_free_r+0x46>
 8006880:	6825      	ldr	r5, [r4, #0]
 8006882:	1961      	adds	r1, r4, r5
 8006884:	428b      	cmp	r3, r1
 8006886:	bf01      	itttt	eq
 8006888:	6819      	ldreq	r1, [r3, #0]
 800688a:	685b      	ldreq	r3, [r3, #4]
 800688c:	1949      	addeq	r1, r1, r5
 800688e:	6021      	streq	r1, [r4, #0]
 8006890:	e7ed      	b.n	800686e <_free_r+0x22>
 8006892:	461a      	mov	r2, r3
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	b10b      	cbz	r3, 800689c <_free_r+0x50>
 8006898:	42a3      	cmp	r3, r4
 800689a:	d9fa      	bls.n	8006892 <_free_r+0x46>
 800689c:	6811      	ldr	r1, [r2, #0]
 800689e:	1855      	adds	r5, r2, r1
 80068a0:	42a5      	cmp	r5, r4
 80068a2:	d10b      	bne.n	80068bc <_free_r+0x70>
 80068a4:	6824      	ldr	r4, [r4, #0]
 80068a6:	4421      	add	r1, r4
 80068a8:	1854      	adds	r4, r2, r1
 80068aa:	42a3      	cmp	r3, r4
 80068ac:	6011      	str	r1, [r2, #0]
 80068ae:	d1e0      	bne.n	8006872 <_free_r+0x26>
 80068b0:	681c      	ldr	r4, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	6053      	str	r3, [r2, #4]
 80068b6:	4421      	add	r1, r4
 80068b8:	6011      	str	r1, [r2, #0]
 80068ba:	e7da      	b.n	8006872 <_free_r+0x26>
 80068bc:	d902      	bls.n	80068c4 <_free_r+0x78>
 80068be:	230c      	movs	r3, #12
 80068c0:	6003      	str	r3, [r0, #0]
 80068c2:	e7d6      	b.n	8006872 <_free_r+0x26>
 80068c4:	6825      	ldr	r5, [r4, #0]
 80068c6:	1961      	adds	r1, r4, r5
 80068c8:	428b      	cmp	r3, r1
 80068ca:	bf04      	itt	eq
 80068cc:	6819      	ldreq	r1, [r3, #0]
 80068ce:	685b      	ldreq	r3, [r3, #4]
 80068d0:	6063      	str	r3, [r4, #4]
 80068d2:	bf04      	itt	eq
 80068d4:	1949      	addeq	r1, r1, r5
 80068d6:	6021      	streq	r1, [r4, #0]
 80068d8:	6054      	str	r4, [r2, #4]
 80068da:	e7ca      	b.n	8006872 <_free_r+0x26>
 80068dc:	b003      	add	sp, #12
 80068de:	bd30      	pop	{r4, r5, pc}
 80068e0:	200069c8 	.word	0x200069c8

080068e4 <sbrk_aligned>:
 80068e4:	b570      	push	{r4, r5, r6, lr}
 80068e6:	4e0e      	ldr	r6, [pc, #56]	; (8006920 <sbrk_aligned+0x3c>)
 80068e8:	460c      	mov	r4, r1
 80068ea:	6831      	ldr	r1, [r6, #0]
 80068ec:	4605      	mov	r5, r0
 80068ee:	b911      	cbnz	r1, 80068f6 <sbrk_aligned+0x12>
 80068f0:	f000 f88c 	bl	8006a0c <_sbrk_r>
 80068f4:	6030      	str	r0, [r6, #0]
 80068f6:	4621      	mov	r1, r4
 80068f8:	4628      	mov	r0, r5
 80068fa:	f000 f887 	bl	8006a0c <_sbrk_r>
 80068fe:	1c43      	adds	r3, r0, #1
 8006900:	d00a      	beq.n	8006918 <sbrk_aligned+0x34>
 8006902:	1cc4      	adds	r4, r0, #3
 8006904:	f024 0403 	bic.w	r4, r4, #3
 8006908:	42a0      	cmp	r0, r4
 800690a:	d007      	beq.n	800691c <sbrk_aligned+0x38>
 800690c:	1a21      	subs	r1, r4, r0
 800690e:	4628      	mov	r0, r5
 8006910:	f000 f87c 	bl	8006a0c <_sbrk_r>
 8006914:	3001      	adds	r0, #1
 8006916:	d101      	bne.n	800691c <sbrk_aligned+0x38>
 8006918:	f04f 34ff 	mov.w	r4, #4294967295
 800691c:	4620      	mov	r0, r4
 800691e:	bd70      	pop	{r4, r5, r6, pc}
 8006920:	200069cc 	.word	0x200069cc

08006924 <_malloc_r>:
 8006924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006928:	1ccd      	adds	r5, r1, #3
 800692a:	f025 0503 	bic.w	r5, r5, #3
 800692e:	3508      	adds	r5, #8
 8006930:	2d0c      	cmp	r5, #12
 8006932:	bf38      	it	cc
 8006934:	250c      	movcc	r5, #12
 8006936:	2d00      	cmp	r5, #0
 8006938:	4607      	mov	r7, r0
 800693a:	db01      	blt.n	8006940 <_malloc_r+0x1c>
 800693c:	42a9      	cmp	r1, r5
 800693e:	d905      	bls.n	800694c <_malloc_r+0x28>
 8006940:	230c      	movs	r3, #12
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	2600      	movs	r6, #0
 8006946:	4630      	mov	r0, r6
 8006948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800694c:	4e2e      	ldr	r6, [pc, #184]	; (8006a08 <_malloc_r+0xe4>)
 800694e:	f000 f907 	bl	8006b60 <__malloc_lock>
 8006952:	6833      	ldr	r3, [r6, #0]
 8006954:	461c      	mov	r4, r3
 8006956:	bb34      	cbnz	r4, 80069a6 <_malloc_r+0x82>
 8006958:	4629      	mov	r1, r5
 800695a:	4638      	mov	r0, r7
 800695c:	f7ff ffc2 	bl	80068e4 <sbrk_aligned>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	4604      	mov	r4, r0
 8006964:	d14d      	bne.n	8006a02 <_malloc_r+0xde>
 8006966:	6834      	ldr	r4, [r6, #0]
 8006968:	4626      	mov	r6, r4
 800696a:	2e00      	cmp	r6, #0
 800696c:	d140      	bne.n	80069f0 <_malloc_r+0xcc>
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	4631      	mov	r1, r6
 8006972:	4638      	mov	r0, r7
 8006974:	eb04 0803 	add.w	r8, r4, r3
 8006978:	f000 f848 	bl	8006a0c <_sbrk_r>
 800697c:	4580      	cmp	r8, r0
 800697e:	d13a      	bne.n	80069f6 <_malloc_r+0xd2>
 8006980:	6821      	ldr	r1, [r4, #0]
 8006982:	3503      	adds	r5, #3
 8006984:	1a6d      	subs	r5, r5, r1
 8006986:	f025 0503 	bic.w	r5, r5, #3
 800698a:	3508      	adds	r5, #8
 800698c:	2d0c      	cmp	r5, #12
 800698e:	bf38      	it	cc
 8006990:	250c      	movcc	r5, #12
 8006992:	4629      	mov	r1, r5
 8006994:	4638      	mov	r0, r7
 8006996:	f7ff ffa5 	bl	80068e4 <sbrk_aligned>
 800699a:	3001      	adds	r0, #1
 800699c:	d02b      	beq.n	80069f6 <_malloc_r+0xd2>
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	442b      	add	r3, r5
 80069a2:	6023      	str	r3, [r4, #0]
 80069a4:	e00e      	b.n	80069c4 <_malloc_r+0xa0>
 80069a6:	6822      	ldr	r2, [r4, #0]
 80069a8:	1b52      	subs	r2, r2, r5
 80069aa:	d41e      	bmi.n	80069ea <_malloc_r+0xc6>
 80069ac:	2a0b      	cmp	r2, #11
 80069ae:	d916      	bls.n	80069de <_malloc_r+0xba>
 80069b0:	1961      	adds	r1, r4, r5
 80069b2:	42a3      	cmp	r3, r4
 80069b4:	6025      	str	r5, [r4, #0]
 80069b6:	bf18      	it	ne
 80069b8:	6059      	strne	r1, [r3, #4]
 80069ba:	6863      	ldr	r3, [r4, #4]
 80069bc:	bf08      	it	eq
 80069be:	6031      	streq	r1, [r6, #0]
 80069c0:	5162      	str	r2, [r4, r5]
 80069c2:	604b      	str	r3, [r1, #4]
 80069c4:	4638      	mov	r0, r7
 80069c6:	f104 060b 	add.w	r6, r4, #11
 80069ca:	f000 f8cf 	bl	8006b6c <__malloc_unlock>
 80069ce:	f026 0607 	bic.w	r6, r6, #7
 80069d2:	1d23      	adds	r3, r4, #4
 80069d4:	1af2      	subs	r2, r6, r3
 80069d6:	d0b6      	beq.n	8006946 <_malloc_r+0x22>
 80069d8:	1b9b      	subs	r3, r3, r6
 80069da:	50a3      	str	r3, [r4, r2]
 80069dc:	e7b3      	b.n	8006946 <_malloc_r+0x22>
 80069de:	6862      	ldr	r2, [r4, #4]
 80069e0:	42a3      	cmp	r3, r4
 80069e2:	bf0c      	ite	eq
 80069e4:	6032      	streq	r2, [r6, #0]
 80069e6:	605a      	strne	r2, [r3, #4]
 80069e8:	e7ec      	b.n	80069c4 <_malloc_r+0xa0>
 80069ea:	4623      	mov	r3, r4
 80069ec:	6864      	ldr	r4, [r4, #4]
 80069ee:	e7b2      	b.n	8006956 <_malloc_r+0x32>
 80069f0:	4634      	mov	r4, r6
 80069f2:	6876      	ldr	r6, [r6, #4]
 80069f4:	e7b9      	b.n	800696a <_malloc_r+0x46>
 80069f6:	230c      	movs	r3, #12
 80069f8:	603b      	str	r3, [r7, #0]
 80069fa:	4638      	mov	r0, r7
 80069fc:	f000 f8b6 	bl	8006b6c <__malloc_unlock>
 8006a00:	e7a1      	b.n	8006946 <_malloc_r+0x22>
 8006a02:	6025      	str	r5, [r4, #0]
 8006a04:	e7de      	b.n	80069c4 <_malloc_r+0xa0>
 8006a06:	bf00      	nop
 8006a08:	200069c8 	.word	0x200069c8

08006a0c <_sbrk_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4d06      	ldr	r5, [pc, #24]	; (8006a28 <_sbrk_r+0x1c>)
 8006a10:	2300      	movs	r3, #0
 8006a12:	4604      	mov	r4, r0
 8006a14:	4608      	mov	r0, r1
 8006a16:	602b      	str	r3, [r5, #0]
 8006a18:	f7fa f876 	bl	8000b08 <_sbrk>
 8006a1c:	1c43      	adds	r3, r0, #1
 8006a1e:	d102      	bne.n	8006a26 <_sbrk_r+0x1a>
 8006a20:	682b      	ldr	r3, [r5, #0]
 8006a22:	b103      	cbz	r3, 8006a26 <_sbrk_r+0x1a>
 8006a24:	6023      	str	r3, [r4, #0]
 8006a26:	bd38      	pop	{r3, r4, r5, pc}
 8006a28:	200069d0 	.word	0x200069d0

08006a2c <__sread>:
 8006a2c:	b510      	push	{r4, lr}
 8006a2e:	460c      	mov	r4, r1
 8006a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a34:	f000 f8a0 	bl	8006b78 <_read_r>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	bfab      	itete	ge
 8006a3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a3e:	89a3      	ldrhlt	r3, [r4, #12]
 8006a40:	181b      	addge	r3, r3, r0
 8006a42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a46:	bfac      	ite	ge
 8006a48:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a4a:	81a3      	strhlt	r3, [r4, #12]
 8006a4c:	bd10      	pop	{r4, pc}

08006a4e <__swrite>:
 8006a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a52:	461f      	mov	r7, r3
 8006a54:	898b      	ldrh	r3, [r1, #12]
 8006a56:	05db      	lsls	r3, r3, #23
 8006a58:	4605      	mov	r5, r0
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	4616      	mov	r6, r2
 8006a5e:	d505      	bpl.n	8006a6c <__swrite+0x1e>
 8006a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a64:	2302      	movs	r3, #2
 8006a66:	2200      	movs	r2, #0
 8006a68:	f000 f868 	bl	8006b3c <_lseek_r>
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a76:	81a3      	strh	r3, [r4, #12]
 8006a78:	4632      	mov	r2, r6
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a82:	f000 b817 	b.w	8006ab4 <_write_r>

08006a86 <__sseek>:
 8006a86:	b510      	push	{r4, lr}
 8006a88:	460c      	mov	r4, r1
 8006a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a8e:	f000 f855 	bl	8006b3c <_lseek_r>
 8006a92:	1c43      	adds	r3, r0, #1
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	bf15      	itete	ne
 8006a98:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006aa2:	81a3      	strheq	r3, [r4, #12]
 8006aa4:	bf18      	it	ne
 8006aa6:	81a3      	strhne	r3, [r4, #12]
 8006aa8:	bd10      	pop	{r4, pc}

08006aaa <__sclose>:
 8006aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aae:	f000 b813 	b.w	8006ad8 <_close_r>
	...

08006ab4 <_write_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4d07      	ldr	r5, [pc, #28]	; (8006ad4 <_write_r+0x20>)
 8006ab8:	4604      	mov	r4, r0
 8006aba:	4608      	mov	r0, r1
 8006abc:	4611      	mov	r1, r2
 8006abe:	2200      	movs	r2, #0
 8006ac0:	602a      	str	r2, [r5, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f7f9 fd47 	bl	8000556 <_write>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d102      	bne.n	8006ad2 <_write_r+0x1e>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	b103      	cbz	r3, 8006ad2 <_write_r+0x1e>
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	200069d0 	.word	0x200069d0

08006ad8 <_close_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	4d06      	ldr	r5, [pc, #24]	; (8006af4 <_close_r+0x1c>)
 8006adc:	2300      	movs	r3, #0
 8006ade:	4604      	mov	r4, r0
 8006ae0:	4608      	mov	r0, r1
 8006ae2:	602b      	str	r3, [r5, #0]
 8006ae4:	f7f9 ffdb 	bl	8000a9e <_close>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	d102      	bne.n	8006af2 <_close_r+0x1a>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	b103      	cbz	r3, 8006af2 <_close_r+0x1a>
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	bd38      	pop	{r3, r4, r5, pc}
 8006af4:	200069d0 	.word	0x200069d0

08006af8 <_fstat_r>:
 8006af8:	b538      	push	{r3, r4, r5, lr}
 8006afa:	4d07      	ldr	r5, [pc, #28]	; (8006b18 <_fstat_r+0x20>)
 8006afc:	2300      	movs	r3, #0
 8006afe:	4604      	mov	r4, r0
 8006b00:	4608      	mov	r0, r1
 8006b02:	4611      	mov	r1, r2
 8006b04:	602b      	str	r3, [r5, #0]
 8006b06:	f7f9 ffd6 	bl	8000ab6 <_fstat>
 8006b0a:	1c43      	adds	r3, r0, #1
 8006b0c:	d102      	bne.n	8006b14 <_fstat_r+0x1c>
 8006b0e:	682b      	ldr	r3, [r5, #0]
 8006b10:	b103      	cbz	r3, 8006b14 <_fstat_r+0x1c>
 8006b12:	6023      	str	r3, [r4, #0]
 8006b14:	bd38      	pop	{r3, r4, r5, pc}
 8006b16:	bf00      	nop
 8006b18:	200069d0 	.word	0x200069d0

08006b1c <_isatty_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	4d06      	ldr	r5, [pc, #24]	; (8006b38 <_isatty_r+0x1c>)
 8006b20:	2300      	movs	r3, #0
 8006b22:	4604      	mov	r4, r0
 8006b24:	4608      	mov	r0, r1
 8006b26:	602b      	str	r3, [r5, #0]
 8006b28:	f7f9 ffd5 	bl	8000ad6 <_isatty>
 8006b2c:	1c43      	adds	r3, r0, #1
 8006b2e:	d102      	bne.n	8006b36 <_isatty_r+0x1a>
 8006b30:	682b      	ldr	r3, [r5, #0]
 8006b32:	b103      	cbz	r3, 8006b36 <_isatty_r+0x1a>
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	bd38      	pop	{r3, r4, r5, pc}
 8006b38:	200069d0 	.word	0x200069d0

08006b3c <_lseek_r>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	4d07      	ldr	r5, [pc, #28]	; (8006b5c <_lseek_r+0x20>)
 8006b40:	4604      	mov	r4, r0
 8006b42:	4608      	mov	r0, r1
 8006b44:	4611      	mov	r1, r2
 8006b46:	2200      	movs	r2, #0
 8006b48:	602a      	str	r2, [r5, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f7f9 ffce 	bl	8000aec <_lseek>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d102      	bne.n	8006b5a <_lseek_r+0x1e>
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	b103      	cbz	r3, 8006b5a <_lseek_r+0x1e>
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	200069d0 	.word	0x200069d0

08006b60 <__malloc_lock>:
 8006b60:	4801      	ldr	r0, [pc, #4]	; (8006b68 <__malloc_lock+0x8>)
 8006b62:	f7ff be0b 	b.w	800677c <__retarget_lock_acquire_recursive>
 8006b66:	bf00      	nop
 8006b68:	200069c3 	.word	0x200069c3

08006b6c <__malloc_unlock>:
 8006b6c:	4801      	ldr	r0, [pc, #4]	; (8006b74 <__malloc_unlock+0x8>)
 8006b6e:	f7ff be06 	b.w	800677e <__retarget_lock_release_recursive>
 8006b72:	bf00      	nop
 8006b74:	200069c3 	.word	0x200069c3

08006b78 <_read_r>:
 8006b78:	b538      	push	{r3, r4, r5, lr}
 8006b7a:	4d07      	ldr	r5, [pc, #28]	; (8006b98 <_read_r+0x20>)
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	4608      	mov	r0, r1
 8006b80:	4611      	mov	r1, r2
 8006b82:	2200      	movs	r2, #0
 8006b84:	602a      	str	r2, [r5, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	f7f9 ff6c 	bl	8000a64 <_read>
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	d102      	bne.n	8006b96 <_read_r+0x1e>
 8006b90:	682b      	ldr	r3, [r5, #0]
 8006b92:	b103      	cbz	r3, 8006b96 <_read_r+0x1e>
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
 8006b98:	200069d0 	.word	0x200069d0

08006b9c <_init>:
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	bf00      	nop
 8006ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba2:	bc08      	pop	{r3}
 8006ba4:	469e      	mov	lr, r3
 8006ba6:	4770      	bx	lr

08006ba8 <_fini>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	bf00      	nop
 8006bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bae:	bc08      	pop	{r3}
 8006bb0:	469e      	mov	lr, r3
 8006bb2:	4770      	bx	lr
