
005_RTOS_GOREVLERARASIBILDIRIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08009580  08009580  00019580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096fc  080096fc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080096fc  080096fc  000196fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009704  08009704  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009704  08009704  00019704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009708  08009708  00019708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800970c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00006a98  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006b0c  20006b0c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021a1f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a46  00000000  00000000  00041ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bd0  00000000  00000000  00046510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a10  00000000  00000000  000480e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026855  00000000  00000000  00049af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000230b7  00000000  00000000  00070345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc814  00000000  00000000  000933fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016fc10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ca0  00000000  00000000  0016fc60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009568 	.word	0x08009568

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009568 	.word	0x08009568

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000090 	.word	0x20000090
 8000504:	200000e4 	.word	0x200000e4

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	DWT->CTRL |= ( 1 << 0 );
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <main+0x70>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a19      	ldr	r2, [pc, #100]	; (8000578 <main+0x70>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fd67 	bl	8000fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f83b 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f961 	bl	80007e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000526:	f000 f8a1 	bl	800066c <MX_I2C1_Init>
  MX_I2S3_Init();
 800052a:	f000 f8cd 	bl	80006c8 <MX_I2S3_Init>
  MX_SPI1_Init();
 800052e:	f000 f8fb 	bl	8000728 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000532:	f000 f92f 	bl	8000794 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	SEGGER_SYSVIEW_Conf();
 8000536:	f006 fd57 	bl	8006fe8 <SEGGER_SYSVIEW_Conf>
	vSetVarulMaxPRIGROUPValuE();
 800053a:	f006 fb05 	bl	8006b48 <vSetVarulMaxPRIGROUPValuE>
	SEGGER_SYSVIEW_Start();
 800053e:	f007 fc4d 	bl	8007ddc <SEGGER_SYSVIEW_Start>



	printf("Starting RTOS Project. \n");
 8000542:	480e      	ldr	r0, [pc, #56]	; (800057c <main+0x74>)
 8000544:	f008 fc60 	bl	8008e08 <puts>

	xTaskCreate(ledFlashTask			,
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <main+0x78>)
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	2304      	movs	r3, #4
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2300      	movs	r3, #0
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	490b      	ldr	r1, [pc, #44]	; (8000584 <main+0x7c>)
 8000556:	480c      	ldr	r0, [pc, #48]	; (8000588 <main+0x80>)
 8000558:	f005 f87e 	bl	8005658 <xTaskCreate>
				configMINIMAL_STACK_SIZE,
				NULL					,
				4						,
				&myTaskHandle1			);

	xTaskCreate(readButtonStateTask		,
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <main+0x84>)
 800055e:	9301      	str	r3, [sp, #4]
 8000560:	2304      	movs	r3, #4
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	2300      	movs	r3, #0
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	4909      	ldr	r1, [pc, #36]	; (8000590 <main+0x88>)
 800056a:	480a      	ldr	r0, [pc, #40]	; (8000594 <main+0x8c>)
 800056c:	f005 f874 	bl	8005658 <xTaskCreate>
				configMINIMAL_STACK_SIZE,
				NULL					,
				4						,
				&myTaskHandle2			);

	vTaskStartScheduler();
 8000570:	f005 f9fe 	bl	8005970 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



	while (1)
 8000574:	e7fe      	b.n	8000574 <main+0x6c>
 8000576:	bf00      	nop
 8000578:	e0001000 	.word	0xe0001000
 800057c:	08009580 	.word	0x08009580
 8000580:	2000041c 	.word	0x2000041c
 8000584:	08009598 	.word	0x08009598
 8000588:	08000a71 	.word	0x08000a71
 800058c:	20000420 	.word	0x20000420
 8000590:	080095a0 	.word	0x080095a0
 8000594:	08000a29 	.word	0x08000a29

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f008 fad8 	bl	8008b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a27      	ldr	r2, [pc, #156]	; (8000664 <SystemClock_Config+0xcc>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b25      	ldr	r3, [pc, #148]	; (8000664 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a21      	ldr	r2, [pc, #132]	; (8000668 <SystemClock_Config+0xd0>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000608:	2308      	movs	r3, #8
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800060c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000610:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000616:	2307      	movs	r3, #7
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	4618      	mov	r0, r3
 8000620:	f002 ff32 	bl	8003488 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800062a:	f000 fa47 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000644:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2105      	movs	r1, #5
 800064c:	4618      	mov	r0, r3
 800064e:	f003 f993 	bl	8003978 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000658:	f000 fa30 	bl	8000abc <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3750      	adds	r7, #80	; 0x50
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2C1_Init+0x50>)
 8000672:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <MX_I2C1_Init+0x54>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_I2C1_Init+0x50>)
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x58>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_I2C1_Init+0x50>)
 800068a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800068e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_I2C1_Init+0x50>)
 80006aa:	f002 f909 	bl	80028c0 <HAL_I2C_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 fa02 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200002e4 	.word	0x200002e4
 80006c0:	40005400 	.word	0x40005400
 80006c4:	000186a0 	.word	0x000186a0

080006c8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_I2S3_Init+0x54>)
 80006ce:	4a14      	ldr	r2, [pc, #80]	; (8000720 <MX_I2S3_Init+0x58>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2S3_Init+0x54>)
 80006d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_I2S3_Init+0x54>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_I2S3_Init+0x54>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <MX_I2S3_Init+0x54>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_I2S3_Init+0x54>)
 80006f0:	4a0c      	ldr	r2, [pc, #48]	; (8000724 <MX_I2S3_Init+0x5c>)
 80006f2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_I2S3_Init+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_I2S3_Init+0x54>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_I2S3_Init+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_I2S3_Init+0x54>)
 8000708:	f002 fa1e 	bl	8002b48 <HAL_I2S_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000712:	f000 f9d3 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000338 	.word	0x20000338
 8000720:	40003c00 	.word	0x40003c00
 8000724:	00017700 	.word	0x00017700

08000728 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_SPI1_Init+0x64>)
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <MX_SPI1_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI1_Init+0x64>)
 8000734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI1_Init+0x64>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI1_Init+0x64>)
 8000774:	220a      	movs	r2, #10
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_SPI1_Init+0x64>)
 800077a:	f003 fc5d 	bl	8004038 <HAL_SPI_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 f99a 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000380 	.word	0x20000380
 8000790:	40013000 	.word	0x40013000

08000794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_USART2_UART_Init+0x50>)
 800079c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007cc:	f003 fcbd 	bl	800414a <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d6:	f000 f971 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200003d8 	.word	0x200003d8
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
 8000802:	4b72      	ldr	r3, [pc, #456]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a71      	ldr	r2, [pc, #452]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b6f      	ldr	r3, [pc, #444]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	61bb      	str	r3, [r7, #24]
 8000818:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	4b6b      	ldr	r3, [pc, #428]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a6a      	ldr	r2, [pc, #424]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b68      	ldr	r3, [pc, #416]	; (80009cc <MX_GPIO_Init+0x1e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b64      	ldr	r3, [pc, #400]	; (80009cc <MX_GPIO_Init+0x1e4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a63      	ldr	r2, [pc, #396]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b61      	ldr	r3, [pc, #388]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b5d      	ldr	r3, [pc, #372]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a5c      	ldr	r2, [pc, #368]	; (80009cc <MX_GPIO_Init+0x1e4>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b5a      	ldr	r3, [pc, #360]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b56      	ldr	r3, [pc, #344]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a55      	ldr	r2, [pc, #340]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b53      	ldr	r3, [pc, #332]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b4f      	ldr	r3, [pc, #316]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a4e      	ldr	r2, [pc, #312]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b4c      	ldr	r3, [pc, #304]	; (80009cc <MX_GPIO_Init+0x1e4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2108      	movs	r1, #8
 80008aa:	4849      	ldr	r0, [pc, #292]	; (80009d0 <MX_GPIO_Init+0x1e8>)
 80008ac:	f000 feaa 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2101      	movs	r1, #1
 80008b4:	4847      	ldr	r0, [pc, #284]	; (80009d4 <MX_GPIO_Init+0x1ec>)
 80008b6:	f000 fea5 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ba:	2200      	movs	r2, #0
 80008bc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008c0:	4845      	ldr	r0, [pc, #276]	; (80009d8 <MX_GPIO_Init+0x1f0>)
 80008c2:	f000 fe9f 	bl	8001604 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008c6:	2308      	movs	r3, #8
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	483c      	ldr	r0, [pc, #240]	; (80009d0 <MX_GPIO_Init+0x1e8>)
 80008de:	f000 fcdd 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4836      	ldr	r0, [pc, #216]	; (80009d4 <MX_GPIO_Init+0x1ec>)
 80008fa:	f000 fccf 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008fe:	2308      	movs	r3, #8
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090e:	2305      	movs	r3, #5
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	482e      	ldr	r0, [pc, #184]	; (80009d4 <MX_GPIO_Init+0x1ec>)
 800091a:	f000 fcbf 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091e:	2301      	movs	r3, #1
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000922:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	482a      	ldr	r0, [pc, #168]	; (80009dc <MX_GPIO_Init+0x1f4>)
 8000934:	f000 fcb2 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000938:	2304      	movs	r3, #4
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4825      	ldr	r0, [pc, #148]	; (80009e0 <MX_GPIO_Init+0x1f8>)
 800094c:	f000 fca6 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000962:	2305      	movs	r3, #5
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	481c      	ldr	r0, [pc, #112]	; (80009e0 <MX_GPIO_Init+0x1f8>)
 800096e:	f000 fc95 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000972:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000976:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4813      	ldr	r0, [pc, #76]	; (80009d8 <MX_GPIO_Init+0x1f0>)
 800098c:	f000 fc86 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000990:	2320      	movs	r3, #32
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <MX_GPIO_Init+0x1f0>)
 80009a4:	f000 fc7a 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_GPIO_Init+0x1e8>)
 80009be:	f000 fc6d 	bl	800129c <HAL_GPIO_Init>

}
 80009c2:	bf00      	nop
 80009c4:	3730      	adds	r7, #48	; 0x30
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020c00 	.word	0x40020c00
 80009dc:	40020000 	.word	0x40020000
 80009e0:	40020400 	.word	0x40020400

080009e4 <delay_FreeRTOS>:
/* USER CODE BEGIN 4 */



	void delay_FreeRTOS(uint32_t delayMS)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	uint32_t currentTick = xTaskGetTickCount();
 80009ec:	f005 f8de 	bl	8005bac <xTaskGetTickCount>
 80009f0:	60f8      	str	r0, [r7, #12]
	uint32_t delayTick 	 = pdMS_TO_TICKS(delayMS);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009f8:	fb02 f303 	mul.w	r3, r2, r3
 80009fc:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <delay_FreeRTOS+0x40>)
 80009fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000a02:	099b      	lsrs	r3, r3, #6
 8000a04:	60bb      	str	r3, [r7, #8]

	while( xTaskGetTickCount() < ( currentTick + delayTick ) );
 8000a06:	bf00      	nop
 8000a08:	f005 f8d0 	bl	8005bac <xTaskGetTickCount>
 8000a0c:	4601      	mov	r1, r0
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	4413      	add	r3, r2
 8000a14:	4299      	cmp	r1, r3
 8000a16:	d3f7      	bcc.n	8000a08 <delay_FreeRTOS+0x24>
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	10624dd3 	.word	0x10624dd3

08000a28 <readButtonStateTask>:


void readButtonStateTask(void *params) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <readButtonStateTask+0x3c>)
 8000a36:	f000 fdfe 	bl	8001636 <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 8000a3a:	2064      	movs	r0, #100	; 0x64
 8000a3c:	f004 ff60 	bl	8005900 <vTaskDelay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000a40:	2101      	movs	r1, #1
 8000a42:	4809      	ldr	r0, [pc, #36]	; (8000a68 <readButtonStateTask+0x40>)
 8000a44:	f000 fdc6 	bl	80015d4 <HAL_GPIO_ReadPin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d0f0      	beq.n	8000a30 <readButtonStateTask+0x8>
		{
			delay_FreeRTOS(250);
 8000a4e:	20fa      	movs	r0, #250	; 0xfa
 8000a50:	f7ff ffc8 	bl	80009e4 <delay_FreeRTOS>
			// eInc ile hedef gorevin degere 1 arttirilacak
			xTaskNotify(myTaskHandle1 , 0 , eIncrement);
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <readButtonStateTask+0x44>)
 8000a56:	6818      	ldr	r0, [r3, #0]
 8000a58:	2300      	movs	r3, #0
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f005 fcdd 	bl	800641c <xTaskGenericNotify>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a62:	e7e5      	b.n	8000a30 <readButtonStateTask+0x8>
 8000a64:	40020c00 	.word	0x40020c00
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	2000041c 	.word	0x2000041c

08000a70 <ledFlashTask>:
		}

	}
}

void ledFlashTask(void *params) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

	uint32_t pulNotificationValue = 0 ;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]

	while (1)
	{
		if ( xTaskNotifyWait(0, 0, &pulNotificationValue, portMAX_DELAY) == pdTRUE )
 8000a7c:	f107 020c 	add.w	r2, r7, #12
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
 8000a84:	2100      	movs	r1, #0
 8000a86:	2000      	movs	r0, #0
 8000a88:	f005 fc64 	bl	8006354 <xTaskNotifyWait>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d10e      	bne.n	8000ab0 <ledFlashTask+0x40>
		{

			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000a92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a96:	4808      	ldr	r0, [pc, #32]	; (8000ab8 <ledFlashTask+0x48>)
 8000a98:	f000 fdcd 	bl	8001636 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <ledFlashTask+0x48>)
 8000aa2:	f000 fdc8 	bl	8001636 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aaa:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <ledFlashTask+0x48>)
 8000aac:	f000 fdc3 	bl	8001636 <HAL_GPIO_TogglePin>
		}
		vTaskDelay(100);
 8000ab0:	2064      	movs	r0, #100	; 0x64
 8000ab2:	f004 ff25 	bl	8005900 <vTaskDelay>
		if ( xTaskNotifyWait(0, 0, &pulNotificationValue, portMAX_DELAY) == pdTRUE )
 8000ab6:	e7e1      	b.n	8000a7c <ledFlashTask+0xc>
 8000ab8:	40020c00 	.word	0x40020c00

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_MspInit+0x54>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a11      	ldr	r2, [pc, #68]	; (8000b1c <HAL_MspInit+0x54>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_MspInit+0x54>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_MspInit+0x54>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_MspInit+0x54>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_MspInit+0x54>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	210f      	movs	r1, #15
 8000b0a:	f06f 0001 	mvn.w	r0, #1
 8000b0e:	f000 fb9c 	bl	800124a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <HAL_I2C_MspInit+0x84>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d12c      	bne.n	8000b9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a17      	ldr	r2, [pc, #92]	; (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b5e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b64:	2312      	movs	r3, #18
 8000b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b70:	2304      	movs	r3, #4
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480c      	ldr	r0, [pc, #48]	; (8000bac <HAL_I2C_MspInit+0x8c>)
 8000b7c:	f000 fb8e 	bl	800129c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	; 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020400 	.word	0x40020400

08000bb0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08e      	sub	sp, #56	; 0x38
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <HAL_I2S_MspInit+0xf0>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d15a      	bne.n	8000c96 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000be0:	2301      	movs	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000be4:	23c0      	movs	r3, #192	; 0xc0
 8000be6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 f8e1 	bl	8003db8 <HAL_RCCEx_PeriphCLKConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000bfc:	f7ff ff5e 	bl	8000abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	4b27      	ldr	r3, [pc, #156]	; (8000ca4 <HAL_I2S_MspInit+0xf4>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	4a26      	ldr	r2, [pc, #152]	; (8000ca4 <HAL_I2S_MspInit+0xf4>)
 8000c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <HAL_I2S_MspInit+0xf4>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <HAL_I2S_MspInit+0xf4>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	4a1f      	ldr	r2, [pc, #124]	; (8000ca4 <HAL_I2S_MspInit+0xf4>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <HAL_I2S_MspInit+0xf4>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <HAL_I2S_MspInit+0xf4>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <HAL_I2S_MspInit+0xf4>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	6313      	str	r3, [r2, #48]	; 0x30
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <HAL_I2S_MspInit+0xf4>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c54:	2310      	movs	r3, #16
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c64:	2306      	movs	r3, #6
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480e      	ldr	r0, [pc, #56]	; (8000ca8 <HAL_I2S_MspInit+0xf8>)
 8000c70:	f000 fb14 	bl	800129c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c74:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c86:	2306      	movs	r3, #6
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4806      	ldr	r0, [pc, #24]	; (8000cac <HAL_I2S_MspInit+0xfc>)
 8000c92:	f000 fb03 	bl	800129c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	3738      	adds	r7, #56	; 0x38
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40003c00 	.word	0x40003c00
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	40020800 	.word	0x40020800

08000cb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <HAL_SPI_MspInit+0x84>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d12b      	bne.n	8000d2a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <HAL_SPI_MspInit+0x88>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <HAL_SPI_MspInit+0x88>)
 8000cdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <HAL_SPI_MspInit+0x88>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <HAL_SPI_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a10      	ldr	r2, [pc, #64]	; (8000d38 <HAL_SPI_MspInit+0x88>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_SPI_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d0a:	23e0      	movs	r3, #224	; 0xe0
 8000d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <HAL_SPI_MspInit+0x8c>)
 8000d26:	f000 fab9 	bl	800129c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	; 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40013000 	.word	0x40013000
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020000 	.word	0x40020000

08000d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <HAL_UART_MspInit+0x84>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d12b      	bne.n	8000dba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	6413      	str	r3, [r2, #64]	; 0x40
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d9a:	230c      	movs	r3, #12
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000daa:	2307      	movs	r3, #7
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <HAL_UART_MspInit+0x8c>)
 8000db6:	f000 fa71 	bl	800129c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	; 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40004400 	.word	0x40004400
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <MemManage_Handler+0x4>

08000de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler+0x4>

08000dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e00:	f000 f946 	bl	8001090 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e04:	f005 f9fe 	bl	8006204 <xTaskGetSchedulerState>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d001      	beq.n	8000e12 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e0e:	f005 fe03 	bl	8006a18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <OTG_FS_IRQHandler+0x10>)
 8000e1e:	f000 fc24 	bl	800166a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200067f8 	.word	0x200067f8

08000e2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	e00a      	b.n	8000e54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e3e:	f3af 8000 	nop.w
 8000e42:	4601      	mov	r1, r0
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	60ba      	str	r2, [r7, #8]
 8000e4a:	b2ca      	uxtb	r2, r1
 8000e4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3301      	adds	r3, #1
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	dbf0      	blt.n	8000e3e <_read+0x12>
	}

return len;
 8000e5c:	687b      	ldr	r3, [r7, #4]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	e009      	b.n	8000e8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	60ba      	str	r2, [r7, #8]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	dbf1      	blt.n	8000e78 <_write+0x12>
	}
	return len;
 8000e94:	687b      	ldr	r3, [r7, #4]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <_close>:

int _close(int file)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ec6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <_isatty>:

int _isatty(int file)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f007 fdc8 	bl	8008acc <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <_sbrk+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20020000 	.word	0x20020000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	20000424 	.word	0x20000424
 8000f70:	20006b10 	.word	0x20006b10

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <SystemInit+0x20>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <SystemInit+0x20>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f9e:	490e      	ldr	r1, [pc, #56]	; (8000fd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fa0:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fb4:	4c0b      	ldr	r4, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fc2:	f7ff ffd7 	bl	8000f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f007 fd87 	bl	8008ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fca:	f7ff fa9d 	bl	8000508 <main>
  bx  lr    
 8000fce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fdc:	0800970c 	.word	0x0800970c
  ldr r2, =_sbss
 8000fe0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fe4:	20006b0c 	.word	0x20006b0c

08000fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC_IRQHandler>
	...

08000fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <HAL_Init+0x40>)
 8000ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0a      	ldr	r2, [pc, #40]	; (800102c <HAL_Init+0x40>)
 8001002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001006:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <HAL_Init+0x40>)
 800100e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001014:	2003      	movs	r0, #3
 8001016:	f000 f90d 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101a:	200f      	movs	r0, #15
 800101c:	f000 f808 	bl	8001030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001020:	f7ff fd52 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023c00 	.word	0x40023c00

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x54>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_InitTick+0x58>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001046:	fbb3 f3f1 	udiv	r3, r3, r1
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f917 	bl	8001282 <HAL_SYSTICK_Config>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e00e      	b.n	800107c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0f      	cmp	r3, #15
 8001062:	d80a      	bhi.n	800107a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001064:	2200      	movs	r2, #0
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f000 f8ed 	bl	800124a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <HAL_InitTick+0x5c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e000      	b.n	800107c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000000 	.word	0x20000000
 8001088:	20000008 	.word	0x20000008
 800108c:	20000004 	.word	0x20000004

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x20>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x24>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_IncTick+0x24>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20000428 	.word	0x20000428

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000428 	.word	0x20000428

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
         );
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff47 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125c:	f7ff ff5c 	bl	8001118 <__NVIC_GetPriorityGrouping>
 8001260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f7ff ff8e 	bl	8001188 <NVIC_EncodePriority>
 800126c:	4602      	mov	r2, r0
 800126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff5d 	bl	8001134 <__NVIC_SetPriority>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffb0 	bl	80011f0 <SysTick_Config>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	e16b      	b.n	8001590 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012b8:	2201      	movs	r2, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	f040 815a 	bne.w	800158a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d005      	beq.n	80012ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d130      	bne.n	8001350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	2203      	movs	r2, #3
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001324:	2201      	movs	r2, #1
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	091b      	lsrs	r3, r3, #4
 800133a:	f003 0201 	and.w	r2, r3, #1
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	2b03      	cmp	r3, #3
 800135a:	d017      	beq.n	800138c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2203      	movs	r2, #3
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d123      	bne.n	80013e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	08da      	lsrs	r2, r3, #3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3208      	adds	r2, #8
 80013a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	220f      	movs	r2, #15
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	691a      	ldr	r2, [r3, #16]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	08da      	lsrs	r2, r3, #3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3208      	adds	r2, #8
 80013da:	69b9      	ldr	r1, [r7, #24]
 80013dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	2203      	movs	r2, #3
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0203 	and.w	r2, r3, #3
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 80b4 	beq.w	800158a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b60      	ldr	r3, [pc, #384]	; (80015a8 <HAL_GPIO_Init+0x30c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	4a5f      	ldr	r2, [pc, #380]	; (80015a8 <HAL_GPIO_Init+0x30c>)
 800142c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001430:	6453      	str	r3, [r2, #68]	; 0x44
 8001432:	4b5d      	ldr	r3, [pc, #372]	; (80015a8 <HAL_GPIO_Init+0x30c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800143e:	4a5b      	ldr	r2, [pc, #364]	; (80015ac <HAL_GPIO_Init+0x310>)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	220f      	movs	r2, #15
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a52      	ldr	r2, [pc, #328]	; (80015b0 <HAL_GPIO_Init+0x314>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d02b      	beq.n	80014c2 <HAL_GPIO_Init+0x226>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a51      	ldr	r2, [pc, #324]	; (80015b4 <HAL_GPIO_Init+0x318>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d025      	beq.n	80014be <HAL_GPIO_Init+0x222>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a50      	ldr	r2, [pc, #320]	; (80015b8 <HAL_GPIO_Init+0x31c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d01f      	beq.n	80014ba <HAL_GPIO_Init+0x21e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4f      	ldr	r2, [pc, #316]	; (80015bc <HAL_GPIO_Init+0x320>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d019      	beq.n	80014b6 <HAL_GPIO_Init+0x21a>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4e      	ldr	r2, [pc, #312]	; (80015c0 <HAL_GPIO_Init+0x324>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d013      	beq.n	80014b2 <HAL_GPIO_Init+0x216>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4d      	ldr	r2, [pc, #308]	; (80015c4 <HAL_GPIO_Init+0x328>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d00d      	beq.n	80014ae <HAL_GPIO_Init+0x212>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4c      	ldr	r2, [pc, #304]	; (80015c8 <HAL_GPIO_Init+0x32c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d007      	beq.n	80014aa <HAL_GPIO_Init+0x20e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4b      	ldr	r2, [pc, #300]	; (80015cc <HAL_GPIO_Init+0x330>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d101      	bne.n	80014a6 <HAL_GPIO_Init+0x20a>
 80014a2:	2307      	movs	r3, #7
 80014a4:	e00e      	b.n	80014c4 <HAL_GPIO_Init+0x228>
 80014a6:	2308      	movs	r3, #8
 80014a8:	e00c      	b.n	80014c4 <HAL_GPIO_Init+0x228>
 80014aa:	2306      	movs	r3, #6
 80014ac:	e00a      	b.n	80014c4 <HAL_GPIO_Init+0x228>
 80014ae:	2305      	movs	r3, #5
 80014b0:	e008      	b.n	80014c4 <HAL_GPIO_Init+0x228>
 80014b2:	2304      	movs	r3, #4
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x228>
 80014b6:	2303      	movs	r3, #3
 80014b8:	e004      	b.n	80014c4 <HAL_GPIO_Init+0x228>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e002      	b.n	80014c4 <HAL_GPIO_Init+0x228>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_GPIO_Init+0x228>
 80014c2:	2300      	movs	r3, #0
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	f002 0203 	and.w	r2, r2, #3
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4093      	lsls	r3, r2
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d4:	4935      	ldr	r1, [pc, #212]	; (80015ac <HAL_GPIO_Init+0x310>)
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	3302      	adds	r3, #2
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e2:	4b3b      	ldr	r3, [pc, #236]	; (80015d0 <HAL_GPIO_Init+0x334>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001506:	4a32      	ldr	r2, [pc, #200]	; (80015d0 <HAL_GPIO_Init+0x334>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800150c:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <HAL_GPIO_Init+0x334>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001530:	4a27      	ldr	r2, [pc, #156]	; (80015d0 <HAL_GPIO_Init+0x334>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001536:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <HAL_GPIO_Init+0x334>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800155a:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <HAL_GPIO_Init+0x334>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <HAL_GPIO_Init+0x334>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001584:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <HAL_GPIO_Init+0x334>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3301      	adds	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	2b0f      	cmp	r3, #15
 8001594:	f67f ae90 	bls.w	80012b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40013800 	.word	0x40013800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40020c00 	.word	0x40020c00
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40021400 	.word	0x40021400
 80015c8:	40021800 	.word	0x40021800
 80015cc:	40021c00 	.word	0x40021c00
 80015d0:	40013c00 	.word	0x40013c00

080015d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691a      	ldr	r2, [r3, #16]
 80015e4:	887b      	ldrh	r3, [r7, #2]
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	e001      	b.n	80015f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
 8001610:	4613      	mov	r3, r2
 8001612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001614:	787b      	ldrb	r3, [r7, #1]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001620:	e003      	b.n	800162a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	041a      	lsls	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	619a      	str	r2, [r3, #24]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001636:	b480      	push	{r7}
 8001638:	b085      	sub	sp, #20
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001648:	887a      	ldrh	r2, [r7, #2]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4013      	ands	r3, r2
 800164e:	041a      	lsls	r2, r3, #16
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43d9      	mvns	r1, r3
 8001654:	887b      	ldrh	r3, [r7, #2]
 8001656:	400b      	ands	r3, r1
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	619a      	str	r2, [r3, #24]
}
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f003 f914 	bl	80048ae <USB_GetMode>
 8001686:	4603      	mov	r3, r0
 8001688:	2b01      	cmp	r3, #1
 800168a:	f040 80f6 	bne.w	800187a <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f003 f8f8 	bl	8004888 <USB_ReadInterrupts>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 80ec 	beq.w	8001878 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f003 f8ef 	bl	8004888 <USB_ReadInterrupts>
 80016aa:	4603      	mov	r3, r0
 80016ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80016b4:	d104      	bne.n	80016c0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016be:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 f8df 	bl	8004888 <USB_ReadInterrupts>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016d4:	d104      	bne.n	80016e0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016de:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 f8cf 	bl	8004888 <USB_ReadInterrupts>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80016f4:	d104      	bne.n	8001700 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016fe:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f003 f8bf 	bl	8004888 <USB_ReadInterrupts>
 800170a:	4603      	mov	r3, r0
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b02      	cmp	r3, #2
 8001712:	d103      	bne.n	800171c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2202      	movs	r2, #2
 800171a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f003 f8b1 	bl	8004888 <USB_ReadInterrupts>
 8001726:	4603      	mov	r3, r0
 8001728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800172c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001730:	d11c      	bne.n	800176c <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800173a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10f      	bne.n	800176c <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800174c:	2110      	movs	r1, #16
 800174e:	6938      	ldr	r0, [r7, #16]
 8001750:	f002 ffde 	bl	8004710 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001754:	6938      	ldr	r0, [r7, #16]
 8001756:	f003 f80f 	bl	8004778 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2101      	movs	r1, #1
 8001760:	4618      	mov	r0, r3
 8001762:	f003 f8b2 	bl	80048ca <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f007 f92c 	bl	80089c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f003 f889 	bl	8004888 <USB_ReadInterrupts>
 8001776:	4603      	mov	r3, r0
 8001778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800177c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001780:	d102      	bne.n	8001788 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f001 f829 	bl	80027da <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f003 f87b 	bl	8004888 <USB_ReadInterrupts>
 8001792:	4603      	mov	r3, r0
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b08      	cmp	r3, #8
 800179a:	d106      	bne.n	80017aa <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f007 f8f5 	bl	800898c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2208      	movs	r2, #8
 80017a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f003 f86a 	bl	8004888 <USB_ReadInterrupts>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b10      	cmp	r3, #16
 80017bc:	d101      	bne.n	80017c2 <HAL_HCD_IRQHandler+0x158>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_HCD_IRQHandler+0x15a>
 80017c2:	2300      	movs	r3, #0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d012      	beq.n	80017ee <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	699a      	ldr	r2, [r3, #24]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0210 	bic.w	r2, r2, #16
 80017d6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 ff2c 	bl	8002636 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	699a      	ldr	r2, [r3, #24]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 0210 	orr.w	r2, r2, #16
 80017ec:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f003 f848 	bl	8004888 <USB_ReadInterrupts>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001802:	d13a      	bne.n	800187a <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f003 f898 	bl	800493e <USB_HC_ReadInterrupt>
 800180e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	e025      	b.n	8001862 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	fa22 f303 	lsr.w	r3, r2, r3
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d018      	beq.n	800185c <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	015a      	lsls	r2, r3, #5
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4413      	add	r3, r2
 8001832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800183c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001840:	d106      	bne.n	8001850 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4619      	mov	r1, r3
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f836 	bl	80018ba <HCD_HC_IN_IRQHandler>
 800184e:	e005      	b.n	800185c <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4619      	mov	r1, r3
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 fb84 	bl	8001f64 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	429a      	cmp	r2, r3
 800186a:	d3d4      	bcc.n	8001816 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001874:	615a      	str	r2, [r3, #20]
 8001876:	e000      	b.n	800187a <HAL_HCD_IRQHandler+0x210>
      return;
 8001878:	bf00      	nop
    }
  }
}
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_HCD_Stop+0x16>
 8001892:	2302      	movs	r3, #2
 8001894:	e00d      	b.n	80018b2 <HAL_HCD_Stop+0x32>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f003 f958 	bl	8004b58 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	015a      	lsls	r2, r3, #5
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4413      	add	r3, r2
 80018dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d11a      	bne.n	8001920 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	015a      	lsls	r2, r3, #5
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f6:	461a      	mov	r2, r3
 80018f8:	2304      	movs	r3, #4
 80018fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	212c      	movs	r1, #44	; 0x2c
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	4413      	add	r3, r2
 8001908:	3361      	adds	r3, #97	; 0x61
 800190a:	2206      	movs	r2, #6
 800190c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f003 f821 	bl	8004960 <USB_HC_Halt>
 800191e:	e0af      	b.n	8001a80 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	015a      	lsls	r2, r3, #5
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4413      	add	r3, r2
 8001928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001936:	d11b      	bne.n	8001970 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	015a      	lsls	r2, r3, #5
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4413      	add	r3, r2
 8001940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001944:	461a      	mov	r2, r3
 8001946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	212c      	movs	r1, #44	; 0x2c
 8001952:	fb01 f303 	mul.w	r3, r1, r3
 8001956:	4413      	add	r3, r2
 8001958:	3361      	adds	r3, #97	; 0x61
 800195a:	2207      	movs	r2, #7
 800195c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f002 fff9 	bl	8004960 <USB_HC_Halt>
 800196e:	e087      	b.n	8001a80 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	015a      	lsls	r2, r3, #5
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4413      	add	r3, r2
 8001978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 0320 	and.w	r3, r3, #32
 8001982:	2b20      	cmp	r3, #32
 8001984:	d109      	bne.n	800199a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	015a      	lsls	r2, r3, #5
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4413      	add	r3, r2
 800198e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001992:	461a      	mov	r2, r3
 8001994:	2320      	movs	r3, #32
 8001996:	6093      	str	r3, [r2, #8]
 8001998:	e072      	b.n	8001a80 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	015a      	lsls	r2, r3, #5
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4413      	add	r3, r2
 80019a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d11a      	bne.n	80019e6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	015a      	lsls	r2, r3, #5
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4413      	add	r3, r2
 80019b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019bc:	461a      	mov	r2, r3
 80019be:	2308      	movs	r3, #8
 80019c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	212c      	movs	r1, #44	; 0x2c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	3361      	adds	r3, #97	; 0x61
 80019d0:	2205      	movs	r2, #5
 80019d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	4611      	mov	r1, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 ffbe 	bl	8004960 <USB_HC_Halt>
 80019e4:	e04c      	b.n	8001a80 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	015a      	lsls	r2, r3, #5
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fc:	d11b      	bne.n	8001a36 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	015a      	lsls	r2, r3, #5
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	212c      	movs	r1, #44	; 0x2c
 8001a18:	fb01 f303 	mul.w	r3, r1, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3361      	adds	r3, #97	; 0x61
 8001a20:	2208      	movs	r2, #8
 8001a22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 ff96 	bl	8004960 <USB_HC_Halt>
 8001a34:	e024      	b.n	8001a80 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	015a      	lsls	r2, r3, #5
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a48:	2b80      	cmp	r3, #128	; 0x80
 8001a4a:	d119      	bne.n	8001a80 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	015a      	lsls	r2, r3, #5
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4413      	add	r3, r2
 8001a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a58:	461a      	mov	r2, r3
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	212c      	movs	r1, #44	; 0x2c
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	3361      	adds	r3, #97	; 0x61
 8001a6c:	2206      	movs	r2, #6
 8001a6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 ff70 	bl	8004960 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	015a      	lsls	r2, r3, #5
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4413      	add	r3, r2
 8001a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a96:	d112      	bne.n	8001abe <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 ff5c 	bl	8004960 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	015a      	lsls	r2, r3, #5
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aba:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001abc:	e24e      	b.n	8001f5c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	015a      	lsls	r2, r3, #5
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	f040 80df 	bne.w	8001c94 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d019      	beq.n	8001b12 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	212c      	movs	r1, #44	; 0x2c
 8001ae4:	fb01 f303 	mul.w	r3, r1, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	3348      	adds	r3, #72	; 0x48
 8001aec:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	0159      	lsls	r1, r3, #5
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	440b      	add	r3, r1
 8001af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001b00:	1ad2      	subs	r2, r2, r3
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	202c      	movs	r0, #44	; 0x2c
 8001b08:	fb00 f303 	mul.w	r3, r0, r3
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3350      	adds	r3, #80	; 0x50
 8001b10:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	212c      	movs	r1, #44	; 0x2c
 8001b18:	fb01 f303 	mul.w	r3, r1, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3361      	adds	r3, #97	; 0x61
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	212c      	movs	r1, #44	; 0x2c
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	335c      	adds	r3, #92	; 0x5c
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	015a      	lsls	r2, r3, #5
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b42:	461a      	mov	r2, r3
 8001b44:	2301      	movs	r3, #1
 8001b46:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	212c      	movs	r1, #44	; 0x2c
 8001b4e:	fb01 f303 	mul.w	r3, r1, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	333f      	adds	r3, #63	; 0x3f
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d009      	beq.n	8001b70 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	212c      	movs	r1, #44	; 0x2c
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	333f      	adds	r3, #63	; 0x3f
 8001b6a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d111      	bne.n	8001b94 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 fef0 	bl	8004960 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	015a      	lsls	r2, r3, #5
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2310      	movs	r3, #16
 8001b90:	6093      	str	r3, [r2, #8]
 8001b92:	e03a      	b.n	8001c0a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	212c      	movs	r1, #44	; 0x2c
 8001b9a:	fb01 f303 	mul.w	r3, r1, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	333f      	adds	r3, #63	; 0x3f
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d009      	beq.n	8001bbc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	212c      	movs	r1, #44	; 0x2c
 8001bae:	fb01 f303 	mul.w	r3, r1, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	333f      	adds	r3, #63	; 0x3f
 8001bb6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d126      	bne.n	8001c0a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	015a      	lsls	r2, r3, #5
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	0151      	lsls	r1, r2, #5
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	440a      	add	r2, r1
 8001bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bda:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	212c      	movs	r1, #44	; 0x2c
 8001be2:	fb01 f303 	mul.w	r3, r1, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	3360      	adds	r3, #96	; 0x60
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	b2d9      	uxtb	r1, r3
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	202c      	movs	r0, #44	; 0x2c
 8001bf8:	fb00 f303 	mul.w	r3, r0, r3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3360      	adds	r3, #96	; 0x60
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f006 feeb 	bl	80089e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d12b      	bne.n	8001c6a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	212c      	movs	r1, #44	; 0x2c
 8001c18:	fb01 f303 	mul.w	r3, r1, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3348      	adds	r3, #72	; 0x48
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	202c      	movs	r0, #44	; 0x2c
 8001c28:	fb00 f202 	mul.w	r2, r0, r2
 8001c2c:	440a      	add	r2, r1
 8001c2e:	3240      	adds	r2, #64	; 0x40
 8001c30:	8812      	ldrh	r2, [r2, #0]
 8001c32:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 818e 	beq.w	8001f5c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	212c      	movs	r1, #44	; 0x2c
 8001c46:	fb01 f303 	mul.w	r3, r1, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3354      	adds	r3, #84	; 0x54
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	f083 0301 	eor.w	r3, r3, #1
 8001c54:	b2d8      	uxtb	r0, r3
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	212c      	movs	r1, #44	; 0x2c
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	3354      	adds	r3, #84	; 0x54
 8001c64:	4602      	mov	r2, r0
 8001c66:	701a      	strb	r2, [r3, #0]
}
 8001c68:	e178      	b.n	8001f5c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	212c      	movs	r1, #44	; 0x2c
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	3354      	adds	r3, #84	; 0x54
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	f083 0301 	eor.w	r3, r3, #1
 8001c7e:	b2d8      	uxtb	r0, r3
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	212c      	movs	r1, #44	; 0x2c
 8001c86:	fb01 f303 	mul.w	r3, r1, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3354      	adds	r3, #84	; 0x54
 8001c8e:	4602      	mov	r2, r0
 8001c90:	701a      	strb	r2, [r3, #0]
}
 8001c92:	e163      	b.n	8001f5c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	015a      	lsls	r2, r3, #5
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	f040 80f6 	bne.w	8001e98 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	212c      	movs	r1, #44	; 0x2c
 8001cb2:	fb01 f303 	mul.w	r3, r1, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3361      	adds	r3, #97	; 0x61
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d109      	bne.n	8001cd4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	212c      	movs	r1, #44	; 0x2c
 8001cc6:	fb01 f303 	mul.w	r3, r1, r3
 8001cca:	4413      	add	r3, r2
 8001ccc:	3360      	adds	r3, #96	; 0x60
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	e0c9      	b.n	8001e68 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	212c      	movs	r1, #44	; 0x2c
 8001cda:	fb01 f303 	mul.w	r3, r1, r3
 8001cde:	4413      	add	r3, r2
 8001ce0:	3361      	adds	r3, #97	; 0x61
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	d109      	bne.n	8001cfc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	212c      	movs	r1, #44	; 0x2c
 8001cee:	fb01 f303 	mul.w	r3, r1, r3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3360      	adds	r3, #96	; 0x60
 8001cf6:	2205      	movs	r2, #5
 8001cf8:	701a      	strb	r2, [r3, #0]
 8001cfa:	e0b5      	b.n	8001e68 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	212c      	movs	r1, #44	; 0x2c
 8001d02:	fb01 f303 	mul.w	r3, r1, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	3361      	adds	r3, #97	; 0x61
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b06      	cmp	r3, #6
 8001d0e:	d009      	beq.n	8001d24 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	212c      	movs	r1, #44	; 0x2c
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3361      	adds	r3, #97	; 0x61
 8001d1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d150      	bne.n	8001dc6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	212c      	movs	r1, #44	; 0x2c
 8001d2a:	fb01 f303 	mul.w	r3, r1, r3
 8001d2e:	4413      	add	r3, r2
 8001d30:	335c      	adds	r3, #92	; 0x5c
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	202c      	movs	r0, #44	; 0x2c
 8001d3c:	fb00 f303 	mul.w	r3, r0, r3
 8001d40:	440b      	add	r3, r1
 8001d42:	335c      	adds	r3, #92	; 0x5c
 8001d44:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	212c      	movs	r1, #44	; 0x2c
 8001d4c:	fb01 f303 	mul.w	r3, r1, r3
 8001d50:	4413      	add	r3, r2
 8001d52:	335c      	adds	r3, #92	; 0x5c
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d912      	bls.n	8001d80 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	212c      	movs	r1, #44	; 0x2c
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	335c      	adds	r3, #92	; 0x5c
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	212c      	movs	r1, #44	; 0x2c
 8001d72:	fb01 f303 	mul.w	r3, r1, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	3360      	adds	r3, #96	; 0x60
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d7e:	e073      	b.n	8001e68 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	212c      	movs	r1, #44	; 0x2c
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3360      	adds	r3, #96	; 0x60
 8001d8e:	2202      	movs	r2, #2
 8001d90:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001da8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001db0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001dc4:	e050      	b.n	8001e68 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	212c      	movs	r1, #44	; 0x2c
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3361      	adds	r3, #97	; 0x61
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d122      	bne.n	8001e20 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	212c      	movs	r1, #44	; 0x2c
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	3360      	adds	r3, #96	; 0x60
 8001de8:	2202      	movs	r2, #2
 8001dea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e02:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e0a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e18:	461a      	mov	r2, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	e023      	b.n	8001e68 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	212c      	movs	r1, #44	; 0x2c
 8001e26:	fb01 f303 	mul.w	r3, r1, r3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3361      	adds	r3, #97	; 0x61
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b07      	cmp	r3, #7
 8001e32:	d119      	bne.n	8001e68 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	212c      	movs	r1, #44	; 0x2c
 8001e3a:	fb01 f303 	mul.w	r3, r1, r3
 8001e3e:	4413      	add	r3, r2
 8001e40:	335c      	adds	r3, #92	; 0x5c
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	202c      	movs	r0, #44	; 0x2c
 8001e4c:	fb00 f303 	mul.w	r3, r0, r3
 8001e50:	440b      	add	r3, r1
 8001e52:	335c      	adds	r3, #92	; 0x5c
 8001e54:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	212c      	movs	r1, #44	; 0x2c
 8001e5c:	fb01 f303 	mul.w	r3, r1, r3
 8001e60:	4413      	add	r3, r2
 8001e62:	3360      	adds	r3, #96	; 0x60
 8001e64:	2204      	movs	r2, #4
 8001e66:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e74:	461a      	mov	r2, r3
 8001e76:	2302      	movs	r3, #2
 8001e78:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	b2d9      	uxtb	r1, r3
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	202c      	movs	r0, #44	; 0x2c
 8001e84:	fb00 f303 	mul.w	r3, r0, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	3360      	adds	r3, #96	; 0x60
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f006 fda5 	bl	80089e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001e96:	e061      	b.n	8001f5c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b10      	cmp	r3, #16
 8001eac:	d156      	bne.n	8001f5c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	212c      	movs	r1, #44	; 0x2c
 8001eb4:	fb01 f303 	mul.w	r3, r1, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	333f      	adds	r3, #63	; 0x3f
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d111      	bne.n	8001ee6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	212c      	movs	r1, #44	; 0x2c
 8001ec8:	fb01 f303 	mul.w	r3, r1, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	335c      	adds	r3, #92	; 0x5c
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f002 fd3e 	bl	8004960 <USB_HC_Halt>
 8001ee4:	e031      	b.n	8001f4a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	212c      	movs	r1, #44	; 0x2c
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	333f      	adds	r3, #63	; 0x3f
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d009      	beq.n	8001f0e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	333f      	adds	r3, #63	; 0x3f
 8001f08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d11d      	bne.n	8001f4a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	212c      	movs	r1, #44	; 0x2c
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	335c      	adds	r3, #92	; 0x5c
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d110      	bne.n	8001f4a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	212c      	movs	r1, #44	; 0x2c
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	3361      	adds	r3, #97	; 0x61
 8001f36:	2203      	movs	r2, #3
 8001f38:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f002 fd0b 	bl	8004960 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f56:	461a      	mov	r2, r3
 8001f58:	2310      	movs	r3, #16
 8001f5a:	6093      	str	r3, [r2, #8]
}
 8001f5c:	bf00      	nop
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d11a      	bne.n	8001fca <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3361      	adds	r3, #97	; 0x61
 8001fb4:	2206      	movs	r2, #6
 8001fb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f002 fccc 	bl	8004960 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001fc8:	e331      	b.n	800262e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d12e      	bne.n	800203e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fec:	461a      	mov	r2, r3
 8001fee:	2320      	movs	r3, #32
 8001ff0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	212c      	movs	r1, #44	; 0x2c
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	333d      	adds	r3, #61	; 0x3d
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b01      	cmp	r3, #1
 8002004:	f040 8313 	bne.w	800262e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	212c      	movs	r1, #44	; 0x2c
 800200e:	fb01 f303 	mul.w	r3, r1, r3
 8002012:	4413      	add	r3, r2
 8002014:	333d      	adds	r3, #61	; 0x3d
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	212c      	movs	r1, #44	; 0x2c
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	4413      	add	r3, r2
 8002026:	3360      	adds	r3, #96	; 0x60
 8002028:	2202      	movs	r2, #2
 800202a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f002 fc92 	bl	8004960 <USB_HC_Halt>
}
 800203c:	e2f7      	b.n	800262e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	015a      	lsls	r2, r3, #5
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4413      	add	r3, r2
 8002046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002054:	d112      	bne.n	800207c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002062:	461a      	mov	r2, r3
 8002064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002068:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f002 fc73 	bl	8004960 <USB_HC_Halt>
}
 800207a:	e2d8      	b.n	800262e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	4413      	add	r3, r2
 8002084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b01      	cmp	r3, #1
 8002090:	d140      	bne.n	8002114 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	212c      	movs	r1, #44	; 0x2c
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	335c      	adds	r3, #92	; 0x5c
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b6:	2b40      	cmp	r3, #64	; 0x40
 80020b8:	d111      	bne.n	80020de <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	212c      	movs	r1, #44	; 0x2c
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	333d      	adds	r3, #61	; 0x3d
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d8:	461a      	mov	r2, r3
 80020da:	2340      	movs	r3, #64	; 0x40
 80020dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ea:	461a      	mov	r2, r3
 80020ec:	2301      	movs	r3, #1
 80020ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	212c      	movs	r1, #44	; 0x2c
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	3361      	adds	r3, #97	; 0x61
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f002 fc27 	bl	8004960 <USB_HC_Halt>
}
 8002112:	e28c      	b.n	800262e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	4413      	add	r3, r2
 800211c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b40      	cmp	r3, #64	; 0x40
 8002128:	d12c      	bne.n	8002184 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	212c      	movs	r1, #44	; 0x2c
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	3361      	adds	r3, #97	; 0x61
 8002138:	2204      	movs	r2, #4
 800213a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	212c      	movs	r1, #44	; 0x2c
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4413      	add	r3, r2
 8002148:	333d      	adds	r3, #61	; 0x3d
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	212c      	movs	r1, #44	; 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	335c      	adds	r3, #92	; 0x5c
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f002 fbf8 	bl	8004960 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	461a      	mov	r2, r3
 800217e:	2340      	movs	r3, #64	; 0x40
 8002180:	6093      	str	r3, [r2, #8]
}
 8002182:	e254      	b.n	800262e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	4413      	add	r3, r2
 800218c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b08      	cmp	r3, #8
 8002198:	d11a      	bne.n	80021d0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a6:	461a      	mov	r2, r3
 80021a8:	2308      	movs	r3, #8
 80021aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	212c      	movs	r1, #44	; 0x2c
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	3361      	adds	r3, #97	; 0x61
 80021ba:	2205      	movs	r2, #5
 80021bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f002 fbc9 	bl	8004960 <USB_HC_Halt>
}
 80021ce:	e22e      	b.n	800262e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d140      	bne.n	8002268 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	212c      	movs	r1, #44	; 0x2c
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	335c      	adds	r3, #92	; 0x5c
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3361      	adds	r3, #97	; 0x61
 8002206:	2203      	movs	r2, #3
 8002208:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	333d      	adds	r3, #61	; 0x3d
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d112      	bne.n	8002244 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	333c      	adds	r3, #60	; 0x3c
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d108      	bne.n	8002244 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	212c      	movs	r1, #44	; 0x2c
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	333d      	adds	r3, #61	; 0x3d
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f002 fb86 	bl	8004960 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	4413      	add	r3, r2
 800225c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002260:	461a      	mov	r2, r3
 8002262:	2310      	movs	r3, #16
 8002264:	6093      	str	r3, [r2, #8]
}
 8002266:	e1e2      	b.n	800262e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227a:	2b80      	cmp	r3, #128	; 0x80
 800227c:	d164      	bne.n	8002348 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d111      	bne.n	80022aa <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	212c      	movs	r1, #44	; 0x2c
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	4413      	add	r3, r2
 8002292:	3361      	adds	r3, #97	; 0x61
 8002294:	2206      	movs	r2, #6
 8002296:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 fb5c 	bl	8004960 <USB_HC_Halt>
 80022a8:	e044      	b.n	8002334 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	335c      	adds	r3, #92	; 0x5c
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	202c      	movs	r0, #44	; 0x2c
 80022c2:	fb00 f303 	mul.w	r3, r0, r3
 80022c6:	440b      	add	r3, r1
 80022c8:	335c      	adds	r3, #92	; 0x5c
 80022ca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	335c      	adds	r3, #92	; 0x5c
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d920      	bls.n	8002322 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	335c      	adds	r3, #92	; 0x5c
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	3360      	adds	r3, #96	; 0x60
 8002300:	2204      	movs	r2, #4
 8002302:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	b2d9      	uxtb	r1, r3
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	202c      	movs	r0, #44	; 0x2c
 800230e:	fb00 f303 	mul.w	r3, r0, r3
 8002312:	4413      	add	r3, r2
 8002314:	3360      	adds	r3, #96	; 0x60
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f006 fb60 	bl	80089e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002320:	e008      	b.n	8002334 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	3360      	adds	r3, #96	; 0x60
 8002330:	2202      	movs	r2, #2
 8002332:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	4413      	add	r3, r2
 800233c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002340:	461a      	mov	r2, r3
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	6093      	str	r3, [r2, #8]
}
 8002346:	e172      	b.n	800262e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235e:	d11b      	bne.n	8002398 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	3361      	adds	r3, #97	; 0x61
 800236e:	2208      	movs	r2, #8
 8002370:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f002 faef 	bl	8004960 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	4413      	add	r3, r2
 800238a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238e:	461a      	mov	r2, r3
 8002390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002394:	6093      	str	r3, [r2, #8]
}
 8002396:	e14a      	b.n	800262e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	f040 813f 	bne.w	800262e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	3361      	adds	r3, #97	; 0x61
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d17d      	bne.n	80024c0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	3360      	adds	r3, #96	; 0x60
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	333f      	adds	r3, #63	; 0x3f
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d00a      	beq.n	8002400 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	212c      	movs	r1, #44	; 0x2c
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	333f      	adds	r3, #63	; 0x3f
 80023f8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	f040 8100 	bne.w	8002600 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d113      	bne.n	8002430 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	3355      	adds	r3, #85	; 0x55
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	f083 0301 	eor.w	r3, r3, #1
 800241c:	b2d8      	uxtb	r0, r3
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	3355      	adds	r3, #85	; 0x55
 800242c:	4602      	mov	r2, r0
 800242e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	2b01      	cmp	r3, #1
 8002436:	f040 80e3 	bne.w	8002600 <HCD_HC_OUT_IRQHandler+0x69c>
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	212c      	movs	r1, #44	; 0x2c
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	4413      	add	r3, r2
 8002446:	334c      	adds	r3, #76	; 0x4c
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80d8 	beq.w	8002600 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	212c      	movs	r1, #44	; 0x2c
 8002456:	fb01 f303 	mul.w	r3, r1, r3
 800245a:	4413      	add	r3, r2
 800245c:	334c      	adds	r3, #76	; 0x4c
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	202c      	movs	r0, #44	; 0x2c
 8002466:	fb00 f202 	mul.w	r2, r0, r2
 800246a:	440a      	add	r2, r1
 800246c:	3240      	adds	r2, #64	; 0x40
 800246e:	8812      	ldrh	r2, [r2, #0]
 8002470:	4413      	add	r3, r2
 8002472:	3b01      	subs	r3, #1
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	202c      	movs	r0, #44	; 0x2c
 800247a:	fb00 f202 	mul.w	r2, r0, r2
 800247e:	440a      	add	r2, r1
 8002480:	3240      	adds	r2, #64	; 0x40
 8002482:	8812      	ldrh	r2, [r2, #0]
 8002484:	fbb3 f3f2 	udiv	r3, r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80b5 	beq.w	8002600 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	3355      	adds	r3, #85	; 0x55
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	f083 0301 	eor.w	r3, r3, #1
 80024aa:	b2d8      	uxtb	r0, r3
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	212c      	movs	r1, #44	; 0x2c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	3355      	adds	r3, #85	; 0x55
 80024ba:	4602      	mov	r2, r0
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	e09f      	b.n	8002600 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	3361      	adds	r3, #97	; 0x61
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d109      	bne.n	80024e8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	212c      	movs	r1, #44	; 0x2c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	3360      	adds	r3, #96	; 0x60
 80024e2:	2202      	movs	r2, #2
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	e08b      	b.n	8002600 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	3361      	adds	r3, #97	; 0x61
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d109      	bne.n	8002510 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	3360      	adds	r3, #96	; 0x60
 800250a:	2202      	movs	r2, #2
 800250c:	701a      	strb	r2, [r3, #0]
 800250e:	e077      	b.n	8002600 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	3361      	adds	r3, #97	; 0x61
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b05      	cmp	r3, #5
 8002522:	d109      	bne.n	8002538 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	212c      	movs	r1, #44	; 0x2c
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	4413      	add	r3, r2
 8002530:	3360      	adds	r3, #96	; 0x60
 8002532:	2205      	movs	r2, #5
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	e063      	b.n	8002600 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	212c      	movs	r1, #44	; 0x2c
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	4413      	add	r3, r2
 8002544:	3361      	adds	r3, #97	; 0x61
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b06      	cmp	r3, #6
 800254a:	d009      	beq.n	8002560 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	212c      	movs	r1, #44	; 0x2c
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	3361      	adds	r3, #97	; 0x61
 800255a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800255c:	2b08      	cmp	r3, #8
 800255e:	d14f      	bne.n	8002600 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	335c      	adds	r3, #92	; 0x5c
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	202c      	movs	r0, #44	; 0x2c
 8002578:	fb00 f303 	mul.w	r3, r0, r3
 800257c:	440b      	add	r3, r1
 800257e:	335c      	adds	r3, #92	; 0x5c
 8002580:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	212c      	movs	r1, #44	; 0x2c
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	335c      	adds	r3, #92	; 0x5c
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d912      	bls.n	80025bc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	212c      	movs	r1, #44	; 0x2c
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	335c      	adds	r3, #92	; 0x5c
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3360      	adds	r3, #96	; 0x60
 80025b6:	2204      	movs	r2, #4
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	e021      	b.n	8002600 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	212c      	movs	r1, #44	; 0x2c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	3360      	adds	r3, #96	; 0x60
 80025ca:	2202      	movs	r2, #2
 80025cc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025e4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025ec:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fa:	461a      	mov	r2, r3
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260c:	461a      	mov	r2, r3
 800260e:	2302      	movs	r3, #2
 8002610:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	b2d9      	uxtb	r1, r3
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	202c      	movs	r0, #44	; 0x2c
 800261c:	fb00 f303 	mul.w	r3, r0, r3
 8002620:	4413      	add	r3, r2
 8002622:	3360      	adds	r3, #96	; 0x60
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f006 f9d9 	bl	80089e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800262e:	bf00      	nop
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b08a      	sub	sp, #40	; 0x28
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	0c5b      	lsrs	r3, r3, #17
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800266a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d004      	beq.n	800267c <HCD_RXQLVL_IRQHandler+0x46>
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b05      	cmp	r3, #5
 8002676:	f000 80a9 	beq.w	80027cc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800267a:	e0aa      	b.n	80027d2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80a6 	beq.w	80027d0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	212c      	movs	r1, #44	; 0x2c
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	4413      	add	r3, r2
 8002690:	3344      	adds	r3, #68	; 0x44
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 809b 	beq.w	80027d0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	3350      	adds	r3, #80	; 0x50
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	441a      	add	r2, r3
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	202c      	movs	r0, #44	; 0x2c
 80026b4:	fb00 f303 	mul.w	r3, r0, r3
 80026b8:	440b      	add	r3, r1
 80026ba:	334c      	adds	r3, #76	; 0x4c
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d87a      	bhi.n	80027b8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	212c      	movs	r1, #44	; 0x2c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	3344      	adds	r3, #68	; 0x44
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	b292      	uxth	r2, r2
 80026da:	4619      	mov	r1, r3
 80026dc:	f002 f87c 	bl	80047d8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	212c      	movs	r1, #44	; 0x2c
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	3344      	adds	r3, #68	; 0x44
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	441a      	add	r2, r3
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	202c      	movs	r0, #44	; 0x2c
 80026fa:	fb00 f303 	mul.w	r3, r0, r3
 80026fe:	440b      	add	r3, r1
 8002700:	3344      	adds	r3, #68	; 0x44
 8002702:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	3350      	adds	r3, #80	; 0x50
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	441a      	add	r2, r3
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	202c      	movs	r0, #44	; 0x2c
 800271e:	fb00 f303 	mul.w	r3, r0, r3
 8002722:	440b      	add	r3, r1
 8002724:	3350      	adds	r3, #80	; 0x50
 8002726:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	0cdb      	lsrs	r3, r3, #19
 8002738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800273c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	3340      	adds	r3, #64	; 0x40
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4293      	cmp	r3, r2
 8002754:	d13c      	bne.n	80027d0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d039      	beq.n	80027d0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002772:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800277a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	461a      	mov	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	3354      	adds	r3, #84	; 0x54
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	f083 0301 	eor.w	r3, r3, #1
 80027a2:	b2d8      	uxtb	r0, r3
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	3354      	adds	r3, #84	; 0x54
 80027b2:	4602      	mov	r2, r0
 80027b4:	701a      	strb	r2, [r3, #0]
      break;
 80027b6:	e00b      	b.n	80027d0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	212c      	movs	r1, #44	; 0x2c
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	4413      	add	r3, r2
 80027c4:	3360      	adds	r3, #96	; 0x60
 80027c6:	2204      	movs	r2, #4
 80027c8:	701a      	strb	r2, [r3, #0]
      break;
 80027ca:	e001      	b.n	80027d0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80027cc:	bf00      	nop
 80027ce:	e000      	b.n	80027d2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80027d0:	bf00      	nop
  }
}
 80027d2:	bf00      	nop
 80027d4:	3728      	adds	r7, #40	; 0x28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002806:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b02      	cmp	r3, #2
 8002810:	d10b      	bne.n	800282a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b01      	cmp	r3, #1
 800281a:	d102      	bne.n	8002822 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f006 f8c3 	bl	80089a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b08      	cmp	r3, #8
 8002832:	d132      	bne.n	800289a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f043 0308 	orr.w	r3, r3, #8
 800283a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b04      	cmp	r3, #4
 8002844:	d126      	bne.n	8002894 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d113      	bne.n	8002876 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002854:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002858:	d106      	bne.n	8002868 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2102      	movs	r1, #2
 8002860:	4618      	mov	r0, r3
 8002862:	f002 f832 	bl	80048ca <USB_InitFSLSPClkSel>
 8002866:	e011      	b.n	800288c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2101      	movs	r1, #1
 800286e:	4618      	mov	r0, r3
 8002870:	f002 f82b 	bl	80048ca <USB_InitFSLSPClkSel>
 8002874:	e00a      	b.n	800288c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d106      	bne.n	800288c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002884:	461a      	mov	r2, r3
 8002886:	f64e 2360 	movw	r3, #60000	; 0xea60
 800288a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f006 f8b9 	bl	8008a04 <HAL_HCD_PortEnabled_Callback>
 8002892:	e002      	b.n	800289a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f006 f8c3 	bl	8008a20 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d103      	bne.n	80028ac <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f043 0320 	orr.w	r3, r3, #32
 80028aa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028b2:	461a      	mov	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	6013      	str	r3, [r2, #0]
}
 80028b8:	bf00      	nop
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e12b      	b.n	8002b2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe f91a 	bl	8000b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002912:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002922:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002924:	f001 fa20 	bl	8003d68 <HAL_RCC_GetPCLK1Freq>
 8002928:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4a81      	ldr	r2, [pc, #516]	; (8002b34 <HAL_I2C_Init+0x274>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d807      	bhi.n	8002944 <HAL_I2C_Init+0x84>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4a80      	ldr	r2, [pc, #512]	; (8002b38 <HAL_I2C_Init+0x278>)
 8002938:	4293      	cmp	r3, r2
 800293a:	bf94      	ite	ls
 800293c:	2301      	movls	r3, #1
 800293e:	2300      	movhi	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	e006      	b.n	8002952 <HAL_I2C_Init+0x92>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a7d      	ldr	r2, [pc, #500]	; (8002b3c <HAL_I2C_Init+0x27c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	bf94      	ite	ls
 800294c:	2301      	movls	r3, #1
 800294e:	2300      	movhi	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0e7      	b.n	8002b2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4a78      	ldr	r2, [pc, #480]	; (8002b40 <HAL_I2C_Init+0x280>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	0c9b      	lsrs	r3, r3, #18
 8002964:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	430a      	orrs	r2, r1
 8002978:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4a6a      	ldr	r2, [pc, #424]	; (8002b34 <HAL_I2C_Init+0x274>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d802      	bhi.n	8002994 <HAL_I2C_Init+0xd4>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	3301      	adds	r3, #1
 8002992:	e009      	b.n	80029a8 <HAL_I2C_Init+0xe8>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	4a69      	ldr	r2, [pc, #420]	; (8002b44 <HAL_I2C_Init+0x284>)
 80029a0:	fba2 2303 	umull	r2, r3, r2, r3
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	3301      	adds	r3, #1
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	430b      	orrs	r3, r1
 80029ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	495c      	ldr	r1, [pc, #368]	; (8002b34 <HAL_I2C_Init+0x274>)
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d819      	bhi.n	80029fc <HAL_I2C_Init+0x13c>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1e59      	subs	r1, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d6:	1c59      	adds	r1, r3, #1
 80029d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029dc:	400b      	ands	r3, r1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_I2C_Init+0x138>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1e59      	subs	r1, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f6:	e051      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 80029f8:	2304      	movs	r3, #4
 80029fa:	e04f      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d111      	bne.n	8002a28 <HAL_I2C_Init+0x168>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1e58      	subs	r0, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	440b      	add	r3, r1
 8002a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	e012      	b.n	8002a4e <HAL_I2C_Init+0x18e>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1e58      	subs	r0, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	0099      	lsls	r1, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Init+0x196>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e022      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10e      	bne.n	8002a7c <HAL_I2C_Init+0x1bc>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1e58      	subs	r0, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6859      	ldr	r1, [r3, #4]
 8002a66:	460b      	mov	r3, r1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	440b      	add	r3, r1
 8002a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a70:	3301      	adds	r3, #1
 8002a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a7a:	e00f      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1e58      	subs	r0, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	0099      	lsls	r1, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	6809      	ldr	r1, [r1, #0]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6911      	ldr	r1, [r2, #16]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68d2      	ldr	r2, [r2, #12]
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6812      	ldr	r2, [r2, #0]
 8002adc:	430b      	orrs	r3, r1
 8002ade:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	000186a0 	.word	0x000186a0
 8002b38:	001e847f 	.word	0x001e847f
 8002b3c:	003d08ff 	.word	0x003d08ff
 8002b40:	431bde83 	.word	0x431bde83
 8002b44:	10624dd3 	.word	0x10624dd3

08002b48 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e128      	b.n	8002dac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a90      	ldr	r2, [pc, #576]	; (8002db4 <HAL_I2S_Init+0x26c>)
 8002b72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7fe f81b 	bl	8000bb0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002b90:	f023 030f 	bic.w	r3, r3, #15
 8002b94:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d060      	beq.n	8002c68 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d102      	bne.n	8002bb4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002bae:	2310      	movs	r3, #16
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	e001      	b.n	8002bb8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002bb4:	2320      	movs	r3, #32
 8002bb6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d802      	bhi.n	8002bc6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	f001 f9d8 	bl	8003f7c <HAL_RCCEx_GetPeriphCLKFreq>
 8002bcc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd6:	d125      	bne.n	8002c24 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d010      	beq.n	8002c02 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	3305      	adds	r3, #5
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	e01f      	b.n	8002c42 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	461a      	mov	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1e:	3305      	adds	r3, #5
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	e00e      	b.n	8002c42 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	461a      	mov	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3e:	3305      	adds	r3, #5
 8002c40:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4a5c      	ldr	r2, [pc, #368]	; (8002db8 <HAL_I2S_Init+0x270>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	08db      	lsrs	r3, r3, #3
 8002c4c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	e003      	b.n	8002c70 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d902      	bls.n	8002c7c <HAL_I2S_Init+0x134>
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	2bff      	cmp	r3, #255	; 0xff
 8002c7a:	d907      	bls.n	8002c8c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c80:	f043 0210 	orr.w	r2, r3, #16
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e08f      	b.n	8002dac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	ea42 0103 	orr.w	r1, r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002caa:	f023 030f 	bic.w	r3, r3, #15
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6851      	ldr	r1, [r2, #4]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6892      	ldr	r2, [r2, #8]
 8002cb6:	4311      	orrs	r1, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68d2      	ldr	r2, [r2, #12]
 8002cbc:	4311      	orrs	r1, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6992      	ldr	r2, [r2, #24]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d161      	bne.n	8002d9c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a38      	ldr	r2, [pc, #224]	; (8002dbc <HAL_I2S_Init+0x274>)
 8002cdc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a37      	ldr	r2, [pc, #220]	; (8002dc0 <HAL_I2S_Init+0x278>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d101      	bne.n	8002cec <HAL_I2S_Init+0x1a4>
 8002ce8:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <HAL_I2S_Init+0x27c>)
 8002cea:	e001      	b.n	8002cf0 <HAL_I2S_Init+0x1a8>
 8002cec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	4932      	ldr	r1, [pc, #200]	; (8002dc0 <HAL_I2S_Init+0x278>)
 8002cf8:	428a      	cmp	r2, r1
 8002cfa:	d101      	bne.n	8002d00 <HAL_I2S_Init+0x1b8>
 8002cfc:	4a31      	ldr	r2, [pc, #196]	; (8002dc4 <HAL_I2S_Init+0x27c>)
 8002cfe:	e001      	b.n	8002d04 <HAL_I2S_Init+0x1bc>
 8002d00:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002d04:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002d08:	f023 030f 	bic.w	r3, r3, #15
 8002d0c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a2b      	ldr	r2, [pc, #172]	; (8002dc0 <HAL_I2S_Init+0x278>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d101      	bne.n	8002d1c <HAL_I2S_Init+0x1d4>
 8002d18:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <HAL_I2S_Init+0x27c>)
 8002d1a:	e001      	b.n	8002d20 <HAL_I2S_Init+0x1d8>
 8002d1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d20:	2202      	movs	r2, #2
 8002d22:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a25      	ldr	r2, [pc, #148]	; (8002dc0 <HAL_I2S_Init+0x278>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d101      	bne.n	8002d32 <HAL_I2S_Init+0x1ea>
 8002d2e:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <HAL_I2S_Init+0x27c>)
 8002d30:	e001      	b.n	8002d36 <HAL_I2S_Init+0x1ee>
 8002d32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d42:	d003      	beq.n	8002d4c <HAL_I2S_Init+0x204>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d103      	bne.n	8002d54 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	e001      	b.n	8002d58 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002d54:	2300      	movs	r3, #0
 8002d56:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002d62:	4313      	orrs	r3, r2
 8002d64:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002d76:	4313      	orrs	r3, r2
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	897b      	ldrh	r3, [r7, #10]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d84:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a0d      	ldr	r2, [pc, #52]	; (8002dc0 <HAL_I2S_Init+0x278>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d101      	bne.n	8002d94 <HAL_I2S_Init+0x24c>
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <HAL_I2S_Init+0x27c>)
 8002d92:	e001      	b.n	8002d98 <HAL_I2S_Init+0x250>
 8002d94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d98:	897a      	ldrh	r2, [r7, #10]
 8002d9a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	08002ebf 	.word	0x08002ebf
 8002db8:	cccccccd 	.word	0xcccccccd
 8002dbc:	08002fd5 	.word	0x08002fd5
 8002dc0:	40003800 	.word	0x40003800
 8002dc4:	40003400 	.word	0x40003400

08002dc8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	881a      	ldrh	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	1c9a      	adds	r2, r3, #2
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10e      	bne.n	8002e58 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e48:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff ffb8 	bl	8002dc8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e72:	b292      	uxth	r2, r2
 8002e74:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	1c9a      	adds	r2, r3, #2
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10e      	bne.n	8002eb6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ea6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ff93 	bl	8002ddc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b086      	sub	sp, #24
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d13a      	bne.n	8002f50 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d109      	bne.n	8002ef8 <I2S_IRQHandler+0x3a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eee:	2b40      	cmp	r3, #64	; 0x40
 8002ef0:	d102      	bne.n	8002ef8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ffb4 	bl	8002e60 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efe:	2b40      	cmp	r3, #64	; 0x40
 8002f00:	d126      	bne.n	8002f50 <I2S_IRQHandler+0x92>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d11f      	bne.n	8002f50 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f1e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f20:	2300      	movs	r3, #0
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f043 0202 	orr.w	r2, r3, #2
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff ff50 	bl	8002df0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d136      	bne.n	8002fca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d109      	bne.n	8002f7a <I2S_IRQHandler+0xbc>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d102      	bne.n	8002f7a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff ff45 	bl	8002e04 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d122      	bne.n	8002fca <I2S_IRQHandler+0x10c>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d11b      	bne.n	8002fca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fa0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbc:	f043 0204 	orr.w	r2, r3, #4
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff ff13 	bl	8002df0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fca:	bf00      	nop
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a92      	ldr	r2, [pc, #584]	; (8003234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002fee:	4b92      	ldr	r3, [pc, #584]	; (8003238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ff0:	e001      	b.n	8002ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002ff2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a8b      	ldr	r2, [pc, #556]	; (8003234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d101      	bne.n	8003010 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800300c:	4b8a      	ldr	r3, [pc, #552]	; (8003238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800300e:	e001      	b.n	8003014 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003010:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003020:	d004      	beq.n	800302c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f040 8099 	bne.w	800315e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b02      	cmp	r3, #2
 8003034:	d107      	bne.n	8003046 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f925 	bl	8003290 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b01      	cmp	r3, #1
 800304e:	d107      	bne.n	8003060 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f9c8 	bl	80033f0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b40      	cmp	r3, #64	; 0x40
 8003068:	d13a      	bne.n	80030e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d035      	beq.n	80030e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a6e      	ldr	r2, [pc, #440]	; (8003234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d101      	bne.n	8003082 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800307e:	4b6e      	ldr	r3, [pc, #440]	; (8003238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003080:	e001      	b.n	8003086 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003082:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4969      	ldr	r1, [pc, #420]	; (8003234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800308e:	428b      	cmp	r3, r1
 8003090:	d101      	bne.n	8003096 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003092:	4b69      	ldr	r3, [pc, #420]	; (8003238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003094:	e001      	b.n	800309a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003096:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800309a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800309e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	f043 0202 	orr.w	r2, r3, #2
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff fe88 	bl	8002df0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	f040 80c3 	bne.w	8003272 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80bd 	beq.w	8003272 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003106:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a49      	ldr	r2, [pc, #292]	; (8003234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d101      	bne.n	8003116 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003112:	4b49      	ldr	r3, [pc, #292]	; (8003238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003114:	e001      	b.n	800311a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003116:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4944      	ldr	r1, [pc, #272]	; (8003234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003122:	428b      	cmp	r3, r1
 8003124:	d101      	bne.n	800312a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003126:	4b44      	ldr	r3, [pc, #272]	; (8003238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003128:	e001      	b.n	800312e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800312a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800312e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003132:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003134:	2300      	movs	r3, #0
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f043 0204 	orr.w	r2, r3, #4
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff fe4a 	bl	8002df0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800315c:	e089      	b.n	8003272 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b02      	cmp	r3, #2
 8003166:	d107      	bne.n	8003178 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f8be 	bl	80032f4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b01      	cmp	r3, #1
 8003180:	d107      	bne.n	8003192 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f8fd 	bl	800338c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003198:	2b40      	cmp	r3, #64	; 0x40
 800319a:	d12f      	bne.n	80031fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d02a      	beq.n	80031fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031b4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d101      	bne.n	80031c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80031c0:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031c2:	e001      	b.n	80031c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80031c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4919      	ldr	r1, [pc, #100]	; (8003234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031d0:	428b      	cmp	r3, r1
 80031d2:	d101      	bne.n	80031d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80031d4:	4b18      	ldr	r3, [pc, #96]	; (8003238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031d6:	e001      	b.n	80031dc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80031d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f043 0202 	orr.w	r2, r3, #2
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff fdfa 	bl	8002df0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b08      	cmp	r3, #8
 8003204:	d136      	bne.n	8003274 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d031      	beq.n	8003274 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a07      	ldr	r2, [pc, #28]	; (8003234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800321c:	e001      	b.n	8003222 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800321e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4902      	ldr	r1, [pc, #8]	; (8003234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800322a:	428b      	cmp	r3, r1
 800322c:	d106      	bne.n	800323c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800322e:	4b02      	ldr	r3, [pc, #8]	; (8003238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003230:	e006      	b.n	8003240 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003232:	bf00      	nop
 8003234:	40003800 	.word	0x40003800
 8003238:	40003400 	.word	0x40003400
 800323c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003240:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003244:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003254:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	f043 0204 	orr.w	r2, r3, #4
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff fdc0 	bl	8002df0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003270:	e000      	b.n	8003274 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003272:	bf00      	nop
}
 8003274:	bf00      	nop
 8003276:	3720      	adds	r7, #32
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	1c99      	adds	r1, r3, #2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6251      	str	r1, [r2, #36]	; 0x24
 80032a2:	881a      	ldrh	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d113      	bne.n	80032ea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d106      	bne.n	80032ea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ffc9 	bl	800327c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	1c99      	adds	r1, r3, #2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6251      	str	r1, [r2, #36]	; 0x24
 8003306:	8819      	ldrh	r1, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1d      	ldr	r2, [pc, #116]	; (8003384 <I2SEx_TxISR_I2SExt+0x90>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d101      	bne.n	8003316 <I2SEx_TxISR_I2SExt+0x22>
 8003312:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <I2SEx_TxISR_I2SExt+0x94>)
 8003314:	e001      	b.n	800331a <I2SEx_TxISR_I2SExt+0x26>
 8003316:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800331a:	460a      	mov	r2, r1
 800331c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d121      	bne.n	800337a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a12      	ldr	r2, [pc, #72]	; (8003384 <I2SEx_TxISR_I2SExt+0x90>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d101      	bne.n	8003344 <I2SEx_TxISR_I2SExt+0x50>
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <I2SEx_TxISR_I2SExt+0x94>)
 8003342:	e001      	b.n	8003348 <I2SEx_TxISR_I2SExt+0x54>
 8003344:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	490d      	ldr	r1, [pc, #52]	; (8003384 <I2SEx_TxISR_I2SExt+0x90>)
 8003350:	428b      	cmp	r3, r1
 8003352:	d101      	bne.n	8003358 <I2SEx_TxISR_I2SExt+0x64>
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <I2SEx_TxISR_I2SExt+0x94>)
 8003356:	e001      	b.n	800335c <I2SEx_TxISR_I2SExt+0x68>
 8003358:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800335c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003360:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d106      	bne.n	800337a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff ff81 	bl	800327c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40003800 	.word	0x40003800
 8003388:	40003400 	.word	0x40003400

0800338c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68d8      	ldr	r0, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339e:	1c99      	adds	r1, r3, #2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80033a4:	b282      	uxth	r2, r0
 80033a6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d113      	bne.n	80033e8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033ce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff ff4a 	bl	800327c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a20      	ldr	r2, [pc, #128]	; (8003480 <I2SEx_RxISR_I2SExt+0x90>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d101      	bne.n	8003406 <I2SEx_RxISR_I2SExt+0x16>
 8003402:	4b20      	ldr	r3, [pc, #128]	; (8003484 <I2SEx_RxISR_I2SExt+0x94>)
 8003404:	e001      	b.n	800340a <I2SEx_RxISR_I2SExt+0x1a>
 8003406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800340a:	68d8      	ldr	r0, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	1c99      	adds	r1, r3, #2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003416:	b282      	uxth	r2, r0
 8003418:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d121      	bne.n	8003476 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a12      	ldr	r2, [pc, #72]	; (8003480 <I2SEx_RxISR_I2SExt+0x90>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d101      	bne.n	8003440 <I2SEx_RxISR_I2SExt+0x50>
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <I2SEx_RxISR_I2SExt+0x94>)
 800343e:	e001      	b.n	8003444 <I2SEx_RxISR_I2SExt+0x54>
 8003440:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	490d      	ldr	r1, [pc, #52]	; (8003480 <I2SEx_RxISR_I2SExt+0x90>)
 800344c:	428b      	cmp	r3, r1
 800344e:	d101      	bne.n	8003454 <I2SEx_RxISR_I2SExt+0x64>
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <I2SEx_RxISR_I2SExt+0x94>)
 8003452:	e001      	b.n	8003458 <I2SEx_RxISR_I2SExt+0x68>
 8003454:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003458:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800345c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d106      	bne.n	8003476 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff ff03 	bl	800327c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40003800 	.word	0x40003800
 8003484:	40003400 	.word	0x40003400

08003488 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e267      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d075      	beq.n	8003592 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034a6:	4b88      	ldr	r3, [pc, #544]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d00c      	beq.n	80034cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034b2:	4b85      	ldr	r3, [pc, #532]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d112      	bne.n	80034e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034be:	4b82      	ldr	r3, [pc, #520]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ca:	d10b      	bne.n	80034e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034cc:	4b7e      	ldr	r3, [pc, #504]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d05b      	beq.n	8003590 <HAL_RCC_OscConfig+0x108>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d157      	bne.n	8003590 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e242      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ec:	d106      	bne.n	80034fc <HAL_RCC_OscConfig+0x74>
 80034ee:	4b76      	ldr	r3, [pc, #472]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a75      	ldr	r2, [pc, #468]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	e01d      	b.n	8003538 <HAL_RCC_OscConfig+0xb0>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0x98>
 8003506:	4b70      	ldr	r3, [pc, #448]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a6f      	ldr	r2, [pc, #444]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 800350c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	4b6d      	ldr	r3, [pc, #436]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a6c      	ldr	r2, [pc, #432]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	e00b      	b.n	8003538 <HAL_RCC_OscConfig+0xb0>
 8003520:	4b69      	ldr	r3, [pc, #420]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a68      	ldr	r2, [pc, #416]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	4b66      	ldr	r3, [pc, #408]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a65      	ldr	r2, [pc, #404]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d013      	beq.n	8003568 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fd fdba 	bl	80010b8 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003548:	f7fd fdb6 	bl	80010b8 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	; 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e207      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	4b5b      	ldr	r3, [pc, #364]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0xc0>
 8003566:	e014      	b.n	8003592 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fd fda6 	bl	80010b8 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003570:	f7fd fda2 	bl	80010b8 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	; 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e1f3      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003582:	4b51      	ldr	r3, [pc, #324]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0xe8>
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d063      	beq.n	8003666 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800359e:	4b4a      	ldr	r3, [pc, #296]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00b      	beq.n	80035c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035aa:	4b47      	ldr	r3, [pc, #284]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d11c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035b6:	4b44      	ldr	r3, [pc, #272]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d116      	bne.n	80035f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c2:	4b41      	ldr	r3, [pc, #260]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_RCC_OscConfig+0x152>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d001      	beq.n	80035da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e1c7      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035da:	4b3b      	ldr	r3, [pc, #236]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4937      	ldr	r1, [pc, #220]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ee:	e03a      	b.n	8003666 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d020      	beq.n	800363a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f8:	4b34      	ldr	r3, [pc, #208]	; (80036cc <HAL_RCC_OscConfig+0x244>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fd fd5b 	bl	80010b8 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003606:	f7fd fd57 	bl	80010b8 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e1a8      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003618:	4b2b      	ldr	r3, [pc, #172]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003624:	4b28      	ldr	r3, [pc, #160]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4925      	ldr	r1, [pc, #148]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003634:	4313      	orrs	r3, r2
 8003636:	600b      	str	r3, [r1, #0]
 8003638:	e015      	b.n	8003666 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800363a:	4b24      	ldr	r3, [pc, #144]	; (80036cc <HAL_RCC_OscConfig+0x244>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fd fd3a 	bl	80010b8 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003648:	f7fd fd36 	bl	80010b8 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e187      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365a:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d036      	beq.n	80036e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d016      	beq.n	80036a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <HAL_RCC_OscConfig+0x248>)
 800367c:	2201      	movs	r2, #1
 800367e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003680:	f7fd fd1a 	bl	80010b8 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003688:	f7fd fd16 	bl	80010b8 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e167      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369a:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCC_OscConfig+0x240>)
 800369c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x200>
 80036a6:	e01b      	b.n	80036e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a8:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <HAL_RCC_OscConfig+0x248>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ae:	f7fd fd03 	bl	80010b8 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b4:	e00e      	b.n	80036d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036b6:	f7fd fcff 	bl	80010b8 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d907      	bls.n	80036d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e150      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
 80036c8:	40023800 	.word	0x40023800
 80036cc:	42470000 	.word	0x42470000
 80036d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d4:	4b88      	ldr	r3, [pc, #544]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 80036d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1ea      	bne.n	80036b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 8097 	beq.w	800381c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ee:	2300      	movs	r3, #0
 80036f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f2:	4b81      	ldr	r3, [pc, #516]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10f      	bne.n	800371e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	4b7d      	ldr	r3, [pc, #500]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	4a7c      	ldr	r2, [pc, #496]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370c:	6413      	str	r3, [r2, #64]	; 0x40
 800370e:	4b7a      	ldr	r3, [pc, #488]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800371a:	2301      	movs	r3, #1
 800371c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371e:	4b77      	ldr	r3, [pc, #476]	; (80038fc <HAL_RCC_OscConfig+0x474>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003726:	2b00      	cmp	r3, #0
 8003728:	d118      	bne.n	800375c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800372a:	4b74      	ldr	r3, [pc, #464]	; (80038fc <HAL_RCC_OscConfig+0x474>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a73      	ldr	r2, [pc, #460]	; (80038fc <HAL_RCC_OscConfig+0x474>)
 8003730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003736:	f7fd fcbf 	bl	80010b8 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373e:	f7fd fcbb 	bl	80010b8 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e10c      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003750:	4b6a      	ldr	r3, [pc, #424]	; (80038fc <HAL_RCC_OscConfig+0x474>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d106      	bne.n	8003772 <HAL_RCC_OscConfig+0x2ea>
 8003764:	4b64      	ldr	r3, [pc, #400]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	4a63      	ldr	r2, [pc, #396]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	6713      	str	r3, [r2, #112]	; 0x70
 8003770:	e01c      	b.n	80037ac <HAL_RCC_OscConfig+0x324>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b05      	cmp	r3, #5
 8003778:	d10c      	bne.n	8003794 <HAL_RCC_OscConfig+0x30c>
 800377a:	4b5f      	ldr	r3, [pc, #380]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	4a5e      	ldr	r2, [pc, #376]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003780:	f043 0304 	orr.w	r3, r3, #4
 8003784:	6713      	str	r3, [r2, #112]	; 0x70
 8003786:	4b5c      	ldr	r3, [pc, #368]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378a:	4a5b      	ldr	r2, [pc, #364]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6713      	str	r3, [r2, #112]	; 0x70
 8003792:	e00b      	b.n	80037ac <HAL_RCC_OscConfig+0x324>
 8003794:	4b58      	ldr	r3, [pc, #352]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	4a57      	ldr	r2, [pc, #348]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 800379a:	f023 0301 	bic.w	r3, r3, #1
 800379e:	6713      	str	r3, [r2, #112]	; 0x70
 80037a0:	4b55      	ldr	r3, [pc, #340]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 80037a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a4:	4a54      	ldr	r2, [pc, #336]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 80037a6:	f023 0304 	bic.w	r3, r3, #4
 80037aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d015      	beq.n	80037e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b4:	f7fd fc80 	bl	80010b8 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ba:	e00a      	b.n	80037d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037bc:	f7fd fc7c 	bl	80010b8 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e0cb      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d2:	4b49      	ldr	r3, [pc, #292]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0ee      	beq.n	80037bc <HAL_RCC_OscConfig+0x334>
 80037de:	e014      	b.n	800380a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e0:	f7fd fc6a 	bl	80010b8 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e8:	f7fd fc66 	bl	80010b8 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e0b5      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037fe:	4b3e      	ldr	r3, [pc, #248]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1ee      	bne.n	80037e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003810:	4b39      	ldr	r3, [pc, #228]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	4a38      	ldr	r2, [pc, #224]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800381a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80a1 	beq.w	8003968 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003826:	4b34      	ldr	r3, [pc, #208]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b08      	cmp	r3, #8
 8003830:	d05c      	beq.n	80038ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d141      	bne.n	80038be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383a:	4b31      	ldr	r3, [pc, #196]	; (8003900 <HAL_RCC_OscConfig+0x478>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fd fc3a 	bl	80010b8 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003848:	f7fd fc36 	bl	80010b8 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e087      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385a:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69da      	ldr	r2, [r3, #28]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	019b      	lsls	r3, r3, #6
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	3b01      	subs	r3, #1
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	061b      	lsls	r3, r3, #24
 800388a:	491b      	ldr	r1, [pc, #108]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003890:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <HAL_RCC_OscConfig+0x478>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003896:	f7fd fc0f 	bl	80010b8 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389e:	f7fd fc0b 	bl	80010b8 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e05c      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b0:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0x416>
 80038bc:	e054      	b.n	8003968 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_RCC_OscConfig+0x478>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fd fbf8 	bl	80010b8 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fd fbf4 	bl	80010b8 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e045      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_RCC_OscConfig+0x470>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x444>
 80038ea:	e03d      	b.n	8003968 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d107      	bne.n	8003904 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e038      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40007000 	.word	0x40007000
 8003900:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003904:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <HAL_RCC_OscConfig+0x4ec>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d028      	beq.n	8003964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d121      	bne.n	8003964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d11a      	bne.n	8003964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003934:	4013      	ands	r3, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800393a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800393c:	4293      	cmp	r3, r2
 800393e:	d111      	bne.n	8003964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	3b01      	subs	r3, #1
 800394e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d107      	bne.n	8003964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800

08003978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0cc      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800398c:	4b68      	ldr	r3, [pc, #416]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d90c      	bls.n	80039b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b65      	ldr	r3, [pc, #404]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b63      	ldr	r3, [pc, #396]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0b8      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d020      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039cc:	4b59      	ldr	r3, [pc, #356]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4a58      	ldr	r2, [pc, #352]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039e4:	4b53      	ldr	r3, [pc, #332]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a52      	ldr	r2, [pc, #328]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f0:	4b50      	ldr	r3, [pc, #320]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	494d      	ldr	r1, [pc, #308]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d044      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d119      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e07f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d003      	beq.n	8003a36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a36:	4b3f      	ldr	r3, [pc, #252]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e06f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a46:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e067      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a56:	4b37      	ldr	r3, [pc, #220]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f023 0203 	bic.w	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4934      	ldr	r1, [pc, #208]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a68:	f7fd fb26 	bl	80010b8 <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a70:	f7fd fb22 	bl	80010b8 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e04f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	4b2b      	ldr	r3, [pc, #172]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 020c 	and.w	r2, r3, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d1eb      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a98:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d20c      	bcs.n	8003ac0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aae:	4b20      	ldr	r3, [pc, #128]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e032      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003acc:	4b19      	ldr	r3, [pc, #100]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4916      	ldr	r1, [pc, #88]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aea:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	490e      	ldr	r1, [pc, #56]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003afe:	f000 f821 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 8003b02:	4602      	mov	r2, r0
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	490a      	ldr	r1, [pc, #40]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003b10:	5ccb      	ldrb	r3, [r1, r3]
 8003b12:	fa22 f303 	lsr.w	r3, r2, r3
 8003b16:	4a09      	ldr	r2, [pc, #36]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b1a:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fd fa86 	bl	8001030 <HAL_InitTick>

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40023c00 	.word	0x40023c00
 8003b34:	40023800 	.word	0x40023800
 8003b38:	0800966c 	.word	0x0800966c
 8003b3c:	20000000 	.word	0x20000000
 8003b40:	20000004 	.word	0x20000004

08003b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b48:	b094      	sub	sp, #80	; 0x50
 8003b4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b50:	2300      	movs	r3, #0
 8003b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b54:	2300      	movs	r3, #0
 8003b56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b5c:	4b79      	ldr	r3, [pc, #484]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 030c 	and.w	r3, r3, #12
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d00d      	beq.n	8003b84 <HAL_RCC_GetSysClockFreq+0x40>
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	f200 80e1 	bhi.w	8003d30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_RCC_GetSysClockFreq+0x34>
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d003      	beq.n	8003b7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b76:	e0db      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b78:	4b73      	ldr	r3, [pc, #460]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b7c:	e0db      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b7e:	4b73      	ldr	r3, [pc, #460]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x208>)
 8003b80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b82:	e0d8      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b84:	4b6f      	ldr	r3, [pc, #444]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b8e:	4b6d      	ldr	r3, [pc, #436]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d063      	beq.n	8003c62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b9a:	4b6a      	ldr	r3, [pc, #424]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	099b      	lsrs	r3, r3, #6
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ba4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bac:	633b      	str	r3, [r7, #48]	; 0x30
 8003bae:	2300      	movs	r3, #0
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003bb6:	4622      	mov	r2, r4
 8003bb8:	462b      	mov	r3, r5
 8003bba:	f04f 0000 	mov.w	r0, #0
 8003bbe:	f04f 0100 	mov.w	r1, #0
 8003bc2:	0159      	lsls	r1, r3, #5
 8003bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bc8:	0150      	lsls	r0, r2, #5
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4621      	mov	r1, r4
 8003bd0:	1a51      	subs	r1, r2, r1
 8003bd2:	6139      	str	r1, [r7, #16]
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003be8:	4659      	mov	r1, fp
 8003bea:	018b      	lsls	r3, r1, #6
 8003bec:	4651      	mov	r1, sl
 8003bee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bf2:	4651      	mov	r1, sl
 8003bf4:	018a      	lsls	r2, r1, #6
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	ebb2 0801 	subs.w	r8, r2, r1
 8003bfc:	4659      	mov	r1, fp
 8003bfe:	eb63 0901 	sbc.w	r9, r3, r1
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c16:	4690      	mov	r8, r2
 8003c18:	4699      	mov	r9, r3
 8003c1a:	4623      	mov	r3, r4
 8003c1c:	eb18 0303 	adds.w	r3, r8, r3
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	462b      	mov	r3, r5
 8003c24:	eb49 0303 	adc.w	r3, r9, r3
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c36:	4629      	mov	r1, r5
 8003c38:	024b      	lsls	r3, r1, #9
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c40:	4621      	mov	r1, r4
 8003c42:	024a      	lsls	r2, r1, #9
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c54:	f7fc fabc 	bl	80001d0 <__aeabi_uldivmod>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c60:	e058      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c62:	4b38      	ldr	r3, [pc, #224]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	099b      	lsrs	r3, r3, #6
 8003c68:	2200      	movs	r2, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c72:	623b      	str	r3, [r7, #32]
 8003c74:	2300      	movs	r3, #0
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
 8003c78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c7c:	4642      	mov	r2, r8
 8003c7e:	464b      	mov	r3, r9
 8003c80:	f04f 0000 	mov.w	r0, #0
 8003c84:	f04f 0100 	mov.w	r1, #0
 8003c88:	0159      	lsls	r1, r3, #5
 8003c8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c8e:	0150      	lsls	r0, r2, #5
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4641      	mov	r1, r8
 8003c96:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c9a:	4649      	mov	r1, r9
 8003c9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cb4:	ebb2 040a 	subs.w	r4, r2, sl
 8003cb8:	eb63 050b 	sbc.w	r5, r3, fp
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	00eb      	lsls	r3, r5, #3
 8003cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cca:	00e2      	lsls	r2, r4, #3
 8003ccc:	4614      	mov	r4, r2
 8003cce:	461d      	mov	r5, r3
 8003cd0:	4643      	mov	r3, r8
 8003cd2:	18e3      	adds	r3, r4, r3
 8003cd4:	603b      	str	r3, [r7, #0]
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	eb45 0303 	adc.w	r3, r5, r3
 8003cdc:	607b      	str	r3, [r7, #4]
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cea:	4629      	mov	r1, r5
 8003cec:	028b      	lsls	r3, r1, #10
 8003cee:	4621      	mov	r1, r4
 8003cf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	028a      	lsls	r2, r1, #10
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cfe:	2200      	movs	r2, #0
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	61fa      	str	r2, [r7, #28]
 8003d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d08:	f7fc fa62 	bl	80001d0 <__aeabi_uldivmod>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4613      	mov	r3, r2
 8003d12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	0c1b      	lsrs	r3, r3, #16
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	3301      	adds	r3, #1
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d2e:	e002      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d30:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3750      	adds	r7, #80	; 0x50
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800
 8003d48:	00f42400 	.word	0x00f42400
 8003d4c:	007a1200 	.word	0x007a1200

08003d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d56:	681b      	ldr	r3, [r3, #0]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000000 	.word	0x20000000

08003d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d6c:	f7ff fff0 	bl	8003d50 <HAL_RCC_GetHCLKFreq>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	0a9b      	lsrs	r3, r3, #10
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	4903      	ldr	r1, [pc, #12]	; (8003d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d7e:	5ccb      	ldrb	r3, [r1, r3]
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	0800967c 	.word	0x0800967c

08003d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d94:	f7ff ffdc 	bl	8003d50 <HAL_RCC_GetHCLKFreq>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	0b5b      	lsrs	r3, r3, #13
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	4903      	ldr	r1, [pc, #12]	; (8003db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003da6:	5ccb      	ldrb	r3, [r1, r3]
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40023800 	.word	0x40023800
 8003db4:	0800967c 	.word	0x0800967c

08003db8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d035      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003de0:	4b62      	ldr	r3, [pc, #392]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003de6:	f7fd f967 	bl	80010b8 <HAL_GetTick>
 8003dea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dec:	e008      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003dee:	f7fd f963 	bl	80010b8 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e0b0      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e00:	4b5b      	ldr	r3, [pc, #364]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f0      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	019a      	lsls	r2, r3, #6
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	071b      	lsls	r3, r3, #28
 8003e18:	4955      	ldr	r1, [pc, #340]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e20:	4b52      	ldr	r3, [pc, #328]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e26:	f7fd f947 	bl	80010b8 <HAL_GetTick>
 8003e2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e2e:	f7fd f943 	bl	80010b8 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e090      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e40:	4b4b      	ldr	r3, [pc, #300]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8083 	beq.w	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	4b44      	ldr	r3, [pc, #272]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	4a43      	ldr	r2, [pc, #268]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e68:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6a:	4b41      	ldr	r3, [pc, #260]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e76:	4b3f      	ldr	r3, [pc, #252]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a3e      	ldr	r2, [pc, #248]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e82:	f7fd f919 	bl	80010b8 <HAL_GetTick>
 8003e86:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e8a:	f7fd f915 	bl	80010b8 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e062      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e9c:	4b35      	ldr	r3, [pc, #212]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ea8:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d02f      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d028      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ece:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ed0:	4b29      	ldr	r3, [pc, #164]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed6:	4b28      	ldr	r3, [pc, #160]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003edc:	4a24      	ldr	r2, [pc, #144]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ee2:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d114      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003eee:	f7fd f8e3 	bl	80010b8 <HAL_GetTick>
 8003ef2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef4:	e00a      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef6:	f7fd f8df 	bl	80010b8 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e02a      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0c:	4b18      	ldr	r3, [pc, #96]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0ee      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f24:	d10d      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f26:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f3a:	490d      	ldr	r1, [pc, #52]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	608b      	str	r3, [r1, #8]
 8003f40:	e005      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f42:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f48:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f4c:	6093      	str	r3, [r2, #8]
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5a:	4905      	ldr	r1, [pc, #20]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	42470068 	.word	0x42470068
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40007000 	.word	0x40007000
 8003f78:	42470e40 	.word	0x42470e40

08003f7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d13e      	bne.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003f9a:	4b23      	ldr	r3, [pc, #140]	; (8004028 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d12f      	bne.n	8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003fb0:	4b1e      	ldr	r3, [pc, #120]	; (800402c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003fb2:	617b      	str	r3, [r7, #20]
          break;
 8003fb4:	e02f      	b.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003fb6:	4b1c      	ldr	r3, [pc, #112]	; (8004028 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc2:	d108      	bne.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003fc4:	4b18      	ldr	r3, [pc, #96]	; (8004028 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fcc:	4a18      	ldr	r2, [pc, #96]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	e007      	b.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003fd6:	4b14      	ldr	r3, [pc, #80]	; (8004028 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fde:	4a15      	ldr	r2, [pc, #84]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fec:	099b      	lsrs	r3, r3, #6
 8003fee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	fb02 f303 	mul.w	r3, r2, r3
 8003ff8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004000:	0f1b      	lsrs	r3, r3, #28
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	fbb2 f3f3 	udiv	r3, r2, r3
 800400c:	617b      	str	r3, [r7, #20]
          break;
 800400e:	e002      	b.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
          break;
 8004014:	bf00      	nop
        }
      }
      break;
 8004016:	bf00      	nop
    }
  }
  return frequency;
 8004018:	697b      	ldr	r3, [r7, #20]
}
 800401a:	4618      	mov	r0, r3
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800
 800402c:	00bb8000 	.word	0x00bb8000
 8004030:	007a1200 	.word	0x007a1200
 8004034:	00f42400 	.word	0x00f42400

08004038 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e07b      	b.n	8004142 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	2b00      	cmp	r3, #0
 8004050:	d108      	bne.n	8004064 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800405a:	d009      	beq.n	8004070 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	61da      	str	r2, [r3, #28]
 8004062:	e005      	b.n	8004070 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fc fe10 	bl	8000cb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f4:	ea42 0103 	orr.w	r1, r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	0c1b      	lsrs	r3, r3, #16
 800410e:	f003 0104 	and.w	r1, r3, #4
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	f003 0210 	and.w	r2, r3, #16
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69da      	ldr	r2, [r3, #28]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004130:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e03f      	b.n	80041dc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7fc fde5 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2224      	movs	r2, #36	; 0x24
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800418c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f828 	bl	80041e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e8:	b0c0      	sub	sp, #256	; 0x100
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004200:	68d9      	ldr	r1, [r3, #12]
 8004202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	ea40 0301 	orr.w	r3, r0, r1
 800420c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800420e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	431a      	orrs	r2, r3
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	431a      	orrs	r2, r3
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800423c:	f021 010c 	bic.w	r1, r1, #12
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800424a:	430b      	orrs	r3, r1
 800424c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800424e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800425a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425e:	6999      	ldr	r1, [r3, #24]
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	ea40 0301 	orr.w	r3, r0, r1
 800426a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4b8f      	ldr	r3, [pc, #572]	; (80044b0 <UART_SetConfig+0x2cc>)
 8004274:	429a      	cmp	r2, r3
 8004276:	d005      	beq.n	8004284 <UART_SetConfig+0xa0>
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4b8d      	ldr	r3, [pc, #564]	; (80044b4 <UART_SetConfig+0x2d0>)
 8004280:	429a      	cmp	r2, r3
 8004282:	d104      	bne.n	800428e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004284:	f7ff fd84 	bl	8003d90 <HAL_RCC_GetPCLK2Freq>
 8004288:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800428c:	e003      	b.n	8004296 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800428e:	f7ff fd6b 	bl	8003d68 <HAL_RCC_GetPCLK1Freq>
 8004292:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a0:	f040 810c 	bne.w	80044bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042a8:	2200      	movs	r2, #0
 80042aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042b6:	4622      	mov	r2, r4
 80042b8:	462b      	mov	r3, r5
 80042ba:	1891      	adds	r1, r2, r2
 80042bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80042be:	415b      	adcs	r3, r3
 80042c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042c6:	4621      	mov	r1, r4
 80042c8:	eb12 0801 	adds.w	r8, r2, r1
 80042cc:	4629      	mov	r1, r5
 80042ce:	eb43 0901 	adc.w	r9, r3, r1
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042e6:	4690      	mov	r8, r2
 80042e8:	4699      	mov	r9, r3
 80042ea:	4623      	mov	r3, r4
 80042ec:	eb18 0303 	adds.w	r3, r8, r3
 80042f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042f4:	462b      	mov	r3, r5
 80042f6:	eb49 0303 	adc.w	r3, r9, r3
 80042fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800430a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800430e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004312:	460b      	mov	r3, r1
 8004314:	18db      	adds	r3, r3, r3
 8004316:	653b      	str	r3, [r7, #80]	; 0x50
 8004318:	4613      	mov	r3, r2
 800431a:	eb42 0303 	adc.w	r3, r2, r3
 800431e:	657b      	str	r3, [r7, #84]	; 0x54
 8004320:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004324:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004328:	f7fb ff52 	bl	80001d0 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4b61      	ldr	r3, [pc, #388]	; (80044b8 <UART_SetConfig+0x2d4>)
 8004332:	fba3 2302 	umull	r2, r3, r3, r2
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	011c      	lsls	r4, r3, #4
 800433a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800433e:	2200      	movs	r2, #0
 8004340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004344:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004348:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800434c:	4642      	mov	r2, r8
 800434e:	464b      	mov	r3, r9
 8004350:	1891      	adds	r1, r2, r2
 8004352:	64b9      	str	r1, [r7, #72]	; 0x48
 8004354:	415b      	adcs	r3, r3
 8004356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004358:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800435c:	4641      	mov	r1, r8
 800435e:	eb12 0a01 	adds.w	sl, r2, r1
 8004362:	4649      	mov	r1, r9
 8004364:	eb43 0b01 	adc.w	fp, r3, r1
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004374:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800437c:	4692      	mov	sl, r2
 800437e:	469b      	mov	fp, r3
 8004380:	4643      	mov	r3, r8
 8004382:	eb1a 0303 	adds.w	r3, sl, r3
 8004386:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800438a:	464b      	mov	r3, r9
 800438c:	eb4b 0303 	adc.w	r3, fp, r3
 8004390:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043a8:	460b      	mov	r3, r1
 80043aa:	18db      	adds	r3, r3, r3
 80043ac:	643b      	str	r3, [r7, #64]	; 0x40
 80043ae:	4613      	mov	r3, r2
 80043b0:	eb42 0303 	adc.w	r3, r2, r3
 80043b4:	647b      	str	r3, [r7, #68]	; 0x44
 80043b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043be:	f7fb ff07 	bl	80001d0 <__aeabi_uldivmod>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4611      	mov	r1, r2
 80043c8:	4b3b      	ldr	r3, [pc, #236]	; (80044b8 <UART_SetConfig+0x2d4>)
 80043ca:	fba3 2301 	umull	r2, r3, r3, r1
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	2264      	movs	r2, #100	; 0x64
 80043d2:	fb02 f303 	mul.w	r3, r2, r3
 80043d6:	1acb      	subs	r3, r1, r3
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043de:	4b36      	ldr	r3, [pc, #216]	; (80044b8 <UART_SetConfig+0x2d4>)
 80043e0:	fba3 2302 	umull	r2, r3, r3, r2
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043ec:	441c      	add	r4, r3
 80043ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004400:	4642      	mov	r2, r8
 8004402:	464b      	mov	r3, r9
 8004404:	1891      	adds	r1, r2, r2
 8004406:	63b9      	str	r1, [r7, #56]	; 0x38
 8004408:	415b      	adcs	r3, r3
 800440a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800440c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004410:	4641      	mov	r1, r8
 8004412:	1851      	adds	r1, r2, r1
 8004414:	6339      	str	r1, [r7, #48]	; 0x30
 8004416:	4649      	mov	r1, r9
 8004418:	414b      	adcs	r3, r1
 800441a:	637b      	str	r3, [r7, #52]	; 0x34
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004428:	4659      	mov	r1, fp
 800442a:	00cb      	lsls	r3, r1, #3
 800442c:	4651      	mov	r1, sl
 800442e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004432:	4651      	mov	r1, sl
 8004434:	00ca      	lsls	r2, r1, #3
 8004436:	4610      	mov	r0, r2
 8004438:	4619      	mov	r1, r3
 800443a:	4603      	mov	r3, r0
 800443c:	4642      	mov	r2, r8
 800443e:	189b      	adds	r3, r3, r2
 8004440:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004444:	464b      	mov	r3, r9
 8004446:	460a      	mov	r2, r1
 8004448:	eb42 0303 	adc.w	r3, r2, r3
 800444c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800445c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004460:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004464:	460b      	mov	r3, r1
 8004466:	18db      	adds	r3, r3, r3
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28
 800446a:	4613      	mov	r3, r2
 800446c:	eb42 0303 	adc.w	r3, r2, r3
 8004470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004472:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004476:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800447a:	f7fb fea9 	bl	80001d0 <__aeabi_uldivmod>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4b0d      	ldr	r3, [pc, #52]	; (80044b8 <UART_SetConfig+0x2d4>)
 8004484:	fba3 1302 	umull	r1, r3, r3, r2
 8004488:	095b      	lsrs	r3, r3, #5
 800448a:	2164      	movs	r1, #100	; 0x64
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	3332      	adds	r3, #50	; 0x32
 8004496:	4a08      	ldr	r2, [pc, #32]	; (80044b8 <UART_SetConfig+0x2d4>)
 8004498:	fba2 2303 	umull	r2, r3, r2, r3
 800449c:	095b      	lsrs	r3, r3, #5
 800449e:	f003 0207 	and.w	r2, r3, #7
 80044a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4422      	add	r2, r4
 80044aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044ac:	e105      	b.n	80046ba <UART_SetConfig+0x4d6>
 80044ae:	bf00      	nop
 80044b0:	40011000 	.word	0x40011000
 80044b4:	40011400 	.word	0x40011400
 80044b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044c0:	2200      	movs	r2, #0
 80044c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044ce:	4642      	mov	r2, r8
 80044d0:	464b      	mov	r3, r9
 80044d2:	1891      	adds	r1, r2, r2
 80044d4:	6239      	str	r1, [r7, #32]
 80044d6:	415b      	adcs	r3, r3
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
 80044da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044de:	4641      	mov	r1, r8
 80044e0:	1854      	adds	r4, r2, r1
 80044e2:	4649      	mov	r1, r9
 80044e4:	eb43 0501 	adc.w	r5, r3, r1
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	00eb      	lsls	r3, r5, #3
 80044f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044f6:	00e2      	lsls	r2, r4, #3
 80044f8:	4614      	mov	r4, r2
 80044fa:	461d      	mov	r5, r3
 80044fc:	4643      	mov	r3, r8
 80044fe:	18e3      	adds	r3, r4, r3
 8004500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004504:	464b      	mov	r3, r9
 8004506:	eb45 0303 	adc.w	r3, r5, r3
 800450a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800450e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800451a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800452a:	4629      	mov	r1, r5
 800452c:	008b      	lsls	r3, r1, #2
 800452e:	4621      	mov	r1, r4
 8004530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004534:	4621      	mov	r1, r4
 8004536:	008a      	lsls	r2, r1, #2
 8004538:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800453c:	f7fb fe48 	bl	80001d0 <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4b60      	ldr	r3, [pc, #384]	; (80046c8 <UART_SetConfig+0x4e4>)
 8004546:	fba3 2302 	umull	r2, r3, r3, r2
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	011c      	lsls	r4, r3, #4
 800454e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004552:	2200      	movs	r2, #0
 8004554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004558:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800455c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004560:	4642      	mov	r2, r8
 8004562:	464b      	mov	r3, r9
 8004564:	1891      	adds	r1, r2, r2
 8004566:	61b9      	str	r1, [r7, #24]
 8004568:	415b      	adcs	r3, r3
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004570:	4641      	mov	r1, r8
 8004572:	1851      	adds	r1, r2, r1
 8004574:	6139      	str	r1, [r7, #16]
 8004576:	4649      	mov	r1, r9
 8004578:	414b      	adcs	r3, r1
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004588:	4659      	mov	r1, fp
 800458a:	00cb      	lsls	r3, r1, #3
 800458c:	4651      	mov	r1, sl
 800458e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004592:	4651      	mov	r1, sl
 8004594:	00ca      	lsls	r2, r1, #3
 8004596:	4610      	mov	r0, r2
 8004598:	4619      	mov	r1, r3
 800459a:	4603      	mov	r3, r0
 800459c:	4642      	mov	r2, r8
 800459e:	189b      	adds	r3, r3, r2
 80045a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045a4:	464b      	mov	r3, r9
 80045a6:	460a      	mov	r2, r1
 80045a8:	eb42 0303 	adc.w	r3, r2, r3
 80045ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80045ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045c8:	4649      	mov	r1, r9
 80045ca:	008b      	lsls	r3, r1, #2
 80045cc:	4641      	mov	r1, r8
 80045ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045d2:	4641      	mov	r1, r8
 80045d4:	008a      	lsls	r2, r1, #2
 80045d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045da:	f7fb fdf9 	bl	80001d0 <__aeabi_uldivmod>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4b39      	ldr	r3, [pc, #228]	; (80046c8 <UART_SetConfig+0x4e4>)
 80045e4:	fba3 1302 	umull	r1, r3, r3, r2
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	2164      	movs	r1, #100	; 0x64
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	3332      	adds	r3, #50	; 0x32
 80045f6:	4a34      	ldr	r2, [pc, #208]	; (80046c8 <UART_SetConfig+0x4e4>)
 80045f8:	fba2 2303 	umull	r2, r3, r2, r3
 80045fc:	095b      	lsrs	r3, r3, #5
 80045fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004602:	441c      	add	r4, r3
 8004604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004608:	2200      	movs	r2, #0
 800460a:	673b      	str	r3, [r7, #112]	; 0x70
 800460c:	677a      	str	r2, [r7, #116]	; 0x74
 800460e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004612:	4642      	mov	r2, r8
 8004614:	464b      	mov	r3, r9
 8004616:	1891      	adds	r1, r2, r2
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	415b      	adcs	r3, r3
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004622:	4641      	mov	r1, r8
 8004624:	1851      	adds	r1, r2, r1
 8004626:	6039      	str	r1, [r7, #0]
 8004628:	4649      	mov	r1, r9
 800462a:	414b      	adcs	r3, r1
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800463a:	4659      	mov	r1, fp
 800463c:	00cb      	lsls	r3, r1, #3
 800463e:	4651      	mov	r1, sl
 8004640:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004644:	4651      	mov	r1, sl
 8004646:	00ca      	lsls	r2, r1, #3
 8004648:	4610      	mov	r0, r2
 800464a:	4619      	mov	r1, r3
 800464c:	4603      	mov	r3, r0
 800464e:	4642      	mov	r2, r8
 8004650:	189b      	adds	r3, r3, r2
 8004652:	66bb      	str	r3, [r7, #104]	; 0x68
 8004654:	464b      	mov	r3, r9
 8004656:	460a      	mov	r2, r1
 8004658:	eb42 0303 	adc.w	r3, r2, r3
 800465c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800465e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	663b      	str	r3, [r7, #96]	; 0x60
 8004668:	667a      	str	r2, [r7, #100]	; 0x64
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004676:	4649      	mov	r1, r9
 8004678:	008b      	lsls	r3, r1, #2
 800467a:	4641      	mov	r1, r8
 800467c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004680:	4641      	mov	r1, r8
 8004682:	008a      	lsls	r2, r1, #2
 8004684:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004688:	f7fb fda2 	bl	80001d0 <__aeabi_uldivmod>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4b0d      	ldr	r3, [pc, #52]	; (80046c8 <UART_SetConfig+0x4e4>)
 8004692:	fba3 1302 	umull	r1, r3, r3, r2
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	2164      	movs	r1, #100	; 0x64
 800469a:	fb01 f303 	mul.w	r3, r1, r3
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	3332      	adds	r3, #50	; 0x32
 80046a4:	4a08      	ldr	r2, [pc, #32]	; (80046c8 <UART_SetConfig+0x4e4>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	f003 020f 	and.w	r2, r3, #15
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4422      	add	r2, r4
 80046b8:	609a      	str	r2, [r3, #8]
}
 80046ba:	bf00      	nop
 80046bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046c0:	46bd      	mov	sp, r7
 80046c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c6:	bf00      	nop
 80046c8:	51eb851f 	.word	0x51eb851f

080046cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f043 0201 	orr.w	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f023 0201 	bic.w	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3301      	adds	r3, #1
 8004722:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4a13      	ldr	r2, [pc, #76]	; (8004774 <USB_FlushTxFifo+0x64>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d901      	bls.n	8004730 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e01b      	b.n	8004768 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	daf2      	bge.n	800471e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	019b      	lsls	r3, r3, #6
 8004740:	f043 0220 	orr.w	r2, r3, #32
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3301      	adds	r3, #1
 800474c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4a08      	ldr	r2, [pc, #32]	; (8004774 <USB_FlushTxFifo+0x64>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e006      	b.n	8004768 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b20      	cmp	r3, #32
 8004764:	d0f0      	beq.n	8004748 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	00030d40 	.word	0x00030d40

08004778 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3301      	adds	r3, #1
 8004788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4a11      	ldr	r2, [pc, #68]	; (80047d4 <USB_FlushRxFifo+0x5c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e018      	b.n	80047c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	daf2      	bge.n	8004784 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2210      	movs	r2, #16
 80047a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4a08      	ldr	r2, [pc, #32]	; (80047d4 <USB_FlushRxFifo+0x5c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e006      	b.n	80047c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	2b10      	cmp	r3, #16
 80047c4:	d0f0      	beq.n	80047a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	00030d40 	.word	0x00030d40

080047d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047d8:	b480      	push	{r7}
 80047da:	b08b      	sub	sp, #44	; 0x2c
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	4613      	mov	r3, r2
 80047e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	089b      	lsrs	r3, r3, #2
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80047f6:	88fb      	ldrh	r3, [r7, #6]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80047fe:	2300      	movs	r3, #0
 8004800:	623b      	str	r3, [r7, #32]
 8004802:	e014      	b.n	800482e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	3301      	adds	r3, #1
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	3301      	adds	r3, #1
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	3301      	adds	r3, #1
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	3301      	adds	r3, #1
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	3301      	adds	r3, #1
 800482c:	623b      	str	r3, [r7, #32]
 800482e:	6a3a      	ldr	r2, [r7, #32]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	429a      	cmp	r2, r3
 8004834:	d3e6      	bcc.n	8004804 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004836:	8bfb      	ldrh	r3, [r7, #30]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01e      	beq.n	800487a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004846:	461a      	mov	r2, r3
 8004848:	f107 0310 	add.w	r3, r7, #16
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	b2db      	uxtb	r3, r3
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
 800485c:	b2da      	uxtb	r2, r3
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	701a      	strb	r2, [r3, #0]
      i++;
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	3301      	adds	r3, #1
 8004866:	623b      	str	r3, [r7, #32]
      pDest++;
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	3301      	adds	r3, #1
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800486e:	8bfb      	ldrh	r3, [r7, #30]
 8004870:	3b01      	subs	r3, #1
 8004872:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004874:	8bfb      	ldrh	r3, [r7, #30]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1ea      	bne.n	8004850 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800487c:	4618      	mov	r0, r3
 800487e:	372c      	adds	r7, #44	; 0x2c
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4013      	ands	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048a0:	68fb      	ldr	r3, [r7, #12]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f003 0301 	and.w	r3, r3, #1
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b085      	sub	sp, #20
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	460b      	mov	r3, r1
 80048d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048e8:	f023 0303 	bic.w	r3, r3, #3
 80048ec:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	78fb      	ldrb	r3, [r7, #3]
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	68f9      	ldr	r1, [r7, #12]
 80048fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004902:	4313      	orrs	r3, r2
 8004904:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d107      	bne.n	800491c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004912:	461a      	mov	r2, r3
 8004914:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004918:	6053      	str	r3, [r2, #4]
 800491a:	e009      	b.n	8004930 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d106      	bne.n	8004930 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004928:	461a      	mov	r2, r3
 800492a:	f241 7370 	movw	r3, #6000	; 0x1770
 800492e:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	b29b      	uxth	r3, r3
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004960:	b480      	push	{r7}
 8004962:	b089      	sub	sp, #36	; 0x24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	4413      	add	r3, r2
 8004980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	0c9b      	lsrs	r3, r3, #18
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	4413      	add	r3, r2
 8004996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	0fdb      	lsrs	r3, r3, #31
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d104      	bne.n	80049ba <USB_HC_Halt+0x5a>
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e0c8      	b.n	8004b4c <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <USB_HC_Halt+0x66>
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d163      	bne.n	8004a8e <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	0151      	lsls	r1, r2, #5
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	440a      	add	r2, r1
 80049dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049e4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 80ab 	bne.w	8004b4a <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d133      	bne.n	8004a68 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	0151      	lsls	r1, r2, #5
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	440a      	add	r2, r1
 8004a16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a1e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	0151      	lsls	r1, r2, #5
 8004a32:	69fa      	ldr	r2, [r7, #28]
 8004a34:	440a      	add	r2, r1
 8004a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a3e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3301      	adds	r3, #1
 8004a44:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a4c:	d81d      	bhi.n	8004a8a <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a64:	d0ec      	beq.n	8004a40 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004a66:	e070      	b.n	8004b4a <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	0151      	lsls	r1, r2, #5
 8004a7a:	69fa      	ldr	r2, [r7, #28]
 8004a7c:	440a      	add	r2, r1
 8004a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a86:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004a88:	e05f      	b.n	8004b4a <USB_HC_Halt+0x1ea>
            break;
 8004a8a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004a8c:	e05d      	b.n	8004b4a <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	0151      	lsls	r1, r2, #5
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	440a      	add	r2, r1
 8004aa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004aac:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d133      	bne.n	8004b26 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	0151      	lsls	r1, r2, #5
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	440a      	add	r2, r1
 8004ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ad8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004adc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	0151      	lsls	r1, r2, #5
 8004af0:	69fa      	ldr	r2, [r7, #28]
 8004af2:	440a      	add	r2, r1
 8004af4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004af8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004afc:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3301      	adds	r3, #1
 8004b02:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b0a:	d81d      	bhi.n	8004b48 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b22:	d0ec      	beq.n	8004afe <USB_HC_Halt+0x19e>
 8004b24:	e011      	b.n	8004b4a <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	69fa      	ldr	r2, [r7, #28]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e000      	b.n	8004b4a <USB_HC_Halt+0x1ea>
          break;
 8004b48:	bf00      	nop
    }
  }

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3724      	adds	r7, #36	; 0x24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff fdbe 	bl	80046ee <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b72:	2110      	movs	r1, #16
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff fdcb 	bl	8004710 <USB_FlushTxFifo>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff fdf7 	bl	8004778 <USB_FlushRxFifo>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004b94:	2300      	movs	r3, #0
 8004b96:	61bb      	str	r3, [r7, #24]
 8004b98:	e01f      	b.n	8004bda <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bb0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bb8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bc0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bce:	461a      	mov	r2, r3
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2b0f      	cmp	r3, #15
 8004bde:	d9dc      	bls.n	8004b9a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004be0:	2300      	movs	r3, #0
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	e034      	b.n	8004c50 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bfc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c04:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c0c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3301      	adds	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c2c:	d80c      	bhi.n	8004c48 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c44:	d0ec      	beq.n	8004c20 <USB_StopHost+0xc8>
 8004c46:	e000      	b.n	8004c4a <USB_StopHost+0xf2>
        break;
 8004c48:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	61bb      	str	r3, [r7, #24]
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b0f      	cmp	r3, #15
 8004c54:	d9c7      	bls.n	8004be6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c62:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff fd2d 	bl	80046cc <USB_EnableGlobalInt>

  return ret;
 8004c72:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3720      	adds	r7, #32
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f804 	bl	8004ca0 <USBH_HandleSof>
}
 8004c98:	bf00      	nop
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b0b      	cmp	r3, #11
 8004cb0:	d10a      	bne.n	8004cc8 <USBH_HandleSof+0x28>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4798      	blx	r3
  }
}
 8004cc8:	bf00      	nop
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	f000 f8ae 	bl	8004e58 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8004cfc:	bf00      	nop
}
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8004d14:	bf00      	nop
}
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8004d54:	2200      	movs	r2, #0
 8004d56:	4619      	mov	r1, r3
 8004d58:	f000 f87e 	bl	8004e58 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f003 fe58 	bl	8008a3c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	791b      	ldrb	r3, [r3, #4]
 8004d90:	4619      	mov	r1, r3
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f830 	bl	8004df8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	795b      	ldrb	r3, [r3, #5]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f82a 	bl	8004df8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8004db8:	2200      	movs	r2, #0
 8004dba:	4619      	mov	r1, r3
 8004dbc:	f000 f84c 	bl	8004e58 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b082      	sub	sp, #8
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8004de6:	2200      	movs	r2, #0
 8004de8:	4619      	mov	r1, r3
 8004dea:	f000 f835 	bl	8004e58 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	460b      	mov	r3, r1
 8004e02:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	2b0f      	cmp	r3, #15
 8004e08:	d80d      	bhi.n	8004e26 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	33e0      	adds	r3, #224	; 0xe0
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	33e0      	adds	r3, #224	; 0xe0
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e3a:	f3ef 8305 	mrs	r3, IPSR
 8004e3e:	607b      	str	r3, [r7, #4]
  return(result);
 8004e40:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	bf14      	ite	ne
 8004e46:	2301      	movne	r3, #1
 8004e48:	2300      	moveq	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004e64:	2300      	movs	r3, #0
 8004e66:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <osMessagePut+0x1e>
    ticks = 1;
 8004e72:	2301      	movs	r3, #1
 8004e74:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004e76:	f7ff ffdd 	bl	8004e34 <inHandlerMode>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01d      	beq.n	8004ebc <osMessagePut+0x64>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004e80:	f107 0210 	add.w	r2, r7, #16
 8004e84:	f107 0108 	add.w	r1, r7, #8
 8004e88:	2300      	movs	r3, #0
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fa04 	bl	8005298 <xQueueGenericSendFromISR>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d001      	beq.n	8004e9a <osMessagePut+0x42>
      return osErrorOS;
 8004e96:	23ff      	movs	r3, #255	; 0xff
 8004e98:	e01d      	b.n	8004ed6 <osMessagePut+0x7e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <osMessagePut+0x5e>
 8004ea0:	f003 fac6 	bl	8008430 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8004ea4:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <osMessagePut+0x88>)
 8004ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	e00e      	b.n	8004ed4 <osMessagePut+0x7c>
 8004eb6:	f003 fa9f 	bl	80083f8 <SEGGER_SYSVIEW_RecordExitISR>
 8004eba:	e00b      	b.n	8004ed4 <osMessagePut+0x7c>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004ebc:	f107 0108 	add.w	r1, r7, #8
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 f8c1 	bl	800504c <xQueueGenericSend>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d001      	beq.n	8004ed4 <osMessagePut+0x7c>
      return osErrorOS;
 8004ed0:	23ff      	movs	r3, #255	; 0xff
 8004ed2:	e000      	b.n	8004ed6 <osMessagePut+0x7e>
    }
  }
  
  return osOK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	e000ed04 	.word	0xe000ed04

08004ee4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f103 0208 	add.w	r2, r3, #8
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8004efc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f103 0208 	add.w	r2, r3, #8
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f103 0208 	add.w	r2, r3, #8
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	601a      	str	r2, [r3, #0]
}
 8004f7a:	bf00      	nop
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9c:	d103      	bne.n	8004fa6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	e00c      	b.n	8004fc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3308      	adds	r3, #8
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	e002      	b.n	8004fb4 <vListInsert+0x2e>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d2f6      	bcs.n	8004fae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	601a      	str	r2, [r3, #0]
}
 8004fec:	bf00      	nop
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6892      	ldr	r2, [r2, #8]
 800500e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6852      	ldr	r2, [r2, #4]
 8005018:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d103      	bne.n	800502c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	1e5a      	subs	r2, r3, #1
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b090      	sub	sp, #64	; 0x40
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800505a:	2300      	movs	r3, #0
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10a      	bne.n	800507e <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800507a:	bf00      	nop
 800507c:	e7fe      	b.n	800507c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d103      	bne.n	800508c <xQueueGenericSend+0x40>
 8005084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <xQueueGenericSend+0x44>
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <xQueueGenericSend+0x46>
 8005090:	2300      	movs	r3, #0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <xQueueGenericSend+0x60>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050a8:	bf00      	nop
 80050aa:	e7fe      	b.n	80050aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d103      	bne.n	80050ba <xQueueGenericSend+0x6e>
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d101      	bne.n	80050be <xQueueGenericSend+0x72>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <xQueueGenericSend+0x74>
 80050be:	2300      	movs	r3, #0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <xQueueGenericSend+0x8e>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	623b      	str	r3, [r7, #32]
}
 80050d6:	bf00      	nop
 80050d8:	e7fe      	b.n	80050d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050da:	f001 f893 	bl	8006204 <xTaskGetSchedulerState>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <xQueueGenericSend+0x9e>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <xQueueGenericSend+0xa2>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <xQueueGenericSend+0xa4>
 80050ee:	2300      	movs	r3, #0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10a      	bne.n	800510a <xQueueGenericSend+0xbe>
	__asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	61fb      	str	r3, [r7, #28]
}
 8005106:	bf00      	nop
 8005108:	e7fe      	b.n	8005108 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800510a:	f001 fbf3 	bl	80068f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005116:	429a      	cmp	r2, r3
 8005118:	d302      	bcc.n	8005120 <xQueueGenericSend+0xd4>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d136      	bne.n	800518e <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	4618      	mov	r0, r3
 8005124:	f003 fae8 	bl	80086f8 <SEGGER_SYSVIEW_ShrinkId>
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	460b      	mov	r3, r1
 8005132:	4601      	mov	r1, r0
 8005134:	205a      	movs	r0, #90	; 0x5a
 8005136:	f002 fdbf 	bl	8007cb8 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	68b9      	ldr	r1, [r7, #8]
 800513e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005140:	f000 f959 	bl	80053f6 <prvCopyDataToQueue>
 8005144:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	2b00      	cmp	r3, #0
 800514c:	d010      	beq.n	8005170 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	3324      	adds	r3, #36	; 0x24
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fe96 	bl	8005e84 <xTaskRemoveFromEventList>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d013      	beq.n	8005186 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800515e:	4b4d      	ldr	r3, [pc, #308]	; (8005294 <xQueueGenericSend+0x248>)
 8005160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	e00a      	b.n	8005186 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d007      	beq.n	8005186 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005176:	4b47      	ldr	r3, [pc, #284]	; (8005294 <xQueueGenericSend+0x248>)
 8005178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005186:	f001 fbe5 	bl	8006954 <vPortExitCritical>
				return pdPASS;
 800518a:	2301      	movs	r3, #1
 800518c:	e07d      	b.n	800528a <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d110      	bne.n	80051b6 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005194:	f001 fbde 	bl	8006954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	4618      	mov	r0, r3
 800519c:	f003 faac 	bl	80086f8 <SEGGER_SYSVIEW_ShrinkId>
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	460b      	mov	r3, r1
 80051aa:	4601      	mov	r1, r0
 80051ac:	205a      	movs	r0, #90	; 0x5a
 80051ae:	f002 fd83 	bl	8007cb8 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	e069      	b.n	800528a <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d106      	bne.n	80051ca <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051bc:	f107 0314 	add.w	r3, r7, #20
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 fec5 	bl	8005f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051c6:	2301      	movs	r3, #1
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051ca:	f001 fbc3 	bl	8006954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051ce:	f000 fc3f 	bl	8005a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051d2:	f001 fb8f 	bl	80068f4 <vPortEnterCritical>
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051dc:	b25b      	sxtb	r3, r3
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e2:	d103      	bne.n	80051ec <xQueueGenericSend+0x1a0>
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051f2:	b25b      	sxtb	r3, r3
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f8:	d103      	bne.n	8005202 <xQueueGenericSend+0x1b6>
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005202:	f001 fba7 	bl	8006954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005206:	1d3a      	adds	r2, r7, #4
 8005208:	f107 0314 	add.w	r3, r7, #20
 800520c:	4611      	mov	r1, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f000 feb4 	bl	8005f7c <xTaskCheckForTimeOut>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d124      	bne.n	8005264 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800521a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800521c:	f000 f9a7 	bl	800556e <prvIsQueueFull>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d018      	beq.n	8005258 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	3310      	adds	r3, #16
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	4611      	mov	r1, r2
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fe04 	bl	8005e3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005236:	f000 f948 	bl	80054ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800523a:	f000 fc17 	bl	8005a6c <xTaskResumeAll>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	f47f af62 	bne.w	800510a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005246:	4b13      	ldr	r3, [pc, #76]	; (8005294 <xQueueGenericSend+0x248>)
 8005248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	e758      	b.n	800510a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800525a:	f000 f936 	bl	80054ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800525e:	f000 fc05 	bl	8005a6c <xTaskResumeAll>
 8005262:	e752      	b.n	800510a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005266:	f000 f930 	bl	80054ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800526a:	f000 fbff 	bl	8005a6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	4618      	mov	r0, r3
 8005272:	f003 fa41 	bl	80086f8 <SEGGER_SYSVIEW_ShrinkId>
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	460b      	mov	r3, r1
 8005280:	4601      	mov	r1, r0
 8005282:	205a      	movs	r0, #90	; 0x5a
 8005284:	f002 fd18 	bl	8007cb8 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8005288:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800528a:	4618      	mov	r0, r3
 800528c:	3738      	adds	r7, #56	; 0x38
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	e000ed04 	.word	0xe000ed04

08005298 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b090      	sub	sp, #64	; 0x40
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10a      	bne.n	80052c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d103      	bne.n	80052d4 <xQueueGenericSendFromISR+0x3c>
 80052cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <xQueueGenericSendFromISR+0x40>
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <xQueueGenericSendFromISR+0x42>
 80052d8:	2300      	movs	r3, #0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10a      	bne.n	80052f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d103      	bne.n	8005302 <xQueueGenericSendFromISR+0x6a>
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <xQueueGenericSendFromISR+0x6e>
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <xQueueGenericSendFromISR+0x70>
 8005306:	2300      	movs	r3, #0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	623b      	str	r3, [r7, #32]
}
 800531e:	bf00      	nop
 8005320:	e7fe      	b.n	8005320 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005322:	f001 fbd1 	bl	8006ac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005326:	f3ef 8211 	mrs	r2, BASEPRI
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	61fa      	str	r2, [r7, #28]
 800533c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800533e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005340:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	429a      	cmp	r2, r3
 800534c:	d302      	bcc.n	8005354 <xQueueGenericSendFromISR+0xbc>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b02      	cmp	r3, #2
 8005352:	d139      	bne.n	80053c8 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005356:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800535a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8005364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005366:	4618      	mov	r0, r3
 8005368:	f003 f9c6 	bl	80086f8 <SEGGER_SYSVIEW_ShrinkId>
 800536c:	4601      	mov	r1, r0
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	461a      	mov	r2, r3
 8005372:	2060      	movs	r0, #96	; 0x60
 8005374:	f002 fc46 	bl	8007c04 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800537e:	f000 f83a 	bl	80053f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005382:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538a:	d112      	bne.n	80053b2 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800538c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	2b00      	cmp	r3, #0
 8005392:	d016      	beq.n	80053c2 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	3324      	adds	r3, #36	; 0x24
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fd73 	bl	8005e84 <xTaskRemoveFromEventList>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00e      	beq.n	80053c2 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00b      	beq.n	80053c2 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	e007      	b.n	80053c2 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053b6:	3301      	adds	r3, #1
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	b25a      	sxtb	r2, r3
 80053bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80053c2:	2301      	movs	r3, #1
 80053c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80053c6:	e00b      	b.n	80053e0 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80053c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ca:	4618      	mov	r0, r3
 80053cc:	f003 f994 	bl	80086f8 <SEGGER_SYSVIEW_ShrinkId>
 80053d0:	4601      	mov	r1, r0
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	461a      	mov	r2, r3
 80053d6:	2060      	movs	r0, #96	; 0x60
 80053d8:	f002 fc14 	bl	8007c04 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3740      	adds	r7, #64	; 0x40
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b086      	sub	sp, #24
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10d      	bne.n	8005430 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d14d      	bne.n	80054b8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	4618      	mov	r0, r3
 8005422:	f000 ff0d 	bl	8006240 <xTaskPriorityDisinherit>
 8005426:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	609a      	str	r2, [r3, #8]
 800542e:	e043      	b.n	80054b8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d119      	bne.n	800546a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6858      	ldr	r0, [r3, #4]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	461a      	mov	r2, r3
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	f003 fb7d 	bl	8008b40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	441a      	add	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	429a      	cmp	r2, r3
 800545e:	d32b      	bcc.n	80054b8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	605a      	str	r2, [r3, #4]
 8005468:	e026      	b.n	80054b8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	68d8      	ldr	r0, [r3, #12]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	461a      	mov	r2, r3
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	f003 fb63 	bl	8008b40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	425b      	negs	r3, r3
 8005484:	441a      	add	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d207      	bcs.n	80054a6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	425b      	negs	r3, r3
 80054a0:	441a      	add	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d105      	bne.n	80054b8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80054c0:	697b      	ldr	r3, [r7, #20]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054d2:	f001 fa0f 	bl	80068f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054de:	e011      	b.n	8005504 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d012      	beq.n	800550e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3324      	adds	r3, #36	; 0x24
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fcc9 	bl	8005e84 <xTaskRemoveFromEventList>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054f8:	f000 fda2 	bl	8006040 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	3b01      	subs	r3, #1
 8005500:	b2db      	uxtb	r3, r3
 8005502:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005508:	2b00      	cmp	r3, #0
 800550a:	dce9      	bgt.n	80054e0 <prvUnlockQueue+0x16>
 800550c:	e000      	b.n	8005510 <prvUnlockQueue+0x46>
					break;
 800550e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	22ff      	movs	r2, #255	; 0xff
 8005514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005518:	f001 fa1c 	bl	8006954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800551c:	f001 f9ea 	bl	80068f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005526:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005528:	e011      	b.n	800554e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d012      	beq.n	8005558 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3310      	adds	r3, #16
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fca4 	bl	8005e84 <xTaskRemoveFromEventList>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005542:	f000 fd7d 	bl	8006040 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005546:	7bbb      	ldrb	r3, [r7, #14]
 8005548:	3b01      	subs	r3, #1
 800554a:	b2db      	uxtb	r3, r3
 800554c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800554e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005552:	2b00      	cmp	r3, #0
 8005554:	dce9      	bgt.n	800552a <prvUnlockQueue+0x60>
 8005556:	e000      	b.n	800555a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005558:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	22ff      	movs	r2, #255	; 0xff
 800555e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005562:	f001 f9f7 	bl	8006954 <vPortExitCritical>
}
 8005566:	bf00      	nop
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005576:	f001 f9bd 	bl	80068f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005582:	429a      	cmp	r2, r3
 8005584:	d102      	bne.n	800558c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005586:	2301      	movs	r3, #1
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	e001      	b.n	8005590 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005590:	f001 f9e0 	bl	8006954 <vPortExitCritical>

	return xReturn;
 8005594:	68fb      	ldr	r3, [r7, #12]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b08e      	sub	sp, #56	; 0x38
 80055a2:	af04      	add	r7, sp, #16
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	607a      	str	r2, [r7, #4]
 80055aa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10a      	bne.n	80055c8 <xTaskCreateStatic+0x2a>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	623b      	str	r3, [r7, #32]
}
 80055c4:	bf00      	nop
 80055c6:	e7fe      	b.n	80055c6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80055c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10a      	bne.n	80055e4 <xTaskCreateStatic+0x46>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	61fb      	str	r3, [r7, #28]
}
 80055e0:	bf00      	nop
 80055e2:	e7fe      	b.n	80055e2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055e4:	2354      	movs	r3, #84	; 0x54
 80055e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b54      	cmp	r3, #84	; 0x54
 80055ec:	d00a      	beq.n	8005604 <xTaskCreateStatic+0x66>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	61bb      	str	r3, [r7, #24]
}
 8005600:	bf00      	nop
 8005602:	e7fe      	b.n	8005602 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005604:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01e      	beq.n	800564a <xTaskCreateStatic+0xac>
 800560c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560e:	2b00      	cmp	r3, #0
 8005610:	d01b      	beq.n	800564a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800561a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	2202      	movs	r2, #2
 8005620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005624:	2300      	movs	r3, #0
 8005626:	9303      	str	r3, [sp, #12]
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	9302      	str	r3, [sp, #8]
 800562c:	f107 0314 	add.w	r3, r7, #20
 8005630:	9301      	str	r3, [sp, #4]
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f850 	bl	80056e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005644:	f000 f8d4 	bl	80057f0 <prvAddNewTaskToReadyList>
 8005648:	e001      	b.n	800564e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800564e:	697b      	ldr	r3, [r7, #20]
	}
 8005650:	4618      	mov	r0, r3
 8005652:	3728      	adds	r7, #40	; 0x28
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08c      	sub	sp, #48	; 0x30
 800565c:	af04      	add	r7, sp, #16
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005668:	88fb      	ldrh	r3, [r7, #6]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4618      	mov	r0, r3
 800566e:	f001 fac3 	bl	8006bf8 <pvPortMalloc>
 8005672:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00e      	beq.n	8005698 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800567a:	2054      	movs	r0, #84	; 0x54
 800567c:	f001 fabc 	bl	8006bf8 <pvPortMalloc>
 8005680:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	631a      	str	r2, [r3, #48]	; 0x30
 800568e:	e005      	b.n	800569c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005690:	6978      	ldr	r0, [r7, #20]
 8005692:	f001 fb7d 	bl	8006d90 <vPortFree>
 8005696:	e001      	b.n	800569c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005698:	2300      	movs	r3, #0
 800569a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d017      	beq.n	80056d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056aa:	88fa      	ldrh	r2, [r7, #6]
 80056ac:	2300      	movs	r3, #0
 80056ae:	9303      	str	r3, [sp, #12]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	9302      	str	r3, [sp, #8]
 80056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b6:	9301      	str	r3, [sp, #4]
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f80e 	bl	80056e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056c6:	69f8      	ldr	r0, [r7, #28]
 80056c8:	f000 f892 	bl	80057f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056cc:	2301      	movs	r3, #1
 80056ce:	61bb      	str	r3, [r7, #24]
 80056d0:	e002      	b.n	80056d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056d2:	f04f 33ff 	mov.w	r3, #4294967295
 80056d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056d8:	69bb      	ldr	r3, [r7, #24]
	}
 80056da:	4618      	mov	r0, r3
 80056dc:	3720      	adds	r7, #32
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b088      	sub	sp, #32
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
 80056ee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056fa:	3b01      	subs	r3, #1
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	f023 0307 	bic.w	r3, r3, #7
 8005708:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <prvInitialiseNewTask+0x48>
	__asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	617b      	str	r3, [r7, #20]
}
 8005726:	bf00      	nop
 8005728:	e7fe      	b.n	8005728 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01f      	beq.n	8005770 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005730:	2300      	movs	r3, #0
 8005732:	61fb      	str	r3, [r7, #28]
 8005734:	e012      	b.n	800575c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	4413      	add	r3, r2
 800573c:	7819      	ldrb	r1, [r3, #0]
 800573e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	3334      	adds	r3, #52	; 0x34
 8005746:	460a      	mov	r2, r1
 8005748:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	4413      	add	r3, r2
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d006      	beq.n	8005764 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	3301      	adds	r3, #1
 800575a:	61fb      	str	r3, [r7, #28]
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	2b0f      	cmp	r3, #15
 8005760:	d9e9      	bls.n	8005736 <prvInitialiseNewTask+0x54>
 8005762:	e000      	b.n	8005766 <prvInitialiseNewTask+0x84>
			{
				break;
 8005764:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800576e:	e003      	b.n	8005778 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577a:	2b06      	cmp	r3, #6
 800577c:	d901      	bls.n	8005782 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800577e:	2306      	movs	r3, #6
 8005780:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005786:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800578c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	2200      	movs	r2, #0
 8005792:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	3304      	adds	r3, #4
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff fbc3 	bl	8004f24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	3318      	adds	r3, #24
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff fbbe 	bl	8004f24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b0:	f1c3 0207 	rsb	r2, r3, #7
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057bc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	2200      	movs	r2, #0
 80057c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	68f9      	ldr	r1, [r7, #12]
 80057d0:	69b8      	ldr	r0, [r7, #24]
 80057d2:	f000 ff63 	bl	800669c <pxPortInitialiseStack>
 80057d6:	4602      	mov	r2, r0
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80057dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80057e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057e8:	bf00      	nop
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057f0:	b5b0      	push	{r4, r5, r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80057f8:	f001 f87c 	bl	80068f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80057fc:	4b39      	ldr	r3, [pc, #228]	; (80058e4 <prvAddNewTaskToReadyList+0xf4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3301      	adds	r3, #1
 8005802:	4a38      	ldr	r2, [pc, #224]	; (80058e4 <prvAddNewTaskToReadyList+0xf4>)
 8005804:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005806:	4b38      	ldr	r3, [pc, #224]	; (80058e8 <prvAddNewTaskToReadyList+0xf8>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d109      	bne.n	8005822 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800580e:	4a36      	ldr	r2, [pc, #216]	; (80058e8 <prvAddNewTaskToReadyList+0xf8>)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005814:	4b33      	ldr	r3, [pc, #204]	; (80058e4 <prvAddNewTaskToReadyList+0xf4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d110      	bne.n	800583e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800581c:	f000 fc34 	bl	8006088 <prvInitialiseTaskLists>
 8005820:	e00d      	b.n	800583e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005822:	4b32      	ldr	r3, [pc, #200]	; (80058ec <prvAddNewTaskToReadyList+0xfc>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800582a:	4b2f      	ldr	r3, [pc, #188]	; (80058e8 <prvAddNewTaskToReadyList+0xf8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	429a      	cmp	r2, r3
 8005836:	d802      	bhi.n	800583e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005838:	4a2b      	ldr	r2, [pc, #172]	; (80058e8 <prvAddNewTaskToReadyList+0xf8>)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800583e:	4b2c      	ldr	r3, [pc, #176]	; (80058f0 <prvAddNewTaskToReadyList+0x100>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3301      	adds	r3, #1
 8005844:	4a2a      	ldr	r2, [pc, #168]	; (80058f0 <prvAddNewTaskToReadyList+0x100>)
 8005846:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d016      	beq.n	800587c <prvAddNewTaskToReadyList+0x8c>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4618      	mov	r0, r3
 8005852:	f002 fe25 	bl	80084a0 <SEGGER_SYSVIEW_OnTaskCreate>
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005866:	461d      	mov	r5, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461c      	mov	r4, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	1ae3      	subs	r3, r4, r3
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	462b      	mov	r3, r5
 8005878:	f001 fc58 	bl	800712c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4618      	mov	r0, r3
 8005880:	f002 fe96 	bl	80085b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	2201      	movs	r2, #1
 800588a:	409a      	lsls	r2, r3
 800588c:	4b19      	ldr	r3, [pc, #100]	; (80058f4 <prvAddNewTaskToReadyList+0x104>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4313      	orrs	r3, r2
 8005892:	4a18      	ldr	r2, [pc, #96]	; (80058f4 <prvAddNewTaskToReadyList+0x104>)
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589a:	4613      	mov	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <prvAddNewTaskToReadyList+0x108>)
 80058a4:	441a      	add	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3304      	adds	r3, #4
 80058aa:	4619      	mov	r1, r3
 80058ac:	4610      	mov	r0, r2
 80058ae:	f7ff fb46 	bl	8004f3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058b2:	f001 f84f 	bl	8006954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058b6:	4b0d      	ldr	r3, [pc, #52]	; (80058ec <prvAddNewTaskToReadyList+0xfc>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00e      	beq.n	80058dc <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058be:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <prvAddNewTaskToReadyList+0xf8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d207      	bcs.n	80058dc <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058cc:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <prvAddNewTaskToReadyList+0x10c>)
 80058ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058dc:	bf00      	nop
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bdb0      	pop	{r4, r5, r7, pc}
 80058e4:	2000052c 	.word	0x2000052c
 80058e8:	2000042c 	.word	0x2000042c
 80058ec:	20000538 	.word	0x20000538
 80058f0:	20000548 	.word	0x20000548
 80058f4:	20000534 	.word	0x20000534
 80058f8:	20000430 	.word	0x20000430
 80058fc:	e000ed04 	.word	0xe000ed04

08005900 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d01b      	beq.n	800594a <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005912:	4b15      	ldr	r3, [pc, #84]	; (8005968 <vTaskDelay+0x68>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <vTaskDelay+0x30>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	60bb      	str	r3, [r7, #8]
}
 800592c:	bf00      	nop
 800592e:	e7fe      	b.n	800592e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005930:	f000 f88e 	bl	8005a50 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	2023      	movs	r0, #35	; 0x23
 8005938:	f002 f928 	bl	8007b8c <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800593c:	2100      	movs	r1, #0
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fe34 	bl	80065ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005944:	f000 f892 	bl	8005a6c <xTaskResumeAll>
 8005948:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d107      	bne.n	8005960 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8005950:	4b06      	ldr	r3, [pc, #24]	; (800596c <vTaskDelay+0x6c>)
 8005952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005960:	bf00      	nop
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20000554 	.word	0x20000554
 800596c:	e000ed04 	.word	0xe000ed04

08005970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08a      	sub	sp, #40	; 0x28
 8005974:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005976:	2300      	movs	r3, #0
 8005978:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800597e:	463a      	mov	r2, r7
 8005980:	1d39      	adds	r1, r7, #4
 8005982:	f107 0308 	add.w	r3, r7, #8
 8005986:	4618      	mov	r0, r3
 8005988:	f7fa fda4 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800598c:	6839      	ldr	r1, [r7, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	9202      	str	r2, [sp, #8]
 8005994:	9301      	str	r3, [sp, #4]
 8005996:	2300      	movs	r3, #0
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	2300      	movs	r3, #0
 800599c:	460a      	mov	r2, r1
 800599e:	4925      	ldr	r1, [pc, #148]	; (8005a34 <vTaskStartScheduler+0xc4>)
 80059a0:	4825      	ldr	r0, [pc, #148]	; (8005a38 <vTaskStartScheduler+0xc8>)
 80059a2:	f7ff fdfc 	bl	800559e <xTaskCreateStatic>
 80059a6:	4603      	mov	r3, r0
 80059a8:	4a24      	ldr	r2, [pc, #144]	; (8005a3c <vTaskStartScheduler+0xcc>)
 80059aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059ac:	4b23      	ldr	r3, [pc, #140]	; (8005a3c <vTaskStartScheduler+0xcc>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80059b4:	2301      	movs	r3, #1
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	e001      	b.n	80059be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d124      	bne.n	8005a0e <vTaskStartScheduler+0x9e>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	613b      	str	r3, [r7, #16]
}
 80059d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059d8:	4b19      	ldr	r3, [pc, #100]	; (8005a40 <vTaskStartScheduler+0xd0>)
 80059da:	f04f 32ff 	mov.w	r2, #4294967295
 80059de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059e0:	4b18      	ldr	r3, [pc, #96]	; (8005a44 <vTaskStartScheduler+0xd4>)
 80059e2:	2201      	movs	r2, #1
 80059e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80059e6:	4b18      	ldr	r3, [pc, #96]	; (8005a48 <vTaskStartScheduler+0xd8>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80059ec:	4b17      	ldr	r3, [pc, #92]	; (8005a4c <vTaskStartScheduler+0xdc>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <vTaskStartScheduler+0xcc>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d102      	bne.n	80059fe <vTaskStartScheduler+0x8e>
 80059f8:	f002 fd36 	bl	8008468 <SEGGER_SYSVIEW_OnIdle>
 80059fc:	e004      	b.n	8005a08 <vTaskStartScheduler+0x98>
 80059fe:	4b13      	ldr	r3, [pc, #76]	; (8005a4c <vTaskStartScheduler+0xdc>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f002 fd90 	bl	8008528 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a08:	f000 fed2 	bl	80067b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a0c:	e00e      	b.n	8005a2c <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a14:	d10a      	bne.n	8005a2c <vTaskStartScheduler+0xbc>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	60fb      	str	r3, [r7, #12]
}
 8005a28:	bf00      	nop
 8005a2a:	e7fe      	b.n	8005a2a <vTaskStartScheduler+0xba>
}
 8005a2c:	bf00      	nop
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	080095a8 	.word	0x080095a8
 8005a38:	08006059 	.word	0x08006059
 8005a3c:	20000550 	.word	0x20000550
 8005a40:	2000054c 	.word	0x2000054c
 8005a44:	20000538 	.word	0x20000538
 8005a48:	20000530 	.word	0x20000530
 8005a4c:	2000042c 	.word	0x2000042c

08005a50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005a54:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <vTaskSuspendAll+0x18>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	4a03      	ldr	r2, [pc, #12]	; (8005a68 <vTaskSuspendAll+0x18>)
 8005a5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005a5e:	bf00      	nop
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	20000554 	.word	0x20000554

08005a6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a7a:	4b43      	ldr	r3, [pc, #268]	; (8005b88 <xTaskResumeAll+0x11c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <xTaskResumeAll+0x2c>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	603b      	str	r3, [r7, #0]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a98:	f000 ff2c 	bl	80068f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a9c:	4b3a      	ldr	r3, [pc, #232]	; (8005b88 <xTaskResumeAll+0x11c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	4a39      	ldr	r2, [pc, #228]	; (8005b88 <xTaskResumeAll+0x11c>)
 8005aa4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aa6:	4b38      	ldr	r3, [pc, #224]	; (8005b88 <xTaskResumeAll+0x11c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d165      	bne.n	8005b7a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005aae:	4b37      	ldr	r3, [pc, #220]	; (8005b8c <xTaskResumeAll+0x120>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d061      	beq.n	8005b7a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ab6:	e032      	b.n	8005b1e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ab8:	4b35      	ldr	r3, [pc, #212]	; (8005b90 <xTaskResumeAll+0x124>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3318      	adds	r3, #24
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff fa97 	bl	8004ff8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	3304      	adds	r3, #4
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff fa92 	bl	8004ff8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f002 fd6a 	bl	80085b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	409a      	lsls	r2, r3
 8005ae4:	4b2b      	ldr	r3, [pc, #172]	; (8005b94 <xTaskResumeAll+0x128>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	4a2a      	ldr	r2, [pc, #168]	; (8005b94 <xTaskResumeAll+0x128>)
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4a27      	ldr	r2, [pc, #156]	; (8005b98 <xTaskResumeAll+0x12c>)
 8005afc:	441a      	add	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3304      	adds	r3, #4
 8005b02:	4619      	mov	r1, r3
 8005b04:	4610      	mov	r0, r2
 8005b06:	f7ff fa1a 	bl	8004f3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0e:	4b23      	ldr	r3, [pc, #140]	; (8005b9c <xTaskResumeAll+0x130>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d302      	bcc.n	8005b1e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8005b18:	4b21      	ldr	r3, [pc, #132]	; (8005ba0 <xTaskResumeAll+0x134>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b1e:	4b1c      	ldr	r3, [pc, #112]	; (8005b90 <xTaskResumeAll+0x124>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1c8      	bne.n	8005ab8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b2c:	f000 fb4a 	bl	80061c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b30:	4b1c      	ldr	r3, [pc, #112]	; (8005ba4 <xTaskResumeAll+0x138>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d010      	beq.n	8005b5e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b3c:	f000 f858 	bl	8005bf0 <xTaskIncrementTick>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8005b46:	4b16      	ldr	r3, [pc, #88]	; (8005ba0 <xTaskResumeAll+0x134>)
 8005b48:	2201      	movs	r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1f1      	bne.n	8005b3c <xTaskResumeAll+0xd0>

						xPendedTicks = 0;
 8005b58:	4b12      	ldr	r3, [pc, #72]	; (8005ba4 <xTaskResumeAll+0x138>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b5e:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <xTaskResumeAll+0x134>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b66:	2301      	movs	r3, #1
 8005b68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <xTaskResumeAll+0x13c>)
 8005b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b7a:	f000 feeb 	bl	8006954 <vPortExitCritical>

	return xAlreadyYielded;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20000554 	.word	0x20000554
 8005b8c:	2000052c 	.word	0x2000052c
 8005b90:	200004ec 	.word	0x200004ec
 8005b94:	20000534 	.word	0x20000534
 8005b98:	20000430 	.word	0x20000430
 8005b9c:	2000042c 	.word	0x2000042c
 8005ba0:	20000540 	.word	0x20000540
 8005ba4:	2000053c 	.word	0x2000053c
 8005ba8:	e000ed04 	.word	0xe000ed04

08005bac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005bb2:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <xTaskGetTickCount+0x1c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005bb8:	687b      	ldr	r3, [r7, #4]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20000530 	.word	0x20000530

08005bcc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bd2:	f000 ff79 	bl	8006ac8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005bda:	4b04      	ldr	r3, [pc, #16]	; (8005bec <xTaskGetTickCountFromISR+0x20>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005be0:	683b      	ldr	r3, [r7, #0]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000530 	.word	0x20000530

08005bf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bfa:	4b50      	ldr	r3, [pc, #320]	; (8005d3c <xTaskIncrementTick+0x14c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f040 8092 	bne.w	8005d28 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c04:	4b4e      	ldr	r3, [pc, #312]	; (8005d40 <xTaskIncrementTick+0x150>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c0c:	4a4c      	ldr	r2, [pc, #304]	; (8005d40 <xTaskIncrementTick+0x150>)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d120      	bne.n	8005c5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c18:	4b4a      	ldr	r3, [pc, #296]	; (8005d44 <xTaskIncrementTick+0x154>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <xTaskIncrementTick+0x48>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	603b      	str	r3, [r7, #0]
}
 8005c34:	bf00      	nop
 8005c36:	e7fe      	b.n	8005c36 <xTaskIncrementTick+0x46>
 8005c38:	4b42      	ldr	r3, [pc, #264]	; (8005d44 <xTaskIncrementTick+0x154>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	4b42      	ldr	r3, [pc, #264]	; (8005d48 <xTaskIncrementTick+0x158>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a40      	ldr	r2, [pc, #256]	; (8005d44 <xTaskIncrementTick+0x154>)
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	4a40      	ldr	r2, [pc, #256]	; (8005d48 <xTaskIncrementTick+0x158>)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	4b3f      	ldr	r3, [pc, #252]	; (8005d4c <xTaskIncrementTick+0x15c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3301      	adds	r3, #1
 8005c52:	4a3e      	ldr	r2, [pc, #248]	; (8005d4c <xTaskIncrementTick+0x15c>)
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	f000 fab5 	bl	80061c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c5a:	4b3d      	ldr	r3, [pc, #244]	; (8005d50 <xTaskIncrementTick+0x160>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d34c      	bcc.n	8005cfe <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c64:	4b37      	ldr	r3, [pc, #220]	; (8005d44 <xTaskIncrementTick+0x154>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d104      	bne.n	8005c78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c6e:	4b38      	ldr	r3, [pc, #224]	; (8005d50 <xTaskIncrementTick+0x160>)
 8005c70:	f04f 32ff 	mov.w	r2, #4294967295
 8005c74:	601a      	str	r2, [r3, #0]
					break;
 8005c76:	e042      	b.n	8005cfe <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c78:	4b32      	ldr	r3, [pc, #200]	; (8005d44 <xTaskIncrementTick+0x154>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d203      	bcs.n	8005c98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c90:	4a2f      	ldr	r2, [pc, #188]	; (8005d50 <xTaskIncrementTick+0x160>)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c96:	e032      	b.n	8005cfe <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff f9ab 	bl	8004ff8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d004      	beq.n	8005cb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	3318      	adds	r3, #24
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7ff f9a2 	bl	8004ff8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f002 fc7a 	bl	80085b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	409a      	lsls	r2, r3
 8005cc4:	4b23      	ldr	r3, [pc, #140]	; (8005d54 <xTaskIncrementTick+0x164>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	4a22      	ldr	r2, [pc, #136]	; (8005d54 <xTaskIncrementTick+0x164>)
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4a1f      	ldr	r2, [pc, #124]	; (8005d58 <xTaskIncrementTick+0x168>)
 8005cdc:	441a      	add	r2, r3
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	f7ff f92a 	bl	8004f3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cee:	4b1b      	ldr	r3, [pc, #108]	; (8005d5c <xTaskIncrementTick+0x16c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d3b5      	bcc.n	8005c64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cfc:	e7b2      	b.n	8005c64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cfe:	4b17      	ldr	r3, [pc, #92]	; (8005d5c <xTaskIncrementTick+0x16c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d04:	4914      	ldr	r1, [pc, #80]	; (8005d58 <xTaskIncrementTick+0x168>)
 8005d06:	4613      	mov	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d901      	bls.n	8005d1a <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8005d16:	2301      	movs	r3, #1
 8005d18:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d1a:	4b11      	ldr	r3, [pc, #68]	; (8005d60 <xTaskIncrementTick+0x170>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d007      	beq.n	8005d32 <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 8005d22:	2301      	movs	r3, #1
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	e004      	b.n	8005d32 <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d28:	4b0e      	ldr	r3, [pc, #56]	; (8005d64 <xTaskIncrementTick+0x174>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	4a0d      	ldr	r2, [pc, #52]	; (8005d64 <xTaskIncrementTick+0x174>)
 8005d30:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d32:	697b      	ldr	r3, [r7, #20]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	20000554 	.word	0x20000554
 8005d40:	20000530 	.word	0x20000530
 8005d44:	200004e4 	.word	0x200004e4
 8005d48:	200004e8 	.word	0x200004e8
 8005d4c:	20000544 	.word	0x20000544
 8005d50:	2000054c 	.word	0x2000054c
 8005d54:	20000534 	.word	0x20000534
 8005d58:	20000430 	.word	0x20000430
 8005d5c:	2000042c 	.word	0x2000042c
 8005d60:	20000540 	.word	0x20000540
 8005d64:	2000053c 	.word	0x2000053c

08005d68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d6e:	4b2d      	ldr	r3, [pc, #180]	; (8005e24 <vTaskSwitchContext+0xbc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d76:	4b2c      	ldr	r3, [pc, #176]	; (8005e28 <vTaskSwitchContext+0xc0>)
 8005d78:	2201      	movs	r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d7c:	e04d      	b.n	8005e1a <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 8005d7e:	4b2a      	ldr	r3, [pc, #168]	; (8005e28 <vTaskSwitchContext+0xc0>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d84:	4b29      	ldr	r3, [pc, #164]	; (8005e2c <vTaskSwitchContext+0xc4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	fab3 f383 	clz	r3, r3
 8005d90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005d92:	7afb      	ldrb	r3, [r7, #11]
 8005d94:	f1c3 031f 	rsb	r3, r3, #31
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	4925      	ldr	r1, [pc, #148]	; (8005e30 <vTaskSwitchContext+0xc8>)
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10a      	bne.n	8005dc4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	607b      	str	r3, [r7, #4]
}
 8005dc0:	bf00      	nop
 8005dc2:	e7fe      	b.n	8005dc2 <vTaskSwitchContext+0x5a>
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4a18      	ldr	r2, [pc, #96]	; (8005e30 <vTaskSwitchContext+0xc8>)
 8005dd0:	4413      	add	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	605a      	str	r2, [r3, #4]
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	3308      	adds	r3, #8
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d104      	bne.n	8005df4 <vTaskSwitchContext+0x8c>
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	605a      	str	r2, [r3, #4]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	4a0e      	ldr	r2, [pc, #56]	; (8005e34 <vTaskSwitchContext+0xcc>)
 8005dfc:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8005dfe:	4b0d      	ldr	r3, [pc, #52]	; (8005e34 <vTaskSwitchContext+0xcc>)
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	4b0d      	ldr	r3, [pc, #52]	; (8005e38 <vTaskSwitchContext+0xd0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d102      	bne.n	8005e10 <vTaskSwitchContext+0xa8>
 8005e0a:	f002 fb2d 	bl	8008468 <SEGGER_SYSVIEW_OnIdle>
}
 8005e0e:	e004      	b.n	8005e1a <vTaskSwitchContext+0xb2>
		traceTASK_SWITCHED_IN();
 8005e10:	4b08      	ldr	r3, [pc, #32]	; (8005e34 <vTaskSwitchContext+0xcc>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f002 fb87 	bl	8008528 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8005e1a:	bf00      	nop
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000554 	.word	0x20000554
 8005e28:	20000540 	.word	0x20000540
 8005e2c:	20000534 	.word	0x20000534
 8005e30:	20000430 	.word	0x20000430
 8005e34:	2000042c 	.word	0x2000042c
 8005e38:	20000550 	.word	0x20000550

08005e3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	60fb      	str	r3, [r7, #12]
}
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e62:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <vTaskPlaceOnEventList+0x44>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3318      	adds	r3, #24
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7ff f88b 	bl	8004f86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e70:	2101      	movs	r1, #1
 8005e72:	6838      	ldr	r0, [r7, #0]
 8005e74:	f000 fb9a 	bl	80065ac <prvAddCurrentTaskToDelayedList>
}
 8005e78:	bf00      	nop
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	2000042c 	.word	0x2000042c

08005e84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	60fb      	str	r3, [r7, #12]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	3318      	adds	r3, #24
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff f89f 	bl	8004ff8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eba:	4b1f      	ldr	r3, [pc, #124]	; (8005f38 <xTaskRemoveFromEventList+0xb4>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d120      	bne.n	8005f04 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff f896 	bl	8004ff8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f002 fb6e 	bl	80085b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	2201      	movs	r2, #1
 8005eda:	409a      	lsls	r2, r3
 8005edc:	4b17      	ldr	r3, [pc, #92]	; (8005f3c <xTaskRemoveFromEventList+0xb8>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	4a16      	ldr	r2, [pc, #88]	; (8005f3c <xTaskRemoveFromEventList+0xb8>)
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4a13      	ldr	r2, [pc, #76]	; (8005f40 <xTaskRemoveFromEventList+0xbc>)
 8005ef4:	441a      	add	r2, r3
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	4619      	mov	r1, r3
 8005efc:	4610      	mov	r0, r2
 8005efe:	f7ff f81e 	bl	8004f3e <vListInsertEnd>
 8005f02:	e005      	b.n	8005f10 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	3318      	adds	r3, #24
 8005f08:	4619      	mov	r1, r3
 8005f0a:	480e      	ldr	r0, [pc, #56]	; (8005f44 <xTaskRemoveFromEventList+0xc0>)
 8005f0c:	f7ff f817 	bl	8004f3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f14:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <xTaskRemoveFromEventList+0xc4>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d905      	bls.n	8005f2a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f22:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <xTaskRemoveFromEventList+0xc8>)
 8005f24:	2201      	movs	r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	e001      	b.n	8005f2e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f2e:	697b      	ldr	r3, [r7, #20]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	20000554 	.word	0x20000554
 8005f3c:	20000534 	.word	0x20000534
 8005f40:	20000430 	.word	0x20000430
 8005f44:	200004ec 	.word	0x200004ec
 8005f48:	2000042c 	.word	0x2000042c
 8005f4c:	20000540 	.word	0x20000540

08005f50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f58:	4b06      	ldr	r3, [pc, #24]	; (8005f74 <vTaskInternalSetTimeOutState+0x24>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f60:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <vTaskInternalSetTimeOutState+0x28>)
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	605a      	str	r2, [r3, #4]
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	20000544 	.word	0x20000544
 8005f78:	20000530 	.word	0x20000530

08005f7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10a      	bne.n	8005fa2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	613b      	str	r3, [r7, #16]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	60fb      	str	r3, [r7, #12]
}
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005fbe:	f000 fc99 	bl	80068f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005fc2:	4b1d      	ldr	r3, [pc, #116]	; (8006038 <xTaskCheckForTimeOut+0xbc>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fda:	d102      	bne.n	8005fe2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61fb      	str	r3, [r7, #28]
 8005fe0:	e023      	b.n	800602a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4b15      	ldr	r3, [pc, #84]	; (800603c <xTaskCheckForTimeOut+0xc0>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d007      	beq.n	8005ffe <xTaskCheckForTimeOut+0x82>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d302      	bcc.n	8005ffe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	61fb      	str	r3, [r7, #28]
 8005ffc:	e015      	b.n	800602a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	429a      	cmp	r2, r3
 8006006:	d20b      	bcs.n	8006020 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	1ad2      	subs	r2, r2, r3
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff ff9b 	bl	8005f50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800601a:	2300      	movs	r3, #0
 800601c:	61fb      	str	r3, [r7, #28]
 800601e:	e004      	b.n	800602a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006026:	2301      	movs	r3, #1
 8006028:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800602a:	f000 fc93 	bl	8006954 <vPortExitCritical>

	return xReturn;
 800602e:	69fb      	ldr	r3, [r7, #28]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3720      	adds	r7, #32
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	20000530 	.word	0x20000530
 800603c:	20000544 	.word	0x20000544

08006040 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006044:	4b03      	ldr	r3, [pc, #12]	; (8006054 <vTaskMissedYield+0x14>)
 8006046:	2201      	movs	r2, #1
 8006048:	601a      	str	r2, [r3, #0]
}
 800604a:	bf00      	nop
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	20000540 	.word	0x20000540

08006058 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006060:	f000 f852 	bl	8006108 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <prvIdleTask+0x28>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d9f9      	bls.n	8006060 <prvIdleTask+0x8>
			{
				taskYIELD();
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <prvIdleTask+0x2c>)
 800606e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800607c:	e7f0      	b.n	8006060 <prvIdleTask+0x8>
 800607e:	bf00      	nop
 8006080:	20000430 	.word	0x20000430
 8006084:	e000ed04 	.word	0xe000ed04

08006088 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800608e:	2300      	movs	r3, #0
 8006090:	607b      	str	r3, [r7, #4]
 8006092:	e00c      	b.n	80060ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4a12      	ldr	r2, [pc, #72]	; (80060e8 <prvInitialiseTaskLists+0x60>)
 80060a0:	4413      	add	r3, r2
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe ff1e 	bl	8004ee4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3301      	adds	r3, #1
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b06      	cmp	r3, #6
 80060b2:	d9ef      	bls.n	8006094 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060b4:	480d      	ldr	r0, [pc, #52]	; (80060ec <prvInitialiseTaskLists+0x64>)
 80060b6:	f7fe ff15 	bl	8004ee4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060ba:	480d      	ldr	r0, [pc, #52]	; (80060f0 <prvInitialiseTaskLists+0x68>)
 80060bc:	f7fe ff12 	bl	8004ee4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060c0:	480c      	ldr	r0, [pc, #48]	; (80060f4 <prvInitialiseTaskLists+0x6c>)
 80060c2:	f7fe ff0f 	bl	8004ee4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060c6:	480c      	ldr	r0, [pc, #48]	; (80060f8 <prvInitialiseTaskLists+0x70>)
 80060c8:	f7fe ff0c 	bl	8004ee4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060cc:	480b      	ldr	r0, [pc, #44]	; (80060fc <prvInitialiseTaskLists+0x74>)
 80060ce:	f7fe ff09 	bl	8004ee4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060d2:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <prvInitialiseTaskLists+0x78>)
 80060d4:	4a05      	ldr	r2, [pc, #20]	; (80060ec <prvInitialiseTaskLists+0x64>)
 80060d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060d8:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <prvInitialiseTaskLists+0x7c>)
 80060da:	4a05      	ldr	r2, [pc, #20]	; (80060f0 <prvInitialiseTaskLists+0x68>)
 80060dc:	601a      	str	r2, [r3, #0]
}
 80060de:	bf00      	nop
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20000430 	.word	0x20000430
 80060ec:	200004bc 	.word	0x200004bc
 80060f0:	200004d0 	.word	0x200004d0
 80060f4:	200004ec 	.word	0x200004ec
 80060f8:	20000500 	.word	0x20000500
 80060fc:	20000518 	.word	0x20000518
 8006100:	200004e4 	.word	0x200004e4
 8006104:	200004e8 	.word	0x200004e8

08006108 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800610e:	e019      	b.n	8006144 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006110:	f000 fbf0 	bl	80068f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006114:	4b10      	ldr	r3, [pc, #64]	; (8006158 <prvCheckTasksWaitingTermination+0x50>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3304      	adds	r3, #4
 8006120:	4618      	mov	r0, r3
 8006122:	f7fe ff69 	bl	8004ff8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006126:	4b0d      	ldr	r3, [pc, #52]	; (800615c <prvCheckTasksWaitingTermination+0x54>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3b01      	subs	r3, #1
 800612c:	4a0b      	ldr	r2, [pc, #44]	; (800615c <prvCheckTasksWaitingTermination+0x54>)
 800612e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006130:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <prvCheckTasksWaitingTermination+0x58>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3b01      	subs	r3, #1
 8006136:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <prvCheckTasksWaitingTermination+0x58>)
 8006138:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800613a:	f000 fc0b 	bl	8006954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f810 	bl	8006164 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006144:	4b06      	ldr	r3, [pc, #24]	; (8006160 <prvCheckTasksWaitingTermination+0x58>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1e1      	bne.n	8006110 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000500 	.word	0x20000500
 800615c:	2000052c 	.word	0x2000052c
 8006160:	20000514 	.word	0x20000514

08006164 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006172:	2b00      	cmp	r3, #0
 8006174:	d108      	bne.n	8006188 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fe08 	bl	8006d90 <vPortFree>
				vPortFree( pxTCB );
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fe05 	bl	8006d90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006186:	e018      	b.n	80061ba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800618e:	2b01      	cmp	r3, #1
 8006190:	d103      	bne.n	800619a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fdfc 	bl	8006d90 <vPortFree>
	}
 8006198:	e00f      	b.n	80061ba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d00a      	beq.n	80061ba <prvDeleteTCB+0x56>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	60fb      	str	r3, [r7, #12]
}
 80061b6:	bf00      	nop
 80061b8:	e7fe      	b.n	80061b8 <prvDeleteTCB+0x54>
	}
 80061ba:	bf00      	nop
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ca:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <prvResetNextTaskUnblockTime+0x38>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061d4:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <prvResetNextTaskUnblockTime+0x3c>)
 80061d6:	f04f 32ff 	mov.w	r2, #4294967295
 80061da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061dc:	e008      	b.n	80061f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061de:	4b07      	ldr	r3, [pc, #28]	; (80061fc <prvResetNextTaskUnblockTime+0x38>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	4a04      	ldr	r2, [pc, #16]	; (8006200 <prvResetNextTaskUnblockTime+0x3c>)
 80061ee:	6013      	str	r3, [r2, #0]
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	200004e4 	.word	0x200004e4
 8006200:	2000054c 	.word	0x2000054c

08006204 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800620a:	4b0b      	ldr	r3, [pc, #44]	; (8006238 <xTaskGetSchedulerState+0x34>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d102      	bne.n	8006218 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006212:	2301      	movs	r3, #1
 8006214:	607b      	str	r3, [r7, #4]
 8006216:	e008      	b.n	800622a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006218:	4b08      	ldr	r3, [pc, #32]	; (800623c <xTaskGetSchedulerState+0x38>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d102      	bne.n	8006226 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006220:	2302      	movs	r3, #2
 8006222:	607b      	str	r3, [r7, #4]
 8006224:	e001      	b.n	800622a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006226:	2300      	movs	r3, #0
 8006228:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800622a:	687b      	ldr	r3, [r7, #4]
	}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	20000538 	.word	0x20000538
 800623c:	20000554 	.word	0x20000554

08006240 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d073      	beq.n	800633e <xTaskPriorityDisinherit+0xfe>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006256:	4b3c      	ldr	r3, [pc, #240]	; (8006348 <xTaskPriorityDisinherit+0x108>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	429a      	cmp	r2, r3
 800625e:	d00a      	beq.n	8006276 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	60fb      	str	r3, [r7, #12]
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	60bb      	str	r3, [r7, #8]
}
 8006290:	bf00      	nop
 8006292:	e7fe      	b.n	8006292 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006298:	1e5a      	subs	r2, r3, #1
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d049      	beq.n	800633e <xTaskPriorityDisinherit+0xfe>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d145      	bne.n	800633e <xTaskPriorityDisinherit+0xfe>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	3304      	adds	r3, #4
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fe fe9e 	bl	8004ff8 <uxListRemove>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d115      	bne.n	80062ee <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c6:	4921      	ldr	r1, [pc, #132]	; (800634c <xTaskPriorityDisinherit+0x10c>)
 80062c8:	4613      	mov	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	440b      	add	r3, r1
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10a      	bne.n	80062ee <xTaskPriorityDisinherit+0xae>
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	2201      	movs	r2, #1
 80062de:	fa02 f303 	lsl.w	r3, r2, r3
 80062e2:	43da      	mvns	r2, r3
 80062e4:	4b1a      	ldr	r3, [pc, #104]	; (8006350 <xTaskPriorityDisinherit+0x110>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4013      	ands	r3, r2
 80062ea:	4a19      	ldr	r2, [pc, #100]	; (8006350 <xTaskPriorityDisinherit+0x110>)
 80062ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4619      	mov	r1, r3
 80062f2:	204a      	movs	r0, #74	; 0x4a
 80062f4:	f001 fc4a 	bl	8007b8c <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	f1c3 0207 	rsb	r2, r3, #7
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	2201      	movs	r2, #1
 8006312:	409a      	lsls	r2, r3
 8006314:	4b0e      	ldr	r3, [pc, #56]	; (8006350 <xTaskPriorityDisinherit+0x110>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4313      	orrs	r3, r2
 800631a:	4a0d      	ldr	r2, [pc, #52]	; (8006350 <xTaskPriorityDisinherit+0x110>)
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4a08      	ldr	r2, [pc, #32]	; (800634c <xTaskPriorityDisinherit+0x10c>)
 800632c:	441a      	add	r2, r3
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	3304      	adds	r3, #4
 8006332:	4619      	mov	r1, r3
 8006334:	4610      	mov	r0, r2
 8006336:	f7fe fe02 	bl	8004f3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800633a:	2301      	movs	r3, #1
 800633c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800633e:	697b      	ldr	r3, [r7, #20]
	}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	2000042c 	.word	0x2000042c
 800634c:	20000430 	.word	0x20000430
 8006350:	20000534 	.word	0x20000534

08006354 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af02      	add	r7, sp, #8
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006362:	f000 fac7 	bl	80068f4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006366:	4b2b      	ldr	r3, [pc, #172]	; (8006414 <xTaskNotifyWait+0xc0>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d01a      	beq.n	80063aa <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006374:	4b27      	ldr	r3, [pc, #156]	; (8006414 <xTaskNotifyWait+0xc0>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	43d2      	mvns	r2, r2
 800637e:	400a      	ands	r2, r1
 8006380:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006382:	4b24      	ldr	r3, [pc, #144]	; (8006414 <xTaskNotifyWait+0xc0>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00b      	beq.n	80063aa <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006392:	2101      	movs	r1, #1
 8006394:	6838      	ldr	r0, [r7, #0]
 8006396:	f000 f909 	bl	80065ac <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800639a:	4b1f      	ldr	r3, [pc, #124]	; (8006418 <xTaskNotifyWait+0xc4>)
 800639c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80063aa:	f000 fad3 	bl	8006954 <vPortExitCritical>

		taskENTER_CRITICAL();
 80063ae:	f000 faa1 	bl	80068f4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	68f9      	ldr	r1, [r7, #12]
 80063be:	2040      	movs	r0, #64	; 0x40
 80063c0:	f001 fc7a 	bl	8007cb8 <SEGGER_SYSVIEW_RecordU32x4>

			if( pulNotificationValue != NULL )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d004      	beq.n	80063d4 <xTaskNotifyWait+0x80>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80063ca:	4b12      	ldr	r3, [pc, #72]	; (8006414 <xTaskNotifyWait+0xc0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80063d4:	4b0f      	ldr	r3, [pc, #60]	; (8006414 <xTaskNotifyWait+0xc0>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d002      	beq.n	80063e8 <xTaskNotifyWait+0x94>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80063e2:	2300      	movs	r3, #0
 80063e4:	617b      	str	r3, [r7, #20]
 80063e6:	e008      	b.n	80063fa <xTaskNotifyWait+0xa6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80063e8:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <xTaskNotifyWait+0xc0>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	43d2      	mvns	r2, r2
 80063f2:	400a      	ands	r2, r1
 80063f4:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80063f6:	2301      	movs	r3, #1
 80063f8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063fa:	4b06      	ldr	r3, [pc, #24]	; (8006414 <xTaskNotifyWait+0xc0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8006404:	f000 faa6 	bl	8006954 <vPortExitCritical>

		return xReturn;
 8006408:	697b      	ldr	r3, [r7, #20]
	}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	2000042c 	.word	0x2000042c
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08c      	sub	sp, #48	; 0x30
 8006420:	af02      	add	r7, sp, #8
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	603b      	str	r3, [r7, #0]
 8006428:	4613      	mov	r3, r2
 800642a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800642c:	2301      	movs	r3, #1
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10a      	bne.n	800644c <xTaskGenericNotify+0x30>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	61bb      	str	r3, [r7, #24]
}
 8006448:	bf00      	nop
 800644a:	e7fe      	b.n	800644a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006450:	f000 fa50 	bl	80068f4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006468:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	2202      	movs	r2, #2
 800646e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	2b04      	cmp	r3, #4
 8006476:	d828      	bhi.n	80064ca <xTaskGenericNotify+0xae>
 8006478:	a201      	add	r2, pc, #4	; (adr r2, 8006480 <xTaskGenericNotify+0x64>)
 800647a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647e:	bf00      	nop
 8006480:	080064eb 	.word	0x080064eb
 8006484:	08006495 	.word	0x08006495
 8006488:	080064a3 	.word	0x080064a3
 800648c:	080064af 	.word	0x080064af
 8006490:	080064b7 	.word	0x080064b7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	431a      	orrs	r2, r3
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80064a0:	e026      	b.n	80064f0 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80064ac:	e020      	b.n	80064f0 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80064b4:	e01c      	b.n	80064f0 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80064b6:	7ffb      	ldrb	r3, [r7, #31]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d003      	beq.n	80064c4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80064c2:	e015      	b.n	80064f0 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80064c8:	e012      	b.n	80064f0 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d2:	d00c      	beq.n	80064ee <xTaskGenericNotify+0xd2>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	617b      	str	r3, [r7, #20]
}
 80064e6:	bf00      	nop
 80064e8:	e7fe      	b.n	80064e8 <xTaskGenericNotify+0xcc>
					break;
 80064ea:	bf00      	nop
 80064ec:	e000      	b.n	80064f0 <xTaskGenericNotify+0xd4>

					break;
 80064ee:	bf00      	nop
			}

			traceTASK_NOTIFY();
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f002 f900 	bl	80086f8 <SEGGER_SYSVIEW_ShrinkId>
 80064f8:	4601      	mov	r1, r0
 80064fa:	79fa      	ldrb	r2, [r7, #7]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	4613      	mov	r3, r2
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	203e      	movs	r0, #62	; 0x3e
 8006506:	f001 fbd7 	bl	8007cb8 <SEGGER_SYSVIEW_RecordU32x4>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800650a:	7ffb      	ldrb	r3, [r7, #31]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d13d      	bne.n	800658c <xTaskGenericNotify+0x170>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	3304      	adds	r3, #4
 8006514:	4618      	mov	r0, r3
 8006516:	f7fe fd6f 	bl	8004ff8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	4618      	mov	r0, r3
 800651e:	f002 f847 	bl	80085b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	2201      	movs	r2, #1
 8006528:	409a      	lsls	r2, r3
 800652a:	4b1c      	ldr	r3, [pc, #112]	; (800659c <xTaskGenericNotify+0x180>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4313      	orrs	r3, r2
 8006530:	4a1a      	ldr	r2, [pc, #104]	; (800659c <xTaskGenericNotify+0x180>)
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006538:	4613      	mov	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4a17      	ldr	r2, [pc, #92]	; (80065a0 <xTaskGenericNotify+0x184>)
 8006542:	441a      	add	r2, r3
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	3304      	adds	r3, #4
 8006548:	4619      	mov	r1, r3
 800654a:	4610      	mov	r0, r2
 800654c:	f7fe fcf7 	bl	8004f3e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00a      	beq.n	800656e <xTaskGenericNotify+0x152>
	__asm volatile
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	f383 8811 	msr	BASEPRI, r3
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	613b      	str	r3, [r7, #16]
}
 800656a:	bf00      	nop
 800656c:	e7fe      	b.n	800656c <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006572:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <xTaskGenericNotify+0x188>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006578:	429a      	cmp	r2, r3
 800657a:	d907      	bls.n	800658c <xTaskGenericNotify+0x170>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800657c:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <xTaskGenericNotify+0x18c>)
 800657e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800658c:	f000 f9e2 	bl	8006954 <vPortExitCritical>

		return xReturn;
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006592:	4618      	mov	r0, r3
 8006594:	3728      	adds	r7, #40	; 0x28
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20000534 	.word	0x20000534
 80065a0:	20000430 	.word	0x20000430
 80065a4:	2000042c 	.word	0x2000042c
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065b6:	4b32      	ldr	r3, [pc, #200]	; (8006680 <prvAddCurrentTaskToDelayedList+0xd4>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065bc:	4b31      	ldr	r3, [pc, #196]	; (8006684 <prvAddCurrentTaskToDelayedList+0xd8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3304      	adds	r3, #4
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe fd18 	bl	8004ff8 <uxListRemove>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10b      	bne.n	80065e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80065ce:	4b2d      	ldr	r3, [pc, #180]	; (8006684 <prvAddCurrentTaskToDelayedList+0xd8>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	2201      	movs	r2, #1
 80065d6:	fa02 f303 	lsl.w	r3, r2, r3
 80065da:	43da      	mvns	r2, r3
 80065dc:	4b2a      	ldr	r3, [pc, #168]	; (8006688 <prvAddCurrentTaskToDelayedList+0xdc>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4013      	ands	r3, r2
 80065e2:	4a29      	ldr	r2, [pc, #164]	; (8006688 <prvAddCurrentTaskToDelayedList+0xdc>)
 80065e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d110      	bne.n	8006610 <prvAddCurrentTaskToDelayedList+0x64>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00d      	beq.n	8006610 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80065f4:	4b23      	ldr	r3, [pc, #140]	; (8006684 <prvAddCurrentTaskToDelayedList+0xd8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	211b      	movs	r1, #27
 80065fa:	4618      	mov	r0, r3
 80065fc:	f002 f81c 	bl	8008638 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006600:	4b20      	ldr	r3, [pc, #128]	; (8006684 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3304      	adds	r3, #4
 8006606:	4619      	mov	r1, r3
 8006608:	4820      	ldr	r0, [pc, #128]	; (800668c <prvAddCurrentTaskToDelayedList+0xe0>)
 800660a:	f7fe fc98 	bl	8004f3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800660e:	e032      	b.n	8006676 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4413      	add	r3, r2
 8006616:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006618:	4b1a      	ldr	r3, [pc, #104]	; (8006684 <prvAddCurrentTaskToDelayedList+0xd8>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	429a      	cmp	r2, r3
 8006626:	d20f      	bcs.n	8006648 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8006628:	4b16      	ldr	r3, [pc, #88]	; (8006684 <prvAddCurrentTaskToDelayedList+0xd8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2104      	movs	r1, #4
 800662e:	4618      	mov	r0, r3
 8006630:	f002 f802 	bl	8008638 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006634:	4b16      	ldr	r3, [pc, #88]	; (8006690 <prvAddCurrentTaskToDelayedList+0xe4>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	4b12      	ldr	r3, [pc, #72]	; (8006684 <prvAddCurrentTaskToDelayedList+0xd8>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3304      	adds	r3, #4
 800663e:	4619      	mov	r1, r3
 8006640:	4610      	mov	r0, r2
 8006642:	f7fe fca0 	bl	8004f86 <vListInsert>
}
 8006646:	e016      	b.n	8006676 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8006648:	4b0e      	ldr	r3, [pc, #56]	; (8006684 <prvAddCurrentTaskToDelayedList+0xd8>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2104      	movs	r1, #4
 800664e:	4618      	mov	r0, r3
 8006650:	f001 fff2 	bl	8008638 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006654:	4b0f      	ldr	r3, [pc, #60]	; (8006694 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	4b0a      	ldr	r3, [pc, #40]	; (8006684 <prvAddCurrentTaskToDelayedList+0xd8>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3304      	adds	r3, #4
 800665e:	4619      	mov	r1, r3
 8006660:	4610      	mov	r0, r2
 8006662:	f7fe fc90 	bl	8004f86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006666:	4b0c      	ldr	r3, [pc, #48]	; (8006698 <prvAddCurrentTaskToDelayedList+0xec>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	429a      	cmp	r2, r3
 800666e:	d202      	bcs.n	8006676 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8006670:	4a09      	ldr	r2, [pc, #36]	; (8006698 <prvAddCurrentTaskToDelayedList+0xec>)
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	6013      	str	r3, [r2, #0]
}
 8006676:	bf00      	nop
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20000530 	.word	0x20000530
 8006684:	2000042c 	.word	0x2000042c
 8006688:	20000534 	.word	0x20000534
 800668c:	20000518 	.word	0x20000518
 8006690:	200004e8 	.word	0x200004e8
 8006694:	200004e4 	.word	0x200004e4
 8006698:	2000054c 	.word	0x2000054c

0800669c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3b04      	subs	r3, #4
 80066ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3b04      	subs	r3, #4
 80066ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f023 0201 	bic.w	r2, r3, #1
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3b04      	subs	r3, #4
 80066ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066cc:	4a0c      	ldr	r2, [pc, #48]	; (8006700 <pxPortInitialiseStack+0x64>)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3b14      	subs	r3, #20
 80066d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3b04      	subs	r3, #4
 80066e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f06f 0202 	mvn.w	r2, #2
 80066ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3b20      	subs	r3, #32
 80066f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066f2:	68fb      	ldr	r3, [r7, #12]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	08006705 	.word	0x08006705

08006704 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800670a:	2300      	movs	r3, #0
 800670c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800670e:	4b12      	ldr	r3, [pc, #72]	; (8006758 <prvTaskExitError+0x54>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006716:	d00a      	beq.n	800672e <prvTaskExitError+0x2a>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	60fb      	str	r3, [r7, #12]
}
 800672a:	bf00      	nop
 800672c:	e7fe      	b.n	800672c <prvTaskExitError+0x28>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	60bb      	str	r3, [r7, #8]
}
 8006740:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006742:	bf00      	nop
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0fc      	beq.n	8006744 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800674a:	bf00      	nop
 800674c:	bf00      	nop
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	2000000c 	.word	0x2000000c
 800675c:	00000000 	.word	0x00000000

08006760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006760:	4b07      	ldr	r3, [pc, #28]	; (8006780 <pxCurrentTCBConst2>)
 8006762:	6819      	ldr	r1, [r3, #0]
 8006764:	6808      	ldr	r0, [r1, #0]
 8006766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676a:	f380 8809 	msr	PSP, r0
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f04f 0000 	mov.w	r0, #0
 8006776:	f380 8811 	msr	BASEPRI, r0
 800677a:	4770      	bx	lr
 800677c:	f3af 8000 	nop.w

08006780 <pxCurrentTCBConst2>:
 8006780:	2000042c 	.word	0x2000042c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop

08006788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006788:	4808      	ldr	r0, [pc, #32]	; (80067ac <prvPortStartFirstTask+0x24>)
 800678a:	6800      	ldr	r0, [r0, #0]
 800678c:	6800      	ldr	r0, [r0, #0]
 800678e:	f380 8808 	msr	MSP, r0
 8006792:	f04f 0000 	mov.w	r0, #0
 8006796:	f380 8814 	msr	CONTROL, r0
 800679a:	b662      	cpsie	i
 800679c:	b661      	cpsie	f
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	df00      	svc	0
 80067a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067aa:	bf00      	nop
 80067ac:	e000ed08 	.word	0xe000ed08

080067b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067b6:	4b46      	ldr	r3, [pc, #280]	; (80068d0 <xPortStartScheduler+0x120>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a46      	ldr	r2, [pc, #280]	; (80068d4 <xPortStartScheduler+0x124>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d10a      	bne.n	80067d6 <xPortStartScheduler+0x26>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	613b      	str	r3, [r7, #16]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067d6:	4b3e      	ldr	r3, [pc, #248]	; (80068d0 <xPortStartScheduler+0x120>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a3f      	ldr	r2, [pc, #252]	; (80068d8 <xPortStartScheduler+0x128>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d10a      	bne.n	80067f6 <xPortStartScheduler+0x46>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	60fb      	str	r3, [r7, #12]
}
 80067f2:	bf00      	nop
 80067f4:	e7fe      	b.n	80067f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067f6:	4b39      	ldr	r3, [pc, #228]	; (80068dc <xPortStartScheduler+0x12c>)
 80067f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	22ff      	movs	r2, #255	; 0xff
 8006806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	b2db      	uxtb	r3, r3
 800680e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006818:	b2da      	uxtb	r2, r3
 800681a:	4b31      	ldr	r3, [pc, #196]	; (80068e0 <xPortStartScheduler+0x130>)
 800681c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800681e:	4b31      	ldr	r3, [pc, #196]	; (80068e4 <xPortStartScheduler+0x134>)
 8006820:	2207      	movs	r2, #7
 8006822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006824:	e009      	b.n	800683a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006826:	4b2f      	ldr	r3, [pc, #188]	; (80068e4 <xPortStartScheduler+0x134>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3b01      	subs	r3, #1
 800682c:	4a2d      	ldr	r2, [pc, #180]	; (80068e4 <xPortStartScheduler+0x134>)
 800682e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	b2db      	uxtb	r3, r3
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	b2db      	uxtb	r3, r3
 8006838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800683a:	78fb      	ldrb	r3, [r7, #3]
 800683c:	b2db      	uxtb	r3, r3
 800683e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006842:	2b80      	cmp	r3, #128	; 0x80
 8006844:	d0ef      	beq.n	8006826 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006846:	4b27      	ldr	r3, [pc, #156]	; (80068e4 <xPortStartScheduler+0x134>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f1c3 0307 	rsb	r3, r3, #7
 800684e:	2b04      	cmp	r3, #4
 8006850:	d00a      	beq.n	8006868 <xPortStartScheduler+0xb8>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	60bb      	str	r3, [r7, #8]
}
 8006864:	bf00      	nop
 8006866:	e7fe      	b.n	8006866 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006868:	4b1e      	ldr	r3, [pc, #120]	; (80068e4 <xPortStartScheduler+0x134>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	021b      	lsls	r3, r3, #8
 800686e:	4a1d      	ldr	r2, [pc, #116]	; (80068e4 <xPortStartScheduler+0x134>)
 8006870:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006872:	4b1c      	ldr	r3, [pc, #112]	; (80068e4 <xPortStartScheduler+0x134>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800687a:	4a1a      	ldr	r2, [pc, #104]	; (80068e4 <xPortStartScheduler+0x134>)
 800687c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	b2da      	uxtb	r2, r3
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006886:	4b18      	ldr	r3, [pc, #96]	; (80068e8 <xPortStartScheduler+0x138>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a17      	ldr	r2, [pc, #92]	; (80068e8 <xPortStartScheduler+0x138>)
 800688c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006892:	4b15      	ldr	r3, [pc, #84]	; (80068e8 <xPortStartScheduler+0x138>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a14      	ldr	r2, [pc, #80]	; (80068e8 <xPortStartScheduler+0x138>)
 8006898:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800689c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800689e:	f000 f8e5 	bl	8006a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068a2:	4b12      	ldr	r3, [pc, #72]	; (80068ec <xPortStartScheduler+0x13c>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068a8:	f000 f904 	bl	8006ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068ac:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <xPortStartScheduler+0x140>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a0f      	ldr	r2, [pc, #60]	; (80068f0 <xPortStartScheduler+0x140>)
 80068b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80068b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068b8:	f7ff ff66 	bl	8006788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068bc:	f7ff fa54 	bl	8005d68 <vTaskSwitchContext>
	prvTaskExitError();
 80068c0:	f7ff ff20 	bl	8006704 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	e000ed00 	.word	0xe000ed00
 80068d4:	410fc271 	.word	0x410fc271
 80068d8:	410fc270 	.word	0x410fc270
 80068dc:	e000e400 	.word	0xe000e400
 80068e0:	20000558 	.word	0x20000558
 80068e4:	2000055c 	.word	0x2000055c
 80068e8:	e000ed20 	.word	0xe000ed20
 80068ec:	2000000c 	.word	0x2000000c
 80068f0:	e000ef34 	.word	0xe000ef34

080068f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	607b      	str	r3, [r7, #4]
}
 800690c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800690e:	4b0f      	ldr	r3, [pc, #60]	; (800694c <vPortEnterCritical+0x58>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3301      	adds	r3, #1
 8006914:	4a0d      	ldr	r2, [pc, #52]	; (800694c <vPortEnterCritical+0x58>)
 8006916:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006918:	4b0c      	ldr	r3, [pc, #48]	; (800694c <vPortEnterCritical+0x58>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d10f      	bne.n	8006940 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006920:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <vPortEnterCritical+0x5c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <vPortEnterCritical+0x4c>
	__asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	603b      	str	r3, [r7, #0]
}
 800693c:	bf00      	nop
 800693e:	e7fe      	b.n	800693e <vPortEnterCritical+0x4a>
	}
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	2000000c 	.word	0x2000000c
 8006950:	e000ed04 	.word	0xe000ed04

08006954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800695a:	4b12      	ldr	r3, [pc, #72]	; (80069a4 <vPortExitCritical+0x50>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10a      	bne.n	8006978 <vPortExitCritical+0x24>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	607b      	str	r3, [r7, #4]
}
 8006974:	bf00      	nop
 8006976:	e7fe      	b.n	8006976 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006978:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <vPortExitCritical+0x50>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3b01      	subs	r3, #1
 800697e:	4a09      	ldr	r2, [pc, #36]	; (80069a4 <vPortExitCritical+0x50>)
 8006980:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006982:	4b08      	ldr	r3, [pc, #32]	; (80069a4 <vPortExitCritical+0x50>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d105      	bne.n	8006996 <vPortExitCritical+0x42>
 800698a:	2300      	movs	r3, #0
 800698c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	f383 8811 	msr	BASEPRI, r3
}
 8006994:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006996:	bf00      	nop
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	2000000c 	.word	0x2000000c
	...

080069b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069b0:	f3ef 8009 	mrs	r0, PSP
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	4b15      	ldr	r3, [pc, #84]	; (8006a10 <pxCurrentTCBConst>)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	f01e 0f10 	tst.w	lr, #16
 80069c0:	bf08      	it	eq
 80069c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ca:	6010      	str	r0, [r2, #0]
 80069cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069d4:	f380 8811 	msr	BASEPRI, r0
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f7ff f9c2 	bl	8005d68 <vTaskSwitchContext>
 80069e4:	f04f 0000 	mov.w	r0, #0
 80069e8:	f380 8811 	msr	BASEPRI, r0
 80069ec:	bc09      	pop	{r0, r3}
 80069ee:	6819      	ldr	r1, [r3, #0]
 80069f0:	6808      	ldr	r0, [r1, #0]
 80069f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f6:	f01e 0f10 	tst.w	lr, #16
 80069fa:	bf08      	it	eq
 80069fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a00:	f380 8809 	msr	PSP, r0
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	f3af 8000 	nop.w

08006a10 <pxCurrentTCBConst>:
 8006a10:	2000042c 	.word	0x2000042c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a14:	bf00      	nop
 8006a16:	bf00      	nop

08006a18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	607b      	str	r3, [r7, #4]
}
 8006a30:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8006a32:	f001 fc9f 	bl	8008374 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a36:	f7ff f8db 	bl	8005bf0 <xTaskIncrementTick>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d006      	beq.n	8006a4e <xPortSysTickHandler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8006a40:	f001 fcf6 	bl	8008430 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a44:	4b08      	ldr	r3, [pc, #32]	; (8006a68 <xPortSysTickHandler+0x50>)
 8006a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	e001      	b.n	8006a52 <xPortSysTickHandler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 8006a4e:	f001 fcd3 	bl	80083f8 <SEGGER_SYSVIEW_RecordExitISR>
 8006a52:	2300      	movs	r3, #0
 8006a54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	f383 8811 	msr	BASEPRI, r3
}
 8006a5c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a5e:	bf00      	nop
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <vPortSetupTimerInterrupt+0x34>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a76:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <vPortSetupTimerInterrupt+0x38>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a7c:	4b0a      	ldr	r3, [pc, #40]	; (8006aa8 <vPortSetupTimerInterrupt+0x3c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a0a      	ldr	r2, [pc, #40]	; (8006aac <vPortSetupTimerInterrupt+0x40>)
 8006a82:	fba2 2303 	umull	r2, r3, r2, r3
 8006a86:	099b      	lsrs	r3, r3, #6
 8006a88:	4a09      	ldr	r2, [pc, #36]	; (8006ab0 <vPortSetupTimerInterrupt+0x44>)
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a8e:	4b04      	ldr	r3, [pc, #16]	; (8006aa0 <vPortSetupTimerInterrupt+0x34>)
 8006a90:	2207      	movs	r2, #7
 8006a92:	601a      	str	r2, [r3, #0]
}
 8006a94:	bf00      	nop
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	e000e010 	.word	0xe000e010
 8006aa4:	e000e018 	.word	0xe000e018
 8006aa8:	20000000 	.word	0x20000000
 8006aac:	10624dd3 	.word	0x10624dd3
 8006ab0:	e000e014 	.word	0xe000e014

08006ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ac4 <vPortEnableVFP+0x10>
 8006ab8:	6801      	ldr	r1, [r0, #0]
 8006aba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006abe:	6001      	str	r1, [r0, #0]
 8006ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ac2:	bf00      	nop
 8006ac4:	e000ed88 	.word	0xe000ed88

08006ac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/


	void vPortValidateInterruptPriority( void )
	{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006ace:	f3ef 8305 	mrs	r3, IPSR
 8006ad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b0f      	cmp	r3, #15
 8006ad8:	d914      	bls.n	8006b04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006ada:	4a17      	ldr	r2, [pc, #92]	; (8006b38 <vPortValidateInterruptPriority+0x70>)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ae4:	4b15      	ldr	r3, [pc, #84]	; (8006b3c <vPortValidateInterruptPriority+0x74>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	7afa      	ldrb	r2, [r7, #11]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d20a      	bcs.n	8006b04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	607b      	str	r3, [r7, #4]
}
 8006b00:	bf00      	nop
 8006b02:	e7fe      	b.n	8006b02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b04:	4b0e      	ldr	r3, [pc, #56]	; (8006b40 <vPortValidateInterruptPriority+0x78>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b0c:	4b0d      	ldr	r3, [pc, #52]	; (8006b44 <vPortValidateInterruptPriority+0x7c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d90a      	bls.n	8006b2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	603b      	str	r3, [r7, #0]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <vPortValidateInterruptPriority+0x60>
	}
 8006b2a:	bf00      	nop
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	e000e3f0 	.word	0xe000e3f0
 8006b3c:	20000558 	.word	0x20000558
 8006b40:	e000ed0c 	.word	0xe000ed0c
 8006b44:	2000055c 	.word	0x2000055c

08006b48 <vSetVarulMaxPRIGROUPValuE>:

#if( configASSERT_DEFINED == 1 )

void vSetVarulMaxPRIGROUPValuE( void )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
	// copy code port.c line 299 to 359

#if( configASSERT_DEFINED == 1 )
{
	volatile uint32_t ulOriginalPriority;
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b4e:	4b27      	ldr	r3, [pc, #156]	; (8006bec <vSetVarulMaxPRIGROUPValuE+0xa4>)
 8006b50:	60fb      	str	r3, [r7, #12]
	functions can be called.  ISR safe functions are those that end in
	"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
	ensure interrupt entry is as fast and simple as possible.

	Save the interrupt priority value that is about to be clobbered. */
	ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	607b      	str	r3, [r7, #4]

	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	22ff      	movs	r2, #255	; 0xff
 8006b5e:	701a      	strb	r2, [r3, #0]

	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	70fb      	strb	r3, [r7, #3]

	/* Use the same mask on the maximum system call priority. */
	ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	4b1f      	ldr	r3, [pc, #124]	; (8006bf0 <vSetVarulMaxPRIGROUPValuE+0xa8>)
 8006b74:	701a      	strb	r2, [r3, #0]

	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b76:	4b1f      	ldr	r3, [pc, #124]	; (8006bf4 <vSetVarulMaxPRIGROUPValuE+0xac>)
 8006b78:	2207      	movs	r2, #7
 8006b7a:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b7c:	e009      	b.n	8006b92 <vSetVarulMaxPRIGROUPValuE+0x4a>
	{
		ulMaxPRIGROUPValue--;
 8006b7e:	4b1d      	ldr	r3, [pc, #116]	; (8006bf4 <vSetVarulMaxPRIGROUPValuE+0xac>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	4a1b      	ldr	r2, [pc, #108]	; (8006bf4 <vSetVarulMaxPRIGROUPValuE+0xac>)
 8006b86:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	70fb      	strb	r3, [r7, #3]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b92:	78fb      	ldrb	r3, [r7, #3]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b9a:	2b80      	cmp	r3, #128	; 0x80
 8006b9c:	d0ef      	beq.n	8006b7e <vSetVarulMaxPRIGROUPValuE+0x36>
	#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b9e:	4b15      	ldr	r3, [pc, #84]	; (8006bf4 <vSetVarulMaxPRIGROUPValuE+0xac>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f1c3 0307 	rsb	r3, r3, #7
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d00a      	beq.n	8006bc0 <vSetVarulMaxPRIGROUPValuE+0x78>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	60bb      	str	r3, [r7, #8]
}
 8006bbc:	bf00      	nop
 8006bbe:	e7fe      	b.n	8006bbe <vSetVarulMaxPRIGROUPValuE+0x76>
	}
	#endif

	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bc0:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <vSetVarulMaxPRIGROUPValuE+0xac>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	021b      	lsls	r3, r3, #8
 8006bc6:	4a0b      	ldr	r2, [pc, #44]	; (8006bf4 <vSetVarulMaxPRIGROUPValuE+0xac>)
 8006bc8:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bca:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <vSetVarulMaxPRIGROUPValuE+0xac>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bd2:	4a08      	ldr	r2, [pc, #32]	; (8006bf4 <vSetVarulMaxPRIGROUPValuE+0xac>)
 8006bd4:	6013      	str	r3, [r2, #0]

	/* Restore the clobbered interrupt priority register to its original
	value. */
	*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	701a      	strb	r2, [r3, #0]
}
#endif /* conifgASSERT_DEFINED */


}
 8006bde:	bf00      	nop
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	e000e400 	.word	0xe000e400
 8006bf0:	20000558 	.word	0x20000558
 8006bf4:	2000055c 	.word	0x2000055c

08006bf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b08a      	sub	sp, #40	; 0x28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c00:	2300      	movs	r3, #0
 8006c02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c04:	f7fe ff24 	bl	8005a50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c08:	4b5b      	ldr	r3, [pc, #364]	; (8006d78 <pvPortMalloc+0x180>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c10:	f000 f920 	bl	8006e54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c14:	4b59      	ldr	r3, [pc, #356]	; (8006d7c <pvPortMalloc+0x184>)
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f040 8093 	bne.w	8006d48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d01d      	beq.n	8006c64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c28:	2208      	movs	r2, #8
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d014      	beq.n	8006c64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f023 0307 	bic.w	r3, r3, #7
 8006c40:	3308      	adds	r3, #8
 8006c42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <pvPortMalloc+0x6c>
	__asm volatile
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	617b      	str	r3, [r7, #20]
}
 8006c60:	bf00      	nop
 8006c62:	e7fe      	b.n	8006c62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d06e      	beq.n	8006d48 <pvPortMalloc+0x150>
 8006c6a:	4b45      	ldr	r3, [pc, #276]	; (8006d80 <pvPortMalloc+0x188>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d869      	bhi.n	8006d48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c74:	4b43      	ldr	r3, [pc, #268]	; (8006d84 <pvPortMalloc+0x18c>)
 8006c76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c78:	4b42      	ldr	r3, [pc, #264]	; (8006d84 <pvPortMalloc+0x18c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c7e:	e004      	b.n	8006c8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d903      	bls.n	8006c9c <pvPortMalloc+0xa4>
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1f1      	bne.n	8006c80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c9c:	4b36      	ldr	r3, [pc, #216]	; (8006d78 <pvPortMalloc+0x180>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d050      	beq.n	8006d48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2208      	movs	r2, #8
 8006cac:	4413      	add	r3, r2
 8006cae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	1ad2      	subs	r2, r2, r3
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d91f      	bls.n	8006d08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4413      	add	r3, r2
 8006cce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	f003 0307 	and.w	r3, r3, #7
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <pvPortMalloc+0xf8>
	__asm volatile
 8006cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	613b      	str	r3, [r7, #16]
}
 8006cec:	bf00      	nop
 8006cee:	e7fe      	b.n	8006cee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	1ad2      	subs	r2, r2, r3
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d02:	69b8      	ldr	r0, [r7, #24]
 8006d04:	f000 f908 	bl	8006f18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d08:	4b1d      	ldr	r3, [pc, #116]	; (8006d80 <pvPortMalloc+0x188>)
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	4a1b      	ldr	r2, [pc, #108]	; (8006d80 <pvPortMalloc+0x188>)
 8006d14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d16:	4b1a      	ldr	r3, [pc, #104]	; (8006d80 <pvPortMalloc+0x188>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	4b1b      	ldr	r3, [pc, #108]	; (8006d88 <pvPortMalloc+0x190>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d203      	bcs.n	8006d2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d22:	4b17      	ldr	r3, [pc, #92]	; (8006d80 <pvPortMalloc+0x188>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a18      	ldr	r2, [pc, #96]	; (8006d88 <pvPortMalloc+0x190>)
 8006d28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	4b13      	ldr	r3, [pc, #76]	; (8006d7c <pvPortMalloc+0x184>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	431a      	orrs	r2, r3
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d3e:	4b13      	ldr	r3, [pc, #76]	; (8006d8c <pvPortMalloc+0x194>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3301      	adds	r3, #1
 8006d44:	4a11      	ldr	r2, [pc, #68]	; (8006d8c <pvPortMalloc+0x194>)
 8006d46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d48:	f7fe fe90 	bl	8005a6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	f003 0307 	and.w	r3, r3, #7
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00a      	beq.n	8006d6c <pvPortMalloc+0x174>
	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	60fb      	str	r3, [r7, #12]
}
 8006d68:	bf00      	nop
 8006d6a:	e7fe      	b.n	8006d6a <pvPortMalloc+0x172>
	return pvReturn;
 8006d6c:	69fb      	ldr	r3, [r7, #28]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3728      	adds	r7, #40	; 0x28
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20004168 	.word	0x20004168
 8006d7c:	2000417c 	.word	0x2000417c
 8006d80:	2000416c 	.word	0x2000416c
 8006d84:	20004160 	.word	0x20004160
 8006d88:	20004170 	.word	0x20004170
 8006d8c:	20004174 	.word	0x20004174

08006d90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d04d      	beq.n	8006e3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006da2:	2308      	movs	r3, #8
 8006da4:	425b      	negs	r3, r3
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4413      	add	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	4b24      	ldr	r3, [pc, #144]	; (8006e48 <vPortFree+0xb8>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4013      	ands	r3, r2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10a      	bne.n	8006dd4 <vPortFree+0x44>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	60fb      	str	r3, [r7, #12]
}
 8006dd0:	bf00      	nop
 8006dd2:	e7fe      	b.n	8006dd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00a      	beq.n	8006df2 <vPortFree+0x62>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	60bb      	str	r3, [r7, #8]
}
 8006dee:	bf00      	nop
 8006df0:	e7fe      	b.n	8006df0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	4b14      	ldr	r3, [pc, #80]	; (8006e48 <vPortFree+0xb8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01e      	beq.n	8006e3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d11a      	bne.n	8006e3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	4b0e      	ldr	r3, [pc, #56]	; (8006e48 <vPortFree+0xb8>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	43db      	mvns	r3, r3
 8006e12:	401a      	ands	r2, r3
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e18:	f7fe fe1a 	bl	8005a50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	4b0a      	ldr	r3, [pc, #40]	; (8006e4c <vPortFree+0xbc>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4413      	add	r3, r2
 8006e26:	4a09      	ldr	r2, [pc, #36]	; (8006e4c <vPortFree+0xbc>)
 8006e28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e2a:	6938      	ldr	r0, [r7, #16]
 8006e2c:	f000 f874 	bl	8006f18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e30:	4b07      	ldr	r3, [pc, #28]	; (8006e50 <vPortFree+0xc0>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3301      	adds	r3, #1
 8006e36:	4a06      	ldr	r2, [pc, #24]	; (8006e50 <vPortFree+0xc0>)
 8006e38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e3a:	f7fe fe17 	bl	8005a6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e3e:	bf00      	nop
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	2000417c 	.word	0x2000417c
 8006e4c:	2000416c 	.word	0x2000416c
 8006e50:	20004178 	.word	0x20004178

08006e54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e60:	4b27      	ldr	r3, [pc, #156]	; (8006f00 <prvHeapInit+0xac>)
 8006e62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00c      	beq.n	8006e88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3307      	adds	r3, #7
 8006e72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 0307 	bic.w	r3, r3, #7
 8006e7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	4a1f      	ldr	r2, [pc, #124]	; (8006f00 <prvHeapInit+0xac>)
 8006e84:	4413      	add	r3, r2
 8006e86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e8c:	4a1d      	ldr	r2, [pc, #116]	; (8006f04 <prvHeapInit+0xb0>)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e92:	4b1c      	ldr	r3, [pc, #112]	; (8006f04 <prvHeapInit+0xb0>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ea0:	2208      	movs	r2, #8
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	1a9b      	subs	r3, r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f023 0307 	bic.w	r3, r3, #7
 8006eae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4a15      	ldr	r2, [pc, #84]	; (8006f08 <prvHeapInit+0xb4>)
 8006eb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006eb6:	4b14      	ldr	r3, [pc, #80]	; (8006f08 <prvHeapInit+0xb4>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ebe:	4b12      	ldr	r3, [pc, #72]	; (8006f08 <prvHeapInit+0xb4>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	1ad2      	subs	r2, r2, r3
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ed4:	4b0c      	ldr	r3, [pc, #48]	; (8006f08 <prvHeapInit+0xb4>)
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	4a0a      	ldr	r2, [pc, #40]	; (8006f0c <prvHeapInit+0xb8>)
 8006ee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	4a09      	ldr	r2, [pc, #36]	; (8006f10 <prvHeapInit+0xbc>)
 8006eea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006eec:	4b09      	ldr	r3, [pc, #36]	; (8006f14 <prvHeapInit+0xc0>)
 8006eee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ef2:	601a      	str	r2, [r3, #0]
}
 8006ef4:	bf00      	nop
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	20000560 	.word	0x20000560
 8006f04:	20004160 	.word	0x20004160
 8006f08:	20004168 	.word	0x20004168
 8006f0c:	20004170 	.word	0x20004170
 8006f10:	2000416c 	.word	0x2000416c
 8006f14:	2000417c 	.word	0x2000417c

08006f18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f20:	4b28      	ldr	r3, [pc, #160]	; (8006fc4 <prvInsertBlockIntoFreeList+0xac>)
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	e002      	b.n	8006f2c <prvInsertBlockIntoFreeList+0x14>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	60fb      	str	r3, [r7, #12]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d8f7      	bhi.n	8006f26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	4413      	add	r3, r2
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d108      	bne.n	8006f5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	441a      	add	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	441a      	add	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d118      	bne.n	8006fa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	4b15      	ldr	r3, [pc, #84]	; (8006fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d00d      	beq.n	8006f96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	441a      	add	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	e008      	b.n	8006fa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f96:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	e003      	b.n	8006fa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d002      	beq.n	8006fb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fb6:	bf00      	nop
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	20004160 	.word	0x20004160
 8006fc8:	20004168 	.word	0x20004168

08006fcc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006fd0:	4803      	ldr	r0, [pc, #12]	; (8006fe0 <_cbSendSystemDesc+0x14>)
 8006fd2:	f001 f979 	bl	80082c8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006fd6:	4803      	ldr	r0, [pc, #12]	; (8006fe4 <_cbSendSystemDesc+0x18>)
 8006fd8:	f001 f976 	bl	80082c8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8006fdc:	bf00      	nop
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	080095b0 	.word	0x080095b0
 8006fe4:	080095e4 	.word	0x080095e4

08006fe8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006fec:	4b06      	ldr	r3, [pc, #24]	; (8007008 <SEGGER_SYSVIEW_Conf+0x20>)
 8006fee:	6818      	ldr	r0, [r3, #0]
 8006ff0:	4b05      	ldr	r3, [pc, #20]	; (8007008 <SEGGER_SYSVIEW_Conf+0x20>)
 8006ff2:	6819      	ldr	r1, [r3, #0]
 8006ff4:	4b05      	ldr	r3, [pc, #20]	; (800700c <SEGGER_SYSVIEW_Conf+0x24>)
 8006ff6:	4a06      	ldr	r2, [pc, #24]	; (8007010 <SEGGER_SYSVIEW_Conf+0x28>)
 8006ff8:	f000 fd5c 	bl	8007ab4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006ffc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8007000:	f000 fd96 	bl	8007b30 <SEGGER_SYSVIEW_SetRAMBase>
}
 8007004:	bf00      	nop
 8007006:	bd80      	pop	{r7, pc}
 8007008:	20000000 	.word	0x20000000
 800700c:	08006fcd 	.word	0x08006fcd
 8007010:	08009684 	.word	0x08009684

08007014 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8007014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007016:	b085      	sub	sp, #20
 8007018:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800701a:	2300      	movs	r3, #0
 800701c:	607b      	str	r3, [r7, #4]
 800701e:	e033      	b.n	8007088 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8007020:	491e      	ldr	r1, [pc, #120]	; (800709c <_cbSendTaskList+0x88>)
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	440b      	add	r3, r1
 800702e:	6818      	ldr	r0, [r3, #0]
 8007030:	491a      	ldr	r1, [pc, #104]	; (800709c <_cbSendTaskList+0x88>)
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	4613      	mov	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	440b      	add	r3, r1
 800703e:	3304      	adds	r3, #4
 8007040:	6819      	ldr	r1, [r3, #0]
 8007042:	4c16      	ldr	r4, [pc, #88]	; (800709c <_cbSendTaskList+0x88>)
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	4613      	mov	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4423      	add	r3, r4
 8007050:	3308      	adds	r3, #8
 8007052:	681c      	ldr	r4, [r3, #0]
 8007054:	4d11      	ldr	r5, [pc, #68]	; (800709c <_cbSendTaskList+0x88>)
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	442b      	add	r3, r5
 8007062:	330c      	adds	r3, #12
 8007064:	681d      	ldr	r5, [r3, #0]
 8007066:	4e0d      	ldr	r6, [pc, #52]	; (800709c <_cbSendTaskList+0x88>)
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	4613      	mov	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4433      	add	r3, r6
 8007074:	3310      	adds	r3, #16
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	462b      	mov	r3, r5
 800707c:	4622      	mov	r2, r4
 800707e:	f000 f8bd 	bl	80071fc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3301      	adds	r3, #1
 8007086:	607b      	str	r3, [r7, #4]
 8007088:	4b05      	ldr	r3, [pc, #20]	; (80070a0 <_cbSendTaskList+0x8c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	429a      	cmp	r2, r3
 8007090:	d3c6      	bcc.n	8007020 <_cbSendTaskList+0xc>
  }
}
 8007092:	bf00      	nop
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800709c:	20004180 	.word	0x20004180
 80070a0:	20004220 	.word	0x20004220

080070a4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80070a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80070ac:	f7fe fd8e 	bl	8005bcc <xTaskGetTickCountFromISR>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2200      	movs	r2, #0
 80070b4:	469a      	mov	sl, r3
 80070b6:	4693      	mov	fp, r2
 80070b8:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80070bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	f04f 0a00 	mov.w	sl, #0
 80070c8:	f04f 0b00 	mov.w	fp, #0
 80070cc:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80070d0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80070d4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80070d8:	4652      	mov	r2, sl
 80070da:	465b      	mov	r3, fp
 80070dc:	1a14      	subs	r4, r2, r0
 80070de:	eb63 0501 	sbc.w	r5, r3, r1
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	00ab      	lsls	r3, r5, #2
 80070ec:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80070f0:	00a2      	lsls	r2, r4, #2
 80070f2:	4614      	mov	r4, r2
 80070f4:	461d      	mov	r5, r3
 80070f6:	eb14 0800 	adds.w	r8, r4, r0
 80070fa:	eb45 0901 	adc.w	r9, r5, r1
 80070fe:	f04f 0200 	mov.w	r2, #0
 8007102:	f04f 0300 	mov.w	r3, #0
 8007106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800710a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800710e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007112:	4690      	mov	r8, r2
 8007114:	4699      	mov	r9, r3
 8007116:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800711a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800711e:	4610      	mov	r0, r2
 8007120:	4619      	mov	r1, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800712c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af02      	add	r7, sp, #8
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800713a:	2205      	movs	r2, #5
 800713c:	492b      	ldr	r1, [pc, #172]	; (80071ec <SYSVIEW_AddTask+0xc0>)
 800713e:	68b8      	ldr	r0, [r7, #8]
 8007140:	f001 fcee 	bl	8008b20 <memcmp>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d04b      	beq.n	80071e2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800714a:	4b29      	ldr	r3, [pc, #164]	; (80071f0 <SYSVIEW_AddTask+0xc4>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b07      	cmp	r3, #7
 8007150:	d903      	bls.n	800715a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8007152:	4828      	ldr	r0, [pc, #160]	; (80071f4 <SYSVIEW_AddTask+0xc8>)
 8007154:	f001 fbbe 	bl	80088d4 <SEGGER_SYSVIEW_Warn>
    return;
 8007158:	e044      	b.n	80071e4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800715a:	4b25      	ldr	r3, [pc, #148]	; (80071f0 <SYSVIEW_AddTask+0xc4>)
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	4926      	ldr	r1, [pc, #152]	; (80071f8 <SYSVIEW_AddTask+0xcc>)
 8007160:	4613      	mov	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	440b      	add	r3, r1
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800716e:	4b20      	ldr	r3, [pc, #128]	; (80071f0 <SYSVIEW_AddTask+0xc4>)
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4921      	ldr	r1, [pc, #132]	; (80071f8 <SYSVIEW_AddTask+0xcc>)
 8007174:	4613      	mov	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	440b      	add	r3, r1
 800717e:	3304      	adds	r3, #4
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8007184:	4b1a      	ldr	r3, [pc, #104]	; (80071f0 <SYSVIEW_AddTask+0xc4>)
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	491b      	ldr	r1, [pc, #108]	; (80071f8 <SYSVIEW_AddTask+0xcc>)
 800718a:	4613      	mov	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	440b      	add	r3, r1
 8007194:	3308      	adds	r3, #8
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800719a:	4b15      	ldr	r3, [pc, #84]	; (80071f0 <SYSVIEW_AddTask+0xc4>)
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	4916      	ldr	r1, [pc, #88]	; (80071f8 <SYSVIEW_AddTask+0xcc>)
 80071a0:	4613      	mov	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	440b      	add	r3, r1
 80071aa:	330c      	adds	r3, #12
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80071b0:	4b0f      	ldr	r3, [pc, #60]	; (80071f0 <SYSVIEW_AddTask+0xc4>)
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	4910      	ldr	r1, [pc, #64]	; (80071f8 <SYSVIEW_AddTask+0xcc>)
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	440b      	add	r3, r1
 80071c0:	3310      	adds	r3, #16
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80071c6:	4b0a      	ldr	r3, [pc, #40]	; (80071f0 <SYSVIEW_AddTask+0xc4>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3301      	adds	r3, #1
 80071cc:	4a08      	ldr	r2, [pc, #32]	; (80071f0 <SYSVIEW_AddTask+0xc4>)
 80071ce:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	68b9      	ldr	r1, [r7, #8]
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f80e 	bl	80071fc <SYSVIEW_SendTaskInfo>
 80071e0:	e000      	b.n	80071e4 <SYSVIEW_AddTask+0xb8>
    return;
 80071e2:	bf00      	nop

}
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	080095f4 	.word	0x080095f4
 80071f0:	20004220 	.word	0x20004220
 80071f4:	080095fc 	.word	0x080095fc
 80071f8:	20004180 	.word	0x20004180

080071fc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b08a      	sub	sp, #40	; 0x28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800720a:	f107 0314 	add.w	r3, r7, #20
 800720e:	2214      	movs	r2, #20
 8007210:	2100      	movs	r1, #0
 8007212:	4618      	mov	r0, r3
 8007214:	f001 fca2 	bl	8008b5c <memset>
  TaskInfo.TaskID     = TaskID;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800722c:	f107 0314 	add.w	r3, r7, #20
 8007230:	4618      	mov	r0, r3
 8007232:	f000 ff4f 	bl	80080d4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8007236:	bf00      	nop
 8007238:	3728      	adds	r7, #40	; 0x28
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8007246:	4b21      	ldr	r3, [pc, #132]	; (80072cc <_DoInit+0x8c>)
 8007248:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2203      	movs	r2, #3
 800724e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2203      	movs	r2, #3
 8007254:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a1d      	ldr	r2, [pc, #116]	; (80072d0 <_DoInit+0x90>)
 800725a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a1d      	ldr	r2, [pc, #116]	; (80072d4 <_DoInit+0x94>)
 8007260:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007268:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a14      	ldr	r2, [pc, #80]	; (80072d0 <_DoInit+0x90>)
 8007280:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a14      	ldr	r2, [pc, #80]	; (80072d8 <_DoInit+0x98>)
 8007286:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2210      	movs	r2, #16
 800728c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3307      	adds	r3, #7
 80072a4:	4a0d      	ldr	r2, [pc, #52]	; (80072dc <_DoInit+0x9c>)
 80072a6:	6810      	ldr	r0, [r2, #0]
 80072a8:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a0c      	ldr	r2, [pc, #48]	; (80072e0 <_DoInit+0xa0>)
 80072ae:	6810      	ldr	r0, [r2, #0]
 80072b0:	6018      	str	r0, [r3, #0]
 80072b2:	8891      	ldrh	r1, [r2, #4]
 80072b4:	7992      	ldrb	r2, [r2, #6]
 80072b6:	8099      	strh	r1, [r3, #4]
 80072b8:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2220      	movs	r2, #32
 80072be:	719a      	strb	r2, [r3, #6]
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	20004224 	.word	0x20004224
 80072d0:	0800964c 	.word	0x0800964c
 80072d4:	200042cc 	.word	0x200042cc
 80072d8:	200046cc 	.word	0x200046cc
 80072dc:	08009658 	.word	0x08009658
 80072e0:	0800965c 	.word	0x0800965c

080072e4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08a      	sub	sp, #40	; 0x28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 80072f0:	4b3c      	ldr	r3, [pc, #240]	; (80073e4 <SEGGER_RTT_ReadNoLock+0x100>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <SEGGER_RTT_ReadNoLock+0x18>
 80072f8:	f7ff ffa2 	bl	8007240 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	4613      	mov	r3, r2
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	4413      	add	r3, r2
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	3360      	adds	r3, #96	; 0x60
 8007308:	4a36      	ldr	r2, [pc, #216]	; (80073e4 <SEGGER_RTT_ReadNoLock+0x100>)
 800730a:	4413      	add	r3, r2
 800730c:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800731e:	2300      	movs	r3, #0
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007322:	6a3a      	ldr	r2, [r7, #32]
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	429a      	cmp	r2, r3
 8007328:	d92a      	bls.n	8007380 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	689a      	ldr	r2, [r3, #8]
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4293      	cmp	r3, r2
 800733a:	bf28      	it	cs
 800733c:	4613      	movcs	r3, r2
 800733e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	4413      	add	r3, r2
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	4619      	mov	r1, r3
 800734c:	69f8      	ldr	r0, [r7, #28]
 800734e:	f001 fbf7 	bl	8008b40 <memcpy>
    NumBytesRead += NumBytesRem;
 8007352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	4413      	add	r3, r2
 8007358:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800735a:	69fa      	ldr	r2, [r7, #28]
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	4413      	add	r3, r2
 8007360:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800736a:	6a3a      	ldr	r2, [r7, #32]
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	4413      	add	r3, r2
 8007370:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	6a3a      	ldr	r2, [r7, #32]
 8007378:	429a      	cmp	r2, r3
 800737a:	d101      	bne.n	8007380 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 800737c:	2300      	movs	r3, #0
 800737e:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4293      	cmp	r3, r2
 800738e:	bf28      	it	cs
 8007390:	4613      	movcs	r3, r2
 8007392:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d018      	beq.n	80073cc <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	4413      	add	r3, r2
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	4619      	mov	r1, r3
 80073a6:	69f8      	ldr	r0, [r7, #28]
 80073a8:	f001 fbca 	bl	8008b40 <memcpy>
    NumBytesRead += NumBytesRem;
 80073ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	4413      	add	r3, r2
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80073b4:	69fa      	ldr	r2, [r7, #28]
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	4413      	add	r3, r2
 80073ba:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80073c4:	6a3a      	ldr	r2, [r7, #32]
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	4413      	add	r3, r2
 80073ca:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	6a3a      	ldr	r2, [r7, #32]
 80073d6:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3728      	adds	r7, #40	; 0x28
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	20004224 	.word	0x20004224

080073e8 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08a      	sub	sp, #40	; 0x28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	4613      	mov	r3, r2
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	4413      	add	r3, r2
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	4a3f      	ldr	r2, [pc, #252]	; (8007504 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8007406:	4413      	add	r3, r2
 8007408:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8007410:	6a3b      	ldr	r3, [r7, #32]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	429a      	cmp	r2, r3
 800741c:	d854      	bhi.n	80074c8 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	689a      	ldr	r2, [r3, #8]
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	3b01      	subs	r3, #1
 8007428:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	429a      	cmp	r2, r3
 8007430:	d30f      	bcc.n	8007452 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	4413      	add	r3, r2
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800743e:	4618      	mov	r0, r3
 8007440:	f001 fb7e 	bl	8008b40 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	441a      	add	r2, r3
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800744e:	2301      	movs	r3, #1
 8007450:	e054      	b.n	80074fc <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	4413      	add	r3, r2
 8007458:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	429a      	cmp	r2, r3
 8007460:	d34b      	bcc.n	80074fa <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	429a      	cmp	r2, r3
 8007472:	d90e      	bls.n	8007492 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	4413      	add	r3, r2
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007480:	4618      	mov	r0, r3
 8007482:	f001 fb5d 	bl	8008b40 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	441a      	add	r2, r3
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	60da      	str	r2, [r3, #12]
 8007490:	e018      	b.n	80074c4 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	4413      	add	r3, r2
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800749e:	4618      	mov	r0, r3
 80074a0:	f001 fb4e 	bl	8008b40 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	6858      	ldr	r0, [r3, #4]
 80074a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	18d1      	adds	r1, r2, r3
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	461a      	mov	r2, r3
 80074b6:	f001 fb43 	bl	8008b40 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	1ad2      	subs	r2, r2, r3
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e019      	b.n	80074fc <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 80074c8:	69fa      	ldr	r2, [r7, #28]
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	3b01      	subs	r3, #1
 80074d0:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d30f      	bcc.n	80074fa <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	4413      	add	r3, r2
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074e6:	4618      	mov	r0, r3
 80074e8:	f001 fb2a 	bl	8008b40 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	441a      	add	r2, r3
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e000      	b.n	80074fc <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3728      	adds	r7, #40	; 0x28
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	20004224 	.word	0x20004224

08007508 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8007516:	4b30      	ldr	r3, [pc, #192]	; (80075d8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800751e:	f7ff fe8f 	bl	8007240 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8007522:	4b2d      	ldr	r3, [pc, #180]	; (80075d8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	461a      	mov	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4293      	cmp	r3, r2
 800752c:	d24c      	bcs.n	80075c8 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800752e:	f3ef 8311 	mrs	r3, BASEPRI
 8007532:	f04f 0120 	mov.w	r1, #32
 8007536:	f381 8811 	msr	BASEPRI, r1
 800753a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d032      	beq.n	80075a8 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8007542:	4925      	ldr	r1, [pc, #148]	; (80075d8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	4613      	mov	r3, r2
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	4413      	add	r3, r2
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	440b      	add	r3, r1
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007556:	4920      	ldr	r1, [pc, #128]	; (80075d8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	4613      	mov	r3, r2
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	4413      	add	r3, r2
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	440b      	add	r3, r1
 8007566:	3304      	adds	r3, #4
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800756c:	491a      	ldr	r1, [pc, #104]	; (80075d8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	4613      	mov	r3, r2
 8007572:	005b      	lsls	r3, r3, #1
 8007574:	4413      	add	r3, r2
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	440b      	add	r3, r1
 800757a:	3320      	adds	r3, #32
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8007580:	4915      	ldr	r1, [pc, #84]	; (80075d8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4613      	mov	r3, r2
 8007586:	005b      	lsls	r3, r3, #1
 8007588:	4413      	add	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	440b      	add	r3, r1
 800758e:	3328      	adds	r3, #40	; 0x28
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8007594:	4910      	ldr	r1, [pc, #64]	; (80075d8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4613      	mov	r3, r2
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	4413      	add	r3, r2
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	440b      	add	r3, r1
 80075a2:	3324      	adds	r3, #36	; 0x24
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80075a8:	490b      	ldr	r1, [pc, #44]	; (80075d8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4613      	mov	r3, r2
 80075ae:	005b      	lsls	r3, r3, #1
 80075b0:	4413      	add	r3, r2
 80075b2:	00db      	lsls	r3, r3, #3
 80075b4:	440b      	add	r3, r1
 80075b6:	332c      	adds	r3, #44	; 0x2c
 80075b8:	6a3a      	ldr	r2, [r7, #32]
 80075ba:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	617b      	str	r3, [r7, #20]
 80075c6:	e002      	b.n	80075ce <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80075c8:	f04f 33ff 	mov.w	r3, #4294967295
 80075cc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80075ce:	697b      	ldr	r3, [r7, #20]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	20004224 	.word	0x20004224

080075dc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
 80075e8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80075ea:	4b30      	ldr	r3, [pc, #192]	; (80076ac <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 80075f2:	f7ff fe25 	bl	8007240 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 80075f6:	4b2d      	ldr	r3, [pc, #180]	; (80076ac <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	461a      	mov	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4293      	cmp	r3, r2
 8007600:	d24b      	bcs.n	800769a <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8007602:	f3ef 8311 	mrs	r3, BASEPRI
 8007606:	f04f 0120 	mov.w	r1, #32
 800760a:	f381 8811 	msr	BASEPRI, r1
 800760e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d031      	beq.n	800767a <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8007616:	4925      	ldr	r1, [pc, #148]	; (80076ac <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4613      	mov	r3, r2
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	4413      	add	r3, r2
 8007620:	00db      	lsls	r3, r3, #3
 8007622:	440b      	add	r3, r1
 8007624:	3360      	adds	r3, #96	; 0x60
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800762a:	4920      	ldr	r1, [pc, #128]	; (80076ac <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	4613      	mov	r3, r2
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	4413      	add	r3, r2
 8007634:	00db      	lsls	r3, r3, #3
 8007636:	440b      	add	r3, r1
 8007638:	3364      	adds	r3, #100	; 0x64
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800763e:	491b      	ldr	r1, [pc, #108]	; (80076ac <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	4613      	mov	r3, r2
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	4413      	add	r3, r2
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	440b      	add	r3, r1
 800764c:	3368      	adds	r3, #104	; 0x68
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8007652:	4916      	ldr	r1, [pc, #88]	; (80076ac <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4613      	mov	r3, r2
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	4413      	add	r3, r2
 800765c:	00db      	lsls	r3, r3, #3
 800765e:	440b      	add	r3, r1
 8007660:	3370      	adds	r3, #112	; 0x70
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8007666:	4911      	ldr	r1, [pc, #68]	; (80076ac <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	4613      	mov	r3, r2
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	4413      	add	r3, r2
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	440b      	add	r3, r1
 8007674:	336c      	adds	r3, #108	; 0x6c
 8007676:	2200      	movs	r2, #0
 8007678:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800767a:	490c      	ldr	r1, [pc, #48]	; (80076ac <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	4613      	mov	r3, r2
 8007680:	005b      	lsls	r3, r3, #1
 8007682:	4413      	add	r3, r2
 8007684:	00db      	lsls	r3, r3, #3
 8007686:	440b      	add	r3, r1
 8007688:	3374      	adds	r3, #116	; 0x74
 800768a:	6a3a      	ldr	r2, [r7, #32]
 800768c:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	e002      	b.n	80076a0 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800769a:	f04f 33ff 	mov.w	r3, #4294967295
 800769e:	617b      	str	r3, [r7, #20]
  }
  return r;
 80076a0:	697b      	ldr	r3, [r7, #20]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3718      	adds	r7, #24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20004224 	.word	0x20004224

080076b0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80076c0:	e002      	b.n	80076c8 <_EncodeStr+0x18>
    Len++;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	3301      	adds	r3, #1
 80076c6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	4413      	add	r3, r2
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1f6      	bne.n	80076c2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d901      	bls.n	80076e0 <_EncodeStr+0x30>
    Len = Limit;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	2bfe      	cmp	r3, #254	; 0xfe
 80076e4:	d806      	bhi.n	80076f4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	60fa      	str	r2, [r7, #12]
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	e011      	b.n	8007718 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	60fa      	str	r2, [r7, #12]
 80076fa:	22ff      	movs	r2, #255	; 0xff
 80076fc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	60fa      	str	r2, [r7, #12]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	0a19      	lsrs	r1, r3, #8
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	60fa      	str	r2, [r7, #12]
 8007714:	b2ca      	uxtb	r2, r1
 8007716:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007718:	2300      	movs	r3, #0
 800771a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800771c:	e00a      	b.n	8007734 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	1c53      	adds	r3, r2, #1
 8007722:	60bb      	str	r3, [r7, #8]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	1c59      	adds	r1, r3, #1
 8007728:	60f9      	str	r1, [r7, #12]
 800772a:	7812      	ldrb	r2, [r2, #0]
 800772c:	701a      	strb	r2, [r3, #0]
    n++;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	3301      	adds	r3, #1
 8007732:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	429a      	cmp	r2, r3
 800773a:	d3f0      	bcc.n	800771e <_EncodeStr+0x6e>
  }
  return pPayload;
 800773c:	68fb      	ldr	r3, [r7, #12]
}
 800773e:	4618      	mov	r0, r3
 8007740:	371c      	adds	r7, #28
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3304      	adds	r3, #4
}
 8007756:	4618      	mov	r0, r3
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
	...

08007764 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800776a:	1cfb      	adds	r3, r7, #3
 800776c:	2201      	movs	r2, #1
 800776e:	4619      	mov	r1, r3
 8007770:	2001      	movs	r0, #1
 8007772:	f7ff fdb7 	bl	80072e4 <SEGGER_RTT_ReadNoLock>
 8007776:	4603      	mov	r3, r0
 8007778:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	dd4c      	ble.n	800781a <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	2b07      	cmp	r3, #7
 8007784:	dc16      	bgt.n	80077b4 <_HandleIncomingPacket+0x50>
 8007786:	2b00      	cmp	r3, #0
 8007788:	dd3c      	ble.n	8007804 <_HandleIncomingPacket+0xa0>
 800778a:	3b01      	subs	r3, #1
 800778c:	2b06      	cmp	r3, #6
 800778e:	d839      	bhi.n	8007804 <_HandleIncomingPacket+0xa0>
 8007790:	a201      	add	r2, pc, #4	; (adr r2, 8007798 <_HandleIncomingPacket+0x34>)
 8007792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007796:	bf00      	nop
 8007798:	080077bb 	.word	0x080077bb
 800779c:	080077c1 	.word	0x080077c1
 80077a0:	080077c7 	.word	0x080077c7
 80077a4:	080077cd 	.word	0x080077cd
 80077a8:	080077d3 	.word	0x080077d3
 80077ac:	080077d9 	.word	0x080077d9
 80077b0:	080077df 	.word	0x080077df
 80077b4:	2b80      	cmp	r3, #128	; 0x80
 80077b6:	d015      	beq.n	80077e4 <_HandleIncomingPacket+0x80>
 80077b8:	e024      	b.n	8007804 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80077ba:	f000 fb0f 	bl	8007ddc <SEGGER_SYSVIEW_Start>
      break;
 80077be:	e031      	b.n	8007824 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80077c0:	f000 fbc8 	bl	8007f54 <SEGGER_SYSVIEW_Stop>
      break;
 80077c4:	e02e      	b.n	8007824 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80077c6:	f000 fda3 	bl	8008310 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80077ca:	e02b      	b.n	8007824 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80077cc:	f000 fd68 	bl	80082a0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80077d0:	e028      	b.n	8007824 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80077d2:	f000 fbe5 	bl	8007fa0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80077d6:	e025      	b.n	8007824 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80077d8:	f001 f83e 	bl	8008858 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80077dc:	e022      	b.n	8007824 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80077de:	f001 f81d 	bl	800881c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80077e2:	e01f      	b.n	8007824 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80077e4:	1cfb      	adds	r3, r7, #3
 80077e6:	2201      	movs	r2, #1
 80077e8:	4619      	mov	r1, r3
 80077ea:	2001      	movs	r0, #1
 80077ec:	f7ff fd7a 	bl	80072e4 <SEGGER_RTT_ReadNoLock>
 80077f0:	4603      	mov	r3, r0
 80077f2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	dd11      	ble.n	800781e <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 ff8d 	bl	800871c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007802:	e00c      	b.n	800781e <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	b25b      	sxtb	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	da0a      	bge.n	8007822 <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800780c:	1cfb      	adds	r3, r7, #3
 800780e:	2201      	movs	r2, #1
 8007810:	4619      	mov	r1, r3
 8007812:	2001      	movs	r0, #1
 8007814:	f7ff fd66 	bl	80072e4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007818:	e003      	b.n	8007822 <_HandleIncomingPacket+0xbe>
    }
  }
 800781a:	bf00      	nop
 800781c:	e002      	b.n	8007824 <_HandleIncomingPacket+0xc0>
      break;
 800781e:	bf00      	nop
 8007820:	e000      	b.n	8007824 <_HandleIncomingPacket+0xc0>
      break;
 8007822:	bf00      	nop
}
 8007824:	bf00      	nop
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800782c:	b580      	push	{r7, lr}
 800782e:	b08c      	sub	sp, #48	; 0x30
 8007830:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007832:	2301      	movs	r3, #1
 8007834:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8007836:	1d3b      	adds	r3, r7, #4
 8007838:	3301      	adds	r3, #1
 800783a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007840:	4b30      	ldr	r3, [pc, #192]	; (8007904 <_TrySendOverflowPacket+0xd8>)
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	62bb      	str	r3, [r7, #40]	; 0x28
 8007846:	e00b      	b.n	8007860 <_TrySendOverflowPacket+0x34>
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	b2da      	uxtb	r2, r3
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	1c59      	adds	r1, r3, #1
 8007850:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007852:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007856:	b2d2      	uxtb	r2, r2
 8007858:	701a      	strb	r2, [r3, #0]
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	09db      	lsrs	r3, r3, #7
 800785e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	2b7f      	cmp	r3, #127	; 0x7f
 8007864:	d8f0      	bhi.n	8007848 <_TrySendOverflowPacket+0x1c>
 8007866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800786c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800786e:	b2d2      	uxtb	r2, r2
 8007870:	701a      	strb	r2, [r3, #0]
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007874:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007876:	4b24      	ldr	r3, [pc, #144]	; (8007908 <_TrySendOverflowPacket+0xdc>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800787c:	4b21      	ldr	r3, [pc, #132]	; (8007904 <_TrySendOverflowPacket+0xd8>)
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	627b      	str	r3, [r7, #36]	; 0x24
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	623b      	str	r3, [r7, #32]
 800788e:	e00b      	b.n	80078a8 <_TrySendOverflowPacket+0x7c>
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	b2da      	uxtb	r2, r3
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	1c59      	adds	r1, r3, #1
 8007898:	6279      	str	r1, [r7, #36]	; 0x24
 800789a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	09db      	lsrs	r3, r3, #7
 80078a6:	623b      	str	r3, [r7, #32]
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	2b7f      	cmp	r3, #127	; 0x7f
 80078ac:	d8f0      	bhi.n	8007890 <_TrySendOverflowPacket+0x64>
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	627a      	str	r2, [r7, #36]	; 0x24
 80078b4:	6a3a      	ldr	r2, [r7, #32]
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	701a      	strb	r2, [r3, #0]
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80078be:	1d3b      	adds	r3, r7, #4
 80078c0:	69fa      	ldr	r2, [r7, #28]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	461a      	mov	r2, r3
 80078c6:	1d3b      	adds	r3, r7, #4
 80078c8:	4619      	mov	r1, r3
 80078ca:	2001      	movs	r0, #1
 80078cc:	f7ff fd8c 	bl	80073e8 <SEGGER_RTT_WriteSkipNoLock>
 80078d0:	4603      	mov	r3, r0
 80078d2:	613b      	str	r3, [r7, #16]
  if (Status) {
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d009      	beq.n	80078ee <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80078da:	4a0a      	ldr	r2, [pc, #40]	; (8007904 <_TrySendOverflowPacket+0xd8>)
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80078e0:	4b08      	ldr	r3, [pc, #32]	; (8007904 <_TrySendOverflowPacket+0xd8>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	4b06      	ldr	r3, [pc, #24]	; (8007904 <_TrySendOverflowPacket+0xd8>)
 80078ea:	701a      	strb	r2, [r3, #0]
 80078ec:	e004      	b.n	80078f8 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80078ee:	4b05      	ldr	r3, [pc, #20]	; (8007904 <_TrySendOverflowPacket+0xd8>)
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	3301      	adds	r3, #1
 80078f4:	4a03      	ldr	r2, [pc, #12]	; (8007904 <_TrySendOverflowPacket+0xd8>)
 80078f6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80078f8:	693b      	ldr	r3, [r7, #16]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3730      	adds	r7, #48	; 0x30
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	200066e4 	.word	0x200066e4
 8007908:	e0001004 	.word	0xe0001004

0800790c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800790c:	b580      	push	{r7, lr}
 800790e:	b08a      	sub	sp, #40	; 0x28
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007918:	4b63      	ldr	r3, [pc, #396]	; (8007aa8 <_SendPacket+0x19c>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d010      	beq.n	8007942 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007920:	4b61      	ldr	r3, [pc, #388]	; (8007aa8 <_SendPacket+0x19c>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 80a1 	beq.w	8007a6c <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800792a:	4b5f      	ldr	r3, [pc, #380]	; (8007aa8 <_SendPacket+0x19c>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b02      	cmp	r3, #2
 8007930:	d109      	bne.n	8007946 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007932:	f7ff ff7b 	bl	800782c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007936:	4b5c      	ldr	r3, [pc, #368]	; (8007aa8 <_SendPacket+0x19c>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	2b01      	cmp	r3, #1
 800793c:	f040 8098 	bne.w	8007a70 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8007940:	e001      	b.n	8007946 <_SendPacket+0x3a>
    goto Send;
 8007942:	bf00      	nop
 8007944:	e000      	b.n	8007948 <_SendPacket+0x3c>
Send:
 8007946:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b1f      	cmp	r3, #31
 800794c:	d809      	bhi.n	8007962 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800794e:	4b56      	ldr	r3, [pc, #344]	; (8007aa8 <_SendPacket+0x19c>)
 8007950:	69da      	ldr	r2, [r3, #28]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	fa22 f303 	lsr.w	r3, r2, r3
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b00      	cmp	r3, #0
 800795e:	f040 8089 	bne.w	8007a74 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b17      	cmp	r3, #23
 8007966:	d807      	bhi.n	8007978 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3b01      	subs	r3, #1
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	b2da      	uxtb	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	e03d      	b.n	80079f4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	2b7f      	cmp	r3, #127	; 0x7f
 8007984:	d912      	bls.n	80079ac <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	09da      	lsrs	r2, r3, #7
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	3b01      	subs	r3, #1
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	b2d2      	uxtb	r2, r2
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	b2db      	uxtb	r3, r3
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	3a01      	subs	r2, #1
 800799e:	60fa      	str	r2, [r7, #12]
 80079a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	701a      	strb	r2, [r3, #0]
 80079aa:	e006      	b.n	80079ba <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b7f      	cmp	r3, #127	; 0x7f
 80079be:	d912      	bls.n	80079e6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	09da      	lsrs	r2, r3, #7
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	b2d2      	uxtb	r2, r2
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	3a01      	subs	r2, #1
 80079d8:	60fa      	str	r2, [r7, #12]
 80079da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	701a      	strb	r2, [r3, #0]
 80079e4:	e006      	b.n	80079f4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80079f4:	4b2d      	ldr	r3, [pc, #180]	; (8007aac <_SendPacket+0x1a0>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80079fa:	4b2b      	ldr	r3, [pc, #172]	; (8007aa8 <_SendPacket+0x19c>)
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	623b      	str	r3, [r7, #32]
 8007a0c:	e00b      	b.n	8007a26 <_SendPacket+0x11a>
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	1c59      	adds	r1, r3, #1
 8007a16:	6279      	str	r1, [r7, #36]	; 0x24
 8007a18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a1c:	b2d2      	uxtb	r2, r2
 8007a1e:	701a      	strb	r2, [r3, #0]
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	09db      	lsrs	r3, r3, #7
 8007a24:	623b      	str	r3, [r7, #32]
 8007a26:	6a3b      	ldr	r3, [r7, #32]
 8007a28:	2b7f      	cmp	r3, #127	; 0x7f
 8007a2a:	d8f0      	bhi.n	8007a0e <_SendPacket+0x102>
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	1c5a      	adds	r2, r3, #1
 8007a30:	627a      	str	r2, [r7, #36]	; 0x24
 8007a32:	6a3a      	ldr	r2, [r7, #32]
 8007a34:	b2d2      	uxtb	r2, r2
 8007a36:	701a      	strb	r2, [r3, #0]
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	461a      	mov	r2, r3
 8007a44:	68f9      	ldr	r1, [r7, #12]
 8007a46:	2001      	movs	r0, #1
 8007a48:	f7ff fcce 	bl	80073e8 <SEGGER_RTT_WriteSkipNoLock>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	613b      	str	r3, [r7, #16]
  if (Status) {
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007a56:	4a14      	ldr	r2, [pc, #80]	; (8007aa8 <_SendPacket+0x19c>)
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	60d3      	str	r3, [r2, #12]
 8007a5c:	e00b      	b.n	8007a76 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007a5e:	4b12      	ldr	r3, [pc, #72]	; (8007aa8 <_SendPacket+0x19c>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	3301      	adds	r3, #1
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	4b10      	ldr	r3, [pc, #64]	; (8007aa8 <_SendPacket+0x19c>)
 8007a68:	701a      	strb	r2, [r3, #0]
 8007a6a:	e004      	b.n	8007a76 <_SendPacket+0x16a>
    goto SendDone;
 8007a6c:	bf00      	nop
 8007a6e:	e002      	b.n	8007a76 <_SendPacket+0x16a>
      goto SendDone;
 8007a70:	bf00      	nop
 8007a72:	e000      	b.n	8007a76 <_SendPacket+0x16a>
      goto SendDone;
 8007a74:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007a76:	4b0e      	ldr	r3, [pc, #56]	; (8007ab0 <_SendPacket+0x1a4>)
 8007a78:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007a7c:	4b0c      	ldr	r3, [pc, #48]	; (8007ab0 <_SendPacket+0x1a4>)
 8007a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d00b      	beq.n	8007a9e <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007a86:	4b08      	ldr	r3, [pc, #32]	; (8007aa8 <_SendPacket+0x19c>)
 8007a88:	789b      	ldrb	r3, [r3, #2]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d107      	bne.n	8007a9e <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007a8e:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <_SendPacket+0x19c>)
 8007a90:	2201      	movs	r2, #1
 8007a92:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007a94:	f7ff fe66 	bl	8007764 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007a98:	4b03      	ldr	r3, [pc, #12]	; (8007aa8 <_SendPacket+0x19c>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007a9e:	bf00      	nop
 8007aa0:	3728      	adds	r7, #40	; 0x28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	200066e4 	.word	0x200066e4
 8007aac:	e0001004 	.word	0xe0001004
 8007ab0:	20004224 	.word	0x20004224

08007ab4 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af02      	add	r7, sp, #8
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007aca:	4a14      	ldr	r2, [pc, #80]	; (8007b1c <SEGGER_SYSVIEW_Init+0x68>)
 8007acc:	4914      	ldr	r1, [pc, #80]	; (8007b20 <SEGGER_SYSVIEW_Init+0x6c>)
 8007ace:	2001      	movs	r0, #1
 8007ad0:	f7ff fd1a 	bl	8007508 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	2308      	movs	r3, #8
 8007ada:	4a12      	ldr	r2, [pc, #72]	; (8007b24 <SEGGER_SYSVIEW_Init+0x70>)
 8007adc:	4910      	ldr	r1, [pc, #64]	; (8007b20 <SEGGER_SYSVIEW_Init+0x6c>)
 8007ade:	2001      	movs	r0, #1
 8007ae0:	f7ff fd7c 	bl	80075dc <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8007ae4:	4b10      	ldr	r3, [pc, #64]	; (8007b28 <SEGGER_SYSVIEW_Init+0x74>)
 8007ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aea:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007aec:	4b0f      	ldr	r3, [pc, #60]	; (8007b2c <SEGGER_SYSVIEW_Init+0x78>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a0d      	ldr	r2, [pc, #52]	; (8007b28 <SEGGER_SYSVIEW_Init+0x74>)
 8007af2:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8007af4:	4a0c      	ldr	r2, [pc, #48]	; (8007b28 <SEGGER_SYSVIEW_Init+0x74>)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007afa:	4a0b      	ldr	r2, [pc, #44]	; (8007b28 <SEGGER_SYSVIEW_Init+0x74>)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8007b00:	4a09      	ldr	r2, [pc, #36]	; (8007b28 <SEGGER_SYSVIEW_Init+0x74>)
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007b06:	4a08      	ldr	r2, [pc, #32]	; (8007b28 <SEGGER_SYSVIEW_Init+0x74>)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007b0c:	4b06      	ldr	r3, [pc, #24]	; (8007b28 <SEGGER_SYSVIEW_Init+0x74>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8007b12:	bf00      	nop
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	200046dc 	.word	0x200046dc
 8007b20:	08009664 	.word	0x08009664
 8007b24:	200066dc 	.word	0x200066dc
 8007b28:	200066e4 	.word	0x200066e4
 8007b2c:	e0001004 	.word	0xe0001004

08007b30 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8007b38:	4a04      	ldr	r2, [pc, #16]	; (8007b4c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6113      	str	r3, [r2, #16]
}
 8007b3e:	bf00      	nop
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	200066e4 	.word	0x200066e4

08007b50 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007b58:	f3ef 8311 	mrs	r3, BASEPRI
 8007b5c:	f04f 0120 	mov.w	r1, #32
 8007b60:	f381 8811 	msr	BASEPRI, r1
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	4808      	ldr	r0, [pc, #32]	; (8007b88 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8007b68:	f7ff fdef 	bl	800774a <_PreparePacket>
 8007b6c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	68b9      	ldr	r1, [r7, #8]
 8007b72:	68b8      	ldr	r0, [r7, #8]
 8007b74:	f7ff feca 	bl	800790c <_SendPacket>
  RECORD_END();
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f383 8811 	msr	BASEPRI, r3
}
 8007b7e:	bf00      	nop
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20006714 	.word	0x20006714

08007b8c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b088      	sub	sp, #32
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007b96:	f3ef 8311 	mrs	r3, BASEPRI
 8007b9a:	f04f 0120 	mov.w	r1, #32
 8007b9e:	f381 8811 	msr	BASEPRI, r1
 8007ba2:	617b      	str	r3, [r7, #20]
 8007ba4:	4816      	ldr	r0, [pc, #88]	; (8007c00 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8007ba6:	f7ff fdd0 	bl	800774a <_PreparePacket>
 8007baa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	61fb      	str	r3, [r7, #28]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	61bb      	str	r3, [r7, #24]
 8007bb8:	e00b      	b.n	8007bd2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	1c59      	adds	r1, r3, #1
 8007bc2:	61f9      	str	r1, [r7, #28]
 8007bc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bc8:	b2d2      	uxtb	r2, r2
 8007bca:	701a      	strb	r2, [r3, #0]
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	09db      	lsrs	r3, r3, #7
 8007bd0:	61bb      	str	r3, [r7, #24]
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	2b7f      	cmp	r3, #127	; 0x7f
 8007bd6:	d8f0      	bhi.n	8007bba <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	61fa      	str	r2, [r7, #28]
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	b2d2      	uxtb	r2, r2
 8007be2:	701a      	strb	r2, [r3, #0]
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	68f9      	ldr	r1, [r7, #12]
 8007bec:	6938      	ldr	r0, [r7, #16]
 8007bee:	f7ff fe8d 	bl	800790c <_SendPacket>
  RECORD_END();
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f383 8811 	msr	BASEPRI, r3
}
 8007bf8:	bf00      	nop
 8007bfa:	3720      	adds	r7, #32
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20006714 	.word	0x20006714

08007c04 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08c      	sub	sp, #48	; 0x30
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007c10:	f3ef 8311 	mrs	r3, BASEPRI
 8007c14:	f04f 0120 	mov.w	r1, #32
 8007c18:	f381 8811 	msr	BASEPRI, r1
 8007c1c:	61fb      	str	r3, [r7, #28]
 8007c1e:	4825      	ldr	r0, [pc, #148]	; (8007cb4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007c20:	f7ff fd93 	bl	800774a <_PreparePacket>
 8007c24:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c32:	e00b      	b.n	8007c4c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	1c59      	adds	r1, r3, #1
 8007c3c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007c3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c42:	b2d2      	uxtb	r2, r2
 8007c44:	701a      	strb	r2, [r3, #0]
 8007c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c48:	09db      	lsrs	r3, r3, #7
 8007c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8007c50:	d8f0      	bhi.n	8007c34 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c54:	1c5a      	adds	r2, r3, #1
 8007c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c5a:	b2d2      	uxtb	r2, r2
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c60:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	627b      	str	r3, [r7, #36]	; 0x24
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	623b      	str	r3, [r7, #32]
 8007c6a:	e00b      	b.n	8007c84 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	1c59      	adds	r1, r3, #1
 8007c74:	6279      	str	r1, [r7, #36]	; 0x24
 8007c76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c7a:	b2d2      	uxtb	r2, r2
 8007c7c:	701a      	strb	r2, [r3, #0]
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	09db      	lsrs	r3, r3, #7
 8007c82:	623b      	str	r3, [r7, #32]
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	2b7f      	cmp	r3, #127	; 0x7f
 8007c88:	d8f0      	bhi.n	8007c6c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	1c5a      	adds	r2, r3, #1
 8007c8e:	627a      	str	r2, [r7, #36]	; 0x24
 8007c90:	6a3a      	ldr	r2, [r7, #32]
 8007c92:	b2d2      	uxtb	r2, r2
 8007c94:	701a      	strb	r2, [r3, #0]
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	6979      	ldr	r1, [r7, #20]
 8007c9e:	69b8      	ldr	r0, [r7, #24]
 8007ca0:	f7ff fe34 	bl	800790c <_SendPacket>
  RECORD_END();
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	f383 8811 	msr	BASEPRI, r3
}
 8007caa:	bf00      	nop
 8007cac:	3730      	adds	r7, #48	; 0x30
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20006714 	.word	0x20006714

08007cb8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b090      	sub	sp, #64	; 0x40
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
 8007cc4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007cc6:	f3ef 8311 	mrs	r3, BASEPRI
 8007cca:	f04f 0120 	mov.w	r1, #32
 8007cce:	f381 8811 	msr	BASEPRI, r1
 8007cd2:	61fb      	str	r3, [r7, #28]
 8007cd4:	4840      	ldr	r0, [pc, #256]	; (8007dd8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007cd6:	f7ff fd38 	bl	800774a <_PreparePacket>
 8007cda:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ce8:	e00b      	b.n	8007d02 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8007cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cec:	b2da      	uxtb	r2, r3
 8007cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf0:	1c59      	adds	r1, r3, #1
 8007cf2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007cf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cf8:	b2d2      	uxtb	r2, r2
 8007cfa:	701a      	strb	r2, [r3, #0]
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	09db      	lsrs	r3, r3, #7
 8007d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d04:	2b7f      	cmp	r3, #127	; 0x7f
 8007d06:	d8f0      	bhi.n	8007cea <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007d0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d10:	b2d2      	uxtb	r2, r2
 8007d12:	701a      	strb	r2, [r3, #0]
 8007d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8007d20:	e00b      	b.n	8007d3a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d28:	1c59      	adds	r1, r3, #1
 8007d2a:	6379      	str	r1, [r7, #52]	; 0x34
 8007d2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d30:	b2d2      	uxtb	r2, r2
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d36:	09db      	lsrs	r3, r3, #7
 8007d38:	633b      	str	r3, [r7, #48]	; 0x30
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8007d3e:	d8f0      	bhi.n	8007d22 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d42:	1c5a      	adds	r2, r3, #1
 8007d44:	637a      	str	r2, [r7, #52]	; 0x34
 8007d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d48:	b2d2      	uxtb	r2, r2
 8007d4a:	701a      	strb	r2, [r3, #0]
 8007d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d58:	e00b      	b.n	8007d72 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8007d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d60:	1c59      	adds	r1, r3, #1
 8007d62:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007d64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d68:	b2d2      	uxtb	r2, r2
 8007d6a:	701a      	strb	r2, [r3, #0]
 8007d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6e:	09db      	lsrs	r3, r3, #7
 8007d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	2b7f      	cmp	r3, #127	; 0x7f
 8007d76:	d8f0      	bhi.n	8007d5a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7a:	1c5a      	adds	r2, r3, #1
 8007d7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d80:	b2d2      	uxtb	r2, r2
 8007d82:	701a      	strb	r2, [r3, #0]
 8007d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d8e:	623b      	str	r3, [r7, #32]
 8007d90:	e00b      	b.n	8007daa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	1c59      	adds	r1, r3, #1
 8007d9a:	6279      	str	r1, [r7, #36]	; 0x24
 8007d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007da0:	b2d2      	uxtb	r2, r2
 8007da2:	701a      	strb	r2, [r3, #0]
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	09db      	lsrs	r3, r3, #7
 8007da8:	623b      	str	r3, [r7, #32]
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	2b7f      	cmp	r3, #127	; 0x7f
 8007dae:	d8f0      	bhi.n	8007d92 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	627a      	str	r2, [r7, #36]	; 0x24
 8007db6:	6a3a      	ldr	r2, [r7, #32]
 8007db8:	b2d2      	uxtb	r2, r2
 8007dba:	701a      	strb	r2, [r3, #0]
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	6979      	ldr	r1, [r7, #20]
 8007dc4:	69b8      	ldr	r0, [r7, #24]
 8007dc6:	f7ff fda1 	bl	800790c <_SendPacket>
  RECORD_END();
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	f383 8811 	msr	BASEPRI, r3
}
 8007dd0:	bf00      	nop
 8007dd2:	3740      	adds	r7, #64	; 0x40
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	20006714 	.word	0x20006714

08007ddc <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08c      	sub	sp, #48	; 0x30
 8007de0:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007de2:	4b59      	ldr	r3, [pc, #356]	; (8007f48 <SEGGER_SYSVIEW_Start+0x16c>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f040 80aa 	bne.w	8007f40 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8007dec:	4b56      	ldr	r3, [pc, #344]	; (8007f48 <SEGGER_SYSVIEW_Start+0x16c>)
 8007dee:	2201      	movs	r2, #1
 8007df0:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007df2:	f3ef 8311 	mrs	r3, BASEPRI
 8007df6:	f04f 0120 	mov.w	r1, #32
 8007dfa:	f381 8811 	msr	BASEPRI, r1
 8007dfe:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007e00:	220a      	movs	r2, #10
 8007e02:	4952      	ldr	r1, [pc, #328]	; (8007f4c <SEGGER_SYSVIEW_Start+0x170>)
 8007e04:	2001      	movs	r0, #1
 8007e06:	f7ff faef 	bl	80073e8 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007e10:	200a      	movs	r0, #10
 8007e12:	f7ff fe9d 	bl	8007b50 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007e16:	f3ef 8311 	mrs	r3, BASEPRI
 8007e1a:	f04f 0120 	mov.w	r1, #32
 8007e1e:	f381 8811 	msr	BASEPRI, r1
 8007e22:	60bb      	str	r3, [r7, #8]
 8007e24:	484a      	ldr	r0, [pc, #296]	; (8007f50 <SEGGER_SYSVIEW_Start+0x174>)
 8007e26:	f7ff fc90 	bl	800774a <_PreparePacket>
 8007e2a:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e34:	4b44      	ldr	r3, [pc, #272]	; (8007f48 <SEGGER_SYSVIEW_Start+0x16c>)
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e3a:	e00b      	b.n	8007e54 <SEGGER_SYSVIEW_Start+0x78>
 8007e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e42:	1c59      	adds	r1, r3, #1
 8007e44:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007e46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e4a:	b2d2      	uxtb	r2, r2
 8007e4c:	701a      	strb	r2, [r3, #0]
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	09db      	lsrs	r3, r3, #7
 8007e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	2b7f      	cmp	r3, #127	; 0x7f
 8007e58:	d8f0      	bhi.n	8007e3c <SEGGER_SYSVIEW_Start+0x60>
 8007e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e62:	b2d2      	uxtb	r2, r2
 8007e64:	701a      	strb	r2, [r3, #0]
 8007e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e68:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e6e:	4b36      	ldr	r3, [pc, #216]	; (8007f48 <SEGGER_SYSVIEW_Start+0x16c>)
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	623b      	str	r3, [r7, #32]
 8007e74:	e00b      	b.n	8007e8e <SEGGER_SYSVIEW_Start+0xb2>
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	1c59      	adds	r1, r3, #1
 8007e7e:	6279      	str	r1, [r7, #36]	; 0x24
 8007e80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e84:	b2d2      	uxtb	r2, r2
 8007e86:	701a      	strb	r2, [r3, #0]
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	09db      	lsrs	r3, r3, #7
 8007e8c:	623b      	str	r3, [r7, #32]
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	2b7f      	cmp	r3, #127	; 0x7f
 8007e92:	d8f0      	bhi.n	8007e76 <SEGGER_SYSVIEW_Start+0x9a>
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	627a      	str	r2, [r7, #36]	; 0x24
 8007e9a:	6a3a      	ldr	r2, [r7, #32]
 8007e9c:	b2d2      	uxtb	r2, r2
 8007e9e:	701a      	strb	r2, [r3, #0]
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	61fb      	str	r3, [r7, #28]
 8007ea8:	4b27      	ldr	r3, [pc, #156]	; (8007f48 <SEGGER_SYSVIEW_Start+0x16c>)
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	61bb      	str	r3, [r7, #24]
 8007eae:	e00b      	b.n	8007ec8 <SEGGER_SYSVIEW_Start+0xec>
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	1c59      	adds	r1, r3, #1
 8007eb8:	61f9      	str	r1, [r7, #28]
 8007eba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ebe:	b2d2      	uxtb	r2, r2
 8007ec0:	701a      	strb	r2, [r3, #0]
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	09db      	lsrs	r3, r3, #7
 8007ec6:	61bb      	str	r3, [r7, #24]
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	2b7f      	cmp	r3, #127	; 0x7f
 8007ecc:	d8f0      	bhi.n	8007eb0 <SEGGER_SYSVIEW_Start+0xd4>
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	61fa      	str	r2, [r7, #28]
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	b2d2      	uxtb	r2, r2
 8007ed8:	701a      	strb	r2, [r3, #0]
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	617b      	str	r3, [r7, #20]
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	613b      	str	r3, [r7, #16]
 8007ee6:	e00b      	b.n	8007f00 <SEGGER_SYSVIEW_Start+0x124>
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	1c59      	adds	r1, r3, #1
 8007ef0:	6179      	str	r1, [r7, #20]
 8007ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ef6:	b2d2      	uxtb	r2, r2
 8007ef8:	701a      	strb	r2, [r3, #0]
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	09db      	lsrs	r3, r3, #7
 8007efe:	613b      	str	r3, [r7, #16]
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	2b7f      	cmp	r3, #127	; 0x7f
 8007f04:	d8f0      	bhi.n	8007ee8 <SEGGER_SYSVIEW_Start+0x10c>
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	617a      	str	r2, [r7, #20]
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	b2d2      	uxtb	r2, r2
 8007f10:	701a      	strb	r2, [r3, #0]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007f16:	2218      	movs	r2, #24
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff fcf6 	bl	800790c <_SendPacket>
      RECORD_END();
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007f26:	4b08      	ldr	r3, [pc, #32]	; (8007f48 <SEGGER_SYSVIEW_Start+0x16c>)
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d002      	beq.n	8007f34 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007f2e:	4b06      	ldr	r3, [pc, #24]	; (8007f48 <SEGGER_SYSVIEW_Start+0x16c>)
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007f34:	f000 f9ec 	bl	8008310 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007f38:	f000 f9b2 	bl	80082a0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007f3c:	f000 fc8c 	bl	8008858 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8007f40:	bf00      	nop
 8007f42:	3730      	adds	r7, #48	; 0x30
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	200066e4 	.word	0x200066e4
 8007f4c:	0800968c 	.word	0x0800968c
 8007f50:	20006714 	.word	0x20006714

08007f54 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007f5a:	f3ef 8311 	mrs	r3, BASEPRI
 8007f5e:	f04f 0120 	mov.w	r1, #32
 8007f62:	f381 8811 	msr	BASEPRI, r1
 8007f66:	607b      	str	r3, [r7, #4]
 8007f68:	480b      	ldr	r0, [pc, #44]	; (8007f98 <SEGGER_SYSVIEW_Stop+0x44>)
 8007f6a:	f7ff fbee 	bl	800774a <_PreparePacket>
 8007f6e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007f70:	4b0a      	ldr	r3, [pc, #40]	; (8007f9c <SEGGER_SYSVIEW_Stop+0x48>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d007      	beq.n	8007f88 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007f78:	220b      	movs	r2, #11
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6838      	ldr	r0, [r7, #0]
 8007f7e:	f7ff fcc5 	bl	800790c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007f82:	4b06      	ldr	r3, [pc, #24]	; (8007f9c <SEGGER_SYSVIEW_Stop+0x48>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f383 8811 	msr	BASEPRI, r3
}
 8007f8e:	bf00      	nop
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20006714 	.word	0x20006714
 8007f9c:	200066e4 	.word	0x200066e4

08007fa0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08c      	sub	sp, #48	; 0x30
 8007fa4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8007faa:	f04f 0120 	mov.w	r1, #32
 8007fae:	f381 8811 	msr	BASEPRI, r1
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	4845      	ldr	r0, [pc, #276]	; (80080cc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007fb6:	f7ff fbc8 	bl	800774a <_PreparePacket>
 8007fba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fc4:	4b42      	ldr	r3, [pc, #264]	; (80080d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fca:	e00b      	b.n	8007fe4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd2:	1c59      	adds	r1, r3, #1
 8007fd4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007fd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fda:	b2d2      	uxtb	r2, r2
 8007fdc:	701a      	strb	r2, [r3, #0]
 8007fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe0:	09db      	lsrs	r3, r3, #7
 8007fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8007fe8:	d8f0      	bhi.n	8007fcc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fec:	1c5a      	adds	r2, r3, #1
 8007fee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ff2:	b2d2      	uxtb	r2, r2
 8007ff4:	701a      	strb	r2, [r3, #0]
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ffe:	4b34      	ldr	r3, [pc, #208]	; (80080d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	623b      	str	r3, [r7, #32]
 8008004:	e00b      	b.n	800801e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	b2da      	uxtb	r2, r3
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	1c59      	adds	r1, r3, #1
 800800e:	6279      	str	r1, [r7, #36]	; 0x24
 8008010:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008014:	b2d2      	uxtb	r2, r2
 8008016:	701a      	strb	r2, [r3, #0]
 8008018:	6a3b      	ldr	r3, [r7, #32]
 800801a:	09db      	lsrs	r3, r3, #7
 800801c:	623b      	str	r3, [r7, #32]
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	2b7f      	cmp	r3, #127	; 0x7f
 8008022:	d8f0      	bhi.n	8008006 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	627a      	str	r2, [r7, #36]	; 0x24
 800802a:	6a3a      	ldr	r2, [r7, #32]
 800802c:	b2d2      	uxtb	r2, r2
 800802e:	701a      	strb	r2, [r3, #0]
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	61fb      	str	r3, [r7, #28]
 8008038:	4b25      	ldr	r3, [pc, #148]	; (80080d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	61bb      	str	r3, [r7, #24]
 800803e:	e00b      	b.n	8008058 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	b2da      	uxtb	r2, r3
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	1c59      	adds	r1, r3, #1
 8008048:	61f9      	str	r1, [r7, #28]
 800804a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800804e:	b2d2      	uxtb	r2, r2
 8008050:	701a      	strb	r2, [r3, #0]
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	09db      	lsrs	r3, r3, #7
 8008056:	61bb      	str	r3, [r7, #24]
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	2b7f      	cmp	r3, #127	; 0x7f
 800805c:	d8f0      	bhi.n	8008040 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	1c5a      	adds	r2, r3, #1
 8008062:	61fa      	str	r2, [r7, #28]
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	b2d2      	uxtb	r2, r2
 8008068:	701a      	strb	r2, [r3, #0]
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	617b      	str	r3, [r7, #20]
 8008072:	2302      	movs	r3, #2
 8008074:	613b      	str	r3, [r7, #16]
 8008076:	e00b      	b.n	8008090 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	b2da      	uxtb	r2, r3
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	1c59      	adds	r1, r3, #1
 8008080:	6179      	str	r1, [r7, #20]
 8008082:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	701a      	strb	r2, [r3, #0]
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	09db      	lsrs	r3, r3, #7
 800808e:	613b      	str	r3, [r7, #16]
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	2b7f      	cmp	r3, #127	; 0x7f
 8008094:	d8f0      	bhi.n	8008078 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	617a      	str	r2, [r7, #20]
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	b2d2      	uxtb	r2, r2
 80080a0:	701a      	strb	r2, [r3, #0]
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80080a6:	2218      	movs	r2, #24
 80080a8:	6879      	ldr	r1, [r7, #4]
 80080aa:	68b8      	ldr	r0, [r7, #8]
 80080ac:	f7ff fc2e 	bl	800790c <_SendPacket>
  RECORD_END();
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80080b6:	4b06      	ldr	r3, [pc, #24]	; (80080d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d002      	beq.n	80080c4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80080be:	4b04      	ldr	r3, [pc, #16]	; (80080d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	4798      	blx	r3
  }
}
 80080c4:	bf00      	nop
 80080c6:	3730      	adds	r7, #48	; 0x30
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	20006714 	.word	0x20006714
 80080d0:	200066e4 	.word	0x200066e4

080080d4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b092      	sub	sp, #72	; 0x48
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80080dc:	f3ef 8311 	mrs	r3, BASEPRI
 80080e0:	f04f 0120 	mov.w	r1, #32
 80080e4:	f381 8811 	msr	BASEPRI, r1
 80080e8:	617b      	str	r3, [r7, #20]
 80080ea:	486b      	ldr	r0, [pc, #428]	; (8008298 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80080ec:	f7ff fb2d 	bl	800774a <_PreparePacket>
 80080f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	647b      	str	r3, [r7, #68]	; 0x44
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	4b67      	ldr	r3, [pc, #412]	; (800829c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	089b      	lsrs	r3, r3, #2
 8008106:	643b      	str	r3, [r7, #64]	; 0x40
 8008108:	e00b      	b.n	8008122 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 800810a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800810c:	b2da      	uxtb	r2, r3
 800810e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008110:	1c59      	adds	r1, r3, #1
 8008112:	6479      	str	r1, [r7, #68]	; 0x44
 8008114:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008118:	b2d2      	uxtb	r2, r2
 800811a:	701a      	strb	r2, [r3, #0]
 800811c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800811e:	09db      	lsrs	r3, r3, #7
 8008120:	643b      	str	r3, [r7, #64]	; 0x40
 8008122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008124:	2b7f      	cmp	r3, #127	; 0x7f
 8008126:	d8f0      	bhi.n	800810a <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8008128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	647a      	str	r2, [r7, #68]	; 0x44
 800812e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008130:	b2d2      	uxtb	r2, r2
 8008132:	701a      	strb	r2, [r3, #0]
 8008134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008136:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	63bb      	str	r3, [r7, #56]	; 0x38
 8008142:	e00b      	b.n	800815c <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8008144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008146:	b2da      	uxtb	r2, r3
 8008148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800814a:	1c59      	adds	r1, r3, #1
 800814c:	63f9      	str	r1, [r7, #60]	; 0x3c
 800814e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008152:	b2d2      	uxtb	r2, r2
 8008154:	701a      	strb	r2, [r3, #0]
 8008156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008158:	09db      	lsrs	r3, r3, #7
 800815a:	63bb      	str	r3, [r7, #56]	; 0x38
 800815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815e:	2b7f      	cmp	r3, #127	; 0x7f
 8008160:	d8f0      	bhi.n	8008144 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8008162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800816a:	b2d2      	uxtb	r2, r2
 800816c:	701a      	strb	r2, [r3, #0]
 800816e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008170:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	2220      	movs	r2, #32
 8008178:	4619      	mov	r1, r3
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f7ff fa98 	bl	80076b0 <_EncodeStr>
 8008180:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008182:	2209      	movs	r2, #9
 8008184:	68f9      	ldr	r1, [r7, #12]
 8008186:	6938      	ldr	r0, [r7, #16]
 8008188:	f7ff fbc0 	bl	800790c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	637b      	str	r3, [r7, #52]	; 0x34
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	4b40      	ldr	r3, [pc, #256]	; (800829c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	089b      	lsrs	r3, r3, #2
 80081a0:	633b      	str	r3, [r7, #48]	; 0x30
 80081a2:	e00b      	b.n	80081bc <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80081a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081aa:	1c59      	adds	r1, r3, #1
 80081ac:	6379      	str	r1, [r7, #52]	; 0x34
 80081ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081b2:	b2d2      	uxtb	r2, r2
 80081b4:	701a      	strb	r2, [r3, #0]
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	09db      	lsrs	r3, r3, #7
 80081ba:	633b      	str	r3, [r7, #48]	; 0x30
 80081bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081be:	2b7f      	cmp	r3, #127	; 0x7f
 80081c0:	d8f0      	bhi.n	80081a4 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80081c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c4:	1c5a      	adds	r2, r3, #1
 80081c6:	637a      	str	r2, [r7, #52]	; 0x34
 80081c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ca:	b2d2      	uxtb	r2, r2
 80081cc:	701a      	strb	r2, [r3, #0]
 80081ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	62bb      	str	r3, [r7, #40]	; 0x28
 80081dc:	e00b      	b.n	80081f6 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80081de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e4:	1c59      	adds	r1, r3, #1
 80081e6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80081e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081ec:	b2d2      	uxtb	r2, r2
 80081ee:	701a      	strb	r2, [r3, #0]
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	09db      	lsrs	r3, r3, #7
 80081f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80081f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f8:	2b7f      	cmp	r3, #127	; 0x7f
 80081fa:	d8f0      	bhi.n	80081de <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 80081fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008204:	b2d2      	uxtb	r2, r2
 8008206:	701a      	strb	r2, [r3, #0]
 8008208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	627b      	str	r3, [r7, #36]	; 0x24
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	623b      	str	r3, [r7, #32]
 8008216:	e00b      	b.n	8008230 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8008218:	6a3b      	ldr	r3, [r7, #32]
 800821a:	b2da      	uxtb	r2, r3
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	1c59      	adds	r1, r3, #1
 8008220:	6279      	str	r1, [r7, #36]	; 0x24
 8008222:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008226:	b2d2      	uxtb	r2, r2
 8008228:	701a      	strb	r2, [r3, #0]
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	09db      	lsrs	r3, r3, #7
 800822e:	623b      	str	r3, [r7, #32]
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	2b7f      	cmp	r3, #127	; 0x7f
 8008234:	d8f0      	bhi.n	8008218 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8008236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008238:	1c5a      	adds	r2, r3, #1
 800823a:	627a      	str	r2, [r7, #36]	; 0x24
 800823c:	6a3a      	ldr	r2, [r7, #32]
 800823e:	b2d2      	uxtb	r2, r2
 8008240:	701a      	strb	r2, [r3, #0]
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	61fb      	str	r3, [r7, #28]
 800824a:	2300      	movs	r3, #0
 800824c:	61bb      	str	r3, [r7, #24]
 800824e:	e00b      	b.n	8008268 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	b2da      	uxtb	r2, r3
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	1c59      	adds	r1, r3, #1
 8008258:	61f9      	str	r1, [r7, #28]
 800825a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800825e:	b2d2      	uxtb	r2, r2
 8008260:	701a      	strb	r2, [r3, #0]
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	09db      	lsrs	r3, r3, #7
 8008266:	61bb      	str	r3, [r7, #24]
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	2b7f      	cmp	r3, #127	; 0x7f
 800826c:	d8f0      	bhi.n	8008250 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	1c5a      	adds	r2, r3, #1
 8008272:	61fa      	str	r2, [r7, #28]
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	b2d2      	uxtb	r2, r2
 8008278:	701a      	strb	r2, [r3, #0]
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800827e:	2215      	movs	r2, #21
 8008280:	68f9      	ldr	r1, [r7, #12]
 8008282:	6938      	ldr	r0, [r7, #16]
 8008284:	f7ff fb42 	bl	800790c <_SendPacket>
  RECORD_END();
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	f383 8811 	msr	BASEPRI, r3
}
 800828e:	bf00      	nop
 8008290:	3748      	adds	r7, #72	; 0x48
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	20006714 	.word	0x20006714
 800829c:	200066e4 	.word	0x200066e4

080082a0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80082a4:	4b07      	ldr	r3, [pc, #28]	; (80082c4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d008      	beq.n	80082be <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80082ac:	4b05      	ldr	r3, [pc, #20]	; (80082c4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80082b6:	4b03      	ldr	r3, [pc, #12]	; (80082c4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	4798      	blx	r3
  }
}
 80082be:	bf00      	nop
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	200066e4 	.word	0x200066e4

080082c8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80082d0:	f3ef 8311 	mrs	r3, BASEPRI
 80082d4:	f04f 0120 	mov.w	r1, #32
 80082d8:	f381 8811 	msr	BASEPRI, r1
 80082dc:	617b      	str	r3, [r7, #20]
 80082de:	480b      	ldr	r0, [pc, #44]	; (800830c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80082e0:	f7ff fa33 	bl	800774a <_PreparePacket>
 80082e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80082e6:	2280      	movs	r2, #128	; 0x80
 80082e8:	6879      	ldr	r1, [r7, #4]
 80082ea:	6938      	ldr	r0, [r7, #16]
 80082ec:	f7ff f9e0 	bl	80076b0 <_EncodeStr>
 80082f0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80082f2:	220e      	movs	r2, #14
 80082f4:	68f9      	ldr	r1, [r7, #12]
 80082f6:	6938      	ldr	r0, [r7, #16]
 80082f8:	f7ff fb08 	bl	800790c <_SendPacket>
  RECORD_END();
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	f383 8811 	msr	BASEPRI, r3
}
 8008302:	bf00      	nop
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	20006714 	.word	0x20006714

08008310 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008310:	b590      	push	{r4, r7, lr}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8008316:	4b15      	ldr	r3, [pc, #84]	; (800836c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d01a      	beq.n	8008354 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800831e:	4b13      	ldr	r3, [pc, #76]	; (800836c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d015      	beq.n	8008354 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008328:	4b10      	ldr	r3, [pc, #64]	; (800836c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800832a:	6a1b      	ldr	r3, [r3, #32]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4798      	blx	r3
 8008330:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008334:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8008336:	e9d7 0100 	ldrd	r0, r1, [r7]
 800833a:	f04f 0200 	mov.w	r2, #0
 800833e:	f04f 0300 	mov.w	r3, #0
 8008342:	000a      	movs	r2, r1
 8008344:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008346:	4613      	mov	r3, r2
 8008348:	461a      	mov	r2, r3
 800834a:	4621      	mov	r1, r4
 800834c:	200d      	movs	r0, #13
 800834e:	f7ff fc59 	bl	8007c04 <SEGGER_SYSVIEW_RecordU32x2>
 8008352:	e006      	b.n	8008362 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008354:	4b06      	ldr	r3, [pc, #24]	; (8008370 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4619      	mov	r1, r3
 800835a:	200c      	movs	r0, #12
 800835c:	f7ff fc16 	bl	8007b8c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008360:	bf00      	nop
 8008362:	bf00      	nop
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	bd90      	pop	{r4, r7, pc}
 800836a:	bf00      	nop
 800836c:	200066e4 	.word	0x200066e4
 8008370:	e0001004 	.word	0xe0001004

08008374 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800837a:	f3ef 8311 	mrs	r3, BASEPRI
 800837e:	f04f 0120 	mov.w	r1, #32
 8008382:	f381 8811 	msr	BASEPRI, r1
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	4819      	ldr	r0, [pc, #100]	; (80083f0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800838a:	f7ff f9de 	bl	800774a <_PreparePacket>
 800838e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8008394:	4b17      	ldr	r3, [pc, #92]	; (80083f4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800839c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	617b      	str	r3, [r7, #20]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	613b      	str	r3, [r7, #16]
 80083a6:	e00b      	b.n	80083c0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	1c59      	adds	r1, r3, #1
 80083b0:	6179      	str	r1, [r7, #20]
 80083b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083b6:	b2d2      	uxtb	r2, r2
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	09db      	lsrs	r3, r3, #7
 80083be:	613b      	str	r3, [r7, #16]
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	2b7f      	cmp	r3, #127	; 0x7f
 80083c4:	d8f0      	bhi.n	80083a8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	1c5a      	adds	r2, r3, #1
 80083ca:	617a      	str	r2, [r7, #20]
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	b2d2      	uxtb	r2, r2
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80083d6:	2202      	movs	r2, #2
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	68b8      	ldr	r0, [r7, #8]
 80083dc:	f7ff fa96 	bl	800790c <_SendPacket>
  RECORD_END();
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f383 8811 	msr	BASEPRI, r3
}
 80083e6:	bf00      	nop
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	20006714 	.word	0x20006714
 80083f4:	e000ed04 	.word	0xe000ed04

080083f8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80083fe:	f3ef 8311 	mrs	r3, BASEPRI
 8008402:	f04f 0120 	mov.w	r1, #32
 8008406:	f381 8811 	msr	BASEPRI, r1
 800840a:	607b      	str	r3, [r7, #4]
 800840c:	4807      	ldr	r0, [pc, #28]	; (800842c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800840e:	f7ff f99c 	bl	800774a <_PreparePacket>
 8008412:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8008414:	2203      	movs	r2, #3
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6838      	ldr	r0, [r7, #0]
 800841a:	f7ff fa77 	bl	800790c <_SendPacket>
  RECORD_END();
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f383 8811 	msr	BASEPRI, r3
}
 8008424:	bf00      	nop
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	20006714 	.word	0x20006714

08008430 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008436:	f3ef 8311 	mrs	r3, BASEPRI
 800843a:	f04f 0120 	mov.w	r1, #32
 800843e:	f381 8811 	msr	BASEPRI, r1
 8008442:	607b      	str	r3, [r7, #4]
 8008444:	4807      	ldr	r0, [pc, #28]	; (8008464 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8008446:	f7ff f980 	bl	800774a <_PreparePacket>
 800844a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800844c:	2212      	movs	r2, #18
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6838      	ldr	r0, [r7, #0]
 8008452:	f7ff fa5b 	bl	800790c <_SendPacket>
  RECORD_END();
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f383 8811 	msr	BASEPRI, r3
}
 800845c:	bf00      	nop
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20006714 	.word	0x20006714

08008468 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800846e:	f3ef 8311 	mrs	r3, BASEPRI
 8008472:	f04f 0120 	mov.w	r1, #32
 8008476:	f381 8811 	msr	BASEPRI, r1
 800847a:	607b      	str	r3, [r7, #4]
 800847c:	4807      	ldr	r0, [pc, #28]	; (800849c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800847e:	f7ff f964 	bl	800774a <_PreparePacket>
 8008482:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8008484:	2211      	movs	r2, #17
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6838      	ldr	r0, [r7, #0]
 800848a:	f7ff fa3f 	bl	800790c <_SendPacket>
  RECORD_END();
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f383 8811 	msr	BASEPRI, r3
}
 8008494:	bf00      	nop
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	20006714 	.word	0x20006714

080084a0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b088      	sub	sp, #32
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80084a8:	f3ef 8311 	mrs	r3, BASEPRI
 80084ac:	f04f 0120 	mov.w	r1, #32
 80084b0:	f381 8811 	msr	BASEPRI, r1
 80084b4:	617b      	str	r3, [r7, #20]
 80084b6:	481a      	ldr	r0, [pc, #104]	; (8008520 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80084b8:	f7ff f947 	bl	800774a <_PreparePacket>
 80084bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80084c2:	4b18      	ldr	r3, [pc, #96]	; (8008524 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	089b      	lsrs	r3, r3, #2
 80084cc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	61fb      	str	r3, [r7, #28]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	61bb      	str	r3, [r7, #24]
 80084d6:	e00b      	b.n	80084f0 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	1c59      	adds	r1, r3, #1
 80084e0:	61f9      	str	r1, [r7, #28]
 80084e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084e6:	b2d2      	uxtb	r2, r2
 80084e8:	701a      	strb	r2, [r3, #0]
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	09db      	lsrs	r3, r3, #7
 80084ee:	61bb      	str	r3, [r7, #24]
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	2b7f      	cmp	r3, #127	; 0x7f
 80084f4:	d8f0      	bhi.n	80084d8 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	1c5a      	adds	r2, r3, #1
 80084fa:	61fa      	str	r2, [r7, #28]
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	b2d2      	uxtb	r2, r2
 8008500:	701a      	strb	r2, [r3, #0]
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008506:	2208      	movs	r2, #8
 8008508:	68f9      	ldr	r1, [r7, #12]
 800850a:	6938      	ldr	r0, [r7, #16]
 800850c:	f7ff f9fe 	bl	800790c <_SendPacket>
  RECORD_END();
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	f383 8811 	msr	BASEPRI, r3
}
 8008516:	bf00      	nop
 8008518:	3720      	adds	r7, #32
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20006714 	.word	0x20006714
 8008524:	200066e4 	.word	0x200066e4

08008528 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8008528:	b580      	push	{r7, lr}
 800852a:	b088      	sub	sp, #32
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008530:	f3ef 8311 	mrs	r3, BASEPRI
 8008534:	f04f 0120 	mov.w	r1, #32
 8008538:	f381 8811 	msr	BASEPRI, r1
 800853c:	617b      	str	r3, [r7, #20]
 800853e:	481a      	ldr	r0, [pc, #104]	; (80085a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008540:	f7ff f903 	bl	800774a <_PreparePacket>
 8008544:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800854a:	4b18      	ldr	r3, [pc, #96]	; (80085ac <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	089b      	lsrs	r3, r3, #2
 8008554:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	61fb      	str	r3, [r7, #28]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	61bb      	str	r3, [r7, #24]
 800855e:	e00b      	b.n	8008578 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	b2da      	uxtb	r2, r3
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	1c59      	adds	r1, r3, #1
 8008568:	61f9      	str	r1, [r7, #28]
 800856a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800856e:	b2d2      	uxtb	r2, r2
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	09db      	lsrs	r3, r3, #7
 8008576:	61bb      	str	r3, [r7, #24]
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	2b7f      	cmp	r3, #127	; 0x7f
 800857c:	d8f0      	bhi.n	8008560 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	1c5a      	adds	r2, r3, #1
 8008582:	61fa      	str	r2, [r7, #28]
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	b2d2      	uxtb	r2, r2
 8008588:	701a      	strb	r2, [r3, #0]
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800858e:	2204      	movs	r2, #4
 8008590:	68f9      	ldr	r1, [r7, #12]
 8008592:	6938      	ldr	r0, [r7, #16]
 8008594:	f7ff f9ba 	bl	800790c <_SendPacket>
  RECORD_END();
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f383 8811 	msr	BASEPRI, r3
}
 800859e:	bf00      	nop
 80085a0:	3720      	adds	r7, #32
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20006714 	.word	0x20006714
 80085ac:	200066e4 	.word	0x200066e4

080085b0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80085b8:	f3ef 8311 	mrs	r3, BASEPRI
 80085bc:	f04f 0120 	mov.w	r1, #32
 80085c0:	f381 8811 	msr	BASEPRI, r1
 80085c4:	617b      	str	r3, [r7, #20]
 80085c6:	481a      	ldr	r0, [pc, #104]	; (8008630 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80085c8:	f7ff f8bf 	bl	800774a <_PreparePacket>
 80085cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80085d2:	4b18      	ldr	r3, [pc, #96]	; (8008634 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	089b      	lsrs	r3, r3, #2
 80085dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	61fb      	str	r3, [r7, #28]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	61bb      	str	r3, [r7, #24]
 80085e6:	e00b      	b.n	8008600 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	b2da      	uxtb	r2, r3
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	1c59      	adds	r1, r3, #1
 80085f0:	61f9      	str	r1, [r7, #28]
 80085f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085f6:	b2d2      	uxtb	r2, r2
 80085f8:	701a      	strb	r2, [r3, #0]
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	09db      	lsrs	r3, r3, #7
 80085fe:	61bb      	str	r3, [r7, #24]
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	2b7f      	cmp	r3, #127	; 0x7f
 8008604:	d8f0      	bhi.n	80085e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	61fa      	str	r2, [r7, #28]
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	b2d2      	uxtb	r2, r2
 8008610:	701a      	strb	r2, [r3, #0]
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8008616:	2206      	movs	r2, #6
 8008618:	68f9      	ldr	r1, [r7, #12]
 800861a:	6938      	ldr	r0, [r7, #16]
 800861c:	f7ff f976 	bl	800790c <_SendPacket>
  RECORD_END();
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f383 8811 	msr	BASEPRI, r3
}
 8008626:	bf00      	nop
 8008628:	3720      	adds	r7, #32
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20006714 	.word	0x20006714
 8008634:	200066e4 	.word	0x200066e4

08008638 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8008638:	b580      	push	{r7, lr}
 800863a:	b08a      	sub	sp, #40	; 0x28
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008642:	f3ef 8311 	mrs	r3, BASEPRI
 8008646:	f04f 0120 	mov.w	r1, #32
 800864a:	f381 8811 	msr	BASEPRI, r1
 800864e:	617b      	str	r3, [r7, #20]
 8008650:	4827      	ldr	r0, [pc, #156]	; (80086f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8008652:	f7ff f87a 	bl	800774a <_PreparePacket>
 8008656:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800865c:	4b25      	ldr	r3, [pc, #148]	; (80086f4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	089b      	lsrs	r3, r3, #2
 8008666:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	627b      	str	r3, [r7, #36]	; 0x24
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	623b      	str	r3, [r7, #32]
 8008670:	e00b      	b.n	800868a <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8008672:	6a3b      	ldr	r3, [r7, #32]
 8008674:	b2da      	uxtb	r2, r3
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	1c59      	adds	r1, r3, #1
 800867a:	6279      	str	r1, [r7, #36]	; 0x24
 800867c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008680:	b2d2      	uxtb	r2, r2
 8008682:	701a      	strb	r2, [r3, #0]
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	09db      	lsrs	r3, r3, #7
 8008688:	623b      	str	r3, [r7, #32]
 800868a:	6a3b      	ldr	r3, [r7, #32]
 800868c:	2b7f      	cmp	r3, #127	; 0x7f
 800868e:	d8f0      	bhi.n	8008672 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	1c5a      	adds	r2, r3, #1
 8008694:	627a      	str	r2, [r7, #36]	; 0x24
 8008696:	6a3a      	ldr	r2, [r7, #32]
 8008698:	b2d2      	uxtb	r2, r2
 800869a:	701a      	strb	r2, [r3, #0]
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	61fb      	str	r3, [r7, #28]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	61bb      	str	r3, [r7, #24]
 80086a8:	e00b      	b.n	80086c2 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	1c59      	adds	r1, r3, #1
 80086b2:	61f9      	str	r1, [r7, #28]
 80086b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086b8:	b2d2      	uxtb	r2, r2
 80086ba:	701a      	strb	r2, [r3, #0]
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	09db      	lsrs	r3, r3, #7
 80086c0:	61bb      	str	r3, [r7, #24]
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	2b7f      	cmp	r3, #127	; 0x7f
 80086c6:	d8f0      	bhi.n	80086aa <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	1c5a      	adds	r2, r3, #1
 80086cc:	61fa      	str	r2, [r7, #28]
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	b2d2      	uxtb	r2, r2
 80086d2:	701a      	strb	r2, [r3, #0]
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80086d8:	2207      	movs	r2, #7
 80086da:	68f9      	ldr	r1, [r7, #12]
 80086dc:	6938      	ldr	r0, [r7, #16]
 80086de:	f7ff f915 	bl	800790c <_SendPacket>
  RECORD_END();
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f383 8811 	msr	BASEPRI, r3
}
 80086e8:	bf00      	nop
 80086ea:	3728      	adds	r7, #40	; 0x28
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	20006714 	.word	0x20006714
 80086f4:	200066e4 	.word	0x200066e4

080086f8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008700:	4b05      	ldr	r3, [pc, #20]	; (8008718 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	089b      	lsrs	r3, r3, #2
}
 800870a:	4618      	mov	r0, r3
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	200066e4 	.word	0x200066e4

0800871c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800871c:	b580      	push	{r7, lr}
 800871e:	b08c      	sub	sp, #48	; 0x30
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008726:	4b3b      	ldr	r3, [pc, #236]	; (8008814 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d06d      	beq.n	800880a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800872e:	4b39      	ldr	r3, [pc, #228]	; (8008814 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008734:	2300      	movs	r3, #0
 8008736:	62bb      	str	r3, [r7, #40]	; 0x28
 8008738:	e008      	b.n	800874c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800873a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008742:	2b00      	cmp	r3, #0
 8008744:	d007      	beq.n	8008756 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	3301      	adds	r3, #1
 800874a:	62bb      	str	r3, [r7, #40]	; 0x28
 800874c:	79fb      	ldrb	r3, [r7, #7]
 800874e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008750:	429a      	cmp	r2, r3
 8008752:	d3f2      	bcc.n	800873a <SEGGER_SYSVIEW_SendModule+0x1e>
 8008754:	e000      	b.n	8008758 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8008756:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875a:	2b00      	cmp	r3, #0
 800875c:	d055      	beq.n	800880a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800875e:	f3ef 8311 	mrs	r3, BASEPRI
 8008762:	f04f 0120 	mov.w	r1, #32
 8008766:	f381 8811 	msr	BASEPRI, r1
 800876a:	617b      	str	r3, [r7, #20]
 800876c:	482a      	ldr	r0, [pc, #168]	; (8008818 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800876e:	f7fe ffec 	bl	800774a <_PreparePacket>
 8008772:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
 800877c:	79fb      	ldrb	r3, [r7, #7]
 800877e:	623b      	str	r3, [r7, #32]
 8008780:	e00b      	b.n	800879a <SEGGER_SYSVIEW_SendModule+0x7e>
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	b2da      	uxtb	r2, r3
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	1c59      	adds	r1, r3, #1
 800878a:	6279      	str	r1, [r7, #36]	; 0x24
 800878c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008790:	b2d2      	uxtb	r2, r2
 8008792:	701a      	strb	r2, [r3, #0]
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	09db      	lsrs	r3, r3, #7
 8008798:	623b      	str	r3, [r7, #32]
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	2b7f      	cmp	r3, #127	; 0x7f
 800879e:	d8f0      	bhi.n	8008782 <SEGGER_SYSVIEW_SendModule+0x66>
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	1c5a      	adds	r2, r3, #1
 80087a4:	627a      	str	r2, [r7, #36]	; 0x24
 80087a6:	6a3a      	ldr	r2, [r7, #32]
 80087a8:	b2d2      	uxtb	r2, r2
 80087aa:	701a      	strb	r2, [r3, #0]
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	61fb      	str	r3, [r7, #28]
 80087b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	61bb      	str	r3, [r7, #24]
 80087ba:	e00b      	b.n	80087d4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	b2da      	uxtb	r2, r3
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	1c59      	adds	r1, r3, #1
 80087c4:	61f9      	str	r1, [r7, #28]
 80087c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087ca:	b2d2      	uxtb	r2, r2
 80087cc:	701a      	strb	r2, [r3, #0]
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	09db      	lsrs	r3, r3, #7
 80087d2:	61bb      	str	r3, [r7, #24]
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	2b7f      	cmp	r3, #127	; 0x7f
 80087d8:	d8f0      	bhi.n	80087bc <SEGGER_SYSVIEW_SendModule+0xa0>
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	1c5a      	adds	r2, r3, #1
 80087de:	61fa      	str	r2, [r7, #28]
 80087e0:	69ba      	ldr	r2, [r7, #24]
 80087e2:	b2d2      	uxtb	r2, r2
 80087e4:	701a      	strb	r2, [r3, #0]
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80087ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2280      	movs	r2, #128	; 0x80
 80087f0:	4619      	mov	r1, r3
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f7fe ff5c 	bl	80076b0 <_EncodeStr>
 80087f8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80087fa:	2216      	movs	r2, #22
 80087fc:	68f9      	ldr	r1, [r7, #12]
 80087fe:	6938      	ldr	r0, [r7, #16]
 8008800:	f7ff f884 	bl	800790c <_SendPacket>
      RECORD_END();
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800880a:	bf00      	nop
 800880c:	3730      	adds	r7, #48	; 0x30
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	2000670c 	.word	0x2000670c
 8008818:	20006714 	.word	0x20006714

0800881c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8008822:	4b0c      	ldr	r3, [pc, #48]	; (8008854 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00f      	beq.n	800884a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800882a:	4b0a      	ldr	r3, [pc, #40]	; (8008854 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1f2      	bne.n	8008830 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800884a:	bf00      	nop
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	2000670c 	.word	0x2000670c

08008858 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800885e:	f3ef 8311 	mrs	r3, BASEPRI
 8008862:	f04f 0120 	mov.w	r1, #32
 8008866:	f381 8811 	msr	BASEPRI, r1
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	4817      	ldr	r0, [pc, #92]	; (80088cc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800886e:	f7fe ff6c 	bl	800774a <_PreparePacket>
 8008872:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	617b      	str	r3, [r7, #20]
 800887c:	4b14      	ldr	r3, [pc, #80]	; (80088d0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	613b      	str	r3, [r7, #16]
 8008882:	e00b      	b.n	800889c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	b2da      	uxtb	r2, r3
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	1c59      	adds	r1, r3, #1
 800888c:	6179      	str	r1, [r7, #20]
 800888e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008892:	b2d2      	uxtb	r2, r2
 8008894:	701a      	strb	r2, [r3, #0]
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	09db      	lsrs	r3, r3, #7
 800889a:	613b      	str	r3, [r7, #16]
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	2b7f      	cmp	r3, #127	; 0x7f
 80088a0:	d8f0      	bhi.n	8008884 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	617a      	str	r2, [r7, #20]
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	b2d2      	uxtb	r2, r2
 80088ac:	701a      	strb	r2, [r3, #0]
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80088b2:	221b      	movs	r2, #27
 80088b4:	6879      	ldr	r1, [r7, #4]
 80088b6:	68b8      	ldr	r0, [r7, #8]
 80088b8:	f7ff f828 	bl	800790c <_SendPacket>
  RECORD_END();
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f383 8811 	msr	BASEPRI, r3
}
 80088c2:	bf00      	nop
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	20006714 	.word	0x20006714
 80088d0:	20006710 	.word	0x20006710

080088d4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08a      	sub	sp, #40	; 0x28
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80088dc:	f3ef 8311 	mrs	r3, BASEPRI
 80088e0:	f04f 0120 	mov.w	r1, #32
 80088e4:	f381 8811 	msr	BASEPRI, r1
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	4827      	ldr	r0, [pc, #156]	; (8008988 <SEGGER_SYSVIEW_Warn+0xb4>)
 80088ec:	f7fe ff2d 	bl	800774a <_PreparePacket>
 80088f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80088f2:	2280      	movs	r2, #128	; 0x80
 80088f4:	6879      	ldr	r1, [r7, #4]
 80088f6:	6938      	ldr	r0, [r7, #16]
 80088f8:	f7fe feda 	bl	80076b0 <_EncodeStr>
 80088fc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	627b      	str	r3, [r7, #36]	; 0x24
 8008902:	2301      	movs	r3, #1
 8008904:	623b      	str	r3, [r7, #32]
 8008906:	e00b      	b.n	8008920 <SEGGER_SYSVIEW_Warn+0x4c>
 8008908:	6a3b      	ldr	r3, [r7, #32]
 800890a:	b2da      	uxtb	r2, r3
 800890c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890e:	1c59      	adds	r1, r3, #1
 8008910:	6279      	str	r1, [r7, #36]	; 0x24
 8008912:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008916:	b2d2      	uxtb	r2, r2
 8008918:	701a      	strb	r2, [r3, #0]
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	09db      	lsrs	r3, r3, #7
 800891e:	623b      	str	r3, [r7, #32]
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	2b7f      	cmp	r3, #127	; 0x7f
 8008924:	d8f0      	bhi.n	8008908 <SEGGER_SYSVIEW_Warn+0x34>
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	1c5a      	adds	r2, r3, #1
 800892a:	627a      	str	r2, [r7, #36]	; 0x24
 800892c:	6a3a      	ldr	r2, [r7, #32]
 800892e:	b2d2      	uxtb	r2, r2
 8008930:	701a      	strb	r2, [r3, #0]
 8008932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008934:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	61fb      	str	r3, [r7, #28]
 800893a:	2300      	movs	r3, #0
 800893c:	61bb      	str	r3, [r7, #24]
 800893e:	e00b      	b.n	8008958 <SEGGER_SYSVIEW_Warn+0x84>
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	b2da      	uxtb	r2, r3
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	1c59      	adds	r1, r3, #1
 8008948:	61f9      	str	r1, [r7, #28]
 800894a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800894e:	b2d2      	uxtb	r2, r2
 8008950:	701a      	strb	r2, [r3, #0]
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	09db      	lsrs	r3, r3, #7
 8008956:	61bb      	str	r3, [r7, #24]
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	2b7f      	cmp	r3, #127	; 0x7f
 800895c:	d8f0      	bhi.n	8008940 <SEGGER_SYSVIEW_Warn+0x6c>
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	1c5a      	adds	r2, r3, #1
 8008962:	61fa      	str	r2, [r7, #28]
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	b2d2      	uxtb	r2, r2
 8008968:	701a      	strb	r2, [r3, #0]
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800896e:	221a      	movs	r2, #26
 8008970:	68f9      	ldr	r1, [r7, #12]
 8008972:	6938      	ldr	r0, [r7, #16]
 8008974:	f7fe ffca 	bl	800790c <_SendPacket>
  RECORD_END();
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f383 8811 	msr	BASEPRI, r3
}
 800897e:	bf00      	nop
 8008980:	3728      	adds	r7, #40	; 0x28
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20006714 	.word	0x20006714

0800898c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800899a:	4618      	mov	r0, r3
 800899c:	f7fc f96e 	bl	8004c7c <USBH_LL_IncTimer>
}
 80089a0:	bf00      	nop
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fc f9b2 	bl	8004d20 <USBH_LL_Connect>
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fc f9c7 	bl	8004d66 <USBH_LL_Disconnect>
}
 80089d8:	bf00      	nop
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	70fb      	strb	r3, [r7, #3]
 80089ec:	4613      	mov	r3, r2
 80089ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fc f9e7 	bl	8004dca <USBH_LL_NotifyURBChange>
#endif
}
 80089fc:	bf00      	nop
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fc f95c 	bl	8004cd0 <USBH_LL_PortEnabled>
}
 8008a18:	bf00      	nop
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fc f968 	bl	8004d04 <USBH_LL_PortDisabled>
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7f8 ff14 	bl	8001880 <HAL_HCD_Stop>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 f808 	bl	8008a74 <USBH_Get_USB_Status>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
	...

08008a74 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a82:	79fb      	ldrb	r3, [r7, #7]
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d817      	bhi.n	8008ab8 <USBH_Get_USB_Status+0x44>
 8008a88:	a201      	add	r2, pc, #4	; (adr r2, 8008a90 <USBH_Get_USB_Status+0x1c>)
 8008a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8e:	bf00      	nop
 8008a90:	08008aa1 	.word	0x08008aa1
 8008a94:	08008aa7 	.word	0x08008aa7
 8008a98:	08008aad 	.word	0x08008aad
 8008a9c:	08008ab3 	.word	0x08008ab3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa4:	e00b      	b.n	8008abe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008aa6:	2302      	movs	r3, #2
 8008aa8:	73fb      	strb	r3, [r7, #15]
    break;
 8008aaa:	e008      	b.n	8008abe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008aac:	2301      	movs	r3, #1
 8008aae:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab0:	e005      	b.n	8008abe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab6:	e002      	b.n	8008abe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008ab8:	2302      	movs	r3, #2
 8008aba:	73fb      	strb	r3, [r7, #15]
    break;
 8008abc:	bf00      	nop
  }
  return usb_status;
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <__errno>:
 8008acc:	4b01      	ldr	r3, [pc, #4]	; (8008ad4 <__errno+0x8>)
 8008ace:	6818      	ldr	r0, [r3, #0]
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	20000010 	.word	0x20000010

08008ad8 <__libc_init_array>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	4d0d      	ldr	r5, [pc, #52]	; (8008b10 <__libc_init_array+0x38>)
 8008adc:	4c0d      	ldr	r4, [pc, #52]	; (8008b14 <__libc_init_array+0x3c>)
 8008ade:	1b64      	subs	r4, r4, r5
 8008ae0:	10a4      	asrs	r4, r4, #2
 8008ae2:	2600      	movs	r6, #0
 8008ae4:	42a6      	cmp	r6, r4
 8008ae6:	d109      	bne.n	8008afc <__libc_init_array+0x24>
 8008ae8:	4d0b      	ldr	r5, [pc, #44]	; (8008b18 <__libc_init_array+0x40>)
 8008aea:	4c0c      	ldr	r4, [pc, #48]	; (8008b1c <__libc_init_array+0x44>)
 8008aec:	f000 fd3c 	bl	8009568 <_init>
 8008af0:	1b64      	subs	r4, r4, r5
 8008af2:	10a4      	asrs	r4, r4, #2
 8008af4:	2600      	movs	r6, #0
 8008af6:	42a6      	cmp	r6, r4
 8008af8:	d105      	bne.n	8008b06 <__libc_init_array+0x2e>
 8008afa:	bd70      	pop	{r4, r5, r6, pc}
 8008afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b00:	4798      	blx	r3
 8008b02:	3601      	adds	r6, #1
 8008b04:	e7ee      	b.n	8008ae4 <__libc_init_array+0xc>
 8008b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b0a:	4798      	blx	r3
 8008b0c:	3601      	adds	r6, #1
 8008b0e:	e7f2      	b.n	8008af6 <__libc_init_array+0x1e>
 8008b10:	08009704 	.word	0x08009704
 8008b14:	08009704 	.word	0x08009704
 8008b18:	08009704 	.word	0x08009704
 8008b1c:	08009708 	.word	0x08009708

08008b20 <memcmp>:
 8008b20:	b510      	push	{r4, lr}
 8008b22:	3901      	subs	r1, #1
 8008b24:	4402      	add	r2, r0
 8008b26:	4290      	cmp	r0, r2
 8008b28:	d101      	bne.n	8008b2e <memcmp+0xe>
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	e005      	b.n	8008b3a <memcmp+0x1a>
 8008b2e:	7803      	ldrb	r3, [r0, #0]
 8008b30:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008b34:	42a3      	cmp	r3, r4
 8008b36:	d001      	beq.n	8008b3c <memcmp+0x1c>
 8008b38:	1b18      	subs	r0, r3, r4
 8008b3a:	bd10      	pop	{r4, pc}
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	e7f2      	b.n	8008b26 <memcmp+0x6>

08008b40 <memcpy>:
 8008b40:	440a      	add	r2, r1
 8008b42:	4291      	cmp	r1, r2
 8008b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b48:	d100      	bne.n	8008b4c <memcpy+0xc>
 8008b4a:	4770      	bx	lr
 8008b4c:	b510      	push	{r4, lr}
 8008b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b56:	4291      	cmp	r1, r2
 8008b58:	d1f9      	bne.n	8008b4e <memcpy+0xe>
 8008b5a:	bd10      	pop	{r4, pc}

08008b5c <memset>:
 8008b5c:	4402      	add	r2, r0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d100      	bne.n	8008b66 <memset+0xa>
 8008b64:	4770      	bx	lr
 8008b66:	f803 1b01 	strb.w	r1, [r3], #1
 8008b6a:	e7f9      	b.n	8008b60 <memset+0x4>

08008b6c <_free_r>:
 8008b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b6e:	2900      	cmp	r1, #0
 8008b70:	d044      	beq.n	8008bfc <_free_r+0x90>
 8008b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b76:	9001      	str	r0, [sp, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f1a1 0404 	sub.w	r4, r1, #4
 8008b7e:	bfb8      	it	lt
 8008b80:	18e4      	addlt	r4, r4, r3
 8008b82:	f000 fc39 	bl	80093f8 <__malloc_lock>
 8008b86:	4a1e      	ldr	r2, [pc, #120]	; (8008c00 <_free_r+0x94>)
 8008b88:	9801      	ldr	r0, [sp, #4]
 8008b8a:	6813      	ldr	r3, [r2, #0]
 8008b8c:	b933      	cbnz	r3, 8008b9c <_free_r+0x30>
 8008b8e:	6063      	str	r3, [r4, #4]
 8008b90:	6014      	str	r4, [r2, #0]
 8008b92:	b003      	add	sp, #12
 8008b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b98:	f000 bc34 	b.w	8009404 <__malloc_unlock>
 8008b9c:	42a3      	cmp	r3, r4
 8008b9e:	d908      	bls.n	8008bb2 <_free_r+0x46>
 8008ba0:	6825      	ldr	r5, [r4, #0]
 8008ba2:	1961      	adds	r1, r4, r5
 8008ba4:	428b      	cmp	r3, r1
 8008ba6:	bf01      	itttt	eq
 8008ba8:	6819      	ldreq	r1, [r3, #0]
 8008baa:	685b      	ldreq	r3, [r3, #4]
 8008bac:	1949      	addeq	r1, r1, r5
 8008bae:	6021      	streq	r1, [r4, #0]
 8008bb0:	e7ed      	b.n	8008b8e <_free_r+0x22>
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	b10b      	cbz	r3, 8008bbc <_free_r+0x50>
 8008bb8:	42a3      	cmp	r3, r4
 8008bba:	d9fa      	bls.n	8008bb2 <_free_r+0x46>
 8008bbc:	6811      	ldr	r1, [r2, #0]
 8008bbe:	1855      	adds	r5, r2, r1
 8008bc0:	42a5      	cmp	r5, r4
 8008bc2:	d10b      	bne.n	8008bdc <_free_r+0x70>
 8008bc4:	6824      	ldr	r4, [r4, #0]
 8008bc6:	4421      	add	r1, r4
 8008bc8:	1854      	adds	r4, r2, r1
 8008bca:	42a3      	cmp	r3, r4
 8008bcc:	6011      	str	r1, [r2, #0]
 8008bce:	d1e0      	bne.n	8008b92 <_free_r+0x26>
 8008bd0:	681c      	ldr	r4, [r3, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	6053      	str	r3, [r2, #4]
 8008bd6:	4421      	add	r1, r4
 8008bd8:	6011      	str	r1, [r2, #0]
 8008bda:	e7da      	b.n	8008b92 <_free_r+0x26>
 8008bdc:	d902      	bls.n	8008be4 <_free_r+0x78>
 8008bde:	230c      	movs	r3, #12
 8008be0:	6003      	str	r3, [r0, #0]
 8008be2:	e7d6      	b.n	8008b92 <_free_r+0x26>
 8008be4:	6825      	ldr	r5, [r4, #0]
 8008be6:	1961      	adds	r1, r4, r5
 8008be8:	428b      	cmp	r3, r1
 8008bea:	bf04      	itt	eq
 8008bec:	6819      	ldreq	r1, [r3, #0]
 8008bee:	685b      	ldreq	r3, [r3, #4]
 8008bf0:	6063      	str	r3, [r4, #4]
 8008bf2:	bf04      	itt	eq
 8008bf4:	1949      	addeq	r1, r1, r5
 8008bf6:	6021      	streq	r1, [r4, #0]
 8008bf8:	6054      	str	r4, [r2, #4]
 8008bfa:	e7ca      	b.n	8008b92 <_free_r+0x26>
 8008bfc:	b003      	add	sp, #12
 8008bfe:	bd30      	pop	{r4, r5, pc}
 8008c00:	20006afc 	.word	0x20006afc

08008c04 <sbrk_aligned>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	4e0e      	ldr	r6, [pc, #56]	; (8008c40 <sbrk_aligned+0x3c>)
 8008c08:	460c      	mov	r4, r1
 8008c0a:	6831      	ldr	r1, [r6, #0]
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	b911      	cbnz	r1, 8008c16 <sbrk_aligned+0x12>
 8008c10:	f000 f902 	bl	8008e18 <_sbrk_r>
 8008c14:	6030      	str	r0, [r6, #0]
 8008c16:	4621      	mov	r1, r4
 8008c18:	4628      	mov	r0, r5
 8008c1a:	f000 f8fd 	bl	8008e18 <_sbrk_r>
 8008c1e:	1c43      	adds	r3, r0, #1
 8008c20:	d00a      	beq.n	8008c38 <sbrk_aligned+0x34>
 8008c22:	1cc4      	adds	r4, r0, #3
 8008c24:	f024 0403 	bic.w	r4, r4, #3
 8008c28:	42a0      	cmp	r0, r4
 8008c2a:	d007      	beq.n	8008c3c <sbrk_aligned+0x38>
 8008c2c:	1a21      	subs	r1, r4, r0
 8008c2e:	4628      	mov	r0, r5
 8008c30:	f000 f8f2 	bl	8008e18 <_sbrk_r>
 8008c34:	3001      	adds	r0, #1
 8008c36:	d101      	bne.n	8008c3c <sbrk_aligned+0x38>
 8008c38:	f04f 34ff 	mov.w	r4, #4294967295
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	bd70      	pop	{r4, r5, r6, pc}
 8008c40:	20006b00 	.word	0x20006b00

08008c44 <_malloc_r>:
 8008c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c48:	1ccd      	adds	r5, r1, #3
 8008c4a:	f025 0503 	bic.w	r5, r5, #3
 8008c4e:	3508      	adds	r5, #8
 8008c50:	2d0c      	cmp	r5, #12
 8008c52:	bf38      	it	cc
 8008c54:	250c      	movcc	r5, #12
 8008c56:	2d00      	cmp	r5, #0
 8008c58:	4607      	mov	r7, r0
 8008c5a:	db01      	blt.n	8008c60 <_malloc_r+0x1c>
 8008c5c:	42a9      	cmp	r1, r5
 8008c5e:	d905      	bls.n	8008c6c <_malloc_r+0x28>
 8008c60:	230c      	movs	r3, #12
 8008c62:	603b      	str	r3, [r7, #0]
 8008c64:	2600      	movs	r6, #0
 8008c66:	4630      	mov	r0, r6
 8008c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c6c:	4e2e      	ldr	r6, [pc, #184]	; (8008d28 <_malloc_r+0xe4>)
 8008c6e:	f000 fbc3 	bl	80093f8 <__malloc_lock>
 8008c72:	6833      	ldr	r3, [r6, #0]
 8008c74:	461c      	mov	r4, r3
 8008c76:	bb34      	cbnz	r4, 8008cc6 <_malloc_r+0x82>
 8008c78:	4629      	mov	r1, r5
 8008c7a:	4638      	mov	r0, r7
 8008c7c:	f7ff ffc2 	bl	8008c04 <sbrk_aligned>
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	4604      	mov	r4, r0
 8008c84:	d14d      	bne.n	8008d22 <_malloc_r+0xde>
 8008c86:	6834      	ldr	r4, [r6, #0]
 8008c88:	4626      	mov	r6, r4
 8008c8a:	2e00      	cmp	r6, #0
 8008c8c:	d140      	bne.n	8008d10 <_malloc_r+0xcc>
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	4631      	mov	r1, r6
 8008c92:	4638      	mov	r0, r7
 8008c94:	eb04 0803 	add.w	r8, r4, r3
 8008c98:	f000 f8be 	bl	8008e18 <_sbrk_r>
 8008c9c:	4580      	cmp	r8, r0
 8008c9e:	d13a      	bne.n	8008d16 <_malloc_r+0xd2>
 8008ca0:	6821      	ldr	r1, [r4, #0]
 8008ca2:	3503      	adds	r5, #3
 8008ca4:	1a6d      	subs	r5, r5, r1
 8008ca6:	f025 0503 	bic.w	r5, r5, #3
 8008caa:	3508      	adds	r5, #8
 8008cac:	2d0c      	cmp	r5, #12
 8008cae:	bf38      	it	cc
 8008cb0:	250c      	movcc	r5, #12
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	f7ff ffa5 	bl	8008c04 <sbrk_aligned>
 8008cba:	3001      	adds	r0, #1
 8008cbc:	d02b      	beq.n	8008d16 <_malloc_r+0xd2>
 8008cbe:	6823      	ldr	r3, [r4, #0]
 8008cc0:	442b      	add	r3, r5
 8008cc2:	6023      	str	r3, [r4, #0]
 8008cc4:	e00e      	b.n	8008ce4 <_malloc_r+0xa0>
 8008cc6:	6822      	ldr	r2, [r4, #0]
 8008cc8:	1b52      	subs	r2, r2, r5
 8008cca:	d41e      	bmi.n	8008d0a <_malloc_r+0xc6>
 8008ccc:	2a0b      	cmp	r2, #11
 8008cce:	d916      	bls.n	8008cfe <_malloc_r+0xba>
 8008cd0:	1961      	adds	r1, r4, r5
 8008cd2:	42a3      	cmp	r3, r4
 8008cd4:	6025      	str	r5, [r4, #0]
 8008cd6:	bf18      	it	ne
 8008cd8:	6059      	strne	r1, [r3, #4]
 8008cda:	6863      	ldr	r3, [r4, #4]
 8008cdc:	bf08      	it	eq
 8008cde:	6031      	streq	r1, [r6, #0]
 8008ce0:	5162      	str	r2, [r4, r5]
 8008ce2:	604b      	str	r3, [r1, #4]
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	f104 060b 	add.w	r6, r4, #11
 8008cea:	f000 fb8b 	bl	8009404 <__malloc_unlock>
 8008cee:	f026 0607 	bic.w	r6, r6, #7
 8008cf2:	1d23      	adds	r3, r4, #4
 8008cf4:	1af2      	subs	r2, r6, r3
 8008cf6:	d0b6      	beq.n	8008c66 <_malloc_r+0x22>
 8008cf8:	1b9b      	subs	r3, r3, r6
 8008cfa:	50a3      	str	r3, [r4, r2]
 8008cfc:	e7b3      	b.n	8008c66 <_malloc_r+0x22>
 8008cfe:	6862      	ldr	r2, [r4, #4]
 8008d00:	42a3      	cmp	r3, r4
 8008d02:	bf0c      	ite	eq
 8008d04:	6032      	streq	r2, [r6, #0]
 8008d06:	605a      	strne	r2, [r3, #4]
 8008d08:	e7ec      	b.n	8008ce4 <_malloc_r+0xa0>
 8008d0a:	4623      	mov	r3, r4
 8008d0c:	6864      	ldr	r4, [r4, #4]
 8008d0e:	e7b2      	b.n	8008c76 <_malloc_r+0x32>
 8008d10:	4634      	mov	r4, r6
 8008d12:	6876      	ldr	r6, [r6, #4]
 8008d14:	e7b9      	b.n	8008c8a <_malloc_r+0x46>
 8008d16:	230c      	movs	r3, #12
 8008d18:	603b      	str	r3, [r7, #0]
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	f000 fb72 	bl	8009404 <__malloc_unlock>
 8008d20:	e7a1      	b.n	8008c66 <_malloc_r+0x22>
 8008d22:	6025      	str	r5, [r4, #0]
 8008d24:	e7de      	b.n	8008ce4 <_malloc_r+0xa0>
 8008d26:	bf00      	nop
 8008d28:	20006afc 	.word	0x20006afc

08008d2c <_puts_r>:
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	460e      	mov	r6, r1
 8008d30:	4605      	mov	r5, r0
 8008d32:	b118      	cbz	r0, 8008d3c <_puts_r+0x10>
 8008d34:	6983      	ldr	r3, [r0, #24]
 8008d36:	b90b      	cbnz	r3, 8008d3c <_puts_r+0x10>
 8008d38:	f000 fa58 	bl	80091ec <__sinit>
 8008d3c:	69ab      	ldr	r3, [r5, #24]
 8008d3e:	68ac      	ldr	r4, [r5, #8]
 8008d40:	b913      	cbnz	r3, 8008d48 <_puts_r+0x1c>
 8008d42:	4628      	mov	r0, r5
 8008d44:	f000 fa52 	bl	80091ec <__sinit>
 8008d48:	4b2c      	ldr	r3, [pc, #176]	; (8008dfc <_puts_r+0xd0>)
 8008d4a:	429c      	cmp	r4, r3
 8008d4c:	d120      	bne.n	8008d90 <_puts_r+0x64>
 8008d4e:	686c      	ldr	r4, [r5, #4]
 8008d50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d52:	07db      	lsls	r3, r3, #31
 8008d54:	d405      	bmi.n	8008d62 <_puts_r+0x36>
 8008d56:	89a3      	ldrh	r3, [r4, #12]
 8008d58:	0598      	lsls	r0, r3, #22
 8008d5a:	d402      	bmi.n	8008d62 <_puts_r+0x36>
 8008d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d5e:	f000 fae3 	bl	8009328 <__retarget_lock_acquire_recursive>
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	0719      	lsls	r1, r3, #28
 8008d66:	d51d      	bpl.n	8008da4 <_puts_r+0x78>
 8008d68:	6923      	ldr	r3, [r4, #16]
 8008d6a:	b1db      	cbz	r3, 8008da4 <_puts_r+0x78>
 8008d6c:	3e01      	subs	r6, #1
 8008d6e:	68a3      	ldr	r3, [r4, #8]
 8008d70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008d74:	3b01      	subs	r3, #1
 8008d76:	60a3      	str	r3, [r4, #8]
 8008d78:	bb39      	cbnz	r1, 8008dca <_puts_r+0x9e>
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	da38      	bge.n	8008df0 <_puts_r+0xc4>
 8008d7e:	4622      	mov	r2, r4
 8008d80:	210a      	movs	r1, #10
 8008d82:	4628      	mov	r0, r5
 8008d84:	f000 f858 	bl	8008e38 <__swbuf_r>
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d011      	beq.n	8008db0 <_puts_r+0x84>
 8008d8c:	250a      	movs	r5, #10
 8008d8e:	e011      	b.n	8008db4 <_puts_r+0x88>
 8008d90:	4b1b      	ldr	r3, [pc, #108]	; (8008e00 <_puts_r+0xd4>)
 8008d92:	429c      	cmp	r4, r3
 8008d94:	d101      	bne.n	8008d9a <_puts_r+0x6e>
 8008d96:	68ac      	ldr	r4, [r5, #8]
 8008d98:	e7da      	b.n	8008d50 <_puts_r+0x24>
 8008d9a:	4b1a      	ldr	r3, [pc, #104]	; (8008e04 <_puts_r+0xd8>)
 8008d9c:	429c      	cmp	r4, r3
 8008d9e:	bf08      	it	eq
 8008da0:	68ec      	ldreq	r4, [r5, #12]
 8008da2:	e7d5      	b.n	8008d50 <_puts_r+0x24>
 8008da4:	4621      	mov	r1, r4
 8008da6:	4628      	mov	r0, r5
 8008da8:	f000 f898 	bl	8008edc <__swsetup_r>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d0dd      	beq.n	8008d6c <_puts_r+0x40>
 8008db0:	f04f 35ff 	mov.w	r5, #4294967295
 8008db4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008db6:	07da      	lsls	r2, r3, #31
 8008db8:	d405      	bmi.n	8008dc6 <_puts_r+0x9a>
 8008dba:	89a3      	ldrh	r3, [r4, #12]
 8008dbc:	059b      	lsls	r3, r3, #22
 8008dbe:	d402      	bmi.n	8008dc6 <_puts_r+0x9a>
 8008dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dc2:	f000 fab2 	bl	800932a <__retarget_lock_release_recursive>
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	bd70      	pop	{r4, r5, r6, pc}
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	da04      	bge.n	8008dd8 <_puts_r+0xac>
 8008dce:	69a2      	ldr	r2, [r4, #24]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	dc06      	bgt.n	8008de2 <_puts_r+0xb6>
 8008dd4:	290a      	cmp	r1, #10
 8008dd6:	d004      	beq.n	8008de2 <_puts_r+0xb6>
 8008dd8:	6823      	ldr	r3, [r4, #0]
 8008dda:	1c5a      	adds	r2, r3, #1
 8008ddc:	6022      	str	r2, [r4, #0]
 8008dde:	7019      	strb	r1, [r3, #0]
 8008de0:	e7c5      	b.n	8008d6e <_puts_r+0x42>
 8008de2:	4622      	mov	r2, r4
 8008de4:	4628      	mov	r0, r5
 8008de6:	f000 f827 	bl	8008e38 <__swbuf_r>
 8008dea:	3001      	adds	r0, #1
 8008dec:	d1bf      	bne.n	8008d6e <_puts_r+0x42>
 8008dee:	e7df      	b.n	8008db0 <_puts_r+0x84>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	250a      	movs	r5, #10
 8008df4:	1c5a      	adds	r2, r3, #1
 8008df6:	6022      	str	r2, [r4, #0]
 8008df8:	701d      	strb	r5, [r3, #0]
 8008dfa:	e7db      	b.n	8008db4 <_puts_r+0x88>
 8008dfc:	080096bc 	.word	0x080096bc
 8008e00:	080096dc 	.word	0x080096dc
 8008e04:	0800969c 	.word	0x0800969c

08008e08 <puts>:
 8008e08:	4b02      	ldr	r3, [pc, #8]	; (8008e14 <puts+0xc>)
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	6818      	ldr	r0, [r3, #0]
 8008e0e:	f7ff bf8d 	b.w	8008d2c <_puts_r>
 8008e12:	bf00      	nop
 8008e14:	20000010 	.word	0x20000010

08008e18 <_sbrk_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4d06      	ldr	r5, [pc, #24]	; (8008e34 <_sbrk_r+0x1c>)
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	4604      	mov	r4, r0
 8008e20:	4608      	mov	r0, r1
 8008e22:	602b      	str	r3, [r5, #0]
 8008e24:	f7f8 f870 	bl	8000f08 <_sbrk>
 8008e28:	1c43      	adds	r3, r0, #1
 8008e2a:	d102      	bne.n	8008e32 <_sbrk_r+0x1a>
 8008e2c:	682b      	ldr	r3, [r5, #0]
 8008e2e:	b103      	cbz	r3, 8008e32 <_sbrk_r+0x1a>
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	bd38      	pop	{r3, r4, r5, pc}
 8008e34:	20006b08 	.word	0x20006b08

08008e38 <__swbuf_r>:
 8008e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3a:	460e      	mov	r6, r1
 8008e3c:	4614      	mov	r4, r2
 8008e3e:	4605      	mov	r5, r0
 8008e40:	b118      	cbz	r0, 8008e4a <__swbuf_r+0x12>
 8008e42:	6983      	ldr	r3, [r0, #24]
 8008e44:	b90b      	cbnz	r3, 8008e4a <__swbuf_r+0x12>
 8008e46:	f000 f9d1 	bl	80091ec <__sinit>
 8008e4a:	4b21      	ldr	r3, [pc, #132]	; (8008ed0 <__swbuf_r+0x98>)
 8008e4c:	429c      	cmp	r4, r3
 8008e4e:	d12b      	bne.n	8008ea8 <__swbuf_r+0x70>
 8008e50:	686c      	ldr	r4, [r5, #4]
 8008e52:	69a3      	ldr	r3, [r4, #24]
 8008e54:	60a3      	str	r3, [r4, #8]
 8008e56:	89a3      	ldrh	r3, [r4, #12]
 8008e58:	071a      	lsls	r2, r3, #28
 8008e5a:	d52f      	bpl.n	8008ebc <__swbuf_r+0x84>
 8008e5c:	6923      	ldr	r3, [r4, #16]
 8008e5e:	b36b      	cbz	r3, 8008ebc <__swbuf_r+0x84>
 8008e60:	6923      	ldr	r3, [r4, #16]
 8008e62:	6820      	ldr	r0, [r4, #0]
 8008e64:	1ac0      	subs	r0, r0, r3
 8008e66:	6963      	ldr	r3, [r4, #20]
 8008e68:	b2f6      	uxtb	r6, r6
 8008e6a:	4283      	cmp	r3, r0
 8008e6c:	4637      	mov	r7, r6
 8008e6e:	dc04      	bgt.n	8008e7a <__swbuf_r+0x42>
 8008e70:	4621      	mov	r1, r4
 8008e72:	4628      	mov	r0, r5
 8008e74:	f000 f926 	bl	80090c4 <_fflush_r>
 8008e78:	bb30      	cbnz	r0, 8008ec8 <__swbuf_r+0x90>
 8008e7a:	68a3      	ldr	r3, [r4, #8]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	60a3      	str	r3, [r4, #8]
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	1c5a      	adds	r2, r3, #1
 8008e84:	6022      	str	r2, [r4, #0]
 8008e86:	701e      	strb	r6, [r3, #0]
 8008e88:	6963      	ldr	r3, [r4, #20]
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	4283      	cmp	r3, r0
 8008e8e:	d004      	beq.n	8008e9a <__swbuf_r+0x62>
 8008e90:	89a3      	ldrh	r3, [r4, #12]
 8008e92:	07db      	lsls	r3, r3, #31
 8008e94:	d506      	bpl.n	8008ea4 <__swbuf_r+0x6c>
 8008e96:	2e0a      	cmp	r6, #10
 8008e98:	d104      	bne.n	8008ea4 <__swbuf_r+0x6c>
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f000 f911 	bl	80090c4 <_fflush_r>
 8008ea2:	b988      	cbnz	r0, 8008ec8 <__swbuf_r+0x90>
 8008ea4:	4638      	mov	r0, r7
 8008ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ea8:	4b0a      	ldr	r3, [pc, #40]	; (8008ed4 <__swbuf_r+0x9c>)
 8008eaa:	429c      	cmp	r4, r3
 8008eac:	d101      	bne.n	8008eb2 <__swbuf_r+0x7a>
 8008eae:	68ac      	ldr	r4, [r5, #8]
 8008eb0:	e7cf      	b.n	8008e52 <__swbuf_r+0x1a>
 8008eb2:	4b09      	ldr	r3, [pc, #36]	; (8008ed8 <__swbuf_r+0xa0>)
 8008eb4:	429c      	cmp	r4, r3
 8008eb6:	bf08      	it	eq
 8008eb8:	68ec      	ldreq	r4, [r5, #12]
 8008eba:	e7ca      	b.n	8008e52 <__swbuf_r+0x1a>
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f000 f80c 	bl	8008edc <__swsetup_r>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d0cb      	beq.n	8008e60 <__swbuf_r+0x28>
 8008ec8:	f04f 37ff 	mov.w	r7, #4294967295
 8008ecc:	e7ea      	b.n	8008ea4 <__swbuf_r+0x6c>
 8008ece:	bf00      	nop
 8008ed0:	080096bc 	.word	0x080096bc
 8008ed4:	080096dc 	.word	0x080096dc
 8008ed8:	0800969c 	.word	0x0800969c

08008edc <__swsetup_r>:
 8008edc:	4b32      	ldr	r3, [pc, #200]	; (8008fa8 <__swsetup_r+0xcc>)
 8008ede:	b570      	push	{r4, r5, r6, lr}
 8008ee0:	681d      	ldr	r5, [r3, #0]
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	b125      	cbz	r5, 8008ef2 <__swsetup_r+0x16>
 8008ee8:	69ab      	ldr	r3, [r5, #24]
 8008eea:	b913      	cbnz	r3, 8008ef2 <__swsetup_r+0x16>
 8008eec:	4628      	mov	r0, r5
 8008eee:	f000 f97d 	bl	80091ec <__sinit>
 8008ef2:	4b2e      	ldr	r3, [pc, #184]	; (8008fac <__swsetup_r+0xd0>)
 8008ef4:	429c      	cmp	r4, r3
 8008ef6:	d10f      	bne.n	8008f18 <__swsetup_r+0x3c>
 8008ef8:	686c      	ldr	r4, [r5, #4]
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f00:	0719      	lsls	r1, r3, #28
 8008f02:	d42c      	bmi.n	8008f5e <__swsetup_r+0x82>
 8008f04:	06dd      	lsls	r5, r3, #27
 8008f06:	d411      	bmi.n	8008f2c <__swsetup_r+0x50>
 8008f08:	2309      	movs	r3, #9
 8008f0a:	6033      	str	r3, [r6, #0]
 8008f0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f10:	81a3      	strh	r3, [r4, #12]
 8008f12:	f04f 30ff 	mov.w	r0, #4294967295
 8008f16:	e03e      	b.n	8008f96 <__swsetup_r+0xba>
 8008f18:	4b25      	ldr	r3, [pc, #148]	; (8008fb0 <__swsetup_r+0xd4>)
 8008f1a:	429c      	cmp	r4, r3
 8008f1c:	d101      	bne.n	8008f22 <__swsetup_r+0x46>
 8008f1e:	68ac      	ldr	r4, [r5, #8]
 8008f20:	e7eb      	b.n	8008efa <__swsetup_r+0x1e>
 8008f22:	4b24      	ldr	r3, [pc, #144]	; (8008fb4 <__swsetup_r+0xd8>)
 8008f24:	429c      	cmp	r4, r3
 8008f26:	bf08      	it	eq
 8008f28:	68ec      	ldreq	r4, [r5, #12]
 8008f2a:	e7e6      	b.n	8008efa <__swsetup_r+0x1e>
 8008f2c:	0758      	lsls	r0, r3, #29
 8008f2e:	d512      	bpl.n	8008f56 <__swsetup_r+0x7a>
 8008f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f32:	b141      	cbz	r1, 8008f46 <__swsetup_r+0x6a>
 8008f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f38:	4299      	cmp	r1, r3
 8008f3a:	d002      	beq.n	8008f42 <__swsetup_r+0x66>
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f7ff fe15 	bl	8008b6c <_free_r>
 8008f42:	2300      	movs	r3, #0
 8008f44:	6363      	str	r3, [r4, #52]	; 0x34
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6063      	str	r3, [r4, #4]
 8008f52:	6923      	ldr	r3, [r4, #16]
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	f043 0308 	orr.w	r3, r3, #8
 8008f5c:	81a3      	strh	r3, [r4, #12]
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	b94b      	cbnz	r3, 8008f76 <__swsetup_r+0x9a>
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f6c:	d003      	beq.n	8008f76 <__swsetup_r+0x9a>
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4630      	mov	r0, r6
 8008f72:	f000 fa01 	bl	8009378 <__smakebuf_r>
 8008f76:	89a0      	ldrh	r0, [r4, #12]
 8008f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f7c:	f010 0301 	ands.w	r3, r0, #1
 8008f80:	d00a      	beq.n	8008f98 <__swsetup_r+0xbc>
 8008f82:	2300      	movs	r3, #0
 8008f84:	60a3      	str	r3, [r4, #8]
 8008f86:	6963      	ldr	r3, [r4, #20]
 8008f88:	425b      	negs	r3, r3
 8008f8a:	61a3      	str	r3, [r4, #24]
 8008f8c:	6923      	ldr	r3, [r4, #16]
 8008f8e:	b943      	cbnz	r3, 8008fa2 <__swsetup_r+0xc6>
 8008f90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f94:	d1ba      	bne.n	8008f0c <__swsetup_r+0x30>
 8008f96:	bd70      	pop	{r4, r5, r6, pc}
 8008f98:	0781      	lsls	r1, r0, #30
 8008f9a:	bf58      	it	pl
 8008f9c:	6963      	ldrpl	r3, [r4, #20]
 8008f9e:	60a3      	str	r3, [r4, #8]
 8008fa0:	e7f4      	b.n	8008f8c <__swsetup_r+0xb0>
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	e7f7      	b.n	8008f96 <__swsetup_r+0xba>
 8008fa6:	bf00      	nop
 8008fa8:	20000010 	.word	0x20000010
 8008fac:	080096bc 	.word	0x080096bc
 8008fb0:	080096dc 	.word	0x080096dc
 8008fb4:	0800969c 	.word	0x0800969c

08008fb8 <__sflush_r>:
 8008fb8:	898a      	ldrh	r2, [r1, #12]
 8008fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fbe:	4605      	mov	r5, r0
 8008fc0:	0710      	lsls	r0, r2, #28
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	d458      	bmi.n	8009078 <__sflush_r+0xc0>
 8008fc6:	684b      	ldr	r3, [r1, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	dc05      	bgt.n	8008fd8 <__sflush_r+0x20>
 8008fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	dc02      	bgt.n	8008fd8 <__sflush_r+0x20>
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fda:	2e00      	cmp	r6, #0
 8008fdc:	d0f9      	beq.n	8008fd2 <__sflush_r+0x1a>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fe4:	682f      	ldr	r7, [r5, #0]
 8008fe6:	602b      	str	r3, [r5, #0]
 8008fe8:	d032      	beq.n	8009050 <__sflush_r+0x98>
 8008fea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	075a      	lsls	r2, r3, #29
 8008ff0:	d505      	bpl.n	8008ffe <__sflush_r+0x46>
 8008ff2:	6863      	ldr	r3, [r4, #4]
 8008ff4:	1ac0      	subs	r0, r0, r3
 8008ff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ff8:	b10b      	cbz	r3, 8008ffe <__sflush_r+0x46>
 8008ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ffc:	1ac0      	subs	r0, r0, r3
 8008ffe:	2300      	movs	r3, #0
 8009000:	4602      	mov	r2, r0
 8009002:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009004:	6a21      	ldr	r1, [r4, #32]
 8009006:	4628      	mov	r0, r5
 8009008:	47b0      	blx	r6
 800900a:	1c43      	adds	r3, r0, #1
 800900c:	89a3      	ldrh	r3, [r4, #12]
 800900e:	d106      	bne.n	800901e <__sflush_r+0x66>
 8009010:	6829      	ldr	r1, [r5, #0]
 8009012:	291d      	cmp	r1, #29
 8009014:	d82c      	bhi.n	8009070 <__sflush_r+0xb8>
 8009016:	4a2a      	ldr	r2, [pc, #168]	; (80090c0 <__sflush_r+0x108>)
 8009018:	40ca      	lsrs	r2, r1
 800901a:	07d6      	lsls	r6, r2, #31
 800901c:	d528      	bpl.n	8009070 <__sflush_r+0xb8>
 800901e:	2200      	movs	r2, #0
 8009020:	6062      	str	r2, [r4, #4]
 8009022:	04d9      	lsls	r1, r3, #19
 8009024:	6922      	ldr	r2, [r4, #16]
 8009026:	6022      	str	r2, [r4, #0]
 8009028:	d504      	bpl.n	8009034 <__sflush_r+0x7c>
 800902a:	1c42      	adds	r2, r0, #1
 800902c:	d101      	bne.n	8009032 <__sflush_r+0x7a>
 800902e:	682b      	ldr	r3, [r5, #0]
 8009030:	b903      	cbnz	r3, 8009034 <__sflush_r+0x7c>
 8009032:	6560      	str	r0, [r4, #84]	; 0x54
 8009034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009036:	602f      	str	r7, [r5, #0]
 8009038:	2900      	cmp	r1, #0
 800903a:	d0ca      	beq.n	8008fd2 <__sflush_r+0x1a>
 800903c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009040:	4299      	cmp	r1, r3
 8009042:	d002      	beq.n	800904a <__sflush_r+0x92>
 8009044:	4628      	mov	r0, r5
 8009046:	f7ff fd91 	bl	8008b6c <_free_r>
 800904a:	2000      	movs	r0, #0
 800904c:	6360      	str	r0, [r4, #52]	; 0x34
 800904e:	e7c1      	b.n	8008fd4 <__sflush_r+0x1c>
 8009050:	6a21      	ldr	r1, [r4, #32]
 8009052:	2301      	movs	r3, #1
 8009054:	4628      	mov	r0, r5
 8009056:	47b0      	blx	r6
 8009058:	1c41      	adds	r1, r0, #1
 800905a:	d1c7      	bne.n	8008fec <__sflush_r+0x34>
 800905c:	682b      	ldr	r3, [r5, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d0c4      	beq.n	8008fec <__sflush_r+0x34>
 8009062:	2b1d      	cmp	r3, #29
 8009064:	d001      	beq.n	800906a <__sflush_r+0xb2>
 8009066:	2b16      	cmp	r3, #22
 8009068:	d101      	bne.n	800906e <__sflush_r+0xb6>
 800906a:	602f      	str	r7, [r5, #0]
 800906c:	e7b1      	b.n	8008fd2 <__sflush_r+0x1a>
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009074:	81a3      	strh	r3, [r4, #12]
 8009076:	e7ad      	b.n	8008fd4 <__sflush_r+0x1c>
 8009078:	690f      	ldr	r7, [r1, #16]
 800907a:	2f00      	cmp	r7, #0
 800907c:	d0a9      	beq.n	8008fd2 <__sflush_r+0x1a>
 800907e:	0793      	lsls	r3, r2, #30
 8009080:	680e      	ldr	r6, [r1, #0]
 8009082:	bf08      	it	eq
 8009084:	694b      	ldreq	r3, [r1, #20]
 8009086:	600f      	str	r7, [r1, #0]
 8009088:	bf18      	it	ne
 800908a:	2300      	movne	r3, #0
 800908c:	eba6 0807 	sub.w	r8, r6, r7
 8009090:	608b      	str	r3, [r1, #8]
 8009092:	f1b8 0f00 	cmp.w	r8, #0
 8009096:	dd9c      	ble.n	8008fd2 <__sflush_r+0x1a>
 8009098:	6a21      	ldr	r1, [r4, #32]
 800909a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800909c:	4643      	mov	r3, r8
 800909e:	463a      	mov	r2, r7
 80090a0:	4628      	mov	r0, r5
 80090a2:	47b0      	blx	r6
 80090a4:	2800      	cmp	r0, #0
 80090a6:	dc06      	bgt.n	80090b6 <__sflush_r+0xfe>
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ae:	81a3      	strh	r3, [r4, #12]
 80090b0:	f04f 30ff 	mov.w	r0, #4294967295
 80090b4:	e78e      	b.n	8008fd4 <__sflush_r+0x1c>
 80090b6:	4407      	add	r7, r0
 80090b8:	eba8 0800 	sub.w	r8, r8, r0
 80090bc:	e7e9      	b.n	8009092 <__sflush_r+0xda>
 80090be:	bf00      	nop
 80090c0:	20400001 	.word	0x20400001

080090c4 <_fflush_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	690b      	ldr	r3, [r1, #16]
 80090c8:	4605      	mov	r5, r0
 80090ca:	460c      	mov	r4, r1
 80090cc:	b913      	cbnz	r3, 80090d4 <_fflush_r+0x10>
 80090ce:	2500      	movs	r5, #0
 80090d0:	4628      	mov	r0, r5
 80090d2:	bd38      	pop	{r3, r4, r5, pc}
 80090d4:	b118      	cbz	r0, 80090de <_fflush_r+0x1a>
 80090d6:	6983      	ldr	r3, [r0, #24]
 80090d8:	b90b      	cbnz	r3, 80090de <_fflush_r+0x1a>
 80090da:	f000 f887 	bl	80091ec <__sinit>
 80090de:	4b14      	ldr	r3, [pc, #80]	; (8009130 <_fflush_r+0x6c>)
 80090e0:	429c      	cmp	r4, r3
 80090e2:	d11b      	bne.n	800911c <_fflush_r+0x58>
 80090e4:	686c      	ldr	r4, [r5, #4]
 80090e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0ef      	beq.n	80090ce <_fflush_r+0xa>
 80090ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090f0:	07d0      	lsls	r0, r2, #31
 80090f2:	d404      	bmi.n	80090fe <_fflush_r+0x3a>
 80090f4:	0599      	lsls	r1, r3, #22
 80090f6:	d402      	bmi.n	80090fe <_fflush_r+0x3a>
 80090f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090fa:	f000 f915 	bl	8009328 <__retarget_lock_acquire_recursive>
 80090fe:	4628      	mov	r0, r5
 8009100:	4621      	mov	r1, r4
 8009102:	f7ff ff59 	bl	8008fb8 <__sflush_r>
 8009106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009108:	07da      	lsls	r2, r3, #31
 800910a:	4605      	mov	r5, r0
 800910c:	d4e0      	bmi.n	80090d0 <_fflush_r+0xc>
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	059b      	lsls	r3, r3, #22
 8009112:	d4dd      	bmi.n	80090d0 <_fflush_r+0xc>
 8009114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009116:	f000 f908 	bl	800932a <__retarget_lock_release_recursive>
 800911a:	e7d9      	b.n	80090d0 <_fflush_r+0xc>
 800911c:	4b05      	ldr	r3, [pc, #20]	; (8009134 <_fflush_r+0x70>)
 800911e:	429c      	cmp	r4, r3
 8009120:	d101      	bne.n	8009126 <_fflush_r+0x62>
 8009122:	68ac      	ldr	r4, [r5, #8]
 8009124:	e7df      	b.n	80090e6 <_fflush_r+0x22>
 8009126:	4b04      	ldr	r3, [pc, #16]	; (8009138 <_fflush_r+0x74>)
 8009128:	429c      	cmp	r4, r3
 800912a:	bf08      	it	eq
 800912c:	68ec      	ldreq	r4, [r5, #12]
 800912e:	e7da      	b.n	80090e6 <_fflush_r+0x22>
 8009130:	080096bc 	.word	0x080096bc
 8009134:	080096dc 	.word	0x080096dc
 8009138:	0800969c 	.word	0x0800969c

0800913c <std>:
 800913c:	2300      	movs	r3, #0
 800913e:	b510      	push	{r4, lr}
 8009140:	4604      	mov	r4, r0
 8009142:	e9c0 3300 	strd	r3, r3, [r0]
 8009146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800914a:	6083      	str	r3, [r0, #8]
 800914c:	8181      	strh	r1, [r0, #12]
 800914e:	6643      	str	r3, [r0, #100]	; 0x64
 8009150:	81c2      	strh	r2, [r0, #14]
 8009152:	6183      	str	r3, [r0, #24]
 8009154:	4619      	mov	r1, r3
 8009156:	2208      	movs	r2, #8
 8009158:	305c      	adds	r0, #92	; 0x5c
 800915a:	f7ff fcff 	bl	8008b5c <memset>
 800915e:	4b05      	ldr	r3, [pc, #20]	; (8009174 <std+0x38>)
 8009160:	6263      	str	r3, [r4, #36]	; 0x24
 8009162:	4b05      	ldr	r3, [pc, #20]	; (8009178 <std+0x3c>)
 8009164:	62a3      	str	r3, [r4, #40]	; 0x28
 8009166:	4b05      	ldr	r3, [pc, #20]	; (800917c <std+0x40>)
 8009168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800916a:	4b05      	ldr	r3, [pc, #20]	; (8009180 <std+0x44>)
 800916c:	6224      	str	r4, [r4, #32]
 800916e:	6323      	str	r3, [r4, #48]	; 0x30
 8009170:	bd10      	pop	{r4, pc}
 8009172:	bf00      	nop
 8009174:	08009411 	.word	0x08009411
 8009178:	08009433 	.word	0x08009433
 800917c:	0800946b 	.word	0x0800946b
 8009180:	0800948f 	.word	0x0800948f

08009184 <_cleanup_r>:
 8009184:	4901      	ldr	r1, [pc, #4]	; (800918c <_cleanup_r+0x8>)
 8009186:	f000 b8af 	b.w	80092e8 <_fwalk_reent>
 800918a:	bf00      	nop
 800918c:	080090c5 	.word	0x080090c5

08009190 <__sfmoreglue>:
 8009190:	b570      	push	{r4, r5, r6, lr}
 8009192:	2268      	movs	r2, #104	; 0x68
 8009194:	1e4d      	subs	r5, r1, #1
 8009196:	4355      	muls	r5, r2
 8009198:	460e      	mov	r6, r1
 800919a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800919e:	f7ff fd51 	bl	8008c44 <_malloc_r>
 80091a2:	4604      	mov	r4, r0
 80091a4:	b140      	cbz	r0, 80091b8 <__sfmoreglue+0x28>
 80091a6:	2100      	movs	r1, #0
 80091a8:	e9c0 1600 	strd	r1, r6, [r0]
 80091ac:	300c      	adds	r0, #12
 80091ae:	60a0      	str	r0, [r4, #8]
 80091b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091b4:	f7ff fcd2 	bl	8008b5c <memset>
 80091b8:	4620      	mov	r0, r4
 80091ba:	bd70      	pop	{r4, r5, r6, pc}

080091bc <__sfp_lock_acquire>:
 80091bc:	4801      	ldr	r0, [pc, #4]	; (80091c4 <__sfp_lock_acquire+0x8>)
 80091be:	f000 b8b3 	b.w	8009328 <__retarget_lock_acquire_recursive>
 80091c2:	bf00      	nop
 80091c4:	20006b05 	.word	0x20006b05

080091c8 <__sfp_lock_release>:
 80091c8:	4801      	ldr	r0, [pc, #4]	; (80091d0 <__sfp_lock_release+0x8>)
 80091ca:	f000 b8ae 	b.w	800932a <__retarget_lock_release_recursive>
 80091ce:	bf00      	nop
 80091d0:	20006b05 	.word	0x20006b05

080091d4 <__sinit_lock_acquire>:
 80091d4:	4801      	ldr	r0, [pc, #4]	; (80091dc <__sinit_lock_acquire+0x8>)
 80091d6:	f000 b8a7 	b.w	8009328 <__retarget_lock_acquire_recursive>
 80091da:	bf00      	nop
 80091dc:	20006b06 	.word	0x20006b06

080091e0 <__sinit_lock_release>:
 80091e0:	4801      	ldr	r0, [pc, #4]	; (80091e8 <__sinit_lock_release+0x8>)
 80091e2:	f000 b8a2 	b.w	800932a <__retarget_lock_release_recursive>
 80091e6:	bf00      	nop
 80091e8:	20006b06 	.word	0x20006b06

080091ec <__sinit>:
 80091ec:	b510      	push	{r4, lr}
 80091ee:	4604      	mov	r4, r0
 80091f0:	f7ff fff0 	bl	80091d4 <__sinit_lock_acquire>
 80091f4:	69a3      	ldr	r3, [r4, #24]
 80091f6:	b11b      	cbz	r3, 8009200 <__sinit+0x14>
 80091f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091fc:	f7ff bff0 	b.w	80091e0 <__sinit_lock_release>
 8009200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009204:	6523      	str	r3, [r4, #80]	; 0x50
 8009206:	4b13      	ldr	r3, [pc, #76]	; (8009254 <__sinit+0x68>)
 8009208:	4a13      	ldr	r2, [pc, #76]	; (8009258 <__sinit+0x6c>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	62a2      	str	r2, [r4, #40]	; 0x28
 800920e:	42a3      	cmp	r3, r4
 8009210:	bf04      	itt	eq
 8009212:	2301      	moveq	r3, #1
 8009214:	61a3      	streq	r3, [r4, #24]
 8009216:	4620      	mov	r0, r4
 8009218:	f000 f820 	bl	800925c <__sfp>
 800921c:	6060      	str	r0, [r4, #4]
 800921e:	4620      	mov	r0, r4
 8009220:	f000 f81c 	bl	800925c <__sfp>
 8009224:	60a0      	str	r0, [r4, #8]
 8009226:	4620      	mov	r0, r4
 8009228:	f000 f818 	bl	800925c <__sfp>
 800922c:	2200      	movs	r2, #0
 800922e:	60e0      	str	r0, [r4, #12]
 8009230:	2104      	movs	r1, #4
 8009232:	6860      	ldr	r0, [r4, #4]
 8009234:	f7ff ff82 	bl	800913c <std>
 8009238:	68a0      	ldr	r0, [r4, #8]
 800923a:	2201      	movs	r2, #1
 800923c:	2109      	movs	r1, #9
 800923e:	f7ff ff7d 	bl	800913c <std>
 8009242:	68e0      	ldr	r0, [r4, #12]
 8009244:	2202      	movs	r2, #2
 8009246:	2112      	movs	r1, #18
 8009248:	f7ff ff78 	bl	800913c <std>
 800924c:	2301      	movs	r3, #1
 800924e:	61a3      	str	r3, [r4, #24]
 8009250:	e7d2      	b.n	80091f8 <__sinit+0xc>
 8009252:	bf00      	nop
 8009254:	08009698 	.word	0x08009698
 8009258:	08009185 	.word	0x08009185

0800925c <__sfp>:
 800925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925e:	4607      	mov	r7, r0
 8009260:	f7ff ffac 	bl	80091bc <__sfp_lock_acquire>
 8009264:	4b1e      	ldr	r3, [pc, #120]	; (80092e0 <__sfp+0x84>)
 8009266:	681e      	ldr	r6, [r3, #0]
 8009268:	69b3      	ldr	r3, [r6, #24]
 800926a:	b913      	cbnz	r3, 8009272 <__sfp+0x16>
 800926c:	4630      	mov	r0, r6
 800926e:	f7ff ffbd 	bl	80091ec <__sinit>
 8009272:	3648      	adds	r6, #72	; 0x48
 8009274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009278:	3b01      	subs	r3, #1
 800927a:	d503      	bpl.n	8009284 <__sfp+0x28>
 800927c:	6833      	ldr	r3, [r6, #0]
 800927e:	b30b      	cbz	r3, 80092c4 <__sfp+0x68>
 8009280:	6836      	ldr	r6, [r6, #0]
 8009282:	e7f7      	b.n	8009274 <__sfp+0x18>
 8009284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009288:	b9d5      	cbnz	r5, 80092c0 <__sfp+0x64>
 800928a:	4b16      	ldr	r3, [pc, #88]	; (80092e4 <__sfp+0x88>)
 800928c:	60e3      	str	r3, [r4, #12]
 800928e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009292:	6665      	str	r5, [r4, #100]	; 0x64
 8009294:	f000 f847 	bl	8009326 <__retarget_lock_init_recursive>
 8009298:	f7ff ff96 	bl	80091c8 <__sfp_lock_release>
 800929c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092a4:	6025      	str	r5, [r4, #0]
 80092a6:	61a5      	str	r5, [r4, #24]
 80092a8:	2208      	movs	r2, #8
 80092aa:	4629      	mov	r1, r5
 80092ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092b0:	f7ff fc54 	bl	8008b5c <memset>
 80092b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092bc:	4620      	mov	r0, r4
 80092be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092c0:	3468      	adds	r4, #104	; 0x68
 80092c2:	e7d9      	b.n	8009278 <__sfp+0x1c>
 80092c4:	2104      	movs	r1, #4
 80092c6:	4638      	mov	r0, r7
 80092c8:	f7ff ff62 	bl	8009190 <__sfmoreglue>
 80092cc:	4604      	mov	r4, r0
 80092ce:	6030      	str	r0, [r6, #0]
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d1d5      	bne.n	8009280 <__sfp+0x24>
 80092d4:	f7ff ff78 	bl	80091c8 <__sfp_lock_release>
 80092d8:	230c      	movs	r3, #12
 80092da:	603b      	str	r3, [r7, #0]
 80092dc:	e7ee      	b.n	80092bc <__sfp+0x60>
 80092de:	bf00      	nop
 80092e0:	08009698 	.word	0x08009698
 80092e4:	ffff0001 	.word	0xffff0001

080092e8 <_fwalk_reent>:
 80092e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092ec:	4606      	mov	r6, r0
 80092ee:	4688      	mov	r8, r1
 80092f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092f4:	2700      	movs	r7, #0
 80092f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092fa:	f1b9 0901 	subs.w	r9, r9, #1
 80092fe:	d505      	bpl.n	800930c <_fwalk_reent+0x24>
 8009300:	6824      	ldr	r4, [r4, #0]
 8009302:	2c00      	cmp	r4, #0
 8009304:	d1f7      	bne.n	80092f6 <_fwalk_reent+0xe>
 8009306:	4638      	mov	r0, r7
 8009308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800930c:	89ab      	ldrh	r3, [r5, #12]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d907      	bls.n	8009322 <_fwalk_reent+0x3a>
 8009312:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009316:	3301      	adds	r3, #1
 8009318:	d003      	beq.n	8009322 <_fwalk_reent+0x3a>
 800931a:	4629      	mov	r1, r5
 800931c:	4630      	mov	r0, r6
 800931e:	47c0      	blx	r8
 8009320:	4307      	orrs	r7, r0
 8009322:	3568      	adds	r5, #104	; 0x68
 8009324:	e7e9      	b.n	80092fa <_fwalk_reent+0x12>

08009326 <__retarget_lock_init_recursive>:
 8009326:	4770      	bx	lr

08009328 <__retarget_lock_acquire_recursive>:
 8009328:	4770      	bx	lr

0800932a <__retarget_lock_release_recursive>:
 800932a:	4770      	bx	lr

0800932c <__swhatbuf_r>:
 800932c:	b570      	push	{r4, r5, r6, lr}
 800932e:	460e      	mov	r6, r1
 8009330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009334:	2900      	cmp	r1, #0
 8009336:	b096      	sub	sp, #88	; 0x58
 8009338:	4614      	mov	r4, r2
 800933a:	461d      	mov	r5, r3
 800933c:	da08      	bge.n	8009350 <__swhatbuf_r+0x24>
 800933e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	602a      	str	r2, [r5, #0]
 8009346:	061a      	lsls	r2, r3, #24
 8009348:	d410      	bmi.n	800936c <__swhatbuf_r+0x40>
 800934a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800934e:	e00e      	b.n	800936e <__swhatbuf_r+0x42>
 8009350:	466a      	mov	r2, sp
 8009352:	f000 f8c3 	bl	80094dc <_fstat_r>
 8009356:	2800      	cmp	r0, #0
 8009358:	dbf1      	blt.n	800933e <__swhatbuf_r+0x12>
 800935a:	9a01      	ldr	r2, [sp, #4]
 800935c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009360:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009364:	425a      	negs	r2, r3
 8009366:	415a      	adcs	r2, r3
 8009368:	602a      	str	r2, [r5, #0]
 800936a:	e7ee      	b.n	800934a <__swhatbuf_r+0x1e>
 800936c:	2340      	movs	r3, #64	; 0x40
 800936e:	2000      	movs	r0, #0
 8009370:	6023      	str	r3, [r4, #0]
 8009372:	b016      	add	sp, #88	; 0x58
 8009374:	bd70      	pop	{r4, r5, r6, pc}
	...

08009378 <__smakebuf_r>:
 8009378:	898b      	ldrh	r3, [r1, #12]
 800937a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800937c:	079d      	lsls	r5, r3, #30
 800937e:	4606      	mov	r6, r0
 8009380:	460c      	mov	r4, r1
 8009382:	d507      	bpl.n	8009394 <__smakebuf_r+0x1c>
 8009384:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009388:	6023      	str	r3, [r4, #0]
 800938a:	6123      	str	r3, [r4, #16]
 800938c:	2301      	movs	r3, #1
 800938e:	6163      	str	r3, [r4, #20]
 8009390:	b002      	add	sp, #8
 8009392:	bd70      	pop	{r4, r5, r6, pc}
 8009394:	ab01      	add	r3, sp, #4
 8009396:	466a      	mov	r2, sp
 8009398:	f7ff ffc8 	bl	800932c <__swhatbuf_r>
 800939c:	9900      	ldr	r1, [sp, #0]
 800939e:	4605      	mov	r5, r0
 80093a0:	4630      	mov	r0, r6
 80093a2:	f7ff fc4f 	bl	8008c44 <_malloc_r>
 80093a6:	b948      	cbnz	r0, 80093bc <__smakebuf_r+0x44>
 80093a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ac:	059a      	lsls	r2, r3, #22
 80093ae:	d4ef      	bmi.n	8009390 <__smakebuf_r+0x18>
 80093b0:	f023 0303 	bic.w	r3, r3, #3
 80093b4:	f043 0302 	orr.w	r3, r3, #2
 80093b8:	81a3      	strh	r3, [r4, #12]
 80093ba:	e7e3      	b.n	8009384 <__smakebuf_r+0xc>
 80093bc:	4b0d      	ldr	r3, [pc, #52]	; (80093f4 <__smakebuf_r+0x7c>)
 80093be:	62b3      	str	r3, [r6, #40]	; 0x28
 80093c0:	89a3      	ldrh	r3, [r4, #12]
 80093c2:	6020      	str	r0, [r4, #0]
 80093c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093c8:	81a3      	strh	r3, [r4, #12]
 80093ca:	9b00      	ldr	r3, [sp, #0]
 80093cc:	6163      	str	r3, [r4, #20]
 80093ce:	9b01      	ldr	r3, [sp, #4]
 80093d0:	6120      	str	r0, [r4, #16]
 80093d2:	b15b      	cbz	r3, 80093ec <__smakebuf_r+0x74>
 80093d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093d8:	4630      	mov	r0, r6
 80093da:	f000 f891 	bl	8009500 <_isatty_r>
 80093de:	b128      	cbz	r0, 80093ec <__smakebuf_r+0x74>
 80093e0:	89a3      	ldrh	r3, [r4, #12]
 80093e2:	f023 0303 	bic.w	r3, r3, #3
 80093e6:	f043 0301 	orr.w	r3, r3, #1
 80093ea:	81a3      	strh	r3, [r4, #12]
 80093ec:	89a0      	ldrh	r0, [r4, #12]
 80093ee:	4305      	orrs	r5, r0
 80093f0:	81a5      	strh	r5, [r4, #12]
 80093f2:	e7cd      	b.n	8009390 <__smakebuf_r+0x18>
 80093f4:	08009185 	.word	0x08009185

080093f8 <__malloc_lock>:
 80093f8:	4801      	ldr	r0, [pc, #4]	; (8009400 <__malloc_lock+0x8>)
 80093fa:	f7ff bf95 	b.w	8009328 <__retarget_lock_acquire_recursive>
 80093fe:	bf00      	nop
 8009400:	20006b04 	.word	0x20006b04

08009404 <__malloc_unlock>:
 8009404:	4801      	ldr	r0, [pc, #4]	; (800940c <__malloc_unlock+0x8>)
 8009406:	f7ff bf90 	b.w	800932a <__retarget_lock_release_recursive>
 800940a:	bf00      	nop
 800940c:	20006b04 	.word	0x20006b04

08009410 <__sread>:
 8009410:	b510      	push	{r4, lr}
 8009412:	460c      	mov	r4, r1
 8009414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009418:	f000 f894 	bl	8009544 <_read_r>
 800941c:	2800      	cmp	r0, #0
 800941e:	bfab      	itete	ge
 8009420:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009422:	89a3      	ldrhlt	r3, [r4, #12]
 8009424:	181b      	addge	r3, r3, r0
 8009426:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800942a:	bfac      	ite	ge
 800942c:	6563      	strge	r3, [r4, #84]	; 0x54
 800942e:	81a3      	strhlt	r3, [r4, #12]
 8009430:	bd10      	pop	{r4, pc}

08009432 <__swrite>:
 8009432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009436:	461f      	mov	r7, r3
 8009438:	898b      	ldrh	r3, [r1, #12]
 800943a:	05db      	lsls	r3, r3, #23
 800943c:	4605      	mov	r5, r0
 800943e:	460c      	mov	r4, r1
 8009440:	4616      	mov	r6, r2
 8009442:	d505      	bpl.n	8009450 <__swrite+0x1e>
 8009444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009448:	2302      	movs	r3, #2
 800944a:	2200      	movs	r2, #0
 800944c:	f000 f868 	bl	8009520 <_lseek_r>
 8009450:	89a3      	ldrh	r3, [r4, #12]
 8009452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009456:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800945a:	81a3      	strh	r3, [r4, #12]
 800945c:	4632      	mov	r2, r6
 800945e:	463b      	mov	r3, r7
 8009460:	4628      	mov	r0, r5
 8009462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009466:	f000 b817 	b.w	8009498 <_write_r>

0800946a <__sseek>:
 800946a:	b510      	push	{r4, lr}
 800946c:	460c      	mov	r4, r1
 800946e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009472:	f000 f855 	bl	8009520 <_lseek_r>
 8009476:	1c43      	adds	r3, r0, #1
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	bf15      	itete	ne
 800947c:	6560      	strne	r0, [r4, #84]	; 0x54
 800947e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009486:	81a3      	strheq	r3, [r4, #12]
 8009488:	bf18      	it	ne
 800948a:	81a3      	strhne	r3, [r4, #12]
 800948c:	bd10      	pop	{r4, pc}

0800948e <__sclose>:
 800948e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009492:	f000 b813 	b.w	80094bc <_close_r>
	...

08009498 <_write_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4d07      	ldr	r5, [pc, #28]	; (80094b8 <_write_r+0x20>)
 800949c:	4604      	mov	r4, r0
 800949e:	4608      	mov	r0, r1
 80094a0:	4611      	mov	r1, r2
 80094a2:	2200      	movs	r2, #0
 80094a4:	602a      	str	r2, [r5, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	f7f7 fcdd 	bl	8000e66 <_write>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_write_r+0x1e>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_write_r+0x1e>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	20006b08 	.word	0x20006b08

080094bc <_close_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4d06      	ldr	r5, [pc, #24]	; (80094d8 <_close_r+0x1c>)
 80094c0:	2300      	movs	r3, #0
 80094c2:	4604      	mov	r4, r0
 80094c4:	4608      	mov	r0, r1
 80094c6:	602b      	str	r3, [r5, #0]
 80094c8:	f7f7 fce9 	bl	8000e9e <_close>
 80094cc:	1c43      	adds	r3, r0, #1
 80094ce:	d102      	bne.n	80094d6 <_close_r+0x1a>
 80094d0:	682b      	ldr	r3, [r5, #0]
 80094d2:	b103      	cbz	r3, 80094d6 <_close_r+0x1a>
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	bd38      	pop	{r3, r4, r5, pc}
 80094d8:	20006b08 	.word	0x20006b08

080094dc <_fstat_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	4d07      	ldr	r5, [pc, #28]	; (80094fc <_fstat_r+0x20>)
 80094e0:	2300      	movs	r3, #0
 80094e2:	4604      	mov	r4, r0
 80094e4:	4608      	mov	r0, r1
 80094e6:	4611      	mov	r1, r2
 80094e8:	602b      	str	r3, [r5, #0]
 80094ea:	f7f7 fce4 	bl	8000eb6 <_fstat>
 80094ee:	1c43      	adds	r3, r0, #1
 80094f0:	d102      	bne.n	80094f8 <_fstat_r+0x1c>
 80094f2:	682b      	ldr	r3, [r5, #0]
 80094f4:	b103      	cbz	r3, 80094f8 <_fstat_r+0x1c>
 80094f6:	6023      	str	r3, [r4, #0]
 80094f8:	bd38      	pop	{r3, r4, r5, pc}
 80094fa:	bf00      	nop
 80094fc:	20006b08 	.word	0x20006b08

08009500 <_isatty_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4d06      	ldr	r5, [pc, #24]	; (800951c <_isatty_r+0x1c>)
 8009504:	2300      	movs	r3, #0
 8009506:	4604      	mov	r4, r0
 8009508:	4608      	mov	r0, r1
 800950a:	602b      	str	r3, [r5, #0]
 800950c:	f7f7 fce3 	bl	8000ed6 <_isatty>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d102      	bne.n	800951a <_isatty_r+0x1a>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	b103      	cbz	r3, 800951a <_isatty_r+0x1a>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	20006b08 	.word	0x20006b08

08009520 <_lseek_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4d07      	ldr	r5, [pc, #28]	; (8009540 <_lseek_r+0x20>)
 8009524:	4604      	mov	r4, r0
 8009526:	4608      	mov	r0, r1
 8009528:	4611      	mov	r1, r2
 800952a:	2200      	movs	r2, #0
 800952c:	602a      	str	r2, [r5, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	f7f7 fcdc 	bl	8000eec <_lseek>
 8009534:	1c43      	adds	r3, r0, #1
 8009536:	d102      	bne.n	800953e <_lseek_r+0x1e>
 8009538:	682b      	ldr	r3, [r5, #0]
 800953a:	b103      	cbz	r3, 800953e <_lseek_r+0x1e>
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	20006b08 	.word	0x20006b08

08009544 <_read_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4d07      	ldr	r5, [pc, #28]	; (8009564 <_read_r+0x20>)
 8009548:	4604      	mov	r4, r0
 800954a:	4608      	mov	r0, r1
 800954c:	4611      	mov	r1, r2
 800954e:	2200      	movs	r2, #0
 8009550:	602a      	str	r2, [r5, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	f7f7 fc6a 	bl	8000e2c <_read>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <_read_r+0x1e>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	b103      	cbz	r3, 8009562 <_read_r+0x1e>
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	20006b08 	.word	0x20006b08

08009568 <_init>:
 8009568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956a:	bf00      	nop
 800956c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956e:	bc08      	pop	{r3}
 8009570:	469e      	mov	lr, r3
 8009572:	4770      	bx	lr

08009574 <_fini>:
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009576:	bf00      	nop
 8009578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957a:	bc08      	pop	{r3}
 800957c:	469e      	mov	lr, r3
 800957e:	4770      	bx	lr
