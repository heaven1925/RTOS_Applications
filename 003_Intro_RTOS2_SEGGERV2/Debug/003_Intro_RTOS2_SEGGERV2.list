
003_Intro_RTOS2_SEGGERV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08005e48  08005e48  00015e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fc8  08005fc8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005fc8  08005fc8  00015fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fd0  08005fd0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fd0  08005fd0  00015fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fd4  08005fd4  00015fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00006704  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006778  20006778  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011376  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000286b  00000000  00000000  0003141a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  00033c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd0  00000000  00000000  00034a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237ab  00000000  00000000  00035740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010da6  00000000  00000000  00058eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1a92  00000000  00000000  00069c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013b723  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f2c  00000000  00000000  0013b774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e30 	.word	0x08005e30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005e30 	.word	0x08005e30

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000090 	.word	0x20000090
 8000504:	20000144 	.word	0x20000144

08000508 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000510:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000514:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	2b00      	cmp	r3, #0
 800051e:	d013      	beq.n	8000548 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000524:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000528:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800052c:	2b00      	cmp	r3, #0
 800052e:	d00b      	beq.n	8000548 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000530:	e000      	b.n	8000534 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000532:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000534:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f9      	beq.n	8000532 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800053e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000548:	687b      	ldr	r3, [r7, #4]
}
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <_write>:
/* USER CODE BEGIN 0 */
void Task1_Handler(void *params);
void Task2_Handler(void *params);

int _write(int file, char *ptr, int len)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	b086      	sub	sp, #24
 800055a:	af00      	add	r7, sp, #0
 800055c:	60f8      	str	r0, [r7, #12]
 800055e:	60b9      	str	r1, [r7, #8]
 8000560:	607a      	str	r2, [r7, #4]

	for (int i = 0; i < len; i++)
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	e009      	b.n	800057c <_write+0x26>
	{
		ITM_SendChar((*ptr++));
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	60ba      	str	r2, [r7, #8]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff ffc9 	bl	8000508 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	3301      	adds	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	429a      	cmp	r2, r3
 8000582:	dbf1      	blt.n	8000568 <_write+0x12>
	}
	return len;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	DWT->CTRL |= ( 1 << 0 );
 8000596:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <main+0x68>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a17      	ldr	r2, [pc, #92]	; (80005f8 <main+0x68>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6013      	str	r3, [r2, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a2:	f000 faed 	bl	8000b80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a6:	f000 f837 	bl	8000618 <SystemClock_Config>


	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005aa:	f000 f8c9 	bl	8000740 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005ae:	f000 f89d 	bl	80006ec <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	SEGGER_SYSVIEW_Conf();
 80005b2:	f003 f9b1 	bl	8003918 <SEGGER_SYSVIEW_Conf>
	vSetVarulMaxPRIGROUPValuE();
 80005b6:	f002 ff5f 	bl	8003478 <vSetVarulMaxPRIGROUPValuE>
	SEGGER_SYSVIEW_Start();
 80005ba:	f004 f8a7 	bl	800470c <SEGGER_SYSVIEW_Start>
	//myTask2Handle = osThreadCreate(osThread(myTask2), NULL);

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	printf("Starting RTOS Project. \n");
 80005be:	480f      	ldr	r0, [pc, #60]	; (80005fc <main+0x6c>)
 80005c0:	f005 f8c8 	bl	8005754 <puts>

	xTaskCreate(Task1_Handler, "Task1", 650, NULL, 4,
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <main+0x70>)
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	2304      	movs	r3, #4
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	f240 228a 	movw	r2, #650	; 0x28a
 80005d2:	490c      	ldr	r1, [pc, #48]	; (8000604 <main+0x74>)
 80005d4:	480c      	ldr	r0, [pc, #48]	; (8000608 <main+0x78>)
 80005d6:	f001 fe3e 	bl	8002256 <xTaskCreate>
			&myTaskHandle1);
	xTaskCreate(Task2_Handler, "Task2", 650, NULL, 4,
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <main+0x7c>)
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2304      	movs	r3, #4
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	f240 228a 	movw	r2, #650	; 0x28a
 80005e8:	4909      	ldr	r1, [pc, #36]	; (8000610 <main+0x80>)
 80005ea:	480a      	ldr	r0, [pc, #40]	; (8000614 <main+0x84>)
 80005ec:	f001 fe33 	bl	8002256 <xTaskCreate>
			&myTaskHandle2);

	vTaskStartScheduler();
 80005f0:	f001 ffd4 	bl	800259c <vTaskStartScheduler>
	//osKernelStart();

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005f4:	e7fe      	b.n	80005f4 <main+0x64>
 80005f6:	bf00      	nop
 80005f8:	e0001000 	.word	0xe0001000
 80005fc:	08005e48 	.word	0x08005e48
 8000600:	2000038c 	.word	0x2000038c
 8000604:	08005e60 	.word	0x08005e60
 8000608:	0800080d 	.word	0x0800080d
 800060c:	20000390 	.word	0x20000390
 8000610:	08005e68 	.word	0x08005e68
 8000614:	0800085d 	.word	0x0800085d

08000618 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 ff89 	bl	800553e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <SystemClock_Config+0xcc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemClock_Config+0xd0>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000688:	2308      	movs	r3, #8
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800068c:	23a8      	movs	r3, #168	; 0xa8
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fdaf 	bl	8001200 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
	{
		Error_Handler();
 80006a8:	f000 f90a 	bl	80008c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006bc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2105      	movs	r1, #5
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 f810 	bl	80016f0 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80006d6:	f000 f8f3 	bl	80008c0 <Error_Handler>
	}
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_USART2_UART_Init+0x50>)
 80006f4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 80006f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006fc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000724:	f001 f9c4 	bl	8001ab0 <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800072e:	f000 f8c7 	bl	80008c0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000344 	.word	0x20000344
 800073c:	40004400 	.word	0x40004400

08000740 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_GPIO_Init+0x80>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <MX_GPIO_Init+0x80>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_GPIO_Init+0x80>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_GPIO_Init+0x80>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a11      	ldr	r2, [pc, #68]	; (80007c0 <MX_GPIO_Init+0x80>)
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_GPIO_Init+0x80>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, Task1_LED_Pin|Task2_LED_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000794:	480b      	ldr	r0, [pc, #44]	; (80007c4 <MX_GPIO_Init+0x84>)
 8000796:	f000 fcff 	bl	8001198 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Task1_LED_Pin Task2_LED_Pin */
	GPIO_InitStruct.Pin = Task1_LED_Pin|Task2_LED_Pin;
 800079a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800079e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4619      	mov	r1, r3
 80007b2:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_GPIO_Init+0x84>)
 80007b4:	f000 fb3c 	bl	8000e30 <HAL_GPIO_Init>

}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020c00 	.word	0x40020c00

080007c8 <delay_FreeRTOS>:

/* USER CODE BEGIN 4 */

void delay_FreeRTOS(uint32_t delayMS)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	uint32_t currentTick = xTaskGetTickCount();
 80007d0:	f002 f80a 	bl	80027e8 <xTaskGetTickCount>
 80007d4:	60f8      	str	r0, [r7, #12]
	uint32_t delayTick 	 = pdMS_TO_TICKS(delayMS);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007dc:	fb02 f303 	mul.w	r3, r2, r3
 80007e0:	4a09      	ldr	r2, [pc, #36]	; (8000808 <delay_FreeRTOS+0x40>)
 80007e2:	fba2 2303 	umull	r2, r3, r2, r3
 80007e6:	099b      	lsrs	r3, r3, #6
 80007e8:	60bb      	str	r3, [r7, #8]

	while( xTaskGetTickCount() < ( currentTick + delayTick ) );
 80007ea:	bf00      	nop
 80007ec:	f001 fffc 	bl	80027e8 <xTaskGetTickCount>
 80007f0:	4601      	mov	r1, r0
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	4413      	add	r3, r2
 80007f8:	4299      	cmp	r1, r3
 80007fa:	d3f7      	bcc.n	80007ec <delay_FreeRTOS+0x24>
}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	10624dd3 	.word	0x10624dd3

0800080c <Task1_Handler>:


void Task1_Handler(void *params) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	while (1)
	{
		test++;
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <Task1_Handler+0x44>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3301      	adds	r3, #1
 800081a:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <Task1_Handler+0x44>)
 800081c:	6013      	str	r3, [r2, #0]
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 800081e:	2101      	movs	r1, #1
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <Task1_Handler+0x48>)
 8000822:	f000 fca1 	bl	8001168 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d00c      	beq.n	8000846 <Task1_Handler+0x3a>
		{

			delay_FreeRTOS(250);
 800082c:	20fa      	movs	r0, #250	; 0xfa
 800082e:	f7ff ffcb 	bl	80007c8 <delay_FreeRTOS>
			// eInc ile hedef gorevin degere 1 arttirilacak
			xTaskNotify(myTaskHandle1 , 0 , eIncrement);
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <Task1_Handler+0x4c>)
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	2300      	movs	r3, #0
 8000838:	2202      	movs	r2, #2
 800083a:	2100      	movs	r1, #0
 800083c:	f002 fa82 	bl	8002d44 <xTaskGenericNotify>
			test = 0 ;
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <Task1_Handler+0x44>)
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]

		}
		vTaskDelay(100);
 8000846:	2064      	movs	r0, #100	; 0x64
 8000848:	f001 fe70 	bl	800252c <vTaskDelay>
		test++;
 800084c:	e7e2      	b.n	8000814 <Task1_Handler+0x8>
 800084e:	bf00      	nop
 8000850:	20000388 	.word	0x20000388
 8000854:	40020000 	.word	0x40020000
 8000858:	2000038c 	.word	0x2000038c

0800085c <Task2_Handler>:
	}

}

void Task2_Handler(void *params) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

	uint32_t pulNotificationValue = 0 ;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]

	while (1)
	{
		test--;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <Task2_Handler+0x5c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	3b01      	subs	r3, #1
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <Task2_Handler+0x5c>)
 8000870:	6013      	str	r3, [r2, #0]
		if ( xTaskNotifyWait(0, 0, &pulNotificationValue, portMAX_DELAY) == pdTRUE )
 8000872:	f107 020c 	add.w	r2, r7, #12
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	2100      	movs	r1, #0
 800087c:	2000      	movs	r0, #0
 800087e:	f002 f9f9 	bl	8002c74 <xTaskNotifyWait>
 8000882:	4603      	mov	r3, r0
 8000884:	2b01      	cmp	r3, #1
 8000886:	d113      	bne.n	80008b0 <Task2_Handler+0x54>
		{

			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000888:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088c:	480b      	ldr	r0, [pc, #44]	; (80008bc <Task2_Handler+0x60>)
 800088e:	f000 fc9c 	bl	80011ca <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000896:	4809      	ldr	r0, [pc, #36]	; (80008bc <Task2_Handler+0x60>)
 8000898:	f000 fc97 	bl	80011ca <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800089c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a0:	4806      	ldr	r0, [pc, #24]	; (80008bc <Task2_Handler+0x60>)
 80008a2:	f000 fc92 	bl	80011ca <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80008a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008aa:	4804      	ldr	r0, [pc, #16]	; (80008bc <Task2_Handler+0x60>)
 80008ac:	f000 fc8d 	bl	80011ca <HAL_GPIO_TogglePin>
		}
		vTaskDelay(100);
 80008b0:	2064      	movs	r0, #100	; 0x64
 80008b2:	f001 fe3b 	bl	800252c <vTaskDelay>
		test--;
 80008b6:	e7d7      	b.n	8000868 <Task2_Handler+0xc>
 80008b8:	20000388 	.word	0x20000388
 80008bc:	40020c00 	.word	0x40020c00

080008c0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>
	...

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_MspInit+0x54>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	4a11      	ldr	r2, [pc, #68]	; (8000920 <HAL_MspInit+0x54>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	; 0x44
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_MspInit+0x54>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <HAL_MspInit+0x54>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <HAL_MspInit+0x54>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_MspInit+0x54>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	210f      	movs	r1, #15
 800090e:	f06f 0001 	mvn.w	r0, #1
 8000912:	f000 fa64 	bl	8000dde <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a19      	ldr	r2, [pc, #100]	; (80009a8 <HAL_UART_MspInit+0x84>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d12b      	bne.n	800099e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <HAL_UART_MspInit+0x88>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a17      	ldr	r2, [pc, #92]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <HAL_UART_MspInit+0x88>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800097e:	230c      	movs	r3, #12
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098e:	2307      	movs	r3, #7
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <HAL_UART_MspInit+0x8c>)
 800099a:	f000 fa49 	bl	8000e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	; 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40004400 	.word	0x40004400
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020000 	.word	0x40020000

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x4>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 f91e 	bl	8000c24 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009e8:	f002 f926 	bl	8002c38 <xTaskGetSchedulerState>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d001      	beq.n	80009f6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009f2:	f002 fca9 	bl	8003348 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	e00a      	b.n	8000a22 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a0c:	f3af 8000 	nop.w
 8000a10:	4601      	mov	r1, r0
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	1c5a      	adds	r2, r3, #1
 8000a16:	60ba      	str	r2, [r7, #8]
 8000a18:	b2ca      	uxtb	r2, r1
 8000a1a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	dbf0      	blt.n	8000a0c <_read+0x12>
	}

return len;
 8000a2a:	687b      	ldr	r3, [r7, #4]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	return -1;
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5c:	605a      	str	r2, [r3, #4]
	return 0;
 8000a5e:	2300      	movs	r3, #0
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_isatty>:

int _isatty(int file)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	return 1;
 8000a74:	2301      	movs	r3, #1
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b085      	sub	sp, #20
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
	return 0;
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa4:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <_sbrk+0x5c>)
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <_sbrk+0x60>)
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <_sbrk+0x64>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <_sbrk+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d207      	bcs.n	8000adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000acc:	f004 fbf6 	bl	80052bc <__errno>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	e009      	b.n	8000af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <_sbrk+0x64>)
 8000aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20020000 	.word	0x20020000
 8000afc:	00000400 	.word	0x00000400
 8000b00:	20000394 	.word	0x20000394
 8000b04:	20006778 	.word	0x20006778

08000b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b32:	490e      	ldr	r1, [pc, #56]	; (8000b6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b34:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b48:	4c0b      	ldr	r4, [pc, #44]	; (8000b78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b56:	f7ff ffd7 	bl	8000b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f004 fcab 	bl	80054b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5e:	f7ff fd17 	bl	8000590 <main>
  bx  lr    
 8000b62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b70:	08005fd8 	.word	0x08005fd8
  ldr r2, =_sbss
 8000b74:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b78:	20006778 	.word	0x20006778

08000b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <HAL_Init+0x40>)
 8000b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_Init+0x40>)
 8000b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_Init+0x40>)
 8000ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 f90d 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bae:	200f      	movs	r0, #15
 8000bb0:	f000 f808 	bl	8000bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb4:	f7ff fe8a 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023c00 	.word	0x40023c00

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x54>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_InitTick+0x58>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f917 	bl	8000e16 <HAL_SYSTICK_Config>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00e      	b.n	8000c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d80a      	bhi.n	8000c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f000 f8ed 	bl	8000dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c04:	4a06      	ldr	r2, [pc, #24]	; (8000c20 <HAL_InitTick+0x5c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e000      	b.n	8000c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	20000004 	.word	0x20000004

08000c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x20>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_IncTick+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_IncTick+0x24>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000398 	.word	0x20000398

08000c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000398 	.word	0x20000398

08000c64 <__NVIC_SetPriorityGrouping>:
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_SetPriority>:
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <SysTick_Config>:
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f7ff ff8e 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff47 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff5c 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff8e 	bl	8000d1c <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffb0 	bl	8000d84 <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	e16b      	b.n	8001124 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 815a 	bne.w	800111e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d005      	beq.n	8000e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d130      	bne.n	8000ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	091b      	lsrs	r3, r3, #4
 8000ece:	f003 0201 	and.w	r2, r3, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d017      	beq.n	8000f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d123      	bne.n	8000f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0203 	and.w	r2, r3, #3
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80b4 	beq.w	800111e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b60      	ldr	r3, [pc, #384]	; (800113c <HAL_GPIO_Init+0x30c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a5f      	ldr	r2, [pc, #380]	; (800113c <HAL_GPIO_Init+0x30c>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b5d      	ldr	r3, [pc, #372]	; (800113c <HAL_GPIO_Init+0x30c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd2:	4a5b      	ldr	r2, [pc, #364]	; (8001140 <HAL_GPIO_Init+0x310>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a52      	ldr	r2, [pc, #328]	; (8001144 <HAL_GPIO_Init+0x314>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d02b      	beq.n	8001056 <HAL_GPIO_Init+0x226>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a51      	ldr	r2, [pc, #324]	; (8001148 <HAL_GPIO_Init+0x318>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d025      	beq.n	8001052 <HAL_GPIO_Init+0x222>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a50      	ldr	r2, [pc, #320]	; (800114c <HAL_GPIO_Init+0x31c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d01f      	beq.n	800104e <HAL_GPIO_Init+0x21e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4f      	ldr	r2, [pc, #316]	; (8001150 <HAL_GPIO_Init+0x320>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x21a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4e      	ldr	r2, [pc, #312]	; (8001154 <HAL_GPIO_Init+0x324>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x216>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4d      	ldr	r2, [pc, #308]	; (8001158 <HAL_GPIO_Init+0x328>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x212>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4c      	ldr	r2, [pc, #304]	; (800115c <HAL_GPIO_Init+0x32c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x20e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4b      	ldr	r2, [pc, #300]	; (8001160 <HAL_GPIO_Init+0x330>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x20a>
 8001036:	2307      	movs	r3, #7
 8001038:	e00e      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800103a:	2308      	movs	r3, #8
 800103c:	e00c      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800103e:	2306      	movs	r3, #6
 8001040:	e00a      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001042:	2305      	movs	r3, #5
 8001044:	e008      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001046:	2304      	movs	r3, #4
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800104a:	2303      	movs	r3, #3
 800104c:	e004      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800104e:	2302      	movs	r3, #2
 8001050:	e002      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001056:	2300      	movs	r3, #0
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	f002 0203 	and.w	r2, r2, #3
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	4093      	lsls	r3, r2
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001068:	4935      	ldr	r1, [pc, #212]	; (8001140 <HAL_GPIO_Init+0x310>)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001076:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <HAL_GPIO_Init+0x334>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800109a:	4a32      	ldr	r2, [pc, #200]	; (8001164 <HAL_GPIO_Init+0x334>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a0:	4b30      	ldr	r3, [pc, #192]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c4:	4a27      	ldr	r2, [pc, #156]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ee:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <HAL_GPIO_Init+0x334>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3301      	adds	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	f67f ae90 	bls.w	8000e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40013800 	.word	0x40013800
 8001144:	40020000 	.word	0x40020000
 8001148:	40020400 	.word	0x40020400
 800114c:	40020800 	.word	0x40020800
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40021000 	.word	0x40021000
 8001158:	40021400 	.word	0x40021400
 800115c:	40021800 	.word	0x40021800
 8001160:	40021c00 	.word	0x40021c00
 8001164:	40013c00 	.word	0x40013c00

08001168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	4013      	ands	r3, r2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001180:	2301      	movs	r3, #1
 8001182:	73fb      	strb	r3, [r7, #15]
 8001184:	e001      	b.n	800118a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800118a:	7bfb      	ldrb	r3, [r7, #15]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
 80011a4:	4613      	mov	r3, r2
 80011a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b4:	e003      	b.n	80011be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	041a      	lsls	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	619a      	str	r2, [r3, #24]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b085      	sub	sp, #20
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	460b      	mov	r3, r1
 80011d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011dc:	887a      	ldrh	r2, [r7, #2]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4013      	ands	r3, r2
 80011e2:	041a      	lsls	r2, r3, #16
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	400b      	ands	r3, r1
 80011ec:	431a      	orrs	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	619a      	str	r2, [r3, #24]
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e267      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d075      	beq.n	800130a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800121e:	4b88      	ldr	r3, [pc, #544]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b04      	cmp	r3, #4
 8001228:	d00c      	beq.n	8001244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122a:	4b85      	ldr	r3, [pc, #532]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001232:	2b08      	cmp	r3, #8
 8001234:	d112      	bne.n	800125c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001236:	4b82      	ldr	r3, [pc, #520]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001242:	d10b      	bne.n	800125c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001244:	4b7e      	ldr	r3, [pc, #504]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d05b      	beq.n	8001308 <HAL_RCC_OscConfig+0x108>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d157      	bne.n	8001308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e242      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001264:	d106      	bne.n	8001274 <HAL_RCC_OscConfig+0x74>
 8001266:	4b76      	ldr	r3, [pc, #472]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a75      	ldr	r2, [pc, #468]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e01d      	b.n	80012b0 <HAL_RCC_OscConfig+0xb0>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0x98>
 800127e:	4b70      	ldr	r3, [pc, #448]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a6f      	ldr	r2, [pc, #444]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	4b6d      	ldr	r3, [pc, #436]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a6c      	ldr	r2, [pc, #432]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e00b      	b.n	80012b0 <HAL_RCC_OscConfig+0xb0>
 8001298:	4b69      	ldr	r3, [pc, #420]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a68      	ldr	r2, [pc, #416]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800129e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b66      	ldr	r3, [pc, #408]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a65      	ldr	r2, [pc, #404]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d013      	beq.n	80012e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fcc8 	bl	8000c4c <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fcc4 	bl	8000c4c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e207      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0xc0>
 80012de:	e014      	b.n	800130a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fcb4 	bl	8000c4c <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fcb0 	bl	8000c4c <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e1f3      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fa:	4b51      	ldr	r3, [pc, #324]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0xe8>
 8001306:	e000      	b.n	800130a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d063      	beq.n	80013de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001316:	4b4a      	ldr	r3, [pc, #296]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00b      	beq.n	800133a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001322:	4b47      	ldr	r3, [pc, #284]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132a:	2b08      	cmp	r3, #8
 800132c:	d11c      	bne.n	8001368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132e:	4b44      	ldr	r3, [pc, #272]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d116      	bne.n	8001368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	4b41      	ldr	r3, [pc, #260]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <HAL_RCC_OscConfig+0x152>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d001      	beq.n	8001352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e1c7      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4937      	ldr	r1, [pc, #220]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	e03a      	b.n	80013de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d020      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001370:	4b34      	ldr	r3, [pc, #208]	; (8001444 <HAL_RCC_OscConfig+0x244>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff fc69 	bl	8000c4c <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff fc65 	bl	8000c4c <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e1a8      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4925      	ldr	r1, [pc, #148]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
 80013b0:	e015      	b.n	80013de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b2:	4b24      	ldr	r3, [pc, #144]	; (8001444 <HAL_RCC_OscConfig+0x244>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fc48 	bl	8000c4c <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c0:	f7ff fc44 	bl	8000c4c <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e187      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d036      	beq.n	8001458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d016      	beq.n	8001420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_RCC_OscConfig+0x248>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f8:	f7ff fc28 	bl	8000c4c <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff fc24 	bl	8000c4c <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e167      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x200>
 800141e:	e01b      	b.n	8001458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_RCC_OscConfig+0x248>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fc11 	bl	8000c4c <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142c:	e00e      	b.n	800144c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142e:	f7ff fc0d 	bl	8000c4c <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d907      	bls.n	800144c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e150      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
 8001440:	40023800 	.word	0x40023800
 8001444:	42470000 	.word	0x42470000
 8001448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144c:	4b88      	ldr	r3, [pc, #544]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800144e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1ea      	bne.n	800142e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 8097 	beq.w	8001594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146a:	4b81      	ldr	r3, [pc, #516]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10f      	bne.n	8001496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b7d      	ldr	r3, [pc, #500]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a7c      	ldr	r2, [pc, #496]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b7a      	ldr	r3, [pc, #488]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001492:	2301      	movs	r3, #1
 8001494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001496:	4b77      	ldr	r3, [pc, #476]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d118      	bne.n	80014d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a2:	4b74      	ldr	r3, [pc, #464]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a73      	ldr	r2, [pc, #460]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 80014a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fbcd 	bl	8000c4c <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b6:	f7ff fbc9 	bl	8000c4c <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e10c      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	4b6a      	ldr	r3, [pc, #424]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d106      	bne.n	80014ea <HAL_RCC_OscConfig+0x2ea>
 80014dc:	4b64      	ldr	r3, [pc, #400]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	4a63      	ldr	r2, [pc, #396]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6713      	str	r3, [r2, #112]	; 0x70
 80014e8:	e01c      	b.n	8001524 <HAL_RCC_OscConfig+0x324>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b05      	cmp	r3, #5
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0x30c>
 80014f2:	4b5f      	ldr	r3, [pc, #380]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a5e      	ldr	r2, [pc, #376]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
 80014fe:	4b5c      	ldr	r3, [pc, #368]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001502:	4a5b      	ldr	r2, [pc, #364]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6713      	str	r3, [r2, #112]	; 0x70
 800150a:	e00b      	b.n	8001524 <HAL_RCC_OscConfig+0x324>
 800150c:	4b58      	ldr	r3, [pc, #352]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a57      	ldr	r2, [pc, #348]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	4b55      	ldr	r3, [pc, #340]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	4a54      	ldr	r2, [pc, #336]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800151e:	f023 0304 	bic.w	r3, r3, #4
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d015      	beq.n	8001558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff fb8e 	bl	8000c4c <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001532:	e00a      	b.n	800154a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff fb8a 	bl	8000c4c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e0cb      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154a:	4b49      	ldr	r3, [pc, #292]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0ee      	beq.n	8001534 <HAL_RCC_OscConfig+0x334>
 8001556:	e014      	b.n	8001582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001558:	f7ff fb78 	bl	8000c4c <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155e:	e00a      	b.n	8001576 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001560:	f7ff fb74 	bl	8000c4c <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f241 3288 	movw	r2, #5000	; 0x1388
 800156e:	4293      	cmp	r3, r2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e0b5      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001576:	4b3e      	ldr	r3, [pc, #248]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1ee      	bne.n	8001560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d105      	bne.n	8001594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001588:	4b39      	ldr	r3, [pc, #228]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	4a38      	ldr	r2, [pc, #224]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800158e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a1 	beq.w	80016e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800159e:	4b34      	ldr	r3, [pc, #208]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d05c      	beq.n	8001664 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d141      	bne.n	8001636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b31      	ldr	r3, [pc, #196]	; (8001678 <HAL_RCC_OscConfig+0x478>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fb48 	bl	8000c4c <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff fb44 	bl	8000c4c <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e087      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d2:	4b27      	ldr	r3, [pc, #156]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69da      	ldr	r2, [r3, #28]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	019b      	lsls	r3, r3, #6
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	085b      	lsrs	r3, r3, #1
 80015f6:	3b01      	subs	r3, #1
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	061b      	lsls	r3, r3, #24
 8001602:	491b      	ldr	r1, [pc, #108]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_RCC_OscConfig+0x478>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff fb1d 	bl	8000c4c <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001616:	f7ff fb19 	bl	8000c4c <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e05c      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x416>
 8001634:	e054      	b.n	80016e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_RCC_OscConfig+0x478>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fb06 	bl	8000c4c <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001644:	f7ff fb02 	bl	8000c4c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e045      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x444>
 8001662:	e03d      	b.n	80016e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d107      	bne.n	800167c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e038      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
 8001670:	40023800 	.word	0x40023800
 8001674:	40007000 	.word	0x40007000
 8001678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_RCC_OscConfig+0x4ec>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d028      	beq.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001694:	429a      	cmp	r2, r3
 8001696:	d121      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d11a      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016ac:	4013      	ands	r3, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d111      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	085b      	lsrs	r3, r3, #1
 80016c4:	3b01      	subs	r3, #1
 80016c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800

080016f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0cc      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001704:	4b68      	ldr	r3, [pc, #416]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d90c      	bls.n	800172c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0b8      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d020      	beq.n	800177a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4a58      	ldr	r2, [pc, #352]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800174e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4a52      	ldr	r2, [pc, #328]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001768:	4b50      	ldr	r3, [pc, #320]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	494d      	ldr	r1, [pc, #308]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d044      	beq.n	8001810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d119      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e07f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d003      	beq.n	80017ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e06f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e067      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	4b37      	ldr	r3, [pc, #220]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f023 0203 	bic.w	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4934      	ldr	r1, [pc, #208]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e0:	f7ff fa34 	bl	8000c4c <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7ff fa30 	bl	8000c4c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e04f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 020c 	and.w	r2, r3, #12
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d1eb      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d20c      	bcs.n	8001838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e032      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4916      	ldr	r1, [pc, #88]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	490e      	ldr	r1, [pc, #56]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001876:	f000 f821 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 800187a:	4602      	mov	r2, r0
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	490a      	ldr	r1, [pc, #40]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	5ccb      	ldrb	r3, [r1, r3]
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f994 	bl	8000bc4 <HAL_InitTick>

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00
 80018ac:	40023800 	.word	0x40023800
 80018b0:	08005f38 	.word	0x08005f38
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000004 	.word	0x20000004

080018bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c0:	b090      	sub	sp, #64	; 0x40
 80018c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
 80018c8:	2300      	movs	r3, #0
 80018ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018cc:	2300      	movs	r3, #0
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d4:	4b59      	ldr	r3, [pc, #356]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d00d      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0x40>
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	f200 80a1 	bhi.w	8001a28 <HAL_RCC_GetSysClockFreq+0x16c>
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x34>
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d003      	beq.n	80018f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ee:	e09b      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f0:	4b53      	ldr	r3, [pc, #332]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x184>)
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80018f4:	e09b      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018f6:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x188>)
 80018f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018fa:	e098      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018fc:	4b4f      	ldr	r3, [pc, #316]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001906:	4b4d      	ldr	r3, [pc, #308]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d028      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001912:	4b4a      	ldr	r3, [pc, #296]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	099b      	lsrs	r3, r3, #6
 8001918:	2200      	movs	r2, #0
 800191a:	623b      	str	r3, [r7, #32]
 800191c:	627a      	str	r2, [r7, #36]	; 0x24
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001924:	2100      	movs	r1, #0
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8001928:	fb03 f201 	mul.w	r2, r3, r1
 800192c:	2300      	movs	r3, #0
 800192e:	fb00 f303 	mul.w	r3, r0, r3
 8001932:	4413      	add	r3, r2
 8001934:	4a43      	ldr	r2, [pc, #268]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8001936:	fba0 1202 	umull	r1, r2, r0, r2
 800193a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800193c:	460a      	mov	r2, r1
 800193e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001942:	4413      	add	r3, r2
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001948:	2200      	movs	r2, #0
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	61fa      	str	r2, [r7, #28]
 800194e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001952:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001956:	f7fe fc3b 	bl	80001d0 <__aeabi_uldivmod>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4613      	mov	r3, r2
 8001960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001962:	e053      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001964:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	099b      	lsrs	r3, r3, #6
 800196a:	2200      	movs	r2, #0
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	617a      	str	r2, [r7, #20]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001976:	f04f 0b00 	mov.w	fp, #0
 800197a:	4652      	mov	r2, sl
 800197c:	465b      	mov	r3, fp
 800197e:	f04f 0000 	mov.w	r0, #0
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	0159      	lsls	r1, r3, #5
 8001988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800198c:	0150      	lsls	r0, r2, #5
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	ebb2 080a 	subs.w	r8, r2, sl
 8001996:	eb63 090b 	sbc.w	r9, r3, fp
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019ae:	ebb2 0408 	subs.w	r4, r2, r8
 80019b2:	eb63 0509 	sbc.w	r5, r3, r9
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	00eb      	lsls	r3, r5, #3
 80019c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019c4:	00e2      	lsls	r2, r4, #3
 80019c6:	4614      	mov	r4, r2
 80019c8:	461d      	mov	r5, r3
 80019ca:	eb14 030a 	adds.w	r3, r4, sl
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	eb45 030b 	adc.w	r3, r5, fp
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019e2:	4629      	mov	r1, r5
 80019e4:	028b      	lsls	r3, r1, #10
 80019e6:	4621      	mov	r1, r4
 80019e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019ec:	4621      	mov	r1, r4
 80019ee:	028a      	lsls	r2, r1, #10
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f6:	2200      	movs	r2, #0
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	60fa      	str	r2, [r7, #12]
 80019fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a00:	f7fe fbe6 	bl	80001d0 <__aeabi_uldivmod>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4613      	mov	r3, r2
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	0c1b      	lsrs	r3, r3, #16
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	3301      	adds	r3, #1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a26:	e002      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3740      	adds	r7, #64	; 0x40
 8001a34:	46bd      	mov	sp, r7
 8001a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	00f42400 	.word	0x00f42400
 8001a44:	017d7840 	.word	0x017d7840

08001a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000000 	.word	0x20000000

08001a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a64:	f7ff fff0 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	0a9b      	lsrs	r3, r3, #10
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	4903      	ldr	r1, [pc, #12]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	08005f48 	.word	0x08005f48

08001a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a8c:	f7ff ffdc 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0b5b      	lsrs	r3, r3, #13
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4903      	ldr	r1, [pc, #12]	; (8001aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	08005f48 	.word	0x08005f48

08001ab0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e03f      	b.n	8001b42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7fe ff24 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2224      	movs	r2, #36	; 0x24
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001af2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f829 	bl	8001b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2220      	movs	r2, #32
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b50:	b0c0      	sub	sp, #256	; 0x100
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b68:	68d9      	ldr	r1, [r3, #12]
 8001b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	ea40 0301 	orr.w	r3, r0, r1
 8001b74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001ba4:	f021 010c 	bic.w	r1, r1, #12
 8001ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bc6:	6999      	ldr	r1, [r3, #24]
 8001bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	ea40 0301 	orr.w	r3, r0, r1
 8001bd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b8f      	ldr	r3, [pc, #572]	; (8001e18 <UART_SetConfig+0x2cc>)
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d005      	beq.n	8001bec <UART_SetConfig+0xa0>
 8001be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4b8d      	ldr	r3, [pc, #564]	; (8001e1c <UART_SetConfig+0x2d0>)
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d104      	bne.n	8001bf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001bec:	f7ff ff4c 	bl	8001a88 <HAL_RCC_GetPCLK2Freq>
 8001bf0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001bf4:	e003      	b.n	8001bfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001bf6:	f7ff ff33 	bl	8001a60 <HAL_RCC_GetPCLK1Freq>
 8001bfa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c08:	f040 810c 	bne.w	8001e24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c10:	2200      	movs	r2, #0
 8001c12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001c1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001c1e:	4622      	mov	r2, r4
 8001c20:	462b      	mov	r3, r5
 8001c22:	1891      	adds	r1, r2, r2
 8001c24:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c26:	415b      	adcs	r3, r3
 8001c28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c2e:	4621      	mov	r1, r4
 8001c30:	eb12 0801 	adds.w	r8, r2, r1
 8001c34:	4629      	mov	r1, r5
 8001c36:	eb43 0901 	adc.w	r9, r3, r1
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c4e:	4690      	mov	r8, r2
 8001c50:	4699      	mov	r9, r3
 8001c52:	4623      	mov	r3, r4
 8001c54:	eb18 0303 	adds.w	r3, r8, r3
 8001c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c5c:	462b      	mov	r3, r5
 8001c5e:	eb49 0303 	adc.w	r3, r9, r3
 8001c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001c76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	18db      	adds	r3, r3, r3
 8001c7e:	653b      	str	r3, [r7, #80]	; 0x50
 8001c80:	4613      	mov	r3, r2
 8001c82:	eb42 0303 	adc.w	r3, r2, r3
 8001c86:	657b      	str	r3, [r7, #84]	; 0x54
 8001c88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001c90:	f7fe fa9e 	bl	80001d0 <__aeabi_uldivmod>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <UART_SetConfig+0x2d4>)
 8001c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	011c      	lsls	r4, r3, #4
 8001ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001cac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001cb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001cb4:	4642      	mov	r2, r8
 8001cb6:	464b      	mov	r3, r9
 8001cb8:	1891      	adds	r1, r2, r2
 8001cba:	64b9      	str	r1, [r7, #72]	; 0x48
 8001cbc:	415b      	adcs	r3, r3
 8001cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001cc4:	4641      	mov	r1, r8
 8001cc6:	eb12 0a01 	adds.w	sl, r2, r1
 8001cca:	4649      	mov	r1, r9
 8001ccc:	eb43 0b01 	adc.w	fp, r3, r1
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001cdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ce0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ce4:	4692      	mov	sl, r2
 8001ce6:	469b      	mov	fp, r3
 8001ce8:	4643      	mov	r3, r8
 8001cea:	eb1a 0303 	adds.w	r3, sl, r3
 8001cee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001cf2:	464b      	mov	r3, r9
 8001cf4:	eb4b 0303 	adc.w	r3, fp, r3
 8001cf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001d0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001d10:	460b      	mov	r3, r1
 8001d12:	18db      	adds	r3, r3, r3
 8001d14:	643b      	str	r3, [r7, #64]	; 0x40
 8001d16:	4613      	mov	r3, r2
 8001d18:	eb42 0303 	adc.w	r3, r2, r3
 8001d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8001d1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d26:	f7fe fa53 	bl	80001d0 <__aeabi_uldivmod>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <UART_SetConfig+0x2d4>)
 8001d32:	fba3 2301 	umull	r2, r3, r3, r1
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	2264      	movs	r2, #100	; 0x64
 8001d3a:	fb02 f303 	mul.w	r3, r2, r3
 8001d3e:	1acb      	subs	r3, r1, r3
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001d46:	4b36      	ldr	r3, [pc, #216]	; (8001e20 <UART_SetConfig+0x2d4>)
 8001d48:	fba3 2302 	umull	r2, r3, r3, r2
 8001d4c:	095b      	lsrs	r3, r3, #5
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d54:	441c      	add	r4, r3
 8001d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001d64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001d68:	4642      	mov	r2, r8
 8001d6a:	464b      	mov	r3, r9
 8001d6c:	1891      	adds	r1, r2, r2
 8001d6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d70:	415b      	adcs	r3, r3
 8001d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d78:	4641      	mov	r1, r8
 8001d7a:	1851      	adds	r1, r2, r1
 8001d7c:	6339      	str	r1, [r7, #48]	; 0x30
 8001d7e:	4649      	mov	r1, r9
 8001d80:	414b      	adcs	r3, r1
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001d90:	4659      	mov	r1, fp
 8001d92:	00cb      	lsls	r3, r1, #3
 8001d94:	4651      	mov	r1, sl
 8001d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d9a:	4651      	mov	r1, sl
 8001d9c:	00ca      	lsls	r2, r1, #3
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	4603      	mov	r3, r0
 8001da4:	4642      	mov	r2, r8
 8001da6:	189b      	adds	r3, r3, r2
 8001da8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001dac:	464b      	mov	r3, r9
 8001dae:	460a      	mov	r2, r1
 8001db0:	eb42 0303 	adc.w	r3, r2, r3
 8001db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001dc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001dc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001dcc:	460b      	mov	r3, r1
 8001dce:	18db      	adds	r3, r3, r3
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	eb42 0303 	adc.w	r3, r2, r3
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001de2:	f7fe f9f5 	bl	80001d0 <__aeabi_uldivmod>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <UART_SetConfig+0x2d4>)
 8001dec:	fba3 1302 	umull	r1, r3, r3, r2
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	2164      	movs	r1, #100	; 0x64
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	3332      	adds	r3, #50	; 0x32
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <UART_SetConfig+0x2d4>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	095b      	lsrs	r3, r3, #5
 8001e06:	f003 0207 	and.w	r2, r3, #7
 8001e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4422      	add	r2, r4
 8001e12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e14:	e105      	b.n	8002022 <UART_SetConfig+0x4d6>
 8001e16:	bf00      	nop
 8001e18:	40011000 	.word	0x40011000
 8001e1c:	40011400 	.word	0x40011400
 8001e20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001e32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001e36:	4642      	mov	r2, r8
 8001e38:	464b      	mov	r3, r9
 8001e3a:	1891      	adds	r1, r2, r2
 8001e3c:	6239      	str	r1, [r7, #32]
 8001e3e:	415b      	adcs	r3, r3
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
 8001e42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e46:	4641      	mov	r1, r8
 8001e48:	1854      	adds	r4, r2, r1
 8001e4a:	4649      	mov	r1, r9
 8001e4c:	eb43 0501 	adc.w	r5, r3, r1
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	00eb      	lsls	r3, r5, #3
 8001e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e5e:	00e2      	lsls	r2, r4, #3
 8001e60:	4614      	mov	r4, r2
 8001e62:	461d      	mov	r5, r3
 8001e64:	4643      	mov	r3, r8
 8001e66:	18e3      	adds	r3, r4, r3
 8001e68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	eb45 0303 	adc.w	r3, r5, r3
 8001e72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e92:	4629      	mov	r1, r5
 8001e94:	008b      	lsls	r3, r1, #2
 8001e96:	4621      	mov	r1, r4
 8001e98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	008a      	lsls	r2, r1, #2
 8001ea0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001ea4:	f7fe f994 	bl	80001d0 <__aeabi_uldivmod>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4b60      	ldr	r3, [pc, #384]	; (8002030 <UART_SetConfig+0x4e4>)
 8001eae:	fba3 2302 	umull	r2, r3, r3, r2
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	011c      	lsls	r4, r3, #4
 8001eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ec0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ec4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001ec8:	4642      	mov	r2, r8
 8001eca:	464b      	mov	r3, r9
 8001ecc:	1891      	adds	r1, r2, r2
 8001ece:	61b9      	str	r1, [r7, #24]
 8001ed0:	415b      	adcs	r3, r3
 8001ed2:	61fb      	str	r3, [r7, #28]
 8001ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ed8:	4641      	mov	r1, r8
 8001eda:	1851      	adds	r1, r2, r1
 8001edc:	6139      	str	r1, [r7, #16]
 8001ede:	4649      	mov	r1, r9
 8001ee0:	414b      	adcs	r3, r1
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ef0:	4659      	mov	r1, fp
 8001ef2:	00cb      	lsls	r3, r1, #3
 8001ef4:	4651      	mov	r1, sl
 8001ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001efa:	4651      	mov	r1, sl
 8001efc:	00ca      	lsls	r2, r1, #3
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	4603      	mov	r3, r0
 8001f04:	4642      	mov	r2, r8
 8001f06:	189b      	adds	r3, r3, r2
 8001f08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f0c:	464b      	mov	r3, r9
 8001f0e:	460a      	mov	r2, r1
 8001f10:	eb42 0303 	adc.w	r3, r2, r3
 8001f14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001f30:	4649      	mov	r1, r9
 8001f32:	008b      	lsls	r3, r1, #2
 8001f34:	4641      	mov	r1, r8
 8001f36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f3a:	4641      	mov	r1, r8
 8001f3c:	008a      	lsls	r2, r1, #2
 8001f3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001f42:	f7fe f945 	bl	80001d0 <__aeabi_uldivmod>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4b39      	ldr	r3, [pc, #228]	; (8002030 <UART_SetConfig+0x4e4>)
 8001f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f50:	095b      	lsrs	r3, r3, #5
 8001f52:	2164      	movs	r1, #100	; 0x64
 8001f54:	fb01 f303 	mul.w	r3, r1, r3
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	3332      	adds	r3, #50	; 0x32
 8001f5e:	4a34      	ldr	r2, [pc, #208]	; (8002030 <UART_SetConfig+0x4e4>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	095b      	lsrs	r3, r3, #5
 8001f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f6a:	441c      	add	r4, r3
 8001f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f70:	2200      	movs	r2, #0
 8001f72:	673b      	str	r3, [r7, #112]	; 0x70
 8001f74:	677a      	str	r2, [r7, #116]	; 0x74
 8001f76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001f7a:	4642      	mov	r2, r8
 8001f7c:	464b      	mov	r3, r9
 8001f7e:	1891      	adds	r1, r2, r2
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	415b      	adcs	r3, r3
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f8a:	4641      	mov	r1, r8
 8001f8c:	1851      	adds	r1, r2, r1
 8001f8e:	6039      	str	r1, [r7, #0]
 8001f90:	4649      	mov	r1, r9
 8001f92:	414b      	adcs	r3, r1
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001fa2:	4659      	mov	r1, fp
 8001fa4:	00cb      	lsls	r3, r1, #3
 8001fa6:	4651      	mov	r1, sl
 8001fa8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fac:	4651      	mov	r1, sl
 8001fae:	00ca      	lsls	r2, r1, #3
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4642      	mov	r2, r8
 8001fb8:	189b      	adds	r3, r3, r2
 8001fba:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fbc:	464b      	mov	r3, r9
 8001fbe:	460a      	mov	r2, r1
 8001fc0:	eb42 0303 	adc.w	r3, r2, r3
 8001fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	663b      	str	r3, [r7, #96]	; 0x60
 8001fd0:	667a      	str	r2, [r7, #100]	; 0x64
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001fde:	4649      	mov	r1, r9
 8001fe0:	008b      	lsls	r3, r1, #2
 8001fe2:	4641      	mov	r1, r8
 8001fe4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fe8:	4641      	mov	r1, r8
 8001fea:	008a      	lsls	r2, r1, #2
 8001fec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ff0:	f7fe f8ee 	bl	80001d0 <__aeabi_uldivmod>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <UART_SetConfig+0x4e4>)
 8001ffa:	fba3 1302 	umull	r1, r3, r3, r2
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2164      	movs	r1, #100	; 0x64
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	3332      	adds	r3, #50	; 0x32
 800200c:	4a08      	ldr	r2, [pc, #32]	; (8002030 <UART_SetConfig+0x4e4>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	f003 020f 	and.w	r2, r3, #15
 8002018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4422      	add	r2, r4
 8002020:	609a      	str	r2, [r3, #8]
}
 8002022:	bf00      	nop
 8002024:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002028:	46bd      	mov	sp, r7
 800202a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800202e:	bf00      	nop
 8002030:	51eb851f 	.word	0x51eb851f

08002034 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f103 0208 	add.w	r2, r3, #8
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f103 0208 	add.w	r2, r3, #8
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f103 0208 	add.w	r2, r3, #8
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800208e:	b480      	push	{r7}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	601a      	str	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020d6:	b480      	push	{r7}
 80020d8:	b085      	sub	sp, #20
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d103      	bne.n	80020f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	e00c      	b.n	8002110 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3308      	adds	r3, #8
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	e002      	b.n	8002104 <vListInsert+0x2e>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	429a      	cmp	r2, r3
 800210e:	d2f6      	bcs.n	80020fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	601a      	str	r2, [r3, #0]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6892      	ldr	r2, [r2, #8]
 800215e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6852      	ldr	r2, [r2, #4]
 8002168:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	429a      	cmp	r2, r3
 8002172:	d103      	bne.n	800217c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	1e5a      	subs	r2, r3, #1
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08e      	sub	sp, #56	; 0x38
 80021a0:	af04      	add	r7, sp, #16
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80021aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10a      	bne.n	80021c6 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	f3bf 8f6f 	isb	sy
 80021bc:	f3bf 8f4f 	dsb	sy
 80021c0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80021c2:	bf00      	nop
 80021c4:	e7fe      	b.n	80021c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80021c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10a      	bne.n	80021e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80021cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d0:	f383 8811 	msr	BASEPRI, r3
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	61fb      	str	r3, [r7, #28]
}
 80021de:	bf00      	nop
 80021e0:	e7fe      	b.n	80021e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80021e2:	23b4      	movs	r3, #180	; 0xb4
 80021e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	2bb4      	cmp	r3, #180	; 0xb4
 80021ea:	d00a      	beq.n	8002202 <xTaskCreateStatic+0x66>
	__asm volatile
 80021ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f0:	f383 8811 	msr	BASEPRI, r3
 80021f4:	f3bf 8f6f 	isb	sy
 80021f8:	f3bf 8f4f 	dsb	sy
 80021fc:	61bb      	str	r3, [r7, #24]
}
 80021fe:	bf00      	nop
 8002200:	e7fe      	b.n	8002200 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002202:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002206:	2b00      	cmp	r3, #0
 8002208:	d01e      	beq.n	8002248 <xTaskCreateStatic+0xac>
 800220a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220c:	2b00      	cmp	r3, #0
 800220e:	d01b      	beq.n	8002248 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002218:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	2202      	movs	r2, #2
 800221e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002222:	2300      	movs	r3, #0
 8002224:	9303      	str	r3, [sp, #12]
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	9302      	str	r3, [sp, #8]
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f850 	bl	80022e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002242:	f000 f8eb 	bl	800241c <prvAddNewTaskToReadyList>
 8002246:	e001      	b.n	800224c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800224c:	697b      	ldr	r3, [r7, #20]
	}
 800224e:	4618      	mov	r0, r3
 8002250:	3728      	adds	r7, #40	; 0x28
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002256:	b580      	push	{r7, lr}
 8002258:	b08c      	sub	sp, #48	; 0x30
 800225a:	af04      	add	r7, sp, #16
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	4613      	mov	r3, r2
 8002264:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4618      	mov	r0, r3
 800226c:	f001 f95c 	bl	8003528 <pvPortMalloc>
 8002270:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00e      	beq.n	8002296 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002278:	20b4      	movs	r0, #180	; 0xb4
 800227a:	f001 f955 	bl	8003528 <pvPortMalloc>
 800227e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
 800228c:	e005      	b.n	800229a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f001 fa16 	bl	80036c0 <vPortFree>
 8002294:	e001      	b.n	800229a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d017      	beq.n	80022d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022a8:	88fa      	ldrh	r2, [r7, #6]
 80022aa:	2300      	movs	r3, #0
 80022ac:	9303      	str	r3, [sp, #12]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	9302      	str	r3, [sp, #8]
 80022b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f80e 	bl	80022e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80022c4:	69f8      	ldr	r0, [r7, #28]
 80022c6:	f000 f8a9 	bl	800241c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80022ca:	2301      	movs	r3, #1
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	e002      	b.n	80022d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022d0:	f04f 33ff 	mov.w	r3, #4294967295
 80022d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80022d6:	69bb      	ldr	r3, [r7, #24]
	}
 80022d8:	4618      	mov	r0, r3
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80022ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022f8:	3b01      	subs	r3, #1
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	f023 0307 	bic.w	r3, r3, #7
 8002306:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002316:	f383 8811 	msr	BASEPRI, r3
 800231a:	f3bf 8f6f 	isb	sy
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	617b      	str	r3, [r7, #20]
}
 8002324:	bf00      	nop
 8002326:	e7fe      	b.n	8002326 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01f      	beq.n	800236e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	e012      	b.n	800235a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	4413      	add	r3, r2
 800233a:	7819      	ldrb	r1, [r3, #0]
 800233c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	4413      	add	r3, r2
 8002342:	3334      	adds	r3, #52	; 0x34
 8002344:	460a      	mov	r2, r1
 8002346:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	4413      	add	r3, r2
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d006      	beq.n	8002362 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	3301      	adds	r3, #1
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	2b0f      	cmp	r3, #15
 800235e:	d9e9      	bls.n	8002334 <prvInitialiseNewTask+0x54>
 8002360:	e000      	b.n	8002364 <prvInitialiseNewTask+0x84>
			{
				break;
 8002362:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800236c:	e003      	b.n	8002376 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002378:	2b06      	cmp	r3, #6
 800237a:	d901      	bls.n	8002380 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800237c:	2306      	movs	r3, #6
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002384:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800238a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238e:	2200      	movs	r2, #0
 8002390:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	3304      	adds	r3, #4
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fe6c 	bl	8002074 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800239c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239e:	3318      	adds	r3, #24
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fe67 	bl	8002074 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	f1c3 0207 	rsb	r2, r3, #7
 80023b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80023bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023be:	2200      	movs	r2, #0
 80023c0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80023c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80023cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ce:	334c      	adds	r3, #76	; 0x4c
 80023d0:	2260      	movs	r2, #96	; 0x60
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f003 f8b2 	bl	800553e <memset>
 80023da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023dc:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <prvInitialiseNewTask+0x130>)
 80023de:	651a      	str	r2, [r3, #80]	; 0x50
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	4a0c      	ldr	r2, [pc, #48]	; (8002414 <prvInitialiseNewTask+0x134>)
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54
 80023e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e8:	4a0b      	ldr	r2, [pc, #44]	; (8002418 <prvInitialiseNewTask+0x138>)
 80023ea:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	68f9      	ldr	r1, [r7, #12]
 80023f0:	69b8      	ldr	r0, [r7, #24]
 80023f2:	f000 fded 	bl	8002fd0 <pxPortInitialiseStack>
 80023f6:	4602      	mov	r2, r0
 80023f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80023fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002406:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002408:	bf00      	nop
 800240a:	3720      	adds	r7, #32
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	08005f84 	.word	0x08005f84
 8002414:	08005fa4 	.word	0x08005fa4
 8002418:	08005f64 	.word	0x08005f64

0800241c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800241c:	b5b0      	push	{r4, r5, r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af02      	add	r7, sp, #8
 8002422:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002424:	f000 fefe 	bl	8003224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002428:	4b39      	ldr	r3, [pc, #228]	; (8002510 <prvAddNewTaskToReadyList+0xf4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	4a38      	ldr	r2, [pc, #224]	; (8002510 <prvAddNewTaskToReadyList+0xf4>)
 8002430:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002432:	4b38      	ldr	r3, [pc, #224]	; (8002514 <prvAddNewTaskToReadyList+0xf8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800243a:	4a36      	ldr	r2, [pc, #216]	; (8002514 <prvAddNewTaskToReadyList+0xf8>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002440:	4b33      	ldr	r3, [pc, #204]	; (8002510 <prvAddNewTaskToReadyList+0xf4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d110      	bne.n	800246a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002448:	f000 fb34 	bl	8002ab4 <prvInitialiseTaskLists>
 800244c:	e00d      	b.n	800246a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800244e:	4b32      	ldr	r3, [pc, #200]	; (8002518 <prvAddNewTaskToReadyList+0xfc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002456:	4b2f      	ldr	r3, [pc, #188]	; (8002514 <prvAddNewTaskToReadyList+0xf8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	429a      	cmp	r2, r3
 8002462:	d802      	bhi.n	800246a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002464:	4a2b      	ldr	r2, [pc, #172]	; (8002514 <prvAddNewTaskToReadyList+0xf8>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800246a:	4b2c      	ldr	r3, [pc, #176]	; (800251c <prvAddNewTaskToReadyList+0x100>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	4a2a      	ldr	r2, [pc, #168]	; (800251c <prvAddNewTaskToReadyList+0x100>)
 8002472:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d016      	beq.n	80024a8 <prvAddNewTaskToReadyList+0x8c>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4618      	mov	r0, r3
 800247e:	f002 fca7 	bl	8004dd0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	461d      	mov	r5, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	461c      	mov	r4, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	1ae3      	subs	r3, r4, r3
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	462b      	mov	r3, r5
 80024a4:	f001 fada 	bl	8003a5c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f002 fd18 	bl	8004ee0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	2201      	movs	r2, #1
 80024b6:	409a      	lsls	r2, r3
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <prvAddNewTaskToReadyList+0x104>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4313      	orrs	r3, r2
 80024be:	4a18      	ldr	r2, [pc, #96]	; (8002520 <prvAddNewTaskToReadyList+0x104>)
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4a15      	ldr	r2, [pc, #84]	; (8002524 <prvAddNewTaskToReadyList+0x108>)
 80024d0:	441a      	add	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3304      	adds	r3, #4
 80024d6:	4619      	mov	r1, r3
 80024d8:	4610      	mov	r0, r2
 80024da:	f7ff fdd8 	bl	800208e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80024de:	f000 fed1 	bl	8003284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80024e2:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <prvAddNewTaskToReadyList+0xfc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00e      	beq.n	8002508 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <prvAddNewTaskToReadyList+0xf8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d207      	bcs.n	8002508 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <prvAddNewTaskToReadyList+0x10c>)
 80024fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bdb0      	pop	{r4, r5, r7, pc}
 8002510:	2000049c 	.word	0x2000049c
 8002514:	2000039c 	.word	0x2000039c
 8002518:	200004a8 	.word	0x200004a8
 800251c:	200004b8 	.word	0x200004b8
 8002520:	200004a4 	.word	0x200004a4
 8002524:	200003a0 	.word	0x200003a0
 8002528:	e000ed04 	.word	0xe000ed04

0800252c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d01b      	beq.n	8002576 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <vTaskDelay+0x68>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <vTaskDelay+0x30>
	__asm volatile
 8002546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254a:	f383 8811 	msr	BASEPRI, r3
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	f3bf 8f4f 	dsb	sy
 8002556:	60bb      	str	r3, [r7, #8]
}
 8002558:	bf00      	nop
 800255a:	e7fe      	b.n	800255a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800255c:	f000 f896 	bl	800268c <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	2023      	movs	r0, #35	; 0x23
 8002564:	f001 ffaa 	bl	80044bc <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002568:	2100      	movs	r1, #0
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fcb8 	bl	8002ee0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002570:	f000 f89a 	bl	80026a8 <xTaskResumeAll>
 8002574:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d107      	bne.n	800258c <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <vTaskDelay+0x6c>)
 800257e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200004c4 	.word	0x200004c4
 8002598:	e000ed04 	.word	0xe000ed04

0800259c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	; 0x28
 80025a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80025aa:	463a      	mov	r2, r7
 80025ac:	1d39      	adds	r1, r7, #4
 80025ae:	f107 0308 	add.w	r3, r7, #8
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ff8e 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80025b8:	6839      	ldr	r1, [r7, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	9202      	str	r2, [sp, #8]
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	2300      	movs	r3, #0
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2300      	movs	r3, #0
 80025c8:	460a      	mov	r2, r1
 80025ca:	4928      	ldr	r1, [pc, #160]	; (800266c <vTaskStartScheduler+0xd0>)
 80025cc:	4828      	ldr	r0, [pc, #160]	; (8002670 <vTaskStartScheduler+0xd4>)
 80025ce:	f7ff fde5 	bl	800219c <xTaskCreateStatic>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4a27      	ldr	r2, [pc, #156]	; (8002674 <vTaskStartScheduler+0xd8>)
 80025d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80025d8:	4b26      	ldr	r3, [pc, #152]	; (8002674 <vTaskStartScheduler+0xd8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80025e0:	2301      	movs	r3, #1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e001      	b.n	80025ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d129      	bne.n	8002644 <vTaskStartScheduler+0xa8>
	__asm volatile
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	613b      	str	r3, [r7, #16]
}
 8002602:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002604:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <vTaskStartScheduler+0xdc>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	334c      	adds	r3, #76	; 0x4c
 800260a:	4a1c      	ldr	r2, [pc, #112]	; (800267c <vTaskStartScheduler+0xe0>)
 800260c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800260e:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <vTaskStartScheduler+0xe4>)
 8002610:	f04f 32ff 	mov.w	r2, #4294967295
 8002614:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002616:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <vTaskStartScheduler+0xe8>)
 8002618:	2201      	movs	r2, #1
 800261a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800261c:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <vTaskStartScheduler+0xec>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <vTaskStartScheduler+0xdc>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <vTaskStartScheduler+0xd8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d102      	bne.n	8002634 <vTaskStartScheduler+0x98>
 800262e:	f002 fbb3 	bl	8004d98 <SEGGER_SYSVIEW_OnIdle>
 8002632:	e004      	b.n	800263e <vTaskStartScheduler+0xa2>
 8002634:	4b10      	ldr	r3, [pc, #64]	; (8002678 <vTaskStartScheduler+0xdc>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f002 fc0d 	bl	8004e58 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800263e:	f000 fd4f 	bl	80030e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002642:	e00e      	b.n	8002662 <vTaskStartScheduler+0xc6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264a:	d10a      	bne.n	8002662 <vTaskStartScheduler+0xc6>
	__asm volatile
 800264c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002650:	f383 8811 	msr	BASEPRI, r3
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	60fb      	str	r3, [r7, #12]
}
 800265e:	bf00      	nop
 8002660:	e7fe      	b.n	8002660 <vTaskStartScheduler+0xc4>
}
 8002662:	bf00      	nop
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	08005e70 	.word	0x08005e70
 8002670:	08002a85 	.word	0x08002a85
 8002674:	200004c0 	.word	0x200004c0
 8002678:	2000039c 	.word	0x2000039c
 800267c:	20000010 	.word	0x20000010
 8002680:	200004bc 	.word	0x200004bc
 8002684:	200004a8 	.word	0x200004a8
 8002688:	200004a0 	.word	0x200004a0

0800268c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <vTaskSuspendAll+0x18>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	3301      	adds	r3, #1
 8002696:	4a03      	ldr	r2, [pc, #12]	; (80026a4 <vTaskSuspendAll+0x18>)
 8002698:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800269a:	bf00      	nop
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	200004c4 	.word	0x200004c4

080026a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80026b6:	4b43      	ldr	r3, [pc, #268]	; (80027c4 <xTaskResumeAll+0x11c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10a      	bne.n	80026d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80026be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c2:	f383 8811 	msr	BASEPRI, r3
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	603b      	str	r3, [r7, #0]
}
 80026d0:	bf00      	nop
 80026d2:	e7fe      	b.n	80026d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80026d4:	f000 fda6 	bl	8003224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80026d8:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <xTaskResumeAll+0x11c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	3b01      	subs	r3, #1
 80026de:	4a39      	ldr	r2, [pc, #228]	; (80027c4 <xTaskResumeAll+0x11c>)
 80026e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026e2:	4b38      	ldr	r3, [pc, #224]	; (80027c4 <xTaskResumeAll+0x11c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d165      	bne.n	80027b6 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026ea:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <xTaskResumeAll+0x120>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d061      	beq.n	80027b6 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026f2:	e032      	b.n	800275a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026f4:	4b35      	ldr	r3, [pc, #212]	; (80027cc <xTaskResumeAll+0x124>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	3318      	adds	r3, #24
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fd21 	bl	8002148 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3304      	adds	r3, #4
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fd1c 	bl	8002148 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4618      	mov	r0, r3
 8002714:	f002 fbe4 	bl	8004ee0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	2201      	movs	r2, #1
 800271e:	409a      	lsls	r2, r3
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <xTaskResumeAll+0x128>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4313      	orrs	r3, r2
 8002726:	4a2a      	ldr	r2, [pc, #168]	; (80027d0 <xTaskResumeAll+0x128>)
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <xTaskResumeAll+0x12c>)
 8002738:	441a      	add	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	3304      	adds	r3, #4
 800273e:	4619      	mov	r1, r3
 8002740:	4610      	mov	r0, r2
 8002742:	f7ff fca4 	bl	800208e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274a:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <xTaskResumeAll+0x130>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	429a      	cmp	r2, r3
 8002752:	d302      	bcc.n	800275a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <xTaskResumeAll+0x134>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800275a:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <xTaskResumeAll+0x124>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1c8      	bne.n	80026f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002768:	f000 fa46 	bl	8002bf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800276c:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <xTaskResumeAll+0x138>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d010      	beq.n	800279a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002778:	f000 f858 	bl	800282c <xTaskIncrementTick>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8002782:	4b16      	ldr	r3, [pc, #88]	; (80027dc <xTaskResumeAll+0x134>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3b01      	subs	r3, #1
 800278c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f1      	bne.n	8002778 <xTaskResumeAll+0xd0>

						xPendedTicks = 0;
 8002794:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <xTaskResumeAll+0x138>)
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <xTaskResumeAll+0x134>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80027a2:	2301      	movs	r3, #1
 80027a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80027a6:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <xTaskResumeAll+0x13c>)
 80027a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	f3bf 8f4f 	dsb	sy
 80027b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80027b6:	f000 fd65 	bl	8003284 <vPortExitCritical>

	return xAlreadyYielded;
 80027ba:	68bb      	ldr	r3, [r7, #8]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	200004c4 	.word	0x200004c4
 80027c8:	2000049c 	.word	0x2000049c
 80027cc:	2000045c 	.word	0x2000045c
 80027d0:	200004a4 	.word	0x200004a4
 80027d4:	200003a0 	.word	0x200003a0
 80027d8:	2000039c 	.word	0x2000039c
 80027dc:	200004b0 	.word	0x200004b0
 80027e0:	200004ac 	.word	0x200004ac
 80027e4:	e000ed04 	.word	0xe000ed04

080027e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <xTaskGetTickCount+0x1c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80027f4:	687b      	ldr	r3, [r7, #4]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	200004a0 	.word	0x200004a0

08002808 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800280e:	f000 fdf3 	bl	80033f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002812:	2300      	movs	r3, #0
 8002814:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002816:	4b04      	ldr	r3, [pc, #16]	; (8002828 <xTaskGetTickCountFromISR+0x20>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800281c:	683b      	ldr	r3, [r7, #0]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200004a0 	.word	0x200004a0

0800282c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002836:	4b50      	ldr	r3, [pc, #320]	; (8002978 <xTaskIncrementTick+0x14c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f040 8092 	bne.w	8002964 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002840:	4b4e      	ldr	r3, [pc, #312]	; (800297c <xTaskIncrementTick+0x150>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3301      	adds	r3, #1
 8002846:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002848:	4a4c      	ldr	r2, [pc, #304]	; (800297c <xTaskIncrementTick+0x150>)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d120      	bne.n	8002896 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002854:	4b4a      	ldr	r3, [pc, #296]	; (8002980 <xTaskIncrementTick+0x154>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <xTaskIncrementTick+0x48>
	__asm volatile
 800285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002862:	f383 8811 	msr	BASEPRI, r3
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	603b      	str	r3, [r7, #0]
}
 8002870:	bf00      	nop
 8002872:	e7fe      	b.n	8002872 <xTaskIncrementTick+0x46>
 8002874:	4b42      	ldr	r3, [pc, #264]	; (8002980 <xTaskIncrementTick+0x154>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b42      	ldr	r3, [pc, #264]	; (8002984 <xTaskIncrementTick+0x158>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a40      	ldr	r2, [pc, #256]	; (8002980 <xTaskIncrementTick+0x154>)
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4a40      	ldr	r2, [pc, #256]	; (8002984 <xTaskIncrementTick+0x158>)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <xTaskIncrementTick+0x15c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	4a3e      	ldr	r2, [pc, #248]	; (8002988 <xTaskIncrementTick+0x15c>)
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	f000 f9b1 	bl	8002bf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002896:	4b3d      	ldr	r3, [pc, #244]	; (800298c <xTaskIncrementTick+0x160>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	429a      	cmp	r2, r3
 800289e:	d34c      	bcc.n	800293a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028a0:	4b37      	ldr	r3, [pc, #220]	; (8002980 <xTaskIncrementTick+0x154>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028aa:	4b38      	ldr	r3, [pc, #224]	; (800298c <xTaskIncrementTick+0x160>)
 80028ac:	f04f 32ff 	mov.w	r2, #4294967295
 80028b0:	601a      	str	r2, [r3, #0]
					break;
 80028b2:	e042      	b.n	800293a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028b4:	4b32      	ldr	r3, [pc, #200]	; (8002980 <xTaskIncrementTick+0x154>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d203      	bcs.n	80028d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80028cc:	4a2f      	ldr	r2, [pc, #188]	; (800298c <xTaskIncrementTick+0x160>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80028d2:	e032      	b.n	800293a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	3304      	adds	r3, #4
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fc35 	bl	8002148 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d004      	beq.n	80028f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	3318      	adds	r3, #24
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fc2c 	bl	8002148 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f002 faf4 	bl	8004ee0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	2201      	movs	r2, #1
 80028fe:	409a      	lsls	r2, r3
 8002900:	4b23      	ldr	r3, [pc, #140]	; (8002990 <xTaskIncrementTick+0x164>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4313      	orrs	r3, r2
 8002906:	4a22      	ldr	r2, [pc, #136]	; (8002990 <xTaskIncrementTick+0x164>)
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <xTaskIncrementTick+0x168>)
 8002918:	441a      	add	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	3304      	adds	r3, #4
 800291e:	4619      	mov	r1, r3
 8002920:	4610      	mov	r0, r2
 8002922:	f7ff fbb4 	bl	800208e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800292a:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <xTaskIncrementTick+0x16c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	429a      	cmp	r2, r3
 8002932:	d3b5      	bcc.n	80028a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002934:	2301      	movs	r3, #1
 8002936:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002938:	e7b2      	b.n	80028a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800293a:	4b17      	ldr	r3, [pc, #92]	; (8002998 <xTaskIncrementTick+0x16c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002940:	4914      	ldr	r1, [pc, #80]	; (8002994 <xTaskIncrementTick+0x168>)
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d901      	bls.n	8002956 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8002952:	2301      	movs	r3, #1
 8002954:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002956:	4b11      	ldr	r3, [pc, #68]	; (800299c <xTaskIncrementTick+0x170>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 800295e:	2301      	movs	r3, #1
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	e004      	b.n	800296e <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002964:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <xTaskIncrementTick+0x174>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3301      	adds	r3, #1
 800296a:	4a0d      	ldr	r2, [pc, #52]	; (80029a0 <xTaskIncrementTick+0x174>)
 800296c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800296e:	697b      	ldr	r3, [r7, #20]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	200004c4 	.word	0x200004c4
 800297c:	200004a0 	.word	0x200004a0
 8002980:	20000454 	.word	0x20000454
 8002984:	20000458 	.word	0x20000458
 8002988:	200004b4 	.word	0x200004b4
 800298c:	200004bc 	.word	0x200004bc
 8002990:	200004a4 	.word	0x200004a4
 8002994:	200003a0 	.word	0x200003a0
 8002998:	2000039c 	.word	0x2000039c
 800299c:	200004b0 	.word	0x200004b0
 80029a0:	200004ac 	.word	0x200004ac

080029a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029aa:	4b2f      	ldr	r3, [pc, #188]	; (8002a68 <vTaskSwitchContext+0xc4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80029b2:	4b2e      	ldr	r3, [pc, #184]	; (8002a6c <vTaskSwitchContext+0xc8>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80029b8:	e052      	b.n	8002a60 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 80029ba:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <vTaskSwitchContext+0xc8>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029c0:	4b2b      	ldr	r3, [pc, #172]	; (8002a70 <vTaskSwitchContext+0xcc>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80029ce:	7afb      	ldrb	r3, [r7, #11]
 80029d0:	f1c3 031f 	rsb	r3, r3, #31
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	4927      	ldr	r1, [pc, #156]	; (8002a74 <vTaskSwitchContext+0xd0>)
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10a      	bne.n	8002a00 <vTaskSwitchContext+0x5c>
	__asm volatile
 80029ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	607b      	str	r3, [r7, #4]
}
 80029fc:	bf00      	nop
 80029fe:	e7fe      	b.n	80029fe <vTaskSwitchContext+0x5a>
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4a1a      	ldr	r2, [pc, #104]	; (8002a74 <vTaskSwitchContext+0xd0>)
 8002a0c:	4413      	add	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	3308      	adds	r3, #8
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d104      	bne.n	8002a30 <vTaskSwitchContext+0x8c>
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	4a10      	ldr	r2, [pc, #64]	; (8002a78 <vTaskSwitchContext+0xd4>)
 8002a38:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8002a3a:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <vTaskSwitchContext+0xd4>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <vTaskSwitchContext+0xd8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d102      	bne.n	8002a4c <vTaskSwitchContext+0xa8>
 8002a46:	f002 f9a7 	bl	8004d98 <SEGGER_SYSVIEW_OnIdle>
 8002a4a:	e004      	b.n	8002a56 <vTaskSwitchContext+0xb2>
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <vTaskSwitchContext+0xd4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f002 fa01 	bl	8004e58 <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002a56:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <vTaskSwitchContext+0xd4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	334c      	adds	r3, #76	; 0x4c
 8002a5c:	4a08      	ldr	r2, [pc, #32]	; (8002a80 <vTaskSwitchContext+0xdc>)
 8002a5e:	6013      	str	r3, [r2, #0]
}
 8002a60:	bf00      	nop
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	200004c4 	.word	0x200004c4
 8002a6c:	200004b0 	.word	0x200004b0
 8002a70:	200004a4 	.word	0x200004a4
 8002a74:	200003a0 	.word	0x200003a0
 8002a78:	2000039c 	.word	0x2000039c
 8002a7c:	200004c0 	.word	0x200004c0
 8002a80:	20000010 	.word	0x20000010

08002a84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002a8c:	f000 f852 	bl	8002b34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <prvIdleTask+0x28>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d9f9      	bls.n	8002a8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <prvIdleTask+0x2c>)
 8002a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002aa8:	e7f0      	b.n	8002a8c <prvIdleTask+0x8>
 8002aaa:	bf00      	nop
 8002aac:	200003a0 	.word	0x200003a0
 8002ab0:	e000ed04 	.word	0xe000ed04

08002ab4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002aba:	2300      	movs	r3, #0
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	e00c      	b.n	8002ada <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4a12      	ldr	r2, [pc, #72]	; (8002b14 <prvInitialiseTaskLists+0x60>)
 8002acc:	4413      	add	r3, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fab0 	bl	8002034 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	607b      	str	r3, [r7, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b06      	cmp	r3, #6
 8002ade:	d9ef      	bls.n	8002ac0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ae0:	480d      	ldr	r0, [pc, #52]	; (8002b18 <prvInitialiseTaskLists+0x64>)
 8002ae2:	f7ff faa7 	bl	8002034 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ae6:	480d      	ldr	r0, [pc, #52]	; (8002b1c <prvInitialiseTaskLists+0x68>)
 8002ae8:	f7ff faa4 	bl	8002034 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002aec:	480c      	ldr	r0, [pc, #48]	; (8002b20 <prvInitialiseTaskLists+0x6c>)
 8002aee:	f7ff faa1 	bl	8002034 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002af2:	480c      	ldr	r0, [pc, #48]	; (8002b24 <prvInitialiseTaskLists+0x70>)
 8002af4:	f7ff fa9e 	bl	8002034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002af8:	480b      	ldr	r0, [pc, #44]	; (8002b28 <prvInitialiseTaskLists+0x74>)
 8002afa:	f7ff fa9b 	bl	8002034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <prvInitialiseTaskLists+0x78>)
 8002b00:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <prvInitialiseTaskLists+0x64>)
 8002b02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <prvInitialiseTaskLists+0x7c>)
 8002b06:	4a05      	ldr	r2, [pc, #20]	; (8002b1c <prvInitialiseTaskLists+0x68>)
 8002b08:	601a      	str	r2, [r3, #0]
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200003a0 	.word	0x200003a0
 8002b18:	2000042c 	.word	0x2000042c
 8002b1c:	20000440 	.word	0x20000440
 8002b20:	2000045c 	.word	0x2000045c
 8002b24:	20000470 	.word	0x20000470
 8002b28:	20000488 	.word	0x20000488
 8002b2c:	20000454 	.word	0x20000454
 8002b30:	20000458 	.word	0x20000458

08002b34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b3a:	e019      	b.n	8002b70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002b3c:	f000 fb72 	bl	8003224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b40:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <prvCheckTasksWaitingTermination+0x50>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fafb 	bl	8002148 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002b52:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <prvCheckTasksWaitingTermination+0x54>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	4a0b      	ldr	r2, [pc, #44]	; (8002b88 <prvCheckTasksWaitingTermination+0x54>)
 8002b5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <prvCheckTasksWaitingTermination+0x58>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <prvCheckTasksWaitingTermination+0x58>)
 8002b64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002b66:	f000 fb8d 	bl	8003284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f810 	bl	8002b90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <prvCheckTasksWaitingTermination+0x58>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1e1      	bne.n	8002b3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000470 	.word	0x20000470
 8002b88:	2000049c 	.word	0x2000049c
 8002b8c:	20000484 	.word	0x20000484

08002b90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	334c      	adds	r3, #76	; 0x4c
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 fdef 	bl	8005780 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d108      	bne.n	8002bbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 fd85 	bl	80036c0 <vPortFree>
				vPortFree( pxTCB );
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fd82 	bl	80036c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002bbc:	e018      	b.n	8002bf0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d103      	bne.n	8002bd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fd79 	bl	80036c0 <vPortFree>
	}
 8002bce:	e00f      	b.n	8002bf0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d00a      	beq.n	8002bf0 <prvDeleteTCB+0x60>
	__asm volatile
 8002bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bde:	f383 8811 	msr	BASEPRI, r3
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	60fb      	str	r3, [r7, #12]
}
 8002bec:	bf00      	nop
 8002bee:	e7fe      	b.n	8002bee <prvDeleteTCB+0x5e>
	}
 8002bf0:	bf00      	nop
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <prvResetNextTaskUnblockTime+0x38>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d104      	bne.n	8002c12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c08:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <prvResetNextTaskUnblockTime+0x3c>)
 8002c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002c10:	e008      	b.n	8002c24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c12:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <prvResetNextTaskUnblockTime+0x38>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	4a04      	ldr	r2, [pc, #16]	; (8002c34 <prvResetNextTaskUnblockTime+0x3c>)
 8002c22:	6013      	str	r3, [r2, #0]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	20000454 	.word	0x20000454
 8002c34:	200004bc 	.word	0x200004bc

08002c38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <xTaskGetSchedulerState+0x34>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002c46:	2301      	movs	r3, #1
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	e008      	b.n	8002c5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c4c:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <xTaskGetSchedulerState+0x38>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002c54:	2302      	movs	r3, #2
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	e001      	b.n	8002c5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002c5e:	687b      	ldr	r3, [r7, #4]
	}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	200004a8 	.word	0x200004a8
 8002c70:	200004c4 	.word	0x200004c4

08002c74 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8002c82:	f000 facf 	bl	8003224 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002c86:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <xTaskNotifyWait+0xc8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d01c      	beq.n	8002cce <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8002c94:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <xTaskNotifyWait+0xc8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	43d2      	mvns	r2, r2
 8002ca0:	400a      	ands	r2, r1
 8002ca2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8002ca6:	4b25      	ldr	r3, [pc, #148]	; (8002d3c <xTaskNotifyWait+0xc8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	6838      	ldr	r0, [r7, #0]
 8002cba:	f000 f911 	bl	8002ee0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <xTaskNotifyWait+0xcc>)
 8002cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002cce:	f000 fad9 	bl	8003284 <vPortExitCritical>

		taskENTER_CRITICAL();
 8002cd2:	f000 faa7 	bl	8003224 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	68f9      	ldr	r1, [r7, #12]
 8002ce2:	2040      	movs	r0, #64	; 0x40
 8002ce4:	f001 fc80 	bl	80045e8 <SEGGER_SYSVIEW_RecordU32x4>

			if( pulNotificationValue != NULL )
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <xTaskNotifyWait+0x86>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8002cee:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <xTaskNotifyWait+0xc8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002cfa:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <xTaskNotifyWait+0xc8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d002      	beq.n	8002d0e <xTaskNotifyWait+0x9a>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	e00a      	b.n	8002d24 <xTaskNotifyWait+0xb0>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <xTaskNotifyWait+0xc8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	43d2      	mvns	r2, r2
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 8002d20:	2301      	movs	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <xTaskNotifyWait+0xc8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8002d2e:	f000 faa9 	bl	8003284 <vPortExitCritical>

		return xReturn;
 8002d32:	697b      	ldr	r3, [r7, #20]
	}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	2000039c 	.word	0x2000039c
 8002d40:	e000ed04 	.word	0xe000ed04

08002d44 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08c      	sub	sp, #48	; 0x30
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8002d54:	2301      	movs	r3, #1
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <xTaskGenericNotify+0x30>
	__asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	61bb      	str	r3, [r7, #24]
}
 8002d70:	bf00      	nop
 8002d72:	e7fe      	b.n	8002d72 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8002d78:	f000 fa54 	bl	8003224 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d004      	beq.n	8002d8c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002d92:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d82d      	bhi.n	8002dfe <xTaskGenericNotify+0xba>
 8002da2:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <xTaskGenericNotify+0x64>)
 8002da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da8:	08002e21 	.word	0x08002e21
 8002dac:	08002dbd 	.word	0x08002dbd
 8002db0:	08002dcf 	.word	0x08002dcf
 8002db4:	08002ddf 	.word	0x08002ddf
 8002db8:	08002de9 	.word	0x08002de9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8002dcc:	e02b      	b.n	8002e26 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8002ddc:	e023      	b.n	8002e26 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8002de6:	e01e      	b.n	8002e26 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002de8:	7ffb      	ldrb	r3, [r7, #31]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d004      	beq.n	8002df8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8002df6:	e016      	b.n	8002e26 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8002dfc:	e013      	b.n	8002e26 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e08:	d00c      	beq.n	8002e24 <xTaskGenericNotify+0xe0>
	__asm volatile
 8002e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	617b      	str	r3, [r7, #20]
}
 8002e1c:	bf00      	nop
 8002e1e:	e7fe      	b.n	8002e1e <xTaskGenericNotify+0xda>
					break;
 8002e20:	bf00      	nop
 8002e22:	e000      	b.n	8002e26 <xTaskGenericNotify+0xe2>

					break;
 8002e24:	bf00      	nop
			}

			traceTASK_NOTIFY();
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 f8fd 	bl	8005028 <SEGGER_SYSVIEW_ShrinkId>
 8002e2e:	4601      	mov	r1, r0
 8002e30:	79fa      	ldrb	r2, [r7, #7]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	203e      	movs	r0, #62	; 0x3e
 8002e3c:	f001 fbd4 	bl	80045e8 <SEGGER_SYSVIEW_RecordU32x4>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002e40:	7ffb      	ldrb	r3, [r7, #31]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d13d      	bne.n	8002ec2 <xTaskGenericNotify+0x17e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff f97c 	bl	8002148 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f002 f844 	bl	8004ee0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <xTaskGenericNotify+0x18c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	4a1a      	ldr	r2, [pc, #104]	; (8002ed0 <xTaskGenericNotify+0x18c>)
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4a17      	ldr	r2, [pc, #92]	; (8002ed4 <xTaskGenericNotify+0x190>)
 8002e78:	441a      	add	r2, r3
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4610      	mov	r0, r2
 8002e82:	f7ff f904 	bl	800208e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <xTaskGenericNotify+0x160>
	__asm volatile
 8002e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e92:	f383 8811 	msr	BASEPRI, r3
 8002e96:	f3bf 8f6f 	isb	sy
 8002e9a:	f3bf 8f4f 	dsb	sy
 8002e9e:	613b      	str	r3, [r7, #16]
}
 8002ea0:	bf00      	nop
 8002ea2:	e7fe      	b.n	8002ea2 <xTaskGenericNotify+0x15e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <xTaskGenericNotify+0x194>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d907      	bls.n	8002ec2 <xTaskGenericNotify+0x17e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <xTaskGenericNotify+0x198>)
 8002eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002ec2:	f000 f9df 	bl	8003284 <vPortExitCritical>

		return xReturn;
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3728      	adds	r7, #40	; 0x28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	200004a4 	.word	0x200004a4
 8002ed4:	200003a0 	.word	0x200003a0
 8002ed8:	2000039c 	.word	0x2000039c
 8002edc:	e000ed04 	.word	0xe000ed04

08002ee0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002eea:	4b32      	ldr	r3, [pc, #200]	; (8002fb4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ef0:	4b31      	ldr	r3, [pc, #196]	; (8002fb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff f926 	bl	8002148 <uxListRemove>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002f02:	4b2d      	ldr	r3, [pc, #180]	; (8002fb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	2201      	movs	r2, #1
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <prvAddCurrentTaskToDelayedList+0xdc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4013      	ands	r3, r2
 8002f16:	4a29      	ldr	r2, [pc, #164]	; (8002fbc <prvAddCurrentTaskToDelayedList+0xdc>)
 8002f18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d110      	bne.n	8002f44 <prvAddCurrentTaskToDelayedList+0x64>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00d      	beq.n	8002f44 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002f28:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	211b      	movs	r1, #27
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f002 f81a 	bl	8004f68 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f34:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4820      	ldr	r0, [pc, #128]	; (8002fc0 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002f3e:	f7ff f8a6 	bl	800208e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002f42:	e032      	b.n	8002faa <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d20f      	bcs.n	8002f7c <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002f5c:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2104      	movs	r1, #4
 8002f62:	4618      	mov	r0, r3
 8002f64:	f002 f800 	bl	8004f68 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f68:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	3304      	adds	r3, #4
 8002f72:	4619      	mov	r1, r3
 8002f74:	4610      	mov	r0, r2
 8002f76:	f7ff f8ae 	bl	80020d6 <vListInsert>
}
 8002f7a:	e016      	b.n	8002faa <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2104      	movs	r1, #4
 8002f82:	4618      	mov	r0, r3
 8002f84:	f001 fff0 	bl	8004f68 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f88:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3304      	adds	r3, #4
 8002f92:	4619      	mov	r1, r3
 8002f94:	4610      	mov	r0, r2
 8002f96:	f7ff f89e 	bl	80020d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002f9a:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <prvAddCurrentTaskToDelayedList+0xec>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d202      	bcs.n	8002faa <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8002fa4:	4a09      	ldr	r2, [pc, #36]	; (8002fcc <prvAddCurrentTaskToDelayedList+0xec>)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	6013      	str	r3, [r2, #0]
}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	200004a0 	.word	0x200004a0
 8002fb8:	2000039c 	.word	0x2000039c
 8002fbc:	200004a4 	.word	0x200004a4
 8002fc0:	20000488 	.word	0x20000488
 8002fc4:	20000458 	.word	0x20000458
 8002fc8:	20000454 	.word	0x20000454
 8002fcc:	200004bc 	.word	0x200004bc

08002fd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	3b04      	subs	r3, #4
 8002fe0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	3b04      	subs	r3, #4
 8002fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f023 0201 	bic.w	r2, r3, #1
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3b04      	subs	r3, #4
 8002ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003000:	4a0c      	ldr	r2, [pc, #48]	; (8003034 <pxPortInitialiseStack+0x64>)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3b14      	subs	r3, #20
 800300a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3b04      	subs	r3, #4
 8003016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f06f 0202 	mvn.w	r2, #2
 800301e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3b20      	subs	r3, #32
 8003024:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003026:	68fb      	ldr	r3, [r7, #12]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	08003039 	.word	0x08003039

08003038 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <prvTaskExitError+0x54>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304a:	d00a      	beq.n	8003062 <prvTaskExitError+0x2a>
	__asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	60fb      	str	r3, [r7, #12]
}
 800305e:	bf00      	nop
 8003060:	e7fe      	b.n	8003060 <prvTaskExitError+0x28>
	__asm volatile
 8003062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	60bb      	str	r3, [r7, #8]
}
 8003074:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003076:	bf00      	nop
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0fc      	beq.n	8003078 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800307e:	bf00      	nop
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	2000000c 	.word	0x2000000c

08003090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003090:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <pxCurrentTCBConst2>)
 8003092:	6819      	ldr	r1, [r3, #0]
 8003094:	6808      	ldr	r0, [r1, #0]
 8003096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800309a:	f380 8809 	msr	PSP, r0
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f04f 0000 	mov.w	r0, #0
 80030a6:	f380 8811 	msr	BASEPRI, r0
 80030aa:	4770      	bx	lr
 80030ac:	f3af 8000 	nop.w

080030b0 <pxCurrentTCBConst2>:
 80030b0:	2000039c 	.word	0x2000039c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop

080030b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80030b8:	4808      	ldr	r0, [pc, #32]	; (80030dc <prvPortStartFirstTask+0x24>)
 80030ba:	6800      	ldr	r0, [r0, #0]
 80030bc:	6800      	ldr	r0, [r0, #0]
 80030be:	f380 8808 	msr	MSP, r0
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f380 8814 	msr	CONTROL, r0
 80030ca:	b662      	cpsie	i
 80030cc:	b661      	cpsie	f
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	df00      	svc	0
 80030d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80030da:	bf00      	nop
 80030dc:	e000ed08 	.word	0xe000ed08

080030e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80030e6:	4b46      	ldr	r3, [pc, #280]	; (8003200 <xPortStartScheduler+0x120>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a46      	ldr	r2, [pc, #280]	; (8003204 <xPortStartScheduler+0x124>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d10a      	bne.n	8003106 <xPortStartScheduler+0x26>
	__asm volatile
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	613b      	str	r3, [r7, #16]
}
 8003102:	bf00      	nop
 8003104:	e7fe      	b.n	8003104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003106:	4b3e      	ldr	r3, [pc, #248]	; (8003200 <xPortStartScheduler+0x120>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a3f      	ldr	r2, [pc, #252]	; (8003208 <xPortStartScheduler+0x128>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d10a      	bne.n	8003126 <xPortStartScheduler+0x46>
	__asm volatile
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	60fb      	str	r3, [r7, #12]
}
 8003122:	bf00      	nop
 8003124:	e7fe      	b.n	8003124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003126:	4b39      	ldr	r3, [pc, #228]	; (800320c <xPortStartScheduler+0x12c>)
 8003128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	22ff      	movs	r2, #255	; 0xff
 8003136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4b31      	ldr	r3, [pc, #196]	; (8003210 <xPortStartScheduler+0x130>)
 800314c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800314e:	4b31      	ldr	r3, [pc, #196]	; (8003214 <xPortStartScheduler+0x134>)
 8003150:	2207      	movs	r2, #7
 8003152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003154:	e009      	b.n	800316a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003156:	4b2f      	ldr	r3, [pc, #188]	; (8003214 <xPortStartScheduler+0x134>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3b01      	subs	r3, #1
 800315c:	4a2d      	ldr	r2, [pc, #180]	; (8003214 <xPortStartScheduler+0x134>)
 800315e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	b2db      	uxtb	r3, r3
 8003168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003172:	2b80      	cmp	r3, #128	; 0x80
 8003174:	d0ef      	beq.n	8003156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003176:	4b27      	ldr	r3, [pc, #156]	; (8003214 <xPortStartScheduler+0x134>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f1c3 0307 	rsb	r3, r3, #7
 800317e:	2b04      	cmp	r3, #4
 8003180:	d00a      	beq.n	8003198 <xPortStartScheduler+0xb8>
	__asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	60bb      	str	r3, [r7, #8]
}
 8003194:	bf00      	nop
 8003196:	e7fe      	b.n	8003196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003198:	4b1e      	ldr	r3, [pc, #120]	; (8003214 <xPortStartScheduler+0x134>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	021b      	lsls	r3, r3, #8
 800319e:	4a1d      	ldr	r2, [pc, #116]	; (8003214 <xPortStartScheduler+0x134>)
 80031a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031a2:	4b1c      	ldr	r3, [pc, #112]	; (8003214 <xPortStartScheduler+0x134>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031aa:	4a1a      	ldr	r2, [pc, #104]	; (8003214 <xPortStartScheduler+0x134>)
 80031ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80031b6:	4b18      	ldr	r3, [pc, #96]	; (8003218 <xPortStartScheduler+0x138>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a17      	ldr	r2, [pc, #92]	; (8003218 <xPortStartScheduler+0x138>)
 80031bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <xPortStartScheduler+0x138>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a14      	ldr	r2, [pc, #80]	; (8003218 <xPortStartScheduler+0x138>)
 80031c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80031cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80031ce:	f000 f8e5 	bl	800339c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80031d2:	4b12      	ldr	r3, [pc, #72]	; (800321c <xPortStartScheduler+0x13c>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80031d8:	f000 f904 	bl	80033e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80031dc:	4b10      	ldr	r3, [pc, #64]	; (8003220 <xPortStartScheduler+0x140>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0f      	ldr	r2, [pc, #60]	; (8003220 <xPortStartScheduler+0x140>)
 80031e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80031e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80031e8:	f7ff ff66 	bl	80030b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80031ec:	f7ff fbda 	bl	80029a4 <vTaskSwitchContext>
	prvTaskExitError();
 80031f0:	f7ff ff22 	bl	8003038 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	e000ed00 	.word	0xe000ed00
 8003204:	410fc271 	.word	0x410fc271
 8003208:	410fc270 	.word	0x410fc270
 800320c:	e000e400 	.word	0xe000e400
 8003210:	200004c8 	.word	0x200004c8
 8003214:	200004cc 	.word	0x200004cc
 8003218:	e000ed20 	.word	0xe000ed20
 800321c:	2000000c 	.word	0x2000000c
 8003220:	e000ef34 	.word	0xe000ef34

08003224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
	__asm volatile
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	607b      	str	r3, [r7, #4]
}
 800323c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800323e:	4b0f      	ldr	r3, [pc, #60]	; (800327c <vPortEnterCritical+0x58>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3301      	adds	r3, #1
 8003244:	4a0d      	ldr	r2, [pc, #52]	; (800327c <vPortEnterCritical+0x58>)
 8003246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <vPortEnterCritical+0x58>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d10f      	bne.n	8003270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <vPortEnterCritical+0x5c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <vPortEnterCritical+0x4c>
	__asm volatile
 800325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325e:	f383 8811 	msr	BASEPRI, r3
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	603b      	str	r3, [r7, #0]
}
 800326c:	bf00      	nop
 800326e:	e7fe      	b.n	800326e <vPortEnterCritical+0x4a>
	}
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	2000000c 	.word	0x2000000c
 8003280:	e000ed04 	.word	0xe000ed04

08003284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <vPortExitCritical+0x50>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10a      	bne.n	80032a8 <vPortExitCritical+0x24>
	__asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	607b      	str	r3, [r7, #4]
}
 80032a4:	bf00      	nop
 80032a6:	e7fe      	b.n	80032a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <vPortExitCritical+0x50>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <vPortExitCritical+0x50>)
 80032b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <vPortExitCritical+0x50>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d105      	bne.n	80032c6 <vPortExitCritical+0x42>
 80032ba:	2300      	movs	r3, #0
 80032bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	2000000c 	.word	0x2000000c
	...

080032e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80032e0:	f3ef 8009 	mrs	r0, PSP
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	4b15      	ldr	r3, [pc, #84]	; (8003340 <pxCurrentTCBConst>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	f01e 0f10 	tst.w	lr, #16
 80032f0:	bf08      	it	eq
 80032f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80032f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032fa:	6010      	str	r0, [r2, #0]
 80032fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003304:	f380 8811 	msr	BASEPRI, r0
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f7ff fb48 	bl	80029a4 <vTaskSwitchContext>
 8003314:	f04f 0000 	mov.w	r0, #0
 8003318:	f380 8811 	msr	BASEPRI, r0
 800331c:	bc09      	pop	{r0, r3}
 800331e:	6819      	ldr	r1, [r3, #0]
 8003320:	6808      	ldr	r0, [r1, #0]
 8003322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003326:	f01e 0f10 	tst.w	lr, #16
 800332a:	bf08      	it	eq
 800332c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003330:	f380 8809 	msr	PSP, r0
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	f3af 8000 	nop.w

08003340 <pxCurrentTCBConst>:
 8003340:	2000039c 	.word	0x2000039c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop

08003348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
	__asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	607b      	str	r3, [r7, #4]
}
 8003360:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8003362:	f001 fc9f 	bl	8004ca4 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003366:	f7ff fa61 	bl	800282c <xTaskIncrementTick>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d006      	beq.n	800337e <xPortSysTickHandler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8003370:	f001 fcf6 	bl	8004d60 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003374:	4b08      	ldr	r3, [pc, #32]	; (8003398 <xPortSysTickHandler+0x50>)
 8003376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	e001      	b.n	8003382 <xPortSysTickHandler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 800337e:	f001 fcd3 	bl	8004d28 <SEGGER_SYSVIEW_RecordExitISR>
 8003382:	2300      	movs	r3, #0
 8003384:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	f383 8811 	msr	BASEPRI, r3
}
 800338c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	e000ed04 	.word	0xe000ed04

0800339c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <vPortSetupTimerInterrupt+0x34>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <vPortSetupTimerInterrupt+0x38>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <vPortSetupTimerInterrupt+0x3c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <vPortSetupTimerInterrupt+0x40>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	099b      	lsrs	r3, r3, #6
 80033b8:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <vPortSetupTimerInterrupt+0x44>)
 80033ba:	3b01      	subs	r3, #1
 80033bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80033be:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <vPortSetupTimerInterrupt+0x34>)
 80033c0:	2207      	movs	r2, #7
 80033c2:	601a      	str	r2, [r3, #0]
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	e000e010 	.word	0xe000e010
 80033d4:	e000e018 	.word	0xe000e018
 80033d8:	20000000 	.word	0x20000000
 80033dc:	10624dd3 	.word	0x10624dd3
 80033e0:	e000e014 	.word	0xe000e014

080033e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80033e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80033f4 <vPortEnableVFP+0x10>
 80033e8:	6801      	ldr	r1, [r0, #0]
 80033ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80033ee:	6001      	str	r1, [r0, #0]
 80033f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80033f2:	bf00      	nop
 80033f4:	e000ed88 	.word	0xe000ed88

080033f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/


	void vPortValidateInterruptPriority( void )
	{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80033fe:	f3ef 8305 	mrs	r3, IPSR
 8003402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b0f      	cmp	r3, #15
 8003408:	d914      	bls.n	8003434 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800340a:	4a17      	ldr	r2, [pc, #92]	; (8003468 <vPortValidateInterruptPriority+0x70>)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003414:	4b15      	ldr	r3, [pc, #84]	; (800346c <vPortValidateInterruptPriority+0x74>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	7afa      	ldrb	r2, [r7, #11]
 800341a:	429a      	cmp	r2, r3
 800341c:	d20a      	bcs.n	8003434 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	607b      	str	r3, [r7, #4]
}
 8003430:	bf00      	nop
 8003432:	e7fe      	b.n	8003432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003434:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <vPortValidateInterruptPriority+0x78>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800343c:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <vPortValidateInterruptPriority+0x7c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d90a      	bls.n	800345a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	603b      	str	r3, [r7, #0]
}
 8003456:	bf00      	nop
 8003458:	e7fe      	b.n	8003458 <vPortValidateInterruptPriority+0x60>
	}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	e000e3f0 	.word	0xe000e3f0
 800346c:	200004c8 	.word	0x200004c8
 8003470:	e000ed0c 	.word	0xe000ed0c
 8003474:	200004cc 	.word	0x200004cc

08003478 <vSetVarulMaxPRIGROUPValuE>:

#if( configASSERT_DEFINED == 1 )

void vSetVarulMaxPRIGROUPValuE( void )
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
	// copy code port.c line 299 to 359

#if( configASSERT_DEFINED == 1 )
{
	volatile uint32_t ulOriginalPriority;
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800347e:	4b27      	ldr	r3, [pc, #156]	; (800351c <vSetVarulMaxPRIGROUPValuE+0xa4>)
 8003480:	60fb      	str	r3, [r7, #12]
	functions can be called.  ISR safe functions are those that end in
	"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
	ensure interrupt entry is as fast and simple as possible.

	Save the interrupt priority value that is about to be clobbered. */
	ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	607b      	str	r3, [r7, #4]

	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	22ff      	movs	r2, #255	; 0xff
 800348e:	701a      	strb	r2, [r3, #0]

	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	70fb      	strb	r3, [r7, #3]

	/* Use the same mask on the maximum system call priority. */
	ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <vSetVarulMaxPRIGROUPValuE+0xa8>)
 80034a4:	701a      	strb	r2, [r3, #0]

	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034a6:	4b1f      	ldr	r3, [pc, #124]	; (8003524 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80034a8:	2207      	movs	r2, #7
 80034aa:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034ac:	e009      	b.n	80034c2 <vSetVarulMaxPRIGROUPValuE+0x4a>
	{
		ulMaxPRIGROUPValue--;
 80034ae:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	4a1b      	ldr	r2, [pc, #108]	; (8003524 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80034b6:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	70fb      	strb	r3, [r7, #3]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ca:	2b80      	cmp	r3, #128	; 0x80
 80034cc:	d0ef      	beq.n	80034ae <vSetVarulMaxPRIGROUPValuE+0x36>
	#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f1c3 0307 	rsb	r3, r3, #7
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d00a      	beq.n	80034f0 <vSetVarulMaxPRIGROUPValuE+0x78>
	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	60bb      	str	r3, [r7, #8]
}
 80034ec:	bf00      	nop
 80034ee:	e7fe      	b.n	80034ee <vSetVarulMaxPRIGROUPValuE+0x76>
	}
	#endif

	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	4a0b      	ldr	r2, [pc, #44]	; (8003524 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80034f8:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003502:	4a08      	ldr	r2, [pc, #32]	; (8003524 <vSetVarulMaxPRIGROUPValuE+0xac>)
 8003504:	6013      	str	r3, [r2, #0]

	/* Restore the clobbered interrupt priority register to its original
	value. */
	*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	b2da      	uxtb	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	701a      	strb	r2, [r3, #0]
}
#endif /* conifgASSERT_DEFINED */


}
 800350e:	bf00      	nop
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	e000e400 	.word	0xe000e400
 8003520:	200004c8 	.word	0x200004c8
 8003524:	200004cc 	.word	0x200004cc

08003528 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	; 0x28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003534:	f7ff f8aa 	bl	800268c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003538:	4b5b      	ldr	r3, [pc, #364]	; (80036a8 <pvPortMalloc+0x180>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003540:	f000 f920 	bl	8003784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003544:	4b59      	ldr	r3, [pc, #356]	; (80036ac <pvPortMalloc+0x184>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4013      	ands	r3, r2
 800354c:	2b00      	cmp	r3, #0
 800354e:	f040 8093 	bne.w	8003678 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01d      	beq.n	8003594 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003558:	2208      	movs	r2, #8
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	2b00      	cmp	r3, #0
 8003568:	d014      	beq.n	8003594 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f023 0307 	bic.w	r3, r3, #7
 8003570:	3308      	adds	r3, #8
 8003572:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <pvPortMalloc+0x6c>
	__asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	617b      	str	r3, [r7, #20]
}
 8003590:	bf00      	nop
 8003592:	e7fe      	b.n	8003592 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d06e      	beq.n	8003678 <pvPortMalloc+0x150>
 800359a:	4b45      	ldr	r3, [pc, #276]	; (80036b0 <pvPortMalloc+0x188>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d869      	bhi.n	8003678 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80035a4:	4b43      	ldr	r3, [pc, #268]	; (80036b4 <pvPortMalloc+0x18c>)
 80035a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80035a8:	4b42      	ldr	r3, [pc, #264]	; (80036b4 <pvPortMalloc+0x18c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035ae:	e004      	b.n	80035ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d903      	bls.n	80035cc <pvPortMalloc+0xa4>
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1f1      	bne.n	80035b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80035cc:	4b36      	ldr	r3, [pc, #216]	; (80036a8 <pvPortMalloc+0x180>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d050      	beq.n	8003678 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2208      	movs	r2, #8
 80035dc:	4413      	add	r3, r2
 80035de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	1ad2      	subs	r2, r2, r3
 80035f0:	2308      	movs	r3, #8
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d91f      	bls.n	8003638 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80035f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <pvPortMalloc+0xf8>
	__asm volatile
 800360a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	613b      	str	r3, [r7, #16]
}
 800361c:	bf00      	nop
 800361e:	e7fe      	b.n	800361e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	1ad2      	subs	r2, r2, r3
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003632:	69b8      	ldr	r0, [r7, #24]
 8003634:	f000 f908 	bl	8003848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003638:	4b1d      	ldr	r3, [pc, #116]	; (80036b0 <pvPortMalloc+0x188>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	4a1b      	ldr	r2, [pc, #108]	; (80036b0 <pvPortMalloc+0x188>)
 8003644:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003646:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <pvPortMalloc+0x188>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <pvPortMalloc+0x190>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d203      	bcs.n	800365a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003652:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <pvPortMalloc+0x188>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <pvPortMalloc+0x190>)
 8003658:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	4b13      	ldr	r3, [pc, #76]	; (80036ac <pvPortMalloc+0x184>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	431a      	orrs	r2, r3
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800366e:	4b13      	ldr	r3, [pc, #76]	; (80036bc <pvPortMalloc+0x194>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3301      	adds	r3, #1
 8003674:	4a11      	ldr	r2, [pc, #68]	; (80036bc <pvPortMalloc+0x194>)
 8003676:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003678:	f7ff f816 	bl	80026a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <pvPortMalloc+0x174>
	__asm volatile
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	60fb      	str	r3, [r7, #12]
}
 8003698:	bf00      	nop
 800369a:	e7fe      	b.n	800369a <pvPortMalloc+0x172>
	return pvReturn;
 800369c:	69fb      	ldr	r3, [r7, #28]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3728      	adds	r7, #40	; 0x28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	200040d8 	.word	0x200040d8
 80036ac:	200040ec 	.word	0x200040ec
 80036b0:	200040dc 	.word	0x200040dc
 80036b4:	200040d0 	.word	0x200040d0
 80036b8:	200040e0 	.word	0x200040e0
 80036bc:	200040e4 	.word	0x200040e4

080036c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d04d      	beq.n	800376e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80036d2:	2308      	movs	r3, #8
 80036d4:	425b      	negs	r3, r3
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4413      	add	r3, r2
 80036da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	4b24      	ldr	r3, [pc, #144]	; (8003778 <vPortFree+0xb8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <vPortFree+0x44>
	__asm volatile
 80036ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	60fb      	str	r3, [r7, #12]
}
 8003700:	bf00      	nop
 8003702:	e7fe      	b.n	8003702 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <vPortFree+0x62>
	__asm volatile
 800370c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003710:	f383 8811 	msr	BASEPRI, r3
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	60bb      	str	r3, [r7, #8]
}
 800371e:	bf00      	nop
 8003720:	e7fe      	b.n	8003720 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	4b14      	ldr	r3, [pc, #80]	; (8003778 <vPortFree+0xb8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4013      	ands	r3, r2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01e      	beq.n	800376e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d11a      	bne.n	800376e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <vPortFree+0xb8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	43db      	mvns	r3, r3
 8003742:	401a      	ands	r2, r3
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003748:	f7fe ffa0 	bl	800268c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <vPortFree+0xbc>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4413      	add	r3, r2
 8003756:	4a09      	ldr	r2, [pc, #36]	; (800377c <vPortFree+0xbc>)
 8003758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800375a:	6938      	ldr	r0, [r7, #16]
 800375c:	f000 f874 	bl	8003848 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003760:	4b07      	ldr	r3, [pc, #28]	; (8003780 <vPortFree+0xc0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3301      	adds	r3, #1
 8003766:	4a06      	ldr	r2, [pc, #24]	; (8003780 <vPortFree+0xc0>)
 8003768:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800376a:	f7fe ff9d 	bl	80026a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800376e:	bf00      	nop
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	200040ec 	.word	0x200040ec
 800377c:	200040dc 	.word	0x200040dc
 8003780:	200040e8 	.word	0x200040e8

08003784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800378a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800378e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003790:	4b27      	ldr	r3, [pc, #156]	; (8003830 <prvHeapInit+0xac>)
 8003792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00c      	beq.n	80037b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3307      	adds	r3, #7
 80037a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0307 	bic.w	r3, r3, #7
 80037aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	4a1f      	ldr	r2, [pc, #124]	; (8003830 <prvHeapInit+0xac>)
 80037b4:	4413      	add	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80037bc:	4a1d      	ldr	r2, [pc, #116]	; (8003834 <prvHeapInit+0xb0>)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80037c2:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <prvHeapInit+0xb0>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	4413      	add	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80037d0:	2208      	movs	r2, #8
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0307 	bic.w	r3, r3, #7
 80037de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4a15      	ldr	r2, [pc, #84]	; (8003838 <prvHeapInit+0xb4>)
 80037e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80037e6:	4b14      	ldr	r3, [pc, #80]	; (8003838 <prvHeapInit+0xb4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2200      	movs	r2, #0
 80037ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <prvHeapInit+0xb4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	1ad2      	subs	r2, r2, r3
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <prvHeapInit+0xb4>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	4a0a      	ldr	r2, [pc, #40]	; (800383c <prvHeapInit+0xb8>)
 8003812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	4a09      	ldr	r2, [pc, #36]	; (8003840 <prvHeapInit+0xbc>)
 800381a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800381c:	4b09      	ldr	r3, [pc, #36]	; (8003844 <prvHeapInit+0xc0>)
 800381e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003822:	601a      	str	r2, [r3, #0]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	200004d0 	.word	0x200004d0
 8003834:	200040d0 	.word	0x200040d0
 8003838:	200040d8 	.word	0x200040d8
 800383c:	200040e0 	.word	0x200040e0
 8003840:	200040dc 	.word	0x200040dc
 8003844:	200040ec 	.word	0x200040ec

08003848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003850:	4b28      	ldr	r3, [pc, #160]	; (80038f4 <prvInsertBlockIntoFreeList+0xac>)
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	e002      	b.n	800385c <prvInsertBlockIntoFreeList+0x14>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	429a      	cmp	r2, r3
 8003864:	d8f7      	bhi.n	8003856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	4413      	add	r3, r2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	429a      	cmp	r2, r3
 8003876:	d108      	bne.n	800388a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	441a      	add	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	441a      	add	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d118      	bne.n	80038d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <prvInsertBlockIntoFreeList+0xb0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d00d      	beq.n	80038c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	441a      	add	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	e008      	b.n	80038d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80038c6:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <prvInsertBlockIntoFreeList+0xb0>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	e003      	b.n	80038d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d002      	beq.n	80038e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	200040d0 	.word	0x200040d0
 80038f8:	200040d8 	.word	0x200040d8

080038fc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003900:	4803      	ldr	r0, [pc, #12]	; (8003910 <_cbSendSystemDesc+0x14>)
 8003902:	f001 f979 	bl	8004bf8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003906:	4803      	ldr	r0, [pc, #12]	; (8003914 <_cbSendSystemDesc+0x18>)
 8003908:	f001 f976 	bl	8004bf8 <SEGGER_SYSVIEW_SendSysDesc>
}
 800390c:	bf00      	nop
 800390e:	bd80      	pop	{r7, pc}
 8003910:	08005e78 	.word	0x08005e78
 8003914:	08005eb0 	.word	0x08005eb0

08003918 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <SEGGER_SYSVIEW_Conf+0x20>)
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <SEGGER_SYSVIEW_Conf+0x20>)
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <SEGGER_SYSVIEW_Conf+0x24>)
 8003926:	4a06      	ldr	r2, [pc, #24]	; (8003940 <SEGGER_SYSVIEW_Conf+0x28>)
 8003928:	f000 fd5c 	bl	80043e4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800392c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003930:	f000 fd96 	bl	8004460 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003934:	bf00      	nop
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000000 	.word	0x20000000
 800393c:	080038fd 	.word	0x080038fd
 8003940:	08005f50 	.word	0x08005f50

08003944 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003946:	b085      	sub	sp, #20
 8003948:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800394a:	2300      	movs	r3, #0
 800394c:	607b      	str	r3, [r7, #4]
 800394e:	e033      	b.n	80039b8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003950:	491e      	ldr	r1, [pc, #120]	; (80039cc <_cbSendTaskList+0x88>)
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	491a      	ldr	r1, [pc, #104]	; (80039cc <_cbSendTaskList+0x88>)
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	3304      	adds	r3, #4
 8003970:	6819      	ldr	r1, [r3, #0]
 8003972:	4c16      	ldr	r4, [pc, #88]	; (80039cc <_cbSendTaskList+0x88>)
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4423      	add	r3, r4
 8003980:	3308      	adds	r3, #8
 8003982:	681c      	ldr	r4, [r3, #0]
 8003984:	4d11      	ldr	r5, [pc, #68]	; (80039cc <_cbSendTaskList+0x88>)
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	442b      	add	r3, r5
 8003992:	330c      	adds	r3, #12
 8003994:	681d      	ldr	r5, [r3, #0]
 8003996:	4e0d      	ldr	r6, [pc, #52]	; (80039cc <_cbSendTaskList+0x88>)
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4433      	add	r3, r6
 80039a4:	3310      	adds	r3, #16
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	462b      	mov	r3, r5
 80039ac:	4622      	mov	r2, r4
 80039ae:	f000 f8bd 	bl	8003b2c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3301      	adds	r3, #1
 80039b6:	607b      	str	r3, [r7, #4]
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <_cbSendTaskList+0x8c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d3c6      	bcc.n	8003950 <_cbSendTaskList+0xc>
  }
}
 80039c2:	bf00      	nop
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039cc:	200040f0 	.word	0x200040f0
 80039d0:	20004190 	.word	0x20004190

080039d4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80039d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80039dc:	f7fe ff14 	bl	8002808 <xTaskGetTickCountFromISR>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2200      	movs	r2, #0
 80039e4:	469a      	mov	sl, r3
 80039e6:	4693      	mov	fp, r2
 80039e8:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80039ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	f04f 0a00 	mov.w	sl, #0
 80039f8:	f04f 0b00 	mov.w	fp, #0
 80039fc:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003a00:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003a04:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003a08:	4652      	mov	r2, sl
 8003a0a:	465b      	mov	r3, fp
 8003a0c:	1a14      	subs	r4, r2, r0
 8003a0e:	eb63 0501 	sbc.w	r5, r3, r1
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	00ab      	lsls	r3, r5, #2
 8003a1c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003a20:	00a2      	lsls	r2, r4, #2
 8003a22:	4614      	mov	r4, r2
 8003a24:	461d      	mov	r5, r3
 8003a26:	eb14 0800 	adds.w	r8, r4, r0
 8003a2a:	eb45 0901 	adc.w	r9, r5, r1
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a42:	4690      	mov	r8, r2
 8003a44:	4699      	mov	r9, r3
 8003a46:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003a4a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003a4e:	4610      	mov	r0, r2
 8003a50:	4619      	mov	r1, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003a5c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003a6a:	2205      	movs	r2, #5
 8003a6c:	492b      	ldr	r1, [pc, #172]	; (8003b1c <SYSVIEW_AddTask+0xc0>)
 8003a6e:	68b8      	ldr	r0, [r7, #8]
 8003a70:	f001 fd47 	bl	8005502 <memcmp>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d04b      	beq.n	8003b12 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003a7a:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <SYSVIEW_AddTask+0xc4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b07      	cmp	r3, #7
 8003a80:	d903      	bls.n	8003a8a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003a82:	4828      	ldr	r0, [pc, #160]	; (8003b24 <SYSVIEW_AddTask+0xc8>)
 8003a84:	f001 fbbe 	bl	8005204 <SEGGER_SYSVIEW_Warn>
    return;
 8003a88:	e044      	b.n	8003b14 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003a8a:	4b25      	ldr	r3, [pc, #148]	; (8003b20 <SYSVIEW_AddTask+0xc4>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	4926      	ldr	r1, [pc, #152]	; (8003b28 <SYSVIEW_AddTask+0xcc>)
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <SYSVIEW_AddTask+0xc4>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4921      	ldr	r1, [pc, #132]	; (8003b28 <SYSVIEW_AddTask+0xcc>)
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	3304      	adds	r3, #4
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <SYSVIEW_AddTask+0xc4>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	491b      	ldr	r1, [pc, #108]	; (8003b28 <SYSVIEW_AddTask+0xcc>)
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003aca:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <SYSVIEW_AddTask+0xc4>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	4916      	ldr	r1, [pc, #88]	; (8003b28 <SYSVIEW_AddTask+0xcc>)
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	330c      	adds	r3, #12
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <SYSVIEW_AddTask+0xc4>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4910      	ldr	r1, [pc, #64]	; (8003b28 <SYSVIEW_AddTask+0xcc>)
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	3310      	adds	r3, #16
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <SYSVIEW_AddTask+0xc4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3301      	adds	r3, #1
 8003afc:	4a08      	ldr	r2, [pc, #32]	; (8003b20 <SYSVIEW_AddTask+0xc4>)
 8003afe:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f80e 	bl	8003b2c <SYSVIEW_SendTaskInfo>
 8003b10:	e000      	b.n	8003b14 <SYSVIEW_AddTask+0xb8>
    return;
 8003b12:	bf00      	nop

}
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	08005ec0 	.word	0x08005ec0
 8003b20:	20004190 	.word	0x20004190
 8003b24:	08005ec8 	.word	0x08005ec8
 8003b28:	200040f0 	.word	0x200040f0

08003b2c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	; 0x28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003b3a:	f107 0314 	add.w	r3, r7, #20
 8003b3e:	2214      	movs	r2, #20
 8003b40:	2100      	movs	r1, #0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f001 fcfb 	bl	800553e <memset>
  TaskInfo.TaskID     = TaskID;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003b5c:	f107 0314 	add.w	r3, r7, #20
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 ff4f 	bl	8004a04 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003b66:	bf00      	nop
 8003b68:	3728      	adds	r7, #40	; 0x28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8003b76:	4b21      	ldr	r3, [pc, #132]	; (8003bfc <_DoInit+0x8c>)
 8003b78:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2203      	movs	r2, #3
 8003b84:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <_DoInit+0x90>)
 8003b8a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <_DoInit+0x94>)
 8003b90:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b98:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a14      	ldr	r2, [pc, #80]	; (8003c00 <_DoInit+0x90>)
 8003bb0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a14      	ldr	r2, [pc, #80]	; (8003c08 <_DoInit+0x98>)
 8003bb6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2210      	movs	r2, #16
 8003bbc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3307      	adds	r3, #7
 8003bd4:	4a0d      	ldr	r2, [pc, #52]	; (8003c0c <_DoInit+0x9c>)
 8003bd6:	6810      	ldr	r0, [r2, #0]
 8003bd8:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a0c      	ldr	r2, [pc, #48]	; (8003c10 <_DoInit+0xa0>)
 8003bde:	6810      	ldr	r0, [r2, #0]
 8003be0:	6018      	str	r0, [r3, #0]
 8003be2:	8891      	ldrh	r1, [r2, #4]
 8003be4:	7992      	ldrb	r2, [r2, #6]
 8003be6:	8099      	strh	r1, [r3, #4]
 8003be8:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	719a      	strb	r2, [r3, #6]
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	20004194 	.word	0x20004194
 8003c00:	08005f18 	.word	0x08005f18
 8003c04:	2000423c 	.word	0x2000423c
 8003c08:	2000463c 	.word	0x2000463c
 8003c0c:	08005f24 	.word	0x08005f24
 8003c10:	08005f28 	.word	0x08005f28

08003c14 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	; 0x28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8003c20:	4b3c      	ldr	r3, [pc, #240]	; (8003d14 <SEGGER_RTT_ReadNoLock+0x100>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <SEGGER_RTT_ReadNoLock+0x18>
 8003c28:	f7ff ffa2 	bl	8003b70 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	4413      	add	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	3360      	adds	r3, #96	; 0x60
 8003c38:	4a36      	ldr	r2, [pc, #216]	; (8003d14 <SEGGER_RTT_ReadNoLock+0x100>)
 8003c3a:	4413      	add	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003c52:	6a3a      	ldr	r2, [r7, #32]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d92a      	bls.n	8003cb0 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	bf28      	it	cs
 8003c6c:	4613      	movcs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	4413      	add	r3, r2
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	69f8      	ldr	r0, [r7, #28]
 8003c7e:	f001 fc50 	bl	8005522 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c9a:	6a3a      	ldr	r2, [r7, #32]
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	6a3a      	ldr	r2, [r7, #32]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d101      	bne.n	8003cb0 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8003cac:	2300      	movs	r3, #0
 8003cae:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	bf28      	it	cs
 8003cc0:	4613      	movcs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d018      	beq.n	8003cfc <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	69f8      	ldr	r0, [r7, #28]
 8003cd8:	f001 fc23 	bl	8005522 <memcpy>
    NumBytesRead += NumBytesRem;
 8003cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4413      	add	r3, r2
 8003cea:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003cf4:	6a3a      	ldr	r2, [r7, #32]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	6a3a      	ldr	r2, [r7, #32]
 8003d06:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3728      	adds	r7, #40	; 0x28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20004194 	.word	0x20004194

08003d18 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	; 0x28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	4413      	add	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4a3f      	ldr	r2, [pc, #252]	; (8003e34 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8003d36:	4413      	add	r3, r2
 8003d38:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d854      	bhi.n	8003df8 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d30f      	bcc.n	8003d82 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	4413      	add	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 fbd7 	bl	8005522 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	441a      	add	r2, r3
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e054      	b.n	8003e2c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	4413      	add	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d34b      	bcc.n	8003e2a <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d90e      	bls.n	8003dc2 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	4413      	add	r3, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003db0:	4618      	mov	r0, r3
 8003db2:	f001 fbb6 	bl	8005522 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	441a      	add	r2, r3
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	60da      	str	r2, [r3, #12]
 8003dc0:	e018      	b.n	8003df4 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	4413      	add	r3, r2
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f001 fba7 	bl	8005522 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	6858      	ldr	r0, [r3, #4]
 8003dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	18d1      	adds	r1, r2, r3
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	f001 fb9c 	bl	8005522 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad2      	subs	r2, r2, r3
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e019      	b.n	8003e2c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8003df8:	69fa      	ldr	r2, [r7, #28]
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d30f      	bcc.n	8003e2a <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	4413      	add	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 fb83 	bl	8005522 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	441a      	add	r2, r3
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3728      	adds	r7, #40	; 0x28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	20004194 	.word	0x20004194

08003e38 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003e46:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8003e4e:	f7ff fe8f 	bl	8003b70 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8003e52:	4b2d      	ldr	r3, [pc, #180]	; (8003f08 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	461a      	mov	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d24c      	bcs.n	8003ef8 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8003e5e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e62:	f04f 0120 	mov.w	r1, #32
 8003e66:	f381 8811 	msr	BASEPRI, r1
 8003e6a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d032      	beq.n	8003ed8 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8003e72:	4925      	ldr	r1, [pc, #148]	; (8003f08 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	440b      	add	r3, r1
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003e86:	4920      	ldr	r1, [pc, #128]	; (8003f08 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	4413      	add	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	440b      	add	r3, r1
 8003e96:	3304      	adds	r3, #4
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003e9c:	491a      	ldr	r1, [pc, #104]	; (8003f08 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	4413      	add	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	440b      	add	r3, r1
 8003eaa:	3320      	adds	r3, #32
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8003eb0:	4915      	ldr	r1, [pc, #84]	; (8003f08 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	4413      	add	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	440b      	add	r3, r1
 8003ebe:	3328      	adds	r3, #40	; 0x28
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8003ec4:	4910      	ldr	r1, [pc, #64]	; (8003f08 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	4413      	add	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	440b      	add	r3, r1
 8003ed2:	3324      	adds	r3, #36	; 0x24
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8003ed8:	490b      	ldr	r1, [pc, #44]	; (8003f08 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4613      	mov	r3, r2
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	4413      	add	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	440b      	add	r3, r1
 8003ee6:	332c      	adds	r3, #44	; 0x2c
 8003ee8:	6a3a      	ldr	r2, [r7, #32]
 8003eea:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	e002      	b.n	8003efe <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8003efc:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003efe:	697b      	ldr	r3, [r7, #20]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20004194 	.word	0x20004194

08003f0c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003f1a:	4b30      	ldr	r3, [pc, #192]	; (8003fdc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8003f22:	f7ff fe25 	bl	8003b70 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8003f26:	4b2d      	ldr	r3, [pc, #180]	; (8003fdc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d24b      	bcs.n	8003fca <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8003f32:	f3ef 8311 	mrs	r3, BASEPRI
 8003f36:	f04f 0120 	mov.w	r1, #32
 8003f3a:	f381 8811 	msr	BASEPRI, r1
 8003f3e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d031      	beq.n	8003faa <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8003f46:	4925      	ldr	r1, [pc, #148]	; (8003fdc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	4413      	add	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	440b      	add	r3, r1
 8003f54:	3360      	adds	r3, #96	; 0x60
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003f5a:	4920      	ldr	r1, [pc, #128]	; (8003fdc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	4413      	add	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	440b      	add	r3, r1
 8003f68:	3364      	adds	r3, #100	; 0x64
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003f6e:	491b      	ldr	r1, [pc, #108]	; (8003fdc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4613      	mov	r3, r2
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	4413      	add	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	440b      	add	r3, r1
 8003f7c:	3368      	adds	r3, #104	; 0x68
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8003f82:	4916      	ldr	r1, [pc, #88]	; (8003fdc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4613      	mov	r3, r2
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	4413      	add	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	440b      	add	r3, r1
 8003f90:	3370      	adds	r3, #112	; 0x70
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8003f96:	4911      	ldr	r1, [pc, #68]	; (8003fdc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4413      	add	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	440b      	add	r3, r1
 8003fa4:	336c      	adds	r3, #108	; 0x6c
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8003faa:	490c      	ldr	r1, [pc, #48]	; (8003fdc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	440b      	add	r3, r1
 8003fb8:	3374      	adds	r3, #116	; 0x74
 8003fba:	6a3a      	ldr	r2, [r7, #32]
 8003fbc:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	e002      	b.n	8003fd0 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8003fca:	f04f 33ff 	mov.w	r3, #4294967295
 8003fce:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003fd0:	697b      	ldr	r3, [r7, #20]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20004194 	.word	0x20004194

08003fe0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003ff0:	e002      	b.n	8003ff8 <_EncodeStr+0x18>
    Len++;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f6      	bne.n	8003ff2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	429a      	cmp	r2, r3
 800400a:	d901      	bls.n	8004010 <_EncodeStr+0x30>
    Len = Limit;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	2bfe      	cmp	r3, #254	; 0xfe
 8004014:	d806      	bhi.n	8004024 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	60fa      	str	r2, [r7, #12]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]
 8004022:	e011      	b.n	8004048 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	60fa      	str	r2, [r7, #12]
 800402a:	22ff      	movs	r2, #255	; 0xff
 800402c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	60fa      	str	r2, [r7, #12]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	0a19      	lsrs	r1, r3, #8
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	60fa      	str	r2, [r7, #12]
 8004044:	b2ca      	uxtb	r2, r1
 8004046:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800404c:	e00a      	b.n	8004064 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	1c53      	adds	r3, r2, #1
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	1c59      	adds	r1, r3, #1
 8004058:	60f9      	str	r1, [r7, #12]
 800405a:	7812      	ldrb	r2, [r2, #0]
 800405c:	701a      	strb	r2, [r3, #0]
    n++;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	3301      	adds	r3, #1
 8004062:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	429a      	cmp	r2, r3
 800406a:	d3f0      	bcc.n	800404e <_EncodeStr+0x6e>
  }
  return pPayload;
 800406c:	68fb      	ldr	r3, [r7, #12]
}
 800406e:	4618      	mov	r0, r3
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3304      	adds	r3, #4
}
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800409a:	1cfb      	adds	r3, r7, #3
 800409c:	2201      	movs	r2, #1
 800409e:	4619      	mov	r1, r3
 80040a0:	2001      	movs	r0, #1
 80040a2:	f7ff fdb7 	bl	8003c14 <SEGGER_RTT_ReadNoLock>
 80040a6:	4603      	mov	r3, r0
 80040a8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	dd4c      	ble.n	800414a <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	2b07      	cmp	r3, #7
 80040b4:	dc16      	bgt.n	80040e4 <_HandleIncomingPacket+0x50>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	dd3c      	ble.n	8004134 <_HandleIncomingPacket+0xa0>
 80040ba:	3b01      	subs	r3, #1
 80040bc:	2b06      	cmp	r3, #6
 80040be:	d839      	bhi.n	8004134 <_HandleIncomingPacket+0xa0>
 80040c0:	a201      	add	r2, pc, #4	; (adr r2, 80040c8 <_HandleIncomingPacket+0x34>)
 80040c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c6:	bf00      	nop
 80040c8:	080040eb 	.word	0x080040eb
 80040cc:	080040f1 	.word	0x080040f1
 80040d0:	080040f7 	.word	0x080040f7
 80040d4:	080040fd 	.word	0x080040fd
 80040d8:	08004103 	.word	0x08004103
 80040dc:	08004109 	.word	0x08004109
 80040e0:	0800410f 	.word	0x0800410f
 80040e4:	2b80      	cmp	r3, #128	; 0x80
 80040e6:	d015      	beq.n	8004114 <_HandleIncomingPacket+0x80>
 80040e8:	e024      	b.n	8004134 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80040ea:	f000 fb0f 	bl	800470c <SEGGER_SYSVIEW_Start>
      break;
 80040ee:	e031      	b.n	8004154 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80040f0:	f000 fbc8 	bl	8004884 <SEGGER_SYSVIEW_Stop>
      break;
 80040f4:	e02e      	b.n	8004154 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80040f6:	f000 fda3 	bl	8004c40 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80040fa:	e02b      	b.n	8004154 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80040fc:	f000 fd68 	bl	8004bd0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004100:	e028      	b.n	8004154 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004102:	f000 fbe5 	bl	80048d0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004106:	e025      	b.n	8004154 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004108:	f001 f83e 	bl	8005188 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800410c:	e022      	b.n	8004154 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800410e:	f001 f81d 	bl	800514c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004112:	e01f      	b.n	8004154 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004114:	1cfb      	adds	r3, r7, #3
 8004116:	2201      	movs	r2, #1
 8004118:	4619      	mov	r1, r3
 800411a:	2001      	movs	r0, #1
 800411c:	f7ff fd7a 	bl	8003c14 <SEGGER_RTT_ReadNoLock>
 8004120:	4603      	mov	r3, r0
 8004122:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	dd11      	ble.n	800414e <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	4618      	mov	r0, r3
 800412e:	f000 ff8d 	bl	800504c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004132:	e00c      	b.n	800414e <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	b25b      	sxtb	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	da0a      	bge.n	8004152 <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800413c:	1cfb      	adds	r3, r7, #3
 800413e:	2201      	movs	r2, #1
 8004140:	4619      	mov	r1, r3
 8004142:	2001      	movs	r0, #1
 8004144:	f7ff fd66 	bl	8003c14 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004148:	e003      	b.n	8004152 <_HandleIncomingPacket+0xbe>
    }
  }
 800414a:	bf00      	nop
 800414c:	e002      	b.n	8004154 <_HandleIncomingPacket+0xc0>
      break;
 800414e:	bf00      	nop
 8004150:	e000      	b.n	8004154 <_HandleIncomingPacket+0xc0>
      break;
 8004152:	bf00      	nop
}
 8004154:	bf00      	nop
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800415c:	b580      	push	{r7, lr}
 800415e:	b08c      	sub	sp, #48	; 0x30
 8004160:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004162:	2301      	movs	r3, #1
 8004164:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004166:	1d3b      	adds	r3, r7, #4
 8004168:	3301      	adds	r3, #1
 800416a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004170:	4b30      	ldr	r3, [pc, #192]	; (8004234 <_TrySendOverflowPacket+0xd8>)
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
 8004176:	e00b      	b.n	8004190 <_TrySendOverflowPacket+0x34>
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	b2da      	uxtb	r2, r3
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	1c59      	adds	r1, r3, #1
 8004180:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004182:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	09db      	lsrs	r3, r3, #7
 800418e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004192:	2b7f      	cmp	r3, #127	; 0x7f
 8004194:	d8f0      	bhi.n	8004178 <_TrySendOverflowPacket+0x1c>
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800419c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80041a6:	4b24      	ldr	r3, [pc, #144]	; (8004238 <_TrySendOverflowPacket+0xdc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80041ac:	4b21      	ldr	r3, [pc, #132]	; (8004234 <_TrySendOverflowPacket+0xd8>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	623b      	str	r3, [r7, #32]
 80041be:	e00b      	b.n	80041d8 <_TrySendOverflowPacket+0x7c>
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	1c59      	adds	r1, r3, #1
 80041c8:	6279      	str	r1, [r7, #36]	; 0x24
 80041ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	09db      	lsrs	r3, r3, #7
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	2b7f      	cmp	r3, #127	; 0x7f
 80041dc:	d8f0      	bhi.n	80041c0 <_TrySendOverflowPacket+0x64>
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	627a      	str	r2, [r7, #36]	; 0x24
 80041e4:	6a3a      	ldr	r2, [r7, #32]
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80041ee:	1d3b      	adds	r3, r7, #4
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	1d3b      	adds	r3, r7, #4
 80041f8:	4619      	mov	r1, r3
 80041fa:	2001      	movs	r0, #1
 80041fc:	f7ff fd8c 	bl	8003d18 <SEGGER_RTT_WriteSkipNoLock>
 8004200:	4603      	mov	r3, r0
 8004202:	613b      	str	r3, [r7, #16]
  if (Status) {
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800420a:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <_TrySendOverflowPacket+0xd8>)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004210:	4b08      	ldr	r3, [pc, #32]	; (8004234 <_TrySendOverflowPacket+0xd8>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	3b01      	subs	r3, #1
 8004216:	b2da      	uxtb	r2, r3
 8004218:	4b06      	ldr	r3, [pc, #24]	; (8004234 <_TrySendOverflowPacket+0xd8>)
 800421a:	701a      	strb	r2, [r3, #0]
 800421c:	e004      	b.n	8004228 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800421e:	4b05      	ldr	r3, [pc, #20]	; (8004234 <_TrySendOverflowPacket+0xd8>)
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	3301      	adds	r3, #1
 8004224:	4a03      	ldr	r2, [pc, #12]	; (8004234 <_TrySendOverflowPacket+0xd8>)
 8004226:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004228:	693b      	ldr	r3, [r7, #16]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3730      	adds	r7, #48	; 0x30
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20006654 	.word	0x20006654
 8004238:	e0001004 	.word	0xe0001004

0800423c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	; 0x28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004248:	4b63      	ldr	r3, [pc, #396]	; (80043d8 <_SendPacket+0x19c>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d010      	beq.n	8004272 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004250:	4b61      	ldr	r3, [pc, #388]	; (80043d8 <_SendPacket+0x19c>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80a1 	beq.w	800439c <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800425a:	4b5f      	ldr	r3, [pc, #380]	; (80043d8 <_SendPacket+0x19c>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d109      	bne.n	8004276 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004262:	f7ff ff7b 	bl	800415c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004266:	4b5c      	ldr	r3, [pc, #368]	; (80043d8 <_SendPacket+0x19c>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b01      	cmp	r3, #1
 800426c:	f040 8098 	bne.w	80043a0 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8004270:	e001      	b.n	8004276 <_SendPacket+0x3a>
    goto Send;
 8004272:	bf00      	nop
 8004274:	e000      	b.n	8004278 <_SendPacket+0x3c>
Send:
 8004276:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b1f      	cmp	r3, #31
 800427c:	d809      	bhi.n	8004292 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800427e:	4b56      	ldr	r3, [pc, #344]	; (80043d8 <_SendPacket+0x19c>)
 8004280:	69da      	ldr	r2, [r3, #28]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	f040 8089 	bne.w	80043a4 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b17      	cmp	r3, #23
 8004296:	d807      	bhi.n	80042a8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3b01      	subs	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	e03d      	b.n	8004324 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b7f      	cmp	r3, #127	; 0x7f
 80042b4:	d912      	bls.n	80042dc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	09da      	lsrs	r2, r3, #7
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3b01      	subs	r3, #1
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	3a01      	subs	r2, #1
 80042ce:	60fa      	str	r2, [r7, #12]
 80042d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	e006      	b.n	80042ea <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3b01      	subs	r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b7f      	cmp	r3, #127	; 0x7f
 80042ee:	d912      	bls.n	8004316 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	09da      	lsrs	r2, r3, #7
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	3a01      	subs	r2, #1
 8004308:	60fa      	str	r2, [r7, #12]
 800430a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800430e:	b2da      	uxtb	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	e006      	b.n	8004324 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3b01      	subs	r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004324:	4b2d      	ldr	r3, [pc, #180]	; (80043dc <_SendPacket+0x1a0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800432a:	4b2b      	ldr	r3, [pc, #172]	; (80043d8 <_SendPacket+0x19c>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	623b      	str	r3, [r7, #32]
 800433c:	e00b      	b.n	8004356 <_SendPacket+0x11a>
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	b2da      	uxtb	r2, r3
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	1c59      	adds	r1, r3, #1
 8004346:	6279      	str	r1, [r7, #36]	; 0x24
 8004348:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	701a      	strb	r2, [r3, #0]
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	09db      	lsrs	r3, r3, #7
 8004354:	623b      	str	r3, [r7, #32]
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	2b7f      	cmp	r3, #127	; 0x7f
 800435a:	d8f0      	bhi.n	800433e <_SendPacket+0x102>
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	627a      	str	r2, [r7, #36]	; 0x24
 8004362:	6a3a      	ldr	r2, [r7, #32]
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	461a      	mov	r2, r3
 8004374:	68f9      	ldr	r1, [r7, #12]
 8004376:	2001      	movs	r0, #1
 8004378:	f7ff fcce 	bl	8003d18 <SEGGER_RTT_WriteSkipNoLock>
 800437c:	4603      	mov	r3, r0
 800437e:	613b      	str	r3, [r7, #16]
  if (Status) {
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004386:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <_SendPacket+0x19c>)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	60d3      	str	r3, [r2, #12]
 800438c:	e00b      	b.n	80043a6 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800438e:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <_SendPacket+0x19c>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	3301      	adds	r3, #1
 8004394:	b2da      	uxtb	r2, r3
 8004396:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <_SendPacket+0x19c>)
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	e004      	b.n	80043a6 <_SendPacket+0x16a>
    goto SendDone;
 800439c:	bf00      	nop
 800439e:	e002      	b.n	80043a6 <_SendPacket+0x16a>
      goto SendDone;
 80043a0:	bf00      	nop
 80043a2:	e000      	b.n	80043a6 <_SendPacket+0x16a>
      goto SendDone;
 80043a4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80043a6:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <_SendPacket+0x1a4>)
 80043a8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80043ac:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <_SendPacket+0x1a4>)
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d00b      	beq.n	80043ce <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80043b6:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <_SendPacket+0x19c>)
 80043b8:	789b      	ldrb	r3, [r3, #2]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d107      	bne.n	80043ce <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <_SendPacket+0x19c>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80043c4:	f7ff fe66 	bl	8004094 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <_SendPacket+0x19c>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80043ce:	bf00      	nop
 80043d0:	3728      	adds	r7, #40	; 0x28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20006654 	.word	0x20006654
 80043dc:	e0001004 	.word	0xe0001004
 80043e0:	20004194 	.word	0x20004194

080043e4 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80043f2:	2300      	movs	r3, #0
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043fa:	4a14      	ldr	r2, [pc, #80]	; (800444c <SEGGER_SYSVIEW_Init+0x68>)
 80043fc:	4914      	ldr	r1, [pc, #80]	; (8004450 <SEGGER_SYSVIEW_Init+0x6c>)
 80043fe:	2001      	movs	r0, #1
 8004400:	f7ff fd1a 	bl	8003e38 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004404:	2300      	movs	r3, #0
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	2308      	movs	r3, #8
 800440a:	4a12      	ldr	r2, [pc, #72]	; (8004454 <SEGGER_SYSVIEW_Init+0x70>)
 800440c:	4910      	ldr	r1, [pc, #64]	; (8004450 <SEGGER_SYSVIEW_Init+0x6c>)
 800440e:	2001      	movs	r0, #1
 8004410:	f7ff fd7c 	bl	8003f0c <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004414:	4b10      	ldr	r3, [pc, #64]	; (8004458 <SEGGER_SYSVIEW_Init+0x74>)
 8004416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800441a:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <SEGGER_SYSVIEW_Init+0x78>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0d      	ldr	r2, [pc, #52]	; (8004458 <SEGGER_SYSVIEW_Init+0x74>)
 8004422:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004424:	4a0c      	ldr	r2, [pc, #48]	; (8004458 <SEGGER_SYSVIEW_Init+0x74>)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800442a:	4a0b      	ldr	r2, [pc, #44]	; (8004458 <SEGGER_SYSVIEW_Init+0x74>)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004430:	4a09      	ldr	r2, [pc, #36]	; (8004458 <SEGGER_SYSVIEW_Init+0x74>)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004436:	4a08      	ldr	r2, [pc, #32]	; (8004458 <SEGGER_SYSVIEW_Init+0x74>)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <SEGGER_SYSVIEW_Init+0x74>)
 800443e:	2200      	movs	r2, #0
 8004440:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	2000464c 	.word	0x2000464c
 8004450:	08005f30 	.word	0x08005f30
 8004454:	2000664c 	.word	0x2000664c
 8004458:	20006654 	.word	0x20006654
 800445c:	e0001004 	.word	0xe0001004

08004460 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004468:	4a04      	ldr	r2, [pc, #16]	; (800447c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6113      	str	r3, [r2, #16]
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20006654 	.word	0x20006654

08004480 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004488:	f3ef 8311 	mrs	r3, BASEPRI
 800448c:	f04f 0120 	mov.w	r1, #32
 8004490:	f381 8811 	msr	BASEPRI, r1
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	4808      	ldr	r0, [pc, #32]	; (80044b8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004498:	f7ff fdef 	bl	800407a <_PreparePacket>
 800449c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	68b8      	ldr	r0, [r7, #8]
 80044a4:	f7ff feca 	bl	800423c <_SendPacket>
  RECORD_END();
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f383 8811 	msr	BASEPRI, r3
}
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20006684 	.word	0x20006684

080044bc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80044c6:	f3ef 8311 	mrs	r3, BASEPRI
 80044ca:	f04f 0120 	mov.w	r1, #32
 80044ce:	f381 8811 	msr	BASEPRI, r1
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	4816      	ldr	r0, [pc, #88]	; (8004530 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80044d6:	f7ff fdd0 	bl	800407a <_PreparePacket>
 80044da:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	61fb      	str	r3, [r7, #28]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	e00b      	b.n	8004502 <SEGGER_SYSVIEW_RecordU32+0x46>
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	1c59      	adds	r1, r3, #1
 80044f2:	61f9      	str	r1, [r7, #28]
 80044f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	701a      	strb	r2, [r3, #0]
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	09db      	lsrs	r3, r3, #7
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	2b7f      	cmp	r3, #127	; 0x7f
 8004506:	d8f0      	bhi.n	80044ea <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	61fa      	str	r2, [r7, #28]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	68f9      	ldr	r1, [r7, #12]
 800451c:	6938      	ldr	r0, [r7, #16]
 800451e:	f7ff fe8d 	bl	800423c <_SendPacket>
  RECORD_END();
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f383 8811 	msr	BASEPRI, r3
}
 8004528:	bf00      	nop
 800452a:	3720      	adds	r7, #32
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20006684 	.word	0x20006684

08004534 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b08c      	sub	sp, #48	; 0x30
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004540:	f3ef 8311 	mrs	r3, BASEPRI
 8004544:	f04f 0120 	mov.w	r1, #32
 8004548:	f381 8811 	msr	BASEPRI, r1
 800454c:	61fb      	str	r3, [r7, #28]
 800454e:	4825      	ldr	r0, [pc, #148]	; (80045e4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004550:	f7ff fd93 	bl	800407a <_PreparePacket>
 8004554:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
 8004562:	e00b      	b.n	800457c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	b2da      	uxtb	r2, r3
 8004568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456a:	1c59      	adds	r1, r3, #1
 800456c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800456e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	09db      	lsrs	r3, r3, #7
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	2b7f      	cmp	r3, #127	; 0x7f
 8004580:	d8f0      	bhi.n	8004564 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]
 800458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004590:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	623b      	str	r3, [r7, #32]
 800459a:	e00b      	b.n	80045b4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	1c59      	adds	r1, r3, #1
 80045a4:	6279      	str	r1, [r7, #36]	; 0x24
 80045a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	09db      	lsrs	r3, r3, #7
 80045b2:	623b      	str	r3, [r7, #32]
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	2b7f      	cmp	r3, #127	; 0x7f
 80045b8:	d8f0      	bhi.n	800459c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	627a      	str	r2, [r7, #36]	; 0x24
 80045c0:	6a3a      	ldr	r2, [r7, #32]
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	6979      	ldr	r1, [r7, #20]
 80045ce:	69b8      	ldr	r0, [r7, #24]
 80045d0:	f7ff fe34 	bl	800423c <_SendPacket>
  RECORD_END();
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f383 8811 	msr	BASEPRI, r3
}
 80045da:	bf00      	nop
 80045dc:	3730      	adds	r7, #48	; 0x30
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20006684 	.word	0x20006684

080045e8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b090      	sub	sp, #64	; 0x40
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80045f6:	f3ef 8311 	mrs	r3, BASEPRI
 80045fa:	f04f 0120 	mov.w	r1, #32
 80045fe:	f381 8811 	msr	BASEPRI, r1
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	4840      	ldr	r0, [pc, #256]	; (8004708 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004606:	f7ff fd38 	bl	800407a <_PreparePacket>
 800460a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	63bb      	str	r3, [r7, #56]	; 0x38
 8004618:	e00b      	b.n	8004632 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800461a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461c:	b2da      	uxtb	r2, r3
 800461e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004620:	1c59      	adds	r1, r3, #1
 8004622:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004624:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462e:	09db      	lsrs	r3, r3, #7
 8004630:	63bb      	str	r3, [r7, #56]	; 0x38
 8004632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004634:	2b7f      	cmp	r3, #127	; 0x7f
 8004636:	d8f0      	bhi.n	800461a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800463e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004646:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	637b      	str	r3, [r7, #52]	; 0x34
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	633b      	str	r3, [r7, #48]	; 0x30
 8004650:	e00b      	b.n	800466a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	b2da      	uxtb	r2, r3
 8004656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004658:	1c59      	adds	r1, r3, #1
 800465a:	6379      	str	r1, [r7, #52]	; 0x34
 800465c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004666:	09db      	lsrs	r3, r3, #7
 8004668:	633b      	str	r3, [r7, #48]	; 0x30
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	2b7f      	cmp	r3, #127	; 0x7f
 800466e:	d8f0      	bhi.n	8004652 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	637a      	str	r2, [r7, #52]	; 0x34
 8004676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]
 800467c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	62bb      	str	r3, [r7, #40]	; 0x28
 8004688:	e00b      	b.n	80046a2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	b2da      	uxtb	r2, r3
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	1c59      	adds	r1, r3, #1
 8004692:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004694:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469e:	09db      	lsrs	r3, r3, #7
 80046a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	2b7f      	cmp	r3, #127	; 0x7f
 80046a6:	d8f0      	bhi.n	800468a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80046a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
 80046bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046be:	623b      	str	r3, [r7, #32]
 80046c0:	e00b      	b.n	80046da <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	1c59      	adds	r1, r3, #1
 80046ca:	6279      	str	r1, [r7, #36]	; 0x24
 80046cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	09db      	lsrs	r3, r3, #7
 80046d8:	623b      	str	r3, [r7, #32]
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	2b7f      	cmp	r3, #127	; 0x7f
 80046de:	d8f0      	bhi.n	80046c2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	627a      	str	r2, [r7, #36]	; 0x24
 80046e6:	6a3a      	ldr	r2, [r7, #32]
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	701a      	strb	r2, [r3, #0]
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	6979      	ldr	r1, [r7, #20]
 80046f4:	69b8      	ldr	r0, [r7, #24]
 80046f6:	f7ff fda1 	bl	800423c <_SendPacket>
  RECORD_END();
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	f383 8811 	msr	BASEPRI, r3
}
 8004700:	bf00      	nop
 8004702:	3740      	adds	r7, #64	; 0x40
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20006684 	.word	0x20006684

0800470c <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 800470c:	b580      	push	{r7, lr}
 800470e:	b08c      	sub	sp, #48	; 0x30
 8004710:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004712:	4b59      	ldr	r3, [pc, #356]	; (8004878 <SEGGER_SYSVIEW_Start+0x16c>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	f040 80aa 	bne.w	8004870 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 800471c:	4b56      	ldr	r3, [pc, #344]	; (8004878 <SEGGER_SYSVIEW_Start+0x16c>)
 800471e:	2201      	movs	r2, #1
 8004720:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004722:	f3ef 8311 	mrs	r3, BASEPRI
 8004726:	f04f 0120 	mov.w	r1, #32
 800472a:	f381 8811 	msr	BASEPRI, r1
 800472e:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004730:	220a      	movs	r2, #10
 8004732:	4952      	ldr	r1, [pc, #328]	; (800487c <SEGGER_SYSVIEW_Start+0x170>)
 8004734:	2001      	movs	r0, #1
 8004736:	f7ff faef 	bl	8003d18 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004740:	200a      	movs	r0, #10
 8004742:	f7ff fe9d 	bl	8004480 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004746:	f3ef 8311 	mrs	r3, BASEPRI
 800474a:	f04f 0120 	mov.w	r1, #32
 800474e:	f381 8811 	msr	BASEPRI, r1
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	484a      	ldr	r0, [pc, #296]	; (8004880 <SEGGER_SYSVIEW_Start+0x174>)
 8004756:	f7ff fc90 	bl	800407a <_PreparePacket>
 800475a:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004764:	4b44      	ldr	r3, [pc, #272]	; (8004878 <SEGGER_SYSVIEW_Start+0x16c>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	62bb      	str	r3, [r7, #40]	; 0x28
 800476a:	e00b      	b.n	8004784 <SEGGER_SYSVIEW_Start+0x78>
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	b2da      	uxtb	r2, r3
 8004770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004772:	1c59      	adds	r1, r3, #1
 8004774:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004776:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	09db      	lsrs	r3, r3, #7
 8004782:	62bb      	str	r3, [r7, #40]	; 0x28
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	2b7f      	cmp	r3, #127	; 0x7f
 8004788:	d8f0      	bhi.n	800476c <SEGGER_SYSVIEW_Start+0x60>
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004798:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
 800479e:	4b36      	ldr	r3, [pc, #216]	; (8004878 <SEGGER_SYSVIEW_Start+0x16c>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	623b      	str	r3, [r7, #32]
 80047a4:	e00b      	b.n	80047be <SEGGER_SYSVIEW_Start+0xb2>
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	1c59      	adds	r1, r3, #1
 80047ae:	6279      	str	r1, [r7, #36]	; 0x24
 80047b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047b4:	b2d2      	uxtb	r2, r2
 80047b6:	701a      	strb	r2, [r3, #0]
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	09db      	lsrs	r3, r3, #7
 80047bc:	623b      	str	r3, [r7, #32]
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	2b7f      	cmp	r3, #127	; 0x7f
 80047c2:	d8f0      	bhi.n	80047a6 <SEGGER_SYSVIEW_Start+0x9a>
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	627a      	str	r2, [r7, #36]	; 0x24
 80047ca:	6a3a      	ldr	r2, [r7, #32]
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	4b27      	ldr	r3, [pc, #156]	; (8004878 <SEGGER_SYSVIEW_Start+0x16c>)
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	e00b      	b.n	80047f8 <SEGGER_SYSVIEW_Start+0xec>
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	1c59      	adds	r1, r3, #1
 80047e8:	61f9      	str	r1, [r7, #28]
 80047ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	09db      	lsrs	r3, r3, #7
 80047f6:	61bb      	str	r3, [r7, #24]
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	2b7f      	cmp	r3, #127	; 0x7f
 80047fc:	d8f0      	bhi.n	80047e0 <SEGGER_SYSVIEW_Start+0xd4>
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	61fa      	str	r2, [r7, #28]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	2302      	movs	r3, #2
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	e00b      	b.n	8004830 <SEGGER_SYSVIEW_Start+0x124>
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	b2da      	uxtb	r2, r3
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	1c59      	adds	r1, r3, #1
 8004820:	6179      	str	r1, [r7, #20]
 8004822:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	09db      	lsrs	r3, r3, #7
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b7f      	cmp	r3, #127	; 0x7f
 8004834:	d8f0      	bhi.n	8004818 <SEGGER_SYSVIEW_Start+0x10c>
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	617a      	str	r2, [r7, #20]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004846:	2218      	movs	r2, #24
 8004848:	6839      	ldr	r1, [r7, #0]
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff fcf6 	bl	800423c <_SendPacket>
      RECORD_END();
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <SEGGER_SYSVIEW_Start+0x16c>)
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 800485e:	4b06      	ldr	r3, [pc, #24]	; (8004878 <SEGGER_SYSVIEW_Start+0x16c>)
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004864:	f000 f9ec 	bl	8004c40 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004868:	f000 f9b2 	bl	8004bd0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800486c:	f000 fc8c 	bl	8005188 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8004870:	bf00      	nop
 8004872:	3730      	adds	r7, #48	; 0x30
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	20006654 	.word	0x20006654
 800487c:	08005f58 	.word	0x08005f58
 8004880:	20006684 	.word	0x20006684

08004884 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800488a:	f3ef 8311 	mrs	r3, BASEPRI
 800488e:	f04f 0120 	mov.w	r1, #32
 8004892:	f381 8811 	msr	BASEPRI, r1
 8004896:	607b      	str	r3, [r7, #4]
 8004898:	480b      	ldr	r0, [pc, #44]	; (80048c8 <SEGGER_SYSVIEW_Stop+0x44>)
 800489a:	f7ff fbee 	bl	800407a <_PreparePacket>
 800489e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80048a0:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <SEGGER_SYSVIEW_Stop+0x48>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d007      	beq.n	80048b8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80048a8:	220b      	movs	r2, #11
 80048aa:	6839      	ldr	r1, [r7, #0]
 80048ac:	6838      	ldr	r0, [r7, #0]
 80048ae:	f7ff fcc5 	bl	800423c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80048b2:	4b06      	ldr	r3, [pc, #24]	; (80048cc <SEGGER_SYSVIEW_Stop+0x48>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f383 8811 	msr	BASEPRI, r3
}
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20006684 	.word	0x20006684
 80048cc:	20006654 	.word	0x20006654

080048d0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08c      	sub	sp, #48	; 0x30
 80048d4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80048d6:	f3ef 8311 	mrs	r3, BASEPRI
 80048da:	f04f 0120 	mov.w	r1, #32
 80048de:	f381 8811 	msr	BASEPRI, r1
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	4845      	ldr	r0, [pc, #276]	; (80049fc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80048e6:	f7ff fbc8 	bl	800407a <_PreparePacket>
 80048ea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048f4:	4b42      	ldr	r3, [pc, #264]	; (8004a00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fa:	e00b      	b.n	8004914 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004902:	1c59      	adds	r1, r3, #1
 8004904:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004906:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	09db      	lsrs	r3, r3, #7
 8004912:	62bb      	str	r3, [r7, #40]	; 0x28
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	2b7f      	cmp	r3, #127	; 0x7f
 8004918:	d8f0      	bhi.n	80048fc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800491a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]
 8004926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004928:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
 800492e:	4b34      	ldr	r3, [pc, #208]	; (8004a00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	623b      	str	r3, [r7, #32]
 8004934:	e00b      	b.n	800494e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	b2da      	uxtb	r2, r3
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	1c59      	adds	r1, r3, #1
 800493e:	6279      	str	r1, [r7, #36]	; 0x24
 8004940:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	09db      	lsrs	r3, r3, #7
 800494c:	623b      	str	r3, [r7, #32]
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	2b7f      	cmp	r3, #127	; 0x7f
 8004952:	d8f0      	bhi.n	8004936 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	627a      	str	r2, [r7, #36]	; 0x24
 800495a:	6a3a      	ldr	r2, [r7, #32]
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	61fb      	str	r3, [r7, #28]
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	e00b      	b.n	8004988 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	b2da      	uxtb	r2, r3
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	1c59      	adds	r1, r3, #1
 8004978:	61f9      	str	r1, [r7, #28]
 800497a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	09db      	lsrs	r3, r3, #7
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b7f      	cmp	r3, #127	; 0x7f
 800498c:	d8f0      	bhi.n	8004970 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	61fa      	str	r2, [r7, #28]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	2302      	movs	r3, #2
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	e00b      	b.n	80049c0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	1c59      	adds	r1, r3, #1
 80049b0:	6179      	str	r1, [r7, #20]
 80049b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	09db      	lsrs	r3, r3, #7
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	2b7f      	cmp	r3, #127	; 0x7f
 80049c4:	d8f0      	bhi.n	80049a8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	617a      	str	r2, [r7, #20]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80049d6:	2218      	movs	r2, #24
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	68b8      	ldr	r0, [r7, #8]
 80049dc:	f7ff fc2e 	bl	800423c <_SendPacket>
  RECORD_END();
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80049ee:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	4798      	blx	r3
  }
}
 80049f4:	bf00      	nop
 80049f6:	3730      	adds	r7, #48	; 0x30
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20006684 	.word	0x20006684
 8004a00:	20006654 	.word	0x20006654

08004a04 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b092      	sub	sp, #72	; 0x48
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004a0c:	f3ef 8311 	mrs	r3, BASEPRI
 8004a10:	f04f 0120 	mov.w	r1, #32
 8004a14:	f381 8811 	msr	BASEPRI, r1
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	486b      	ldr	r0, [pc, #428]	; (8004bc8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004a1c:	f7ff fb2d 	bl	800407a <_PreparePacket>
 8004a20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	647b      	str	r3, [r7, #68]	; 0x44
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4b67      	ldr	r3, [pc, #412]	; (8004bcc <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	089b      	lsrs	r3, r3, #2
 8004a36:	643b      	str	r3, [r7, #64]	; 0x40
 8004a38:	e00b      	b.n	8004a52 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8004a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a40:	1c59      	adds	r1, r3, #1
 8004a42:	6479      	str	r1, [r7, #68]	; 0x44
 8004a44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	701a      	strb	r2, [r3, #0]
 8004a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a4e:	09db      	lsrs	r3, r3, #7
 8004a50:	643b      	str	r3, [r7, #64]	; 0x40
 8004a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a54:	2b7f      	cmp	r3, #127	; 0x7f
 8004a56:	d8f0      	bhi.n	8004a3a <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8004a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	647a      	str	r2, [r7, #68]	; 0x44
 8004a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]
 8004a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a66:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a72:	e00b      	b.n	8004a8c <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7a:	1c59      	adds	r1, r3, #1
 8004a7c:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004a7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	09db      	lsrs	r3, r3, #7
 8004a8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a90:	d8f0      	bhi.n	8004a74 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8004a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]
 8004a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa0:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7ff fa98 	bl	8003fe0 <_EncodeStr>
 8004ab0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004ab2:	2209      	movs	r2, #9
 8004ab4:	68f9      	ldr	r1, [r7, #12]
 8004ab6:	6938      	ldr	r0, [r7, #16]
 8004ab8:	f7ff fbc0 	bl	800423c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4b40      	ldr	r3, [pc, #256]	; (8004bcc <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	089b      	lsrs	r3, r3, #2
 8004ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ad2:	e00b      	b.n	8004aec <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ada:	1c59      	adds	r1, r3, #1
 8004adc:	6379      	str	r1, [r7, #52]	; 0x34
 8004ade:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	09db      	lsrs	r3, r3, #7
 8004aea:	633b      	str	r3, [r7, #48]	; 0x30
 8004aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aee:	2b7f      	cmp	r3, #127	; 0x7f
 8004af0:	d8f0      	bhi.n	8004ad4 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8004af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	637a      	str	r2, [r7, #52]	; 0x34
 8004af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b0c:	e00b      	b.n	8004b26 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b14:	1c59      	adds	r1, r3, #1
 8004b16:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	09db      	lsrs	r3, r3, #7
 8004b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b28:	2b7f      	cmp	r3, #127	; 0x7f
 8004b2a:	d8f0      	bhi.n	8004b0e <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8004b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	701a      	strb	r2, [r3, #0]
 8004b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	623b      	str	r3, [r7, #32]
 8004b46:	e00b      	b.n	8004b60 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	1c59      	adds	r1, r3, #1
 8004b50:	6279      	str	r1, [r7, #36]	; 0x24
 8004b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	09db      	lsrs	r3, r3, #7
 8004b5e:	623b      	str	r3, [r7, #32]
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	2b7f      	cmp	r3, #127	; 0x7f
 8004b64:	d8f0      	bhi.n	8004b48 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	627a      	str	r2, [r7, #36]	; 0x24
 8004b6c:	6a3a      	ldr	r2, [r7, #32]
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	e00b      	b.n	8004b98 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	1c59      	adds	r1, r3, #1
 8004b88:	61f9      	str	r1, [r7, #28]
 8004b8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	09db      	lsrs	r3, r3, #7
 8004b96:	61bb      	str	r3, [r7, #24]
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004b9c:	d8f0      	bhi.n	8004b80 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	61fa      	str	r2, [r7, #28]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004bae:	2215      	movs	r2, #21
 8004bb0:	68f9      	ldr	r1, [r7, #12]
 8004bb2:	6938      	ldr	r0, [r7, #16]
 8004bb4:	f7ff fb42 	bl	800423c <_SendPacket>
  RECORD_END();
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f383 8811 	msr	BASEPRI, r3
}
 8004bbe:	bf00      	nop
 8004bc0:	3748      	adds	r7, #72	; 0x48
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20006684 	.word	0x20006684
 8004bcc:	20006654 	.word	0x20006654

08004bd0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004be6:	4b03      	ldr	r3, [pc, #12]	; (8004bf4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	4798      	blx	r3
  }
}
 8004bee:	bf00      	nop
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20006654 	.word	0x20006654

08004bf8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c00:	f3ef 8311 	mrs	r3, BASEPRI
 8004c04:	f04f 0120 	mov.w	r1, #32
 8004c08:	f381 8811 	msr	BASEPRI, r1
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	480b      	ldr	r0, [pc, #44]	; (8004c3c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004c10:	f7ff fa33 	bl	800407a <_PreparePacket>
 8004c14:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c16:	2280      	movs	r2, #128	; 0x80
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	6938      	ldr	r0, [r7, #16]
 8004c1c:	f7ff f9e0 	bl	8003fe0 <_EncodeStr>
 8004c20:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004c22:	220e      	movs	r2, #14
 8004c24:	68f9      	ldr	r1, [r7, #12]
 8004c26:	6938      	ldr	r0, [r7, #16]
 8004c28:	f7ff fb08 	bl	800423c <_SendPacket>
  RECORD_END();
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f383 8811 	msr	BASEPRI, r3
}
 8004c32:	bf00      	nop
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20006684 	.word	0x20006684

08004c40 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004c40:	b590      	push	{r4, r7, lr}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004c46:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01a      	beq.n	8004c84 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004c4e:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d015      	beq.n	8004c84 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004c58:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4798      	blx	r3
 8004c60:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c64:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004c66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	000a      	movs	r2, r1
 8004c74:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c76:	4613      	mov	r3, r2
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	200d      	movs	r0, #13
 8004c7e:	f7ff fc59 	bl	8004534 <SEGGER_SYSVIEW_RecordU32x2>
 8004c82:	e006      	b.n	8004c92 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004c84:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	200c      	movs	r0, #12
 8004c8c:	f7ff fc16 	bl	80044bc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004c90:	bf00      	nop
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd90      	pop	{r4, r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20006654 	.word	0x20006654
 8004ca0:	e0001004 	.word	0xe0001004

08004ca4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004caa:	f3ef 8311 	mrs	r3, BASEPRI
 8004cae:	f04f 0120 	mov.w	r1, #32
 8004cb2:	f381 8811 	msr	BASEPRI, r1
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	4819      	ldr	r0, [pc, #100]	; (8004d20 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004cba:	f7ff f9de 	bl	800407a <_PreparePacket>
 8004cbe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004cc4:	4b17      	ldr	r3, [pc, #92]	; (8004d24 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ccc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	e00b      	b.n	8004cf0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	1c59      	adds	r1, r3, #1
 8004ce0:	6179      	str	r1, [r7, #20]
 8004ce2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	09db      	lsrs	r3, r3, #7
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8004cf4:	d8f0      	bhi.n	8004cd8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	617a      	str	r2, [r7, #20]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004d06:	2202      	movs	r2, #2
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	68b8      	ldr	r0, [r7, #8]
 8004d0c:	f7ff fa96 	bl	800423c <_SendPacket>
  RECORD_END();
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f383 8811 	msr	BASEPRI, r3
}
 8004d16:	bf00      	nop
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	20006684 	.word	0x20006684
 8004d24:	e000ed04 	.word	0xe000ed04

08004d28 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d32:	f04f 0120 	mov.w	r1, #32
 8004d36:	f381 8811 	msr	BASEPRI, r1
 8004d3a:	607b      	str	r3, [r7, #4]
 8004d3c:	4807      	ldr	r0, [pc, #28]	; (8004d5c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004d3e:	f7ff f99c 	bl	800407a <_PreparePacket>
 8004d42:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004d44:	2203      	movs	r2, #3
 8004d46:	6839      	ldr	r1, [r7, #0]
 8004d48:	6838      	ldr	r0, [r7, #0]
 8004d4a:	f7ff fa77 	bl	800423c <_SendPacket>
  RECORD_END();
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f383 8811 	msr	BASEPRI, r3
}
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20006684 	.word	0x20006684

08004d60 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d66:	f3ef 8311 	mrs	r3, BASEPRI
 8004d6a:	f04f 0120 	mov.w	r1, #32
 8004d6e:	f381 8811 	msr	BASEPRI, r1
 8004d72:	607b      	str	r3, [r7, #4]
 8004d74:	4807      	ldr	r0, [pc, #28]	; (8004d94 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004d76:	f7ff f980 	bl	800407a <_PreparePacket>
 8004d7a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004d7c:	2212      	movs	r2, #18
 8004d7e:	6839      	ldr	r1, [r7, #0]
 8004d80:	6838      	ldr	r0, [r7, #0]
 8004d82:	f7ff fa5b 	bl	800423c <_SendPacket>
  RECORD_END();
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f383 8811 	msr	BASEPRI, r3
}
 8004d8c:	bf00      	nop
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20006684 	.word	0x20006684

08004d98 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8004da2:	f04f 0120 	mov.w	r1, #32
 8004da6:	f381 8811 	msr	BASEPRI, r1
 8004daa:	607b      	str	r3, [r7, #4]
 8004dac:	4807      	ldr	r0, [pc, #28]	; (8004dcc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004dae:	f7ff f964 	bl	800407a <_PreparePacket>
 8004db2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004db4:	2211      	movs	r2, #17
 8004db6:	6839      	ldr	r1, [r7, #0]
 8004db8:	6838      	ldr	r0, [r7, #0]
 8004dba:	f7ff fa3f 	bl	800423c <_SendPacket>
  RECORD_END();
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f383 8811 	msr	BASEPRI, r3
}
 8004dc4:	bf00      	nop
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20006684 	.word	0x20006684

08004dd0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004dd8:	f3ef 8311 	mrs	r3, BASEPRI
 8004ddc:	f04f 0120 	mov.w	r1, #32
 8004de0:	f381 8811 	msr	BASEPRI, r1
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	481a      	ldr	r0, [pc, #104]	; (8004e50 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004de8:	f7ff f947 	bl	800407a <_PreparePacket>
 8004dec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004df2:	4b18      	ldr	r3, [pc, #96]	; (8004e54 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	089b      	lsrs	r3, r3, #2
 8004dfc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	e00b      	b.n	8004e20 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	1c59      	adds	r1, r3, #1
 8004e10:	61f9      	str	r1, [r7, #28]
 8004e12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	09db      	lsrs	r3, r3, #7
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b7f      	cmp	r3, #127	; 0x7f
 8004e24:	d8f0      	bhi.n	8004e08 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	61fa      	str	r2, [r7, #28]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004e36:	2208      	movs	r2, #8
 8004e38:	68f9      	ldr	r1, [r7, #12]
 8004e3a:	6938      	ldr	r0, [r7, #16]
 8004e3c:	f7ff f9fe 	bl	800423c <_SendPacket>
  RECORD_END();
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f383 8811 	msr	BASEPRI, r3
}
 8004e46:	bf00      	nop
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20006684 	.word	0x20006684
 8004e54:	20006654 	.word	0x20006654

08004e58 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e60:	f3ef 8311 	mrs	r3, BASEPRI
 8004e64:	f04f 0120 	mov.w	r1, #32
 8004e68:	f381 8811 	msr	BASEPRI, r1
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	481a      	ldr	r0, [pc, #104]	; (8004ed8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004e70:	f7ff f903 	bl	800407a <_PreparePacket>
 8004e74:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e7a:	4b18      	ldr	r3, [pc, #96]	; (8004edc <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	089b      	lsrs	r3, r3, #2
 8004e84:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	61fb      	str	r3, [r7, #28]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	e00b      	b.n	8004ea8 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	1c59      	adds	r1, r3, #1
 8004e98:	61f9      	str	r1, [r7, #28]
 8004e9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	09db      	lsrs	r3, r3, #7
 8004ea6:	61bb      	str	r3, [r7, #24]
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8004eac:	d8f0      	bhi.n	8004e90 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	61fa      	str	r2, [r7, #28]
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	68f9      	ldr	r1, [r7, #12]
 8004ec2:	6938      	ldr	r0, [r7, #16]
 8004ec4:	f7ff f9ba 	bl	800423c <_SendPacket>
  RECORD_END();
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f383 8811 	msr	BASEPRI, r3
}
 8004ece:	bf00      	nop
 8004ed0:	3720      	adds	r7, #32
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20006684 	.word	0x20006684
 8004edc:	20006654 	.word	0x20006654

08004ee0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ee8:	f3ef 8311 	mrs	r3, BASEPRI
 8004eec:	f04f 0120 	mov.w	r1, #32
 8004ef0:	f381 8811 	msr	BASEPRI, r1
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	481a      	ldr	r0, [pc, #104]	; (8004f60 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004ef8:	f7ff f8bf 	bl	800407a <_PreparePacket>
 8004efc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f02:	4b18      	ldr	r3, [pc, #96]	; (8004f64 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	089b      	lsrs	r3, r3, #2
 8004f0c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	e00b      	b.n	8004f30 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	1c59      	adds	r1, r3, #1
 8004f20:	61f9      	str	r1, [r7, #28]
 8004f22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	09db      	lsrs	r3, r3, #7
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b7f      	cmp	r3, #127	; 0x7f
 8004f34:	d8f0      	bhi.n	8004f18 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	61fa      	str	r2, [r7, #28]
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004f46:	2206      	movs	r2, #6
 8004f48:	68f9      	ldr	r1, [r7, #12]
 8004f4a:	6938      	ldr	r0, [r7, #16]
 8004f4c:	f7ff f976 	bl	800423c <_SendPacket>
  RECORD_END();
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f383 8811 	msr	BASEPRI, r3
}
 8004f56:	bf00      	nop
 8004f58:	3720      	adds	r7, #32
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20006684 	.word	0x20006684
 8004f64:	20006654 	.word	0x20006654

08004f68 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08a      	sub	sp, #40	; 0x28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f72:	f3ef 8311 	mrs	r3, BASEPRI
 8004f76:	f04f 0120 	mov.w	r1, #32
 8004f7a:	f381 8811 	msr	BASEPRI, r1
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	4827      	ldr	r0, [pc, #156]	; (8005020 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004f82:	f7ff f87a 	bl	800407a <_PreparePacket>
 8004f86:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f8c:	4b25      	ldr	r3, [pc, #148]	; (8005024 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	089b      	lsrs	r3, r3, #2
 8004f96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	623b      	str	r3, [r7, #32]
 8004fa0:	e00b      	b.n	8004fba <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	1c59      	adds	r1, r3, #1
 8004faa:	6279      	str	r1, [r7, #36]	; 0x24
 8004fac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	09db      	lsrs	r3, r3, #7
 8004fb8:	623b      	str	r3, [r7, #32]
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8004fbe:	d8f0      	bhi.n	8004fa2 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	627a      	str	r2, [r7, #36]	; 0x24
 8004fc6:	6a3a      	ldr	r2, [r7, #32]
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	61fb      	str	r3, [r7, #28]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	61bb      	str	r3, [r7, #24]
 8004fd8:	e00b      	b.n	8004ff2 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	1c59      	adds	r1, r3, #1
 8004fe2:	61f9      	str	r1, [r7, #28]
 8004fe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	09db      	lsrs	r3, r3, #7
 8004ff0:	61bb      	str	r3, [r7, #24]
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff6:	d8f0      	bhi.n	8004fda <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	61fa      	str	r2, [r7, #28]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005008:	2207      	movs	r2, #7
 800500a:	68f9      	ldr	r1, [r7, #12]
 800500c:	6938      	ldr	r0, [r7, #16]
 800500e:	f7ff f915 	bl	800423c <_SendPacket>
  RECORD_END();
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f383 8811 	msr	BASEPRI, r3
}
 8005018:	bf00      	nop
 800501a:	3728      	adds	r7, #40	; 0x28
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20006684 	.word	0x20006684
 8005024:	20006654 	.word	0x20006654

08005028 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005030:	4b05      	ldr	r3, [pc, #20]	; (8005048 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	089b      	lsrs	r3, r3, #2
}
 800503a:	4618      	mov	r0, r3
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20006654 	.word	0x20006654

0800504c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800504c:	b580      	push	{r7, lr}
 800504e:	b08c      	sub	sp, #48	; 0x30
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005056:	4b3b      	ldr	r3, [pc, #236]	; (8005144 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d06d      	beq.n	800513a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800505e:	4b39      	ldr	r3, [pc, #228]	; (8005144 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005064:	2300      	movs	r3, #0
 8005066:	62bb      	str	r3, [r7, #40]	; 0x28
 8005068:	e008      	b.n	800507c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	3301      	adds	r3, #1
 800507a:	62bb      	str	r3, [r7, #40]	; 0x28
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005080:	429a      	cmp	r2, r3
 8005082:	d3f2      	bcc.n	800506a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005084:	e000      	b.n	8005088 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005086:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d055      	beq.n	800513a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800508e:	f3ef 8311 	mrs	r3, BASEPRI
 8005092:	f04f 0120 	mov.w	r1, #32
 8005096:	f381 8811 	msr	BASEPRI, r1
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	482a      	ldr	r0, [pc, #168]	; (8005148 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800509e:	f7fe ffec 	bl	800407a <_PreparePacket>
 80050a2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
 80050ac:	79fb      	ldrb	r3, [r7, #7]
 80050ae:	623b      	str	r3, [r7, #32]
 80050b0:	e00b      	b.n	80050ca <SEGGER_SYSVIEW_SendModule+0x7e>
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	1c59      	adds	r1, r3, #1
 80050ba:	6279      	str	r1, [r7, #36]	; 0x24
 80050bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	09db      	lsrs	r3, r3, #7
 80050c8:	623b      	str	r3, [r7, #32]
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	2b7f      	cmp	r3, #127	; 0x7f
 80050ce:	d8f0      	bhi.n	80050b2 <SEGGER_SYSVIEW_SendModule+0x66>
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	627a      	str	r2, [r7, #36]	; 0x24
 80050d6:	6a3a      	ldr	r2, [r7, #32]
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	61fb      	str	r3, [r7, #28]
 80050e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	e00b      	b.n	8005104 <SEGGER_SYSVIEW_SendModule+0xb8>
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	1c59      	adds	r1, r3, #1
 80050f4:	61f9      	str	r1, [r7, #28]
 80050f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	09db      	lsrs	r3, r3, #7
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	2b7f      	cmp	r3, #127	; 0x7f
 8005108:	d8f0      	bhi.n	80050ec <SEGGER_SYSVIEW_SendModule+0xa0>
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	61fa      	str	r2, [r7, #28]
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2280      	movs	r2, #128	; 0x80
 8005120:	4619      	mov	r1, r3
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f7fe ff5c 	bl	8003fe0 <_EncodeStr>
 8005128:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800512a:	2216      	movs	r2, #22
 800512c:	68f9      	ldr	r1, [r7, #12]
 800512e:	6938      	ldr	r0, [r7, #16]
 8005130:	f7ff f884 	bl	800423c <_SendPacket>
      RECORD_END();
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800513a:	bf00      	nop
 800513c:	3730      	adds	r7, #48	; 0x30
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	2000667c 	.word	0x2000667c
 8005148:	20006684 	.word	0x20006684

0800514c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005152:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00f      	beq.n	800517a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800515a:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f2      	bne.n	8005160 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	2000667c 	.word	0x2000667c

08005188 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800518e:	f3ef 8311 	mrs	r3, BASEPRI
 8005192:	f04f 0120 	mov.w	r1, #32
 8005196:	f381 8811 	msr	BASEPRI, r1
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	4817      	ldr	r0, [pc, #92]	; (80051fc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800519e:	f7fe ff6c 	bl	800407a <_PreparePacket>
 80051a2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	4b14      	ldr	r3, [pc, #80]	; (8005200 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	e00b      	b.n	80051cc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	1c59      	adds	r1, r3, #1
 80051bc:	6179      	str	r1, [r7, #20]
 80051be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	09db      	lsrs	r3, r3, #7
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	2b7f      	cmp	r3, #127	; 0x7f
 80051d0:	d8f0      	bhi.n	80051b4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	617a      	str	r2, [r7, #20]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80051e2:	221b      	movs	r2, #27
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	68b8      	ldr	r0, [r7, #8]
 80051e8:	f7ff f828 	bl	800423c <_SendPacket>
  RECORD_END();
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f383 8811 	msr	BASEPRI, r3
}
 80051f2:	bf00      	nop
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20006684 	.word	0x20006684
 8005200:	20006680 	.word	0x20006680

08005204 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005204:	b580      	push	{r7, lr}
 8005206:	b08a      	sub	sp, #40	; 0x28
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800520c:	f3ef 8311 	mrs	r3, BASEPRI
 8005210:	f04f 0120 	mov.w	r1, #32
 8005214:	f381 8811 	msr	BASEPRI, r1
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	4827      	ldr	r0, [pc, #156]	; (80052b8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800521c:	f7fe ff2d 	bl	800407a <_PreparePacket>
 8005220:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005222:	2280      	movs	r2, #128	; 0x80
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	6938      	ldr	r0, [r7, #16]
 8005228:	f7fe feda 	bl	8003fe0 <_EncodeStr>
 800522c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
 8005232:	2301      	movs	r3, #1
 8005234:	623b      	str	r3, [r7, #32]
 8005236:	e00b      	b.n	8005250 <SEGGER_SYSVIEW_Warn+0x4c>
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	b2da      	uxtb	r2, r3
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	1c59      	adds	r1, r3, #1
 8005240:	6279      	str	r1, [r7, #36]	; 0x24
 8005242:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	09db      	lsrs	r3, r3, #7
 800524e:	623b      	str	r3, [r7, #32]
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	2b7f      	cmp	r3, #127	; 0x7f
 8005254:	d8f0      	bhi.n	8005238 <SEGGER_SYSVIEW_Warn+0x34>
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	627a      	str	r2, [r7, #36]	; 0x24
 800525c:	6a3a      	ldr	r2, [r7, #32]
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	2300      	movs	r3, #0
 800526c:	61bb      	str	r3, [r7, #24]
 800526e:	e00b      	b.n	8005288 <SEGGER_SYSVIEW_Warn+0x84>
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	b2da      	uxtb	r2, r3
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	1c59      	adds	r1, r3, #1
 8005278:	61f9      	str	r1, [r7, #28]
 800527a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	09db      	lsrs	r3, r3, #7
 8005286:	61bb      	str	r3, [r7, #24]
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	2b7f      	cmp	r3, #127	; 0x7f
 800528c:	d8f0      	bhi.n	8005270 <SEGGER_SYSVIEW_Warn+0x6c>
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	61fa      	str	r2, [r7, #28]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800529e:	221a      	movs	r2, #26
 80052a0:	68f9      	ldr	r1, [r7, #12]
 80052a2:	6938      	ldr	r0, [r7, #16]
 80052a4:	f7fe ffca 	bl	800423c <_SendPacket>
  RECORD_END();
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f383 8811 	msr	BASEPRI, r3
}
 80052ae:	bf00      	nop
 80052b0:	3728      	adds	r7, #40	; 0x28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20006684 	.word	0x20006684

080052bc <__errno>:
 80052bc:	4b01      	ldr	r3, [pc, #4]	; (80052c4 <__errno+0x8>)
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	20000010 	.word	0x20000010

080052c8 <std>:
 80052c8:	2300      	movs	r3, #0
 80052ca:	b510      	push	{r4, lr}
 80052cc:	4604      	mov	r4, r0
 80052ce:	e9c0 3300 	strd	r3, r3, [r0]
 80052d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052d6:	6083      	str	r3, [r0, #8]
 80052d8:	8181      	strh	r1, [r0, #12]
 80052da:	6643      	str	r3, [r0, #100]	; 0x64
 80052dc:	81c2      	strh	r2, [r0, #14]
 80052de:	6183      	str	r3, [r0, #24]
 80052e0:	4619      	mov	r1, r3
 80052e2:	2208      	movs	r2, #8
 80052e4:	305c      	adds	r0, #92	; 0x5c
 80052e6:	f000 f92a 	bl	800553e <memset>
 80052ea:	4b05      	ldr	r3, [pc, #20]	; (8005300 <std+0x38>)
 80052ec:	6263      	str	r3, [r4, #36]	; 0x24
 80052ee:	4b05      	ldr	r3, [pc, #20]	; (8005304 <std+0x3c>)
 80052f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80052f2:	4b05      	ldr	r3, [pc, #20]	; (8005308 <std+0x40>)
 80052f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052f6:	4b05      	ldr	r3, [pc, #20]	; (800530c <std+0x44>)
 80052f8:	6224      	str	r4, [r4, #32]
 80052fa:	6323      	str	r3, [r4, #48]	; 0x30
 80052fc:	bd10      	pop	{r4, pc}
 80052fe:	bf00      	nop
 8005300:	08005859 	.word	0x08005859
 8005304:	0800587b 	.word	0x0800587b
 8005308:	080058b3 	.word	0x080058b3
 800530c:	080058d7 	.word	0x080058d7

08005310 <_cleanup_r>:
 8005310:	4901      	ldr	r1, [pc, #4]	; (8005318 <_cleanup_r+0x8>)
 8005312:	f000 b8af 	b.w	8005474 <_fwalk_reent>
 8005316:	bf00      	nop
 8005318:	08005bb1 	.word	0x08005bb1

0800531c <__sfmoreglue>:
 800531c:	b570      	push	{r4, r5, r6, lr}
 800531e:	2268      	movs	r2, #104	; 0x68
 8005320:	1e4d      	subs	r5, r1, #1
 8005322:	4355      	muls	r5, r2
 8005324:	460e      	mov	r6, r1
 8005326:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800532a:	f000 f931 	bl	8005590 <_malloc_r>
 800532e:	4604      	mov	r4, r0
 8005330:	b140      	cbz	r0, 8005344 <__sfmoreglue+0x28>
 8005332:	2100      	movs	r1, #0
 8005334:	e9c0 1600 	strd	r1, r6, [r0]
 8005338:	300c      	adds	r0, #12
 800533a:	60a0      	str	r0, [r4, #8]
 800533c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005340:	f000 f8fd 	bl	800553e <memset>
 8005344:	4620      	mov	r0, r4
 8005346:	bd70      	pop	{r4, r5, r6, pc}

08005348 <__sfp_lock_acquire>:
 8005348:	4801      	ldr	r0, [pc, #4]	; (8005350 <__sfp_lock_acquire+0x8>)
 800534a:	f000 b8d8 	b.w	80054fe <__retarget_lock_acquire_recursive>
 800534e:	bf00      	nop
 8005350:	20006768 	.word	0x20006768

08005354 <__sfp_lock_release>:
 8005354:	4801      	ldr	r0, [pc, #4]	; (800535c <__sfp_lock_release+0x8>)
 8005356:	f000 b8d3 	b.w	8005500 <__retarget_lock_release_recursive>
 800535a:	bf00      	nop
 800535c:	20006768 	.word	0x20006768

08005360 <__sinit_lock_acquire>:
 8005360:	4801      	ldr	r0, [pc, #4]	; (8005368 <__sinit_lock_acquire+0x8>)
 8005362:	f000 b8cc 	b.w	80054fe <__retarget_lock_acquire_recursive>
 8005366:	bf00      	nop
 8005368:	20006769 	.word	0x20006769

0800536c <__sinit_lock_release>:
 800536c:	4801      	ldr	r0, [pc, #4]	; (8005374 <__sinit_lock_release+0x8>)
 800536e:	f000 b8c7 	b.w	8005500 <__retarget_lock_release_recursive>
 8005372:	bf00      	nop
 8005374:	20006769 	.word	0x20006769

08005378 <__sinit>:
 8005378:	b510      	push	{r4, lr}
 800537a:	4604      	mov	r4, r0
 800537c:	f7ff fff0 	bl	8005360 <__sinit_lock_acquire>
 8005380:	69a3      	ldr	r3, [r4, #24]
 8005382:	b11b      	cbz	r3, 800538c <__sinit+0x14>
 8005384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005388:	f7ff bff0 	b.w	800536c <__sinit_lock_release>
 800538c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005390:	6523      	str	r3, [r4, #80]	; 0x50
 8005392:	4b13      	ldr	r3, [pc, #76]	; (80053e0 <__sinit+0x68>)
 8005394:	4a13      	ldr	r2, [pc, #76]	; (80053e4 <__sinit+0x6c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	62a2      	str	r2, [r4, #40]	; 0x28
 800539a:	42a3      	cmp	r3, r4
 800539c:	bf04      	itt	eq
 800539e:	2301      	moveq	r3, #1
 80053a0:	61a3      	streq	r3, [r4, #24]
 80053a2:	4620      	mov	r0, r4
 80053a4:	f000 f820 	bl	80053e8 <__sfp>
 80053a8:	6060      	str	r0, [r4, #4]
 80053aa:	4620      	mov	r0, r4
 80053ac:	f000 f81c 	bl	80053e8 <__sfp>
 80053b0:	60a0      	str	r0, [r4, #8]
 80053b2:	4620      	mov	r0, r4
 80053b4:	f000 f818 	bl	80053e8 <__sfp>
 80053b8:	2200      	movs	r2, #0
 80053ba:	60e0      	str	r0, [r4, #12]
 80053bc:	2104      	movs	r1, #4
 80053be:	6860      	ldr	r0, [r4, #4]
 80053c0:	f7ff ff82 	bl	80052c8 <std>
 80053c4:	68a0      	ldr	r0, [r4, #8]
 80053c6:	2201      	movs	r2, #1
 80053c8:	2109      	movs	r1, #9
 80053ca:	f7ff ff7d 	bl	80052c8 <std>
 80053ce:	68e0      	ldr	r0, [r4, #12]
 80053d0:	2202      	movs	r2, #2
 80053d2:	2112      	movs	r1, #18
 80053d4:	f7ff ff78 	bl	80052c8 <std>
 80053d8:	2301      	movs	r3, #1
 80053da:	61a3      	str	r3, [r4, #24]
 80053dc:	e7d2      	b.n	8005384 <__sinit+0xc>
 80053de:	bf00      	nop
 80053e0:	08005fc4 	.word	0x08005fc4
 80053e4:	08005311 	.word	0x08005311

080053e8 <__sfp>:
 80053e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ea:	4607      	mov	r7, r0
 80053ec:	f7ff ffac 	bl	8005348 <__sfp_lock_acquire>
 80053f0:	4b1e      	ldr	r3, [pc, #120]	; (800546c <__sfp+0x84>)
 80053f2:	681e      	ldr	r6, [r3, #0]
 80053f4:	69b3      	ldr	r3, [r6, #24]
 80053f6:	b913      	cbnz	r3, 80053fe <__sfp+0x16>
 80053f8:	4630      	mov	r0, r6
 80053fa:	f7ff ffbd 	bl	8005378 <__sinit>
 80053fe:	3648      	adds	r6, #72	; 0x48
 8005400:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005404:	3b01      	subs	r3, #1
 8005406:	d503      	bpl.n	8005410 <__sfp+0x28>
 8005408:	6833      	ldr	r3, [r6, #0]
 800540a:	b30b      	cbz	r3, 8005450 <__sfp+0x68>
 800540c:	6836      	ldr	r6, [r6, #0]
 800540e:	e7f7      	b.n	8005400 <__sfp+0x18>
 8005410:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005414:	b9d5      	cbnz	r5, 800544c <__sfp+0x64>
 8005416:	4b16      	ldr	r3, [pc, #88]	; (8005470 <__sfp+0x88>)
 8005418:	60e3      	str	r3, [r4, #12]
 800541a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800541e:	6665      	str	r5, [r4, #100]	; 0x64
 8005420:	f000 f86c 	bl	80054fc <__retarget_lock_init_recursive>
 8005424:	f7ff ff96 	bl	8005354 <__sfp_lock_release>
 8005428:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800542c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005430:	6025      	str	r5, [r4, #0]
 8005432:	61a5      	str	r5, [r4, #24]
 8005434:	2208      	movs	r2, #8
 8005436:	4629      	mov	r1, r5
 8005438:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800543c:	f000 f87f 	bl	800553e <memset>
 8005440:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005444:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005448:	4620      	mov	r0, r4
 800544a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800544c:	3468      	adds	r4, #104	; 0x68
 800544e:	e7d9      	b.n	8005404 <__sfp+0x1c>
 8005450:	2104      	movs	r1, #4
 8005452:	4638      	mov	r0, r7
 8005454:	f7ff ff62 	bl	800531c <__sfmoreglue>
 8005458:	4604      	mov	r4, r0
 800545a:	6030      	str	r0, [r6, #0]
 800545c:	2800      	cmp	r0, #0
 800545e:	d1d5      	bne.n	800540c <__sfp+0x24>
 8005460:	f7ff ff78 	bl	8005354 <__sfp_lock_release>
 8005464:	230c      	movs	r3, #12
 8005466:	603b      	str	r3, [r7, #0]
 8005468:	e7ee      	b.n	8005448 <__sfp+0x60>
 800546a:	bf00      	nop
 800546c:	08005fc4 	.word	0x08005fc4
 8005470:	ffff0001 	.word	0xffff0001

08005474 <_fwalk_reent>:
 8005474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005478:	4606      	mov	r6, r0
 800547a:	4688      	mov	r8, r1
 800547c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005480:	2700      	movs	r7, #0
 8005482:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005486:	f1b9 0901 	subs.w	r9, r9, #1
 800548a:	d505      	bpl.n	8005498 <_fwalk_reent+0x24>
 800548c:	6824      	ldr	r4, [r4, #0]
 800548e:	2c00      	cmp	r4, #0
 8005490:	d1f7      	bne.n	8005482 <_fwalk_reent+0xe>
 8005492:	4638      	mov	r0, r7
 8005494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005498:	89ab      	ldrh	r3, [r5, #12]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d907      	bls.n	80054ae <_fwalk_reent+0x3a>
 800549e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054a2:	3301      	adds	r3, #1
 80054a4:	d003      	beq.n	80054ae <_fwalk_reent+0x3a>
 80054a6:	4629      	mov	r1, r5
 80054a8:	4630      	mov	r0, r6
 80054aa:	47c0      	blx	r8
 80054ac:	4307      	orrs	r7, r0
 80054ae:	3568      	adds	r5, #104	; 0x68
 80054b0:	e7e9      	b.n	8005486 <_fwalk_reent+0x12>
	...

080054b4 <__libc_init_array>:
 80054b4:	b570      	push	{r4, r5, r6, lr}
 80054b6:	4d0d      	ldr	r5, [pc, #52]	; (80054ec <__libc_init_array+0x38>)
 80054b8:	4c0d      	ldr	r4, [pc, #52]	; (80054f0 <__libc_init_array+0x3c>)
 80054ba:	1b64      	subs	r4, r4, r5
 80054bc:	10a4      	asrs	r4, r4, #2
 80054be:	2600      	movs	r6, #0
 80054c0:	42a6      	cmp	r6, r4
 80054c2:	d109      	bne.n	80054d8 <__libc_init_array+0x24>
 80054c4:	4d0b      	ldr	r5, [pc, #44]	; (80054f4 <__libc_init_array+0x40>)
 80054c6:	4c0c      	ldr	r4, [pc, #48]	; (80054f8 <__libc_init_array+0x44>)
 80054c8:	f000 fcb2 	bl	8005e30 <_init>
 80054cc:	1b64      	subs	r4, r4, r5
 80054ce:	10a4      	asrs	r4, r4, #2
 80054d0:	2600      	movs	r6, #0
 80054d2:	42a6      	cmp	r6, r4
 80054d4:	d105      	bne.n	80054e2 <__libc_init_array+0x2e>
 80054d6:	bd70      	pop	{r4, r5, r6, pc}
 80054d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054dc:	4798      	blx	r3
 80054de:	3601      	adds	r6, #1
 80054e0:	e7ee      	b.n	80054c0 <__libc_init_array+0xc>
 80054e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e6:	4798      	blx	r3
 80054e8:	3601      	adds	r6, #1
 80054ea:	e7f2      	b.n	80054d2 <__libc_init_array+0x1e>
 80054ec:	08005fd0 	.word	0x08005fd0
 80054f0:	08005fd0 	.word	0x08005fd0
 80054f4:	08005fd0 	.word	0x08005fd0
 80054f8:	08005fd4 	.word	0x08005fd4

080054fc <__retarget_lock_init_recursive>:
 80054fc:	4770      	bx	lr

080054fe <__retarget_lock_acquire_recursive>:
 80054fe:	4770      	bx	lr

08005500 <__retarget_lock_release_recursive>:
 8005500:	4770      	bx	lr

08005502 <memcmp>:
 8005502:	b510      	push	{r4, lr}
 8005504:	3901      	subs	r1, #1
 8005506:	4402      	add	r2, r0
 8005508:	4290      	cmp	r0, r2
 800550a:	d101      	bne.n	8005510 <memcmp+0xe>
 800550c:	2000      	movs	r0, #0
 800550e:	e005      	b.n	800551c <memcmp+0x1a>
 8005510:	7803      	ldrb	r3, [r0, #0]
 8005512:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005516:	42a3      	cmp	r3, r4
 8005518:	d001      	beq.n	800551e <memcmp+0x1c>
 800551a:	1b18      	subs	r0, r3, r4
 800551c:	bd10      	pop	{r4, pc}
 800551e:	3001      	adds	r0, #1
 8005520:	e7f2      	b.n	8005508 <memcmp+0x6>

08005522 <memcpy>:
 8005522:	440a      	add	r2, r1
 8005524:	4291      	cmp	r1, r2
 8005526:	f100 33ff 	add.w	r3, r0, #4294967295
 800552a:	d100      	bne.n	800552e <memcpy+0xc>
 800552c:	4770      	bx	lr
 800552e:	b510      	push	{r4, lr}
 8005530:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005534:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005538:	4291      	cmp	r1, r2
 800553a:	d1f9      	bne.n	8005530 <memcpy+0xe>
 800553c:	bd10      	pop	{r4, pc}

0800553e <memset>:
 800553e:	4402      	add	r2, r0
 8005540:	4603      	mov	r3, r0
 8005542:	4293      	cmp	r3, r2
 8005544:	d100      	bne.n	8005548 <memset+0xa>
 8005546:	4770      	bx	lr
 8005548:	f803 1b01 	strb.w	r1, [r3], #1
 800554c:	e7f9      	b.n	8005542 <memset+0x4>
	...

08005550 <sbrk_aligned>:
 8005550:	b570      	push	{r4, r5, r6, lr}
 8005552:	4e0e      	ldr	r6, [pc, #56]	; (800558c <sbrk_aligned+0x3c>)
 8005554:	460c      	mov	r4, r1
 8005556:	6831      	ldr	r1, [r6, #0]
 8005558:	4605      	mov	r5, r0
 800555a:	b911      	cbnz	r1, 8005562 <sbrk_aligned+0x12>
 800555c:	f000 f96c 	bl	8005838 <_sbrk_r>
 8005560:	6030      	str	r0, [r6, #0]
 8005562:	4621      	mov	r1, r4
 8005564:	4628      	mov	r0, r5
 8005566:	f000 f967 	bl	8005838 <_sbrk_r>
 800556a:	1c43      	adds	r3, r0, #1
 800556c:	d00a      	beq.n	8005584 <sbrk_aligned+0x34>
 800556e:	1cc4      	adds	r4, r0, #3
 8005570:	f024 0403 	bic.w	r4, r4, #3
 8005574:	42a0      	cmp	r0, r4
 8005576:	d007      	beq.n	8005588 <sbrk_aligned+0x38>
 8005578:	1a21      	subs	r1, r4, r0
 800557a:	4628      	mov	r0, r5
 800557c:	f000 f95c 	bl	8005838 <_sbrk_r>
 8005580:	3001      	adds	r0, #1
 8005582:	d101      	bne.n	8005588 <sbrk_aligned+0x38>
 8005584:	f04f 34ff 	mov.w	r4, #4294967295
 8005588:	4620      	mov	r0, r4
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	20006770 	.word	0x20006770

08005590 <_malloc_r>:
 8005590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005594:	1ccd      	adds	r5, r1, #3
 8005596:	f025 0503 	bic.w	r5, r5, #3
 800559a:	3508      	adds	r5, #8
 800559c:	2d0c      	cmp	r5, #12
 800559e:	bf38      	it	cc
 80055a0:	250c      	movcc	r5, #12
 80055a2:	2d00      	cmp	r5, #0
 80055a4:	4607      	mov	r7, r0
 80055a6:	db01      	blt.n	80055ac <_malloc_r+0x1c>
 80055a8:	42a9      	cmp	r1, r5
 80055aa:	d905      	bls.n	80055b8 <_malloc_r+0x28>
 80055ac:	230c      	movs	r3, #12
 80055ae:	603b      	str	r3, [r7, #0]
 80055b0:	2600      	movs	r6, #0
 80055b2:	4630      	mov	r0, r6
 80055b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b8:	4e2e      	ldr	r6, [pc, #184]	; (8005674 <_malloc_r+0xe4>)
 80055ba:	f000 fbad 	bl	8005d18 <__malloc_lock>
 80055be:	6833      	ldr	r3, [r6, #0]
 80055c0:	461c      	mov	r4, r3
 80055c2:	bb34      	cbnz	r4, 8005612 <_malloc_r+0x82>
 80055c4:	4629      	mov	r1, r5
 80055c6:	4638      	mov	r0, r7
 80055c8:	f7ff ffc2 	bl	8005550 <sbrk_aligned>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	4604      	mov	r4, r0
 80055d0:	d14d      	bne.n	800566e <_malloc_r+0xde>
 80055d2:	6834      	ldr	r4, [r6, #0]
 80055d4:	4626      	mov	r6, r4
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	d140      	bne.n	800565c <_malloc_r+0xcc>
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	4631      	mov	r1, r6
 80055de:	4638      	mov	r0, r7
 80055e0:	eb04 0803 	add.w	r8, r4, r3
 80055e4:	f000 f928 	bl	8005838 <_sbrk_r>
 80055e8:	4580      	cmp	r8, r0
 80055ea:	d13a      	bne.n	8005662 <_malloc_r+0xd2>
 80055ec:	6821      	ldr	r1, [r4, #0]
 80055ee:	3503      	adds	r5, #3
 80055f0:	1a6d      	subs	r5, r5, r1
 80055f2:	f025 0503 	bic.w	r5, r5, #3
 80055f6:	3508      	adds	r5, #8
 80055f8:	2d0c      	cmp	r5, #12
 80055fa:	bf38      	it	cc
 80055fc:	250c      	movcc	r5, #12
 80055fe:	4629      	mov	r1, r5
 8005600:	4638      	mov	r0, r7
 8005602:	f7ff ffa5 	bl	8005550 <sbrk_aligned>
 8005606:	3001      	adds	r0, #1
 8005608:	d02b      	beq.n	8005662 <_malloc_r+0xd2>
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	442b      	add	r3, r5
 800560e:	6023      	str	r3, [r4, #0]
 8005610:	e00e      	b.n	8005630 <_malloc_r+0xa0>
 8005612:	6822      	ldr	r2, [r4, #0]
 8005614:	1b52      	subs	r2, r2, r5
 8005616:	d41e      	bmi.n	8005656 <_malloc_r+0xc6>
 8005618:	2a0b      	cmp	r2, #11
 800561a:	d916      	bls.n	800564a <_malloc_r+0xba>
 800561c:	1961      	adds	r1, r4, r5
 800561e:	42a3      	cmp	r3, r4
 8005620:	6025      	str	r5, [r4, #0]
 8005622:	bf18      	it	ne
 8005624:	6059      	strne	r1, [r3, #4]
 8005626:	6863      	ldr	r3, [r4, #4]
 8005628:	bf08      	it	eq
 800562a:	6031      	streq	r1, [r6, #0]
 800562c:	5162      	str	r2, [r4, r5]
 800562e:	604b      	str	r3, [r1, #4]
 8005630:	4638      	mov	r0, r7
 8005632:	f104 060b 	add.w	r6, r4, #11
 8005636:	f000 fb75 	bl	8005d24 <__malloc_unlock>
 800563a:	f026 0607 	bic.w	r6, r6, #7
 800563e:	1d23      	adds	r3, r4, #4
 8005640:	1af2      	subs	r2, r6, r3
 8005642:	d0b6      	beq.n	80055b2 <_malloc_r+0x22>
 8005644:	1b9b      	subs	r3, r3, r6
 8005646:	50a3      	str	r3, [r4, r2]
 8005648:	e7b3      	b.n	80055b2 <_malloc_r+0x22>
 800564a:	6862      	ldr	r2, [r4, #4]
 800564c:	42a3      	cmp	r3, r4
 800564e:	bf0c      	ite	eq
 8005650:	6032      	streq	r2, [r6, #0]
 8005652:	605a      	strne	r2, [r3, #4]
 8005654:	e7ec      	b.n	8005630 <_malloc_r+0xa0>
 8005656:	4623      	mov	r3, r4
 8005658:	6864      	ldr	r4, [r4, #4]
 800565a:	e7b2      	b.n	80055c2 <_malloc_r+0x32>
 800565c:	4634      	mov	r4, r6
 800565e:	6876      	ldr	r6, [r6, #4]
 8005660:	e7b9      	b.n	80055d6 <_malloc_r+0x46>
 8005662:	230c      	movs	r3, #12
 8005664:	603b      	str	r3, [r7, #0]
 8005666:	4638      	mov	r0, r7
 8005668:	f000 fb5c 	bl	8005d24 <__malloc_unlock>
 800566c:	e7a1      	b.n	80055b2 <_malloc_r+0x22>
 800566e:	6025      	str	r5, [r4, #0]
 8005670:	e7de      	b.n	8005630 <_malloc_r+0xa0>
 8005672:	bf00      	nop
 8005674:	2000676c 	.word	0x2000676c

08005678 <_puts_r>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	460e      	mov	r6, r1
 800567c:	4605      	mov	r5, r0
 800567e:	b118      	cbz	r0, 8005688 <_puts_r+0x10>
 8005680:	6983      	ldr	r3, [r0, #24]
 8005682:	b90b      	cbnz	r3, 8005688 <_puts_r+0x10>
 8005684:	f7ff fe78 	bl	8005378 <__sinit>
 8005688:	69ab      	ldr	r3, [r5, #24]
 800568a:	68ac      	ldr	r4, [r5, #8]
 800568c:	b913      	cbnz	r3, 8005694 <_puts_r+0x1c>
 800568e:	4628      	mov	r0, r5
 8005690:	f7ff fe72 	bl	8005378 <__sinit>
 8005694:	4b2c      	ldr	r3, [pc, #176]	; (8005748 <_puts_r+0xd0>)
 8005696:	429c      	cmp	r4, r3
 8005698:	d120      	bne.n	80056dc <_puts_r+0x64>
 800569a:	686c      	ldr	r4, [r5, #4]
 800569c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800569e:	07db      	lsls	r3, r3, #31
 80056a0:	d405      	bmi.n	80056ae <_puts_r+0x36>
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	0598      	lsls	r0, r3, #22
 80056a6:	d402      	bmi.n	80056ae <_puts_r+0x36>
 80056a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056aa:	f7ff ff28 	bl	80054fe <__retarget_lock_acquire_recursive>
 80056ae:	89a3      	ldrh	r3, [r4, #12]
 80056b0:	0719      	lsls	r1, r3, #28
 80056b2:	d51d      	bpl.n	80056f0 <_puts_r+0x78>
 80056b4:	6923      	ldr	r3, [r4, #16]
 80056b6:	b1db      	cbz	r3, 80056f0 <_puts_r+0x78>
 80056b8:	3e01      	subs	r6, #1
 80056ba:	68a3      	ldr	r3, [r4, #8]
 80056bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80056c0:	3b01      	subs	r3, #1
 80056c2:	60a3      	str	r3, [r4, #8]
 80056c4:	bb39      	cbnz	r1, 8005716 <_puts_r+0x9e>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	da38      	bge.n	800573c <_puts_r+0xc4>
 80056ca:	4622      	mov	r2, r4
 80056cc:	210a      	movs	r1, #10
 80056ce:	4628      	mov	r0, r5
 80056d0:	f000 f906 	bl	80058e0 <__swbuf_r>
 80056d4:	3001      	adds	r0, #1
 80056d6:	d011      	beq.n	80056fc <_puts_r+0x84>
 80056d8:	250a      	movs	r5, #10
 80056da:	e011      	b.n	8005700 <_puts_r+0x88>
 80056dc:	4b1b      	ldr	r3, [pc, #108]	; (800574c <_puts_r+0xd4>)
 80056de:	429c      	cmp	r4, r3
 80056e0:	d101      	bne.n	80056e6 <_puts_r+0x6e>
 80056e2:	68ac      	ldr	r4, [r5, #8]
 80056e4:	e7da      	b.n	800569c <_puts_r+0x24>
 80056e6:	4b1a      	ldr	r3, [pc, #104]	; (8005750 <_puts_r+0xd8>)
 80056e8:	429c      	cmp	r4, r3
 80056ea:	bf08      	it	eq
 80056ec:	68ec      	ldreq	r4, [r5, #12]
 80056ee:	e7d5      	b.n	800569c <_puts_r+0x24>
 80056f0:	4621      	mov	r1, r4
 80056f2:	4628      	mov	r0, r5
 80056f4:	f000 f958 	bl	80059a8 <__swsetup_r>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d0dd      	beq.n	80056b8 <_puts_r+0x40>
 80056fc:	f04f 35ff 	mov.w	r5, #4294967295
 8005700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005702:	07da      	lsls	r2, r3, #31
 8005704:	d405      	bmi.n	8005712 <_puts_r+0x9a>
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	059b      	lsls	r3, r3, #22
 800570a:	d402      	bmi.n	8005712 <_puts_r+0x9a>
 800570c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800570e:	f7ff fef7 	bl	8005500 <__retarget_lock_release_recursive>
 8005712:	4628      	mov	r0, r5
 8005714:	bd70      	pop	{r4, r5, r6, pc}
 8005716:	2b00      	cmp	r3, #0
 8005718:	da04      	bge.n	8005724 <_puts_r+0xac>
 800571a:	69a2      	ldr	r2, [r4, #24]
 800571c:	429a      	cmp	r2, r3
 800571e:	dc06      	bgt.n	800572e <_puts_r+0xb6>
 8005720:	290a      	cmp	r1, #10
 8005722:	d004      	beq.n	800572e <_puts_r+0xb6>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	6022      	str	r2, [r4, #0]
 800572a:	7019      	strb	r1, [r3, #0]
 800572c:	e7c5      	b.n	80056ba <_puts_r+0x42>
 800572e:	4622      	mov	r2, r4
 8005730:	4628      	mov	r0, r5
 8005732:	f000 f8d5 	bl	80058e0 <__swbuf_r>
 8005736:	3001      	adds	r0, #1
 8005738:	d1bf      	bne.n	80056ba <_puts_r+0x42>
 800573a:	e7df      	b.n	80056fc <_puts_r+0x84>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	250a      	movs	r5, #10
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	6022      	str	r2, [r4, #0]
 8005744:	701d      	strb	r5, [r3, #0]
 8005746:	e7db      	b.n	8005700 <_puts_r+0x88>
 8005748:	08005f84 	.word	0x08005f84
 800574c:	08005fa4 	.word	0x08005fa4
 8005750:	08005f64 	.word	0x08005f64

08005754 <puts>:
 8005754:	4b02      	ldr	r3, [pc, #8]	; (8005760 <puts+0xc>)
 8005756:	4601      	mov	r1, r0
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	f7ff bf8d 	b.w	8005678 <_puts_r>
 800575e:	bf00      	nop
 8005760:	20000010 	.word	0x20000010

08005764 <cleanup_glue>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	460c      	mov	r4, r1
 8005768:	6809      	ldr	r1, [r1, #0]
 800576a:	4605      	mov	r5, r0
 800576c:	b109      	cbz	r1, 8005772 <cleanup_glue+0xe>
 800576e:	f7ff fff9 	bl	8005764 <cleanup_glue>
 8005772:	4621      	mov	r1, r4
 8005774:	4628      	mov	r0, r5
 8005776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800577a:	f000 bad9 	b.w	8005d30 <_free_r>
	...

08005780 <_reclaim_reent>:
 8005780:	4b2c      	ldr	r3, [pc, #176]	; (8005834 <_reclaim_reent+0xb4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4283      	cmp	r3, r0
 8005786:	b570      	push	{r4, r5, r6, lr}
 8005788:	4604      	mov	r4, r0
 800578a:	d051      	beq.n	8005830 <_reclaim_reent+0xb0>
 800578c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800578e:	b143      	cbz	r3, 80057a2 <_reclaim_reent+0x22>
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d14a      	bne.n	800582c <_reclaim_reent+0xac>
 8005796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005798:	6819      	ldr	r1, [r3, #0]
 800579a:	b111      	cbz	r1, 80057a2 <_reclaim_reent+0x22>
 800579c:	4620      	mov	r0, r4
 800579e:	f000 fac7 	bl	8005d30 <_free_r>
 80057a2:	6961      	ldr	r1, [r4, #20]
 80057a4:	b111      	cbz	r1, 80057ac <_reclaim_reent+0x2c>
 80057a6:	4620      	mov	r0, r4
 80057a8:	f000 fac2 	bl	8005d30 <_free_r>
 80057ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80057ae:	b111      	cbz	r1, 80057b6 <_reclaim_reent+0x36>
 80057b0:	4620      	mov	r0, r4
 80057b2:	f000 fabd 	bl	8005d30 <_free_r>
 80057b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80057b8:	b111      	cbz	r1, 80057c0 <_reclaim_reent+0x40>
 80057ba:	4620      	mov	r0, r4
 80057bc:	f000 fab8 	bl	8005d30 <_free_r>
 80057c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80057c2:	b111      	cbz	r1, 80057ca <_reclaim_reent+0x4a>
 80057c4:	4620      	mov	r0, r4
 80057c6:	f000 fab3 	bl	8005d30 <_free_r>
 80057ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80057cc:	b111      	cbz	r1, 80057d4 <_reclaim_reent+0x54>
 80057ce:	4620      	mov	r0, r4
 80057d0:	f000 faae 	bl	8005d30 <_free_r>
 80057d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80057d6:	b111      	cbz	r1, 80057de <_reclaim_reent+0x5e>
 80057d8:	4620      	mov	r0, r4
 80057da:	f000 faa9 	bl	8005d30 <_free_r>
 80057de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80057e0:	b111      	cbz	r1, 80057e8 <_reclaim_reent+0x68>
 80057e2:	4620      	mov	r0, r4
 80057e4:	f000 faa4 	bl	8005d30 <_free_r>
 80057e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ea:	b111      	cbz	r1, 80057f2 <_reclaim_reent+0x72>
 80057ec:	4620      	mov	r0, r4
 80057ee:	f000 fa9f 	bl	8005d30 <_free_r>
 80057f2:	69a3      	ldr	r3, [r4, #24]
 80057f4:	b1e3      	cbz	r3, 8005830 <_reclaim_reent+0xb0>
 80057f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80057f8:	4620      	mov	r0, r4
 80057fa:	4798      	blx	r3
 80057fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80057fe:	b1b9      	cbz	r1, 8005830 <_reclaim_reent+0xb0>
 8005800:	4620      	mov	r0, r4
 8005802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005806:	f7ff bfad 	b.w	8005764 <cleanup_glue>
 800580a:	5949      	ldr	r1, [r1, r5]
 800580c:	b941      	cbnz	r1, 8005820 <_reclaim_reent+0xa0>
 800580e:	3504      	adds	r5, #4
 8005810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005812:	2d80      	cmp	r5, #128	; 0x80
 8005814:	68d9      	ldr	r1, [r3, #12]
 8005816:	d1f8      	bne.n	800580a <_reclaim_reent+0x8a>
 8005818:	4620      	mov	r0, r4
 800581a:	f000 fa89 	bl	8005d30 <_free_r>
 800581e:	e7ba      	b.n	8005796 <_reclaim_reent+0x16>
 8005820:	680e      	ldr	r6, [r1, #0]
 8005822:	4620      	mov	r0, r4
 8005824:	f000 fa84 	bl	8005d30 <_free_r>
 8005828:	4631      	mov	r1, r6
 800582a:	e7ef      	b.n	800580c <_reclaim_reent+0x8c>
 800582c:	2500      	movs	r5, #0
 800582e:	e7ef      	b.n	8005810 <_reclaim_reent+0x90>
 8005830:	bd70      	pop	{r4, r5, r6, pc}
 8005832:	bf00      	nop
 8005834:	20000010 	.word	0x20000010

08005838 <_sbrk_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	4d06      	ldr	r5, [pc, #24]	; (8005854 <_sbrk_r+0x1c>)
 800583c:	2300      	movs	r3, #0
 800583e:	4604      	mov	r4, r0
 8005840:	4608      	mov	r0, r1
 8005842:	602b      	str	r3, [r5, #0]
 8005844:	f7fb f92a 	bl	8000a9c <_sbrk>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d102      	bne.n	8005852 <_sbrk_r+0x1a>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	b103      	cbz	r3, 8005852 <_sbrk_r+0x1a>
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	bd38      	pop	{r3, r4, r5, pc}
 8005854:	20006774 	.word	0x20006774

08005858 <__sread>:
 8005858:	b510      	push	{r4, lr}
 800585a:	460c      	mov	r4, r1
 800585c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005860:	f000 fab2 	bl	8005dc8 <_read_r>
 8005864:	2800      	cmp	r0, #0
 8005866:	bfab      	itete	ge
 8005868:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800586a:	89a3      	ldrhlt	r3, [r4, #12]
 800586c:	181b      	addge	r3, r3, r0
 800586e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005872:	bfac      	ite	ge
 8005874:	6563      	strge	r3, [r4, #84]	; 0x54
 8005876:	81a3      	strhlt	r3, [r4, #12]
 8005878:	bd10      	pop	{r4, pc}

0800587a <__swrite>:
 800587a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800587e:	461f      	mov	r7, r3
 8005880:	898b      	ldrh	r3, [r1, #12]
 8005882:	05db      	lsls	r3, r3, #23
 8005884:	4605      	mov	r5, r0
 8005886:	460c      	mov	r4, r1
 8005888:	4616      	mov	r6, r2
 800588a:	d505      	bpl.n	8005898 <__swrite+0x1e>
 800588c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005890:	2302      	movs	r3, #2
 8005892:	2200      	movs	r2, #0
 8005894:	f000 f9c8 	bl	8005c28 <_lseek_r>
 8005898:	89a3      	ldrh	r3, [r4, #12]
 800589a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800589e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058a2:	81a3      	strh	r3, [r4, #12]
 80058a4:	4632      	mov	r2, r6
 80058a6:	463b      	mov	r3, r7
 80058a8:	4628      	mov	r0, r5
 80058aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058ae:	f000 b869 	b.w	8005984 <_write_r>

080058b2 <__sseek>:
 80058b2:	b510      	push	{r4, lr}
 80058b4:	460c      	mov	r4, r1
 80058b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ba:	f000 f9b5 	bl	8005c28 <_lseek_r>
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	bf15      	itete	ne
 80058c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80058c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058ce:	81a3      	strheq	r3, [r4, #12]
 80058d0:	bf18      	it	ne
 80058d2:	81a3      	strhne	r3, [r4, #12]
 80058d4:	bd10      	pop	{r4, pc}

080058d6 <__sclose>:
 80058d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058da:	f000 b8d3 	b.w	8005a84 <_close_r>
	...

080058e0 <__swbuf_r>:
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e2:	460e      	mov	r6, r1
 80058e4:	4614      	mov	r4, r2
 80058e6:	4605      	mov	r5, r0
 80058e8:	b118      	cbz	r0, 80058f2 <__swbuf_r+0x12>
 80058ea:	6983      	ldr	r3, [r0, #24]
 80058ec:	b90b      	cbnz	r3, 80058f2 <__swbuf_r+0x12>
 80058ee:	f7ff fd43 	bl	8005378 <__sinit>
 80058f2:	4b21      	ldr	r3, [pc, #132]	; (8005978 <__swbuf_r+0x98>)
 80058f4:	429c      	cmp	r4, r3
 80058f6:	d12b      	bne.n	8005950 <__swbuf_r+0x70>
 80058f8:	686c      	ldr	r4, [r5, #4]
 80058fa:	69a3      	ldr	r3, [r4, #24]
 80058fc:	60a3      	str	r3, [r4, #8]
 80058fe:	89a3      	ldrh	r3, [r4, #12]
 8005900:	071a      	lsls	r2, r3, #28
 8005902:	d52f      	bpl.n	8005964 <__swbuf_r+0x84>
 8005904:	6923      	ldr	r3, [r4, #16]
 8005906:	b36b      	cbz	r3, 8005964 <__swbuf_r+0x84>
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	6820      	ldr	r0, [r4, #0]
 800590c:	1ac0      	subs	r0, r0, r3
 800590e:	6963      	ldr	r3, [r4, #20]
 8005910:	b2f6      	uxtb	r6, r6
 8005912:	4283      	cmp	r3, r0
 8005914:	4637      	mov	r7, r6
 8005916:	dc04      	bgt.n	8005922 <__swbuf_r+0x42>
 8005918:	4621      	mov	r1, r4
 800591a:	4628      	mov	r0, r5
 800591c:	f000 f948 	bl	8005bb0 <_fflush_r>
 8005920:	bb30      	cbnz	r0, 8005970 <__swbuf_r+0x90>
 8005922:	68a3      	ldr	r3, [r4, #8]
 8005924:	3b01      	subs	r3, #1
 8005926:	60a3      	str	r3, [r4, #8]
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	6022      	str	r2, [r4, #0]
 800592e:	701e      	strb	r6, [r3, #0]
 8005930:	6963      	ldr	r3, [r4, #20]
 8005932:	3001      	adds	r0, #1
 8005934:	4283      	cmp	r3, r0
 8005936:	d004      	beq.n	8005942 <__swbuf_r+0x62>
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	07db      	lsls	r3, r3, #31
 800593c:	d506      	bpl.n	800594c <__swbuf_r+0x6c>
 800593e:	2e0a      	cmp	r6, #10
 8005940:	d104      	bne.n	800594c <__swbuf_r+0x6c>
 8005942:	4621      	mov	r1, r4
 8005944:	4628      	mov	r0, r5
 8005946:	f000 f933 	bl	8005bb0 <_fflush_r>
 800594a:	b988      	cbnz	r0, 8005970 <__swbuf_r+0x90>
 800594c:	4638      	mov	r0, r7
 800594e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005950:	4b0a      	ldr	r3, [pc, #40]	; (800597c <__swbuf_r+0x9c>)
 8005952:	429c      	cmp	r4, r3
 8005954:	d101      	bne.n	800595a <__swbuf_r+0x7a>
 8005956:	68ac      	ldr	r4, [r5, #8]
 8005958:	e7cf      	b.n	80058fa <__swbuf_r+0x1a>
 800595a:	4b09      	ldr	r3, [pc, #36]	; (8005980 <__swbuf_r+0xa0>)
 800595c:	429c      	cmp	r4, r3
 800595e:	bf08      	it	eq
 8005960:	68ec      	ldreq	r4, [r5, #12]
 8005962:	e7ca      	b.n	80058fa <__swbuf_r+0x1a>
 8005964:	4621      	mov	r1, r4
 8005966:	4628      	mov	r0, r5
 8005968:	f000 f81e 	bl	80059a8 <__swsetup_r>
 800596c:	2800      	cmp	r0, #0
 800596e:	d0cb      	beq.n	8005908 <__swbuf_r+0x28>
 8005970:	f04f 37ff 	mov.w	r7, #4294967295
 8005974:	e7ea      	b.n	800594c <__swbuf_r+0x6c>
 8005976:	bf00      	nop
 8005978:	08005f84 	.word	0x08005f84
 800597c:	08005fa4 	.word	0x08005fa4
 8005980:	08005f64 	.word	0x08005f64

08005984 <_write_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4d07      	ldr	r5, [pc, #28]	; (80059a4 <_write_r+0x20>)
 8005988:	4604      	mov	r4, r0
 800598a:	4608      	mov	r0, r1
 800598c:	4611      	mov	r1, r2
 800598e:	2200      	movs	r2, #0
 8005990:	602a      	str	r2, [r5, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	f7fa fddf 	bl	8000556 <_write>
 8005998:	1c43      	adds	r3, r0, #1
 800599a:	d102      	bne.n	80059a2 <_write_r+0x1e>
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	b103      	cbz	r3, 80059a2 <_write_r+0x1e>
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	bd38      	pop	{r3, r4, r5, pc}
 80059a4:	20006774 	.word	0x20006774

080059a8 <__swsetup_r>:
 80059a8:	4b32      	ldr	r3, [pc, #200]	; (8005a74 <__swsetup_r+0xcc>)
 80059aa:	b570      	push	{r4, r5, r6, lr}
 80059ac:	681d      	ldr	r5, [r3, #0]
 80059ae:	4606      	mov	r6, r0
 80059b0:	460c      	mov	r4, r1
 80059b2:	b125      	cbz	r5, 80059be <__swsetup_r+0x16>
 80059b4:	69ab      	ldr	r3, [r5, #24]
 80059b6:	b913      	cbnz	r3, 80059be <__swsetup_r+0x16>
 80059b8:	4628      	mov	r0, r5
 80059ba:	f7ff fcdd 	bl	8005378 <__sinit>
 80059be:	4b2e      	ldr	r3, [pc, #184]	; (8005a78 <__swsetup_r+0xd0>)
 80059c0:	429c      	cmp	r4, r3
 80059c2:	d10f      	bne.n	80059e4 <__swsetup_r+0x3c>
 80059c4:	686c      	ldr	r4, [r5, #4]
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059cc:	0719      	lsls	r1, r3, #28
 80059ce:	d42c      	bmi.n	8005a2a <__swsetup_r+0x82>
 80059d0:	06dd      	lsls	r5, r3, #27
 80059d2:	d411      	bmi.n	80059f8 <__swsetup_r+0x50>
 80059d4:	2309      	movs	r3, #9
 80059d6:	6033      	str	r3, [r6, #0]
 80059d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059dc:	81a3      	strh	r3, [r4, #12]
 80059de:	f04f 30ff 	mov.w	r0, #4294967295
 80059e2:	e03e      	b.n	8005a62 <__swsetup_r+0xba>
 80059e4:	4b25      	ldr	r3, [pc, #148]	; (8005a7c <__swsetup_r+0xd4>)
 80059e6:	429c      	cmp	r4, r3
 80059e8:	d101      	bne.n	80059ee <__swsetup_r+0x46>
 80059ea:	68ac      	ldr	r4, [r5, #8]
 80059ec:	e7eb      	b.n	80059c6 <__swsetup_r+0x1e>
 80059ee:	4b24      	ldr	r3, [pc, #144]	; (8005a80 <__swsetup_r+0xd8>)
 80059f0:	429c      	cmp	r4, r3
 80059f2:	bf08      	it	eq
 80059f4:	68ec      	ldreq	r4, [r5, #12]
 80059f6:	e7e6      	b.n	80059c6 <__swsetup_r+0x1e>
 80059f8:	0758      	lsls	r0, r3, #29
 80059fa:	d512      	bpl.n	8005a22 <__swsetup_r+0x7a>
 80059fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059fe:	b141      	cbz	r1, 8005a12 <__swsetup_r+0x6a>
 8005a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a04:	4299      	cmp	r1, r3
 8005a06:	d002      	beq.n	8005a0e <__swsetup_r+0x66>
 8005a08:	4630      	mov	r0, r6
 8005a0a:	f000 f991 	bl	8005d30 <_free_r>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	6363      	str	r3, [r4, #52]	; 0x34
 8005a12:	89a3      	ldrh	r3, [r4, #12]
 8005a14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a18:	81a3      	strh	r3, [r4, #12]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	6063      	str	r3, [r4, #4]
 8005a1e:	6923      	ldr	r3, [r4, #16]
 8005a20:	6023      	str	r3, [r4, #0]
 8005a22:	89a3      	ldrh	r3, [r4, #12]
 8005a24:	f043 0308 	orr.w	r3, r3, #8
 8005a28:	81a3      	strh	r3, [r4, #12]
 8005a2a:	6923      	ldr	r3, [r4, #16]
 8005a2c:	b94b      	cbnz	r3, 8005a42 <__swsetup_r+0x9a>
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a38:	d003      	beq.n	8005a42 <__swsetup_r+0x9a>
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	f000 f92b 	bl	8005c98 <__smakebuf_r>
 8005a42:	89a0      	ldrh	r0, [r4, #12]
 8005a44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a48:	f010 0301 	ands.w	r3, r0, #1
 8005a4c:	d00a      	beq.n	8005a64 <__swsetup_r+0xbc>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60a3      	str	r3, [r4, #8]
 8005a52:	6963      	ldr	r3, [r4, #20]
 8005a54:	425b      	negs	r3, r3
 8005a56:	61a3      	str	r3, [r4, #24]
 8005a58:	6923      	ldr	r3, [r4, #16]
 8005a5a:	b943      	cbnz	r3, 8005a6e <__swsetup_r+0xc6>
 8005a5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a60:	d1ba      	bne.n	80059d8 <__swsetup_r+0x30>
 8005a62:	bd70      	pop	{r4, r5, r6, pc}
 8005a64:	0781      	lsls	r1, r0, #30
 8005a66:	bf58      	it	pl
 8005a68:	6963      	ldrpl	r3, [r4, #20]
 8005a6a:	60a3      	str	r3, [r4, #8]
 8005a6c:	e7f4      	b.n	8005a58 <__swsetup_r+0xb0>
 8005a6e:	2000      	movs	r0, #0
 8005a70:	e7f7      	b.n	8005a62 <__swsetup_r+0xba>
 8005a72:	bf00      	nop
 8005a74:	20000010 	.word	0x20000010
 8005a78:	08005f84 	.word	0x08005f84
 8005a7c:	08005fa4 	.word	0x08005fa4
 8005a80:	08005f64 	.word	0x08005f64

08005a84 <_close_r>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	4d06      	ldr	r5, [pc, #24]	; (8005aa0 <_close_r+0x1c>)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	602b      	str	r3, [r5, #0]
 8005a90:	f7fa ffd0 	bl	8000a34 <_close>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_close_r+0x1a>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_close_r+0x1a>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	20006774 	.word	0x20006774

08005aa4 <__sflush_r>:
 8005aa4:	898a      	ldrh	r2, [r1, #12]
 8005aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aaa:	4605      	mov	r5, r0
 8005aac:	0710      	lsls	r0, r2, #28
 8005aae:	460c      	mov	r4, r1
 8005ab0:	d458      	bmi.n	8005b64 <__sflush_r+0xc0>
 8005ab2:	684b      	ldr	r3, [r1, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	dc05      	bgt.n	8005ac4 <__sflush_r+0x20>
 8005ab8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	dc02      	bgt.n	8005ac4 <__sflush_r+0x20>
 8005abe:	2000      	movs	r0, #0
 8005ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ac4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ac6:	2e00      	cmp	r6, #0
 8005ac8:	d0f9      	beq.n	8005abe <__sflush_r+0x1a>
 8005aca:	2300      	movs	r3, #0
 8005acc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ad0:	682f      	ldr	r7, [r5, #0]
 8005ad2:	602b      	str	r3, [r5, #0]
 8005ad4:	d032      	beq.n	8005b3c <__sflush_r+0x98>
 8005ad6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ad8:	89a3      	ldrh	r3, [r4, #12]
 8005ada:	075a      	lsls	r2, r3, #29
 8005adc:	d505      	bpl.n	8005aea <__sflush_r+0x46>
 8005ade:	6863      	ldr	r3, [r4, #4]
 8005ae0:	1ac0      	subs	r0, r0, r3
 8005ae2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ae4:	b10b      	cbz	r3, 8005aea <__sflush_r+0x46>
 8005ae6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ae8:	1ac0      	subs	r0, r0, r3
 8005aea:	2300      	movs	r3, #0
 8005aec:	4602      	mov	r2, r0
 8005aee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005af0:	6a21      	ldr	r1, [r4, #32]
 8005af2:	4628      	mov	r0, r5
 8005af4:	47b0      	blx	r6
 8005af6:	1c43      	adds	r3, r0, #1
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	d106      	bne.n	8005b0a <__sflush_r+0x66>
 8005afc:	6829      	ldr	r1, [r5, #0]
 8005afe:	291d      	cmp	r1, #29
 8005b00:	d82c      	bhi.n	8005b5c <__sflush_r+0xb8>
 8005b02:	4a2a      	ldr	r2, [pc, #168]	; (8005bac <__sflush_r+0x108>)
 8005b04:	40ca      	lsrs	r2, r1
 8005b06:	07d6      	lsls	r6, r2, #31
 8005b08:	d528      	bpl.n	8005b5c <__sflush_r+0xb8>
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	6062      	str	r2, [r4, #4]
 8005b0e:	04d9      	lsls	r1, r3, #19
 8005b10:	6922      	ldr	r2, [r4, #16]
 8005b12:	6022      	str	r2, [r4, #0]
 8005b14:	d504      	bpl.n	8005b20 <__sflush_r+0x7c>
 8005b16:	1c42      	adds	r2, r0, #1
 8005b18:	d101      	bne.n	8005b1e <__sflush_r+0x7a>
 8005b1a:	682b      	ldr	r3, [r5, #0]
 8005b1c:	b903      	cbnz	r3, 8005b20 <__sflush_r+0x7c>
 8005b1e:	6560      	str	r0, [r4, #84]	; 0x54
 8005b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b22:	602f      	str	r7, [r5, #0]
 8005b24:	2900      	cmp	r1, #0
 8005b26:	d0ca      	beq.n	8005abe <__sflush_r+0x1a>
 8005b28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b2c:	4299      	cmp	r1, r3
 8005b2e:	d002      	beq.n	8005b36 <__sflush_r+0x92>
 8005b30:	4628      	mov	r0, r5
 8005b32:	f000 f8fd 	bl	8005d30 <_free_r>
 8005b36:	2000      	movs	r0, #0
 8005b38:	6360      	str	r0, [r4, #52]	; 0x34
 8005b3a:	e7c1      	b.n	8005ac0 <__sflush_r+0x1c>
 8005b3c:	6a21      	ldr	r1, [r4, #32]
 8005b3e:	2301      	movs	r3, #1
 8005b40:	4628      	mov	r0, r5
 8005b42:	47b0      	blx	r6
 8005b44:	1c41      	adds	r1, r0, #1
 8005b46:	d1c7      	bne.n	8005ad8 <__sflush_r+0x34>
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0c4      	beq.n	8005ad8 <__sflush_r+0x34>
 8005b4e:	2b1d      	cmp	r3, #29
 8005b50:	d001      	beq.n	8005b56 <__sflush_r+0xb2>
 8005b52:	2b16      	cmp	r3, #22
 8005b54:	d101      	bne.n	8005b5a <__sflush_r+0xb6>
 8005b56:	602f      	str	r7, [r5, #0]
 8005b58:	e7b1      	b.n	8005abe <__sflush_r+0x1a>
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b60:	81a3      	strh	r3, [r4, #12]
 8005b62:	e7ad      	b.n	8005ac0 <__sflush_r+0x1c>
 8005b64:	690f      	ldr	r7, [r1, #16]
 8005b66:	2f00      	cmp	r7, #0
 8005b68:	d0a9      	beq.n	8005abe <__sflush_r+0x1a>
 8005b6a:	0793      	lsls	r3, r2, #30
 8005b6c:	680e      	ldr	r6, [r1, #0]
 8005b6e:	bf08      	it	eq
 8005b70:	694b      	ldreq	r3, [r1, #20]
 8005b72:	600f      	str	r7, [r1, #0]
 8005b74:	bf18      	it	ne
 8005b76:	2300      	movne	r3, #0
 8005b78:	eba6 0807 	sub.w	r8, r6, r7
 8005b7c:	608b      	str	r3, [r1, #8]
 8005b7e:	f1b8 0f00 	cmp.w	r8, #0
 8005b82:	dd9c      	ble.n	8005abe <__sflush_r+0x1a>
 8005b84:	6a21      	ldr	r1, [r4, #32]
 8005b86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b88:	4643      	mov	r3, r8
 8005b8a:	463a      	mov	r2, r7
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	47b0      	blx	r6
 8005b90:	2800      	cmp	r0, #0
 8005b92:	dc06      	bgt.n	8005ba2 <__sflush_r+0xfe>
 8005b94:	89a3      	ldrh	r3, [r4, #12]
 8005b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b9a:	81a3      	strh	r3, [r4, #12]
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	e78e      	b.n	8005ac0 <__sflush_r+0x1c>
 8005ba2:	4407      	add	r7, r0
 8005ba4:	eba8 0800 	sub.w	r8, r8, r0
 8005ba8:	e7e9      	b.n	8005b7e <__sflush_r+0xda>
 8005baa:	bf00      	nop
 8005bac:	20400001 	.word	0x20400001

08005bb0 <_fflush_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	690b      	ldr	r3, [r1, #16]
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	b913      	cbnz	r3, 8005bc0 <_fflush_r+0x10>
 8005bba:	2500      	movs	r5, #0
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}
 8005bc0:	b118      	cbz	r0, 8005bca <_fflush_r+0x1a>
 8005bc2:	6983      	ldr	r3, [r0, #24]
 8005bc4:	b90b      	cbnz	r3, 8005bca <_fflush_r+0x1a>
 8005bc6:	f7ff fbd7 	bl	8005378 <__sinit>
 8005bca:	4b14      	ldr	r3, [pc, #80]	; (8005c1c <_fflush_r+0x6c>)
 8005bcc:	429c      	cmp	r4, r3
 8005bce:	d11b      	bne.n	8005c08 <_fflush_r+0x58>
 8005bd0:	686c      	ldr	r4, [r5, #4]
 8005bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0ef      	beq.n	8005bba <_fflush_r+0xa>
 8005bda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005bdc:	07d0      	lsls	r0, r2, #31
 8005bde:	d404      	bmi.n	8005bea <_fflush_r+0x3a>
 8005be0:	0599      	lsls	r1, r3, #22
 8005be2:	d402      	bmi.n	8005bea <_fflush_r+0x3a>
 8005be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005be6:	f7ff fc8a 	bl	80054fe <__retarget_lock_acquire_recursive>
 8005bea:	4628      	mov	r0, r5
 8005bec:	4621      	mov	r1, r4
 8005bee:	f7ff ff59 	bl	8005aa4 <__sflush_r>
 8005bf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bf4:	07da      	lsls	r2, r3, #31
 8005bf6:	4605      	mov	r5, r0
 8005bf8:	d4e0      	bmi.n	8005bbc <_fflush_r+0xc>
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	059b      	lsls	r3, r3, #22
 8005bfe:	d4dd      	bmi.n	8005bbc <_fflush_r+0xc>
 8005c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c02:	f7ff fc7d 	bl	8005500 <__retarget_lock_release_recursive>
 8005c06:	e7d9      	b.n	8005bbc <_fflush_r+0xc>
 8005c08:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <_fflush_r+0x70>)
 8005c0a:	429c      	cmp	r4, r3
 8005c0c:	d101      	bne.n	8005c12 <_fflush_r+0x62>
 8005c0e:	68ac      	ldr	r4, [r5, #8]
 8005c10:	e7df      	b.n	8005bd2 <_fflush_r+0x22>
 8005c12:	4b04      	ldr	r3, [pc, #16]	; (8005c24 <_fflush_r+0x74>)
 8005c14:	429c      	cmp	r4, r3
 8005c16:	bf08      	it	eq
 8005c18:	68ec      	ldreq	r4, [r5, #12]
 8005c1a:	e7da      	b.n	8005bd2 <_fflush_r+0x22>
 8005c1c:	08005f84 	.word	0x08005f84
 8005c20:	08005fa4 	.word	0x08005fa4
 8005c24:	08005f64 	.word	0x08005f64

08005c28 <_lseek_r>:
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	4d07      	ldr	r5, [pc, #28]	; (8005c48 <_lseek_r+0x20>)
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	4608      	mov	r0, r1
 8005c30:	4611      	mov	r1, r2
 8005c32:	2200      	movs	r2, #0
 8005c34:	602a      	str	r2, [r5, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	f7fa ff23 	bl	8000a82 <_lseek>
 8005c3c:	1c43      	adds	r3, r0, #1
 8005c3e:	d102      	bne.n	8005c46 <_lseek_r+0x1e>
 8005c40:	682b      	ldr	r3, [r5, #0]
 8005c42:	b103      	cbz	r3, 8005c46 <_lseek_r+0x1e>
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	bd38      	pop	{r3, r4, r5, pc}
 8005c48:	20006774 	.word	0x20006774

08005c4c <__swhatbuf_r>:
 8005c4c:	b570      	push	{r4, r5, r6, lr}
 8005c4e:	460e      	mov	r6, r1
 8005c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c54:	2900      	cmp	r1, #0
 8005c56:	b096      	sub	sp, #88	; 0x58
 8005c58:	4614      	mov	r4, r2
 8005c5a:	461d      	mov	r5, r3
 8005c5c:	da08      	bge.n	8005c70 <__swhatbuf_r+0x24>
 8005c5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	602a      	str	r2, [r5, #0]
 8005c66:	061a      	lsls	r2, r3, #24
 8005c68:	d410      	bmi.n	8005c8c <__swhatbuf_r+0x40>
 8005c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c6e:	e00e      	b.n	8005c8e <__swhatbuf_r+0x42>
 8005c70:	466a      	mov	r2, sp
 8005c72:	f000 f8bb 	bl	8005dec <_fstat_r>
 8005c76:	2800      	cmp	r0, #0
 8005c78:	dbf1      	blt.n	8005c5e <__swhatbuf_r+0x12>
 8005c7a:	9a01      	ldr	r2, [sp, #4]
 8005c7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c84:	425a      	negs	r2, r3
 8005c86:	415a      	adcs	r2, r3
 8005c88:	602a      	str	r2, [r5, #0]
 8005c8a:	e7ee      	b.n	8005c6a <__swhatbuf_r+0x1e>
 8005c8c:	2340      	movs	r3, #64	; 0x40
 8005c8e:	2000      	movs	r0, #0
 8005c90:	6023      	str	r3, [r4, #0]
 8005c92:	b016      	add	sp, #88	; 0x58
 8005c94:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c98 <__smakebuf_r>:
 8005c98:	898b      	ldrh	r3, [r1, #12]
 8005c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c9c:	079d      	lsls	r5, r3, #30
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	d507      	bpl.n	8005cb4 <__smakebuf_r+0x1c>
 8005ca4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	6123      	str	r3, [r4, #16]
 8005cac:	2301      	movs	r3, #1
 8005cae:	6163      	str	r3, [r4, #20]
 8005cb0:	b002      	add	sp, #8
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	ab01      	add	r3, sp, #4
 8005cb6:	466a      	mov	r2, sp
 8005cb8:	f7ff ffc8 	bl	8005c4c <__swhatbuf_r>
 8005cbc:	9900      	ldr	r1, [sp, #0]
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f7ff fc65 	bl	8005590 <_malloc_r>
 8005cc6:	b948      	cbnz	r0, 8005cdc <__smakebuf_r+0x44>
 8005cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ccc:	059a      	lsls	r2, r3, #22
 8005cce:	d4ef      	bmi.n	8005cb0 <__smakebuf_r+0x18>
 8005cd0:	f023 0303 	bic.w	r3, r3, #3
 8005cd4:	f043 0302 	orr.w	r3, r3, #2
 8005cd8:	81a3      	strh	r3, [r4, #12]
 8005cda:	e7e3      	b.n	8005ca4 <__smakebuf_r+0xc>
 8005cdc:	4b0d      	ldr	r3, [pc, #52]	; (8005d14 <__smakebuf_r+0x7c>)
 8005cde:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	6020      	str	r0, [r4, #0]
 8005ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce8:	81a3      	strh	r3, [r4, #12]
 8005cea:	9b00      	ldr	r3, [sp, #0]
 8005cec:	6163      	str	r3, [r4, #20]
 8005cee:	9b01      	ldr	r3, [sp, #4]
 8005cf0:	6120      	str	r0, [r4, #16]
 8005cf2:	b15b      	cbz	r3, 8005d0c <__smakebuf_r+0x74>
 8005cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	f000 f889 	bl	8005e10 <_isatty_r>
 8005cfe:	b128      	cbz	r0, 8005d0c <__smakebuf_r+0x74>
 8005d00:	89a3      	ldrh	r3, [r4, #12]
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	f043 0301 	orr.w	r3, r3, #1
 8005d0a:	81a3      	strh	r3, [r4, #12]
 8005d0c:	89a0      	ldrh	r0, [r4, #12]
 8005d0e:	4305      	orrs	r5, r0
 8005d10:	81a5      	strh	r5, [r4, #12]
 8005d12:	e7cd      	b.n	8005cb0 <__smakebuf_r+0x18>
 8005d14:	08005311 	.word	0x08005311

08005d18 <__malloc_lock>:
 8005d18:	4801      	ldr	r0, [pc, #4]	; (8005d20 <__malloc_lock+0x8>)
 8005d1a:	f7ff bbf0 	b.w	80054fe <__retarget_lock_acquire_recursive>
 8005d1e:	bf00      	nop
 8005d20:	20006767 	.word	0x20006767

08005d24 <__malloc_unlock>:
 8005d24:	4801      	ldr	r0, [pc, #4]	; (8005d2c <__malloc_unlock+0x8>)
 8005d26:	f7ff bbeb 	b.w	8005500 <__retarget_lock_release_recursive>
 8005d2a:	bf00      	nop
 8005d2c:	20006767 	.word	0x20006767

08005d30 <_free_r>:
 8005d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d32:	2900      	cmp	r1, #0
 8005d34:	d044      	beq.n	8005dc0 <_free_r+0x90>
 8005d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d3a:	9001      	str	r0, [sp, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8005d42:	bfb8      	it	lt
 8005d44:	18e4      	addlt	r4, r4, r3
 8005d46:	f7ff ffe7 	bl	8005d18 <__malloc_lock>
 8005d4a:	4a1e      	ldr	r2, [pc, #120]	; (8005dc4 <_free_r+0x94>)
 8005d4c:	9801      	ldr	r0, [sp, #4]
 8005d4e:	6813      	ldr	r3, [r2, #0]
 8005d50:	b933      	cbnz	r3, 8005d60 <_free_r+0x30>
 8005d52:	6063      	str	r3, [r4, #4]
 8005d54:	6014      	str	r4, [r2, #0]
 8005d56:	b003      	add	sp, #12
 8005d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d5c:	f7ff bfe2 	b.w	8005d24 <__malloc_unlock>
 8005d60:	42a3      	cmp	r3, r4
 8005d62:	d908      	bls.n	8005d76 <_free_r+0x46>
 8005d64:	6825      	ldr	r5, [r4, #0]
 8005d66:	1961      	adds	r1, r4, r5
 8005d68:	428b      	cmp	r3, r1
 8005d6a:	bf01      	itttt	eq
 8005d6c:	6819      	ldreq	r1, [r3, #0]
 8005d6e:	685b      	ldreq	r3, [r3, #4]
 8005d70:	1949      	addeq	r1, r1, r5
 8005d72:	6021      	streq	r1, [r4, #0]
 8005d74:	e7ed      	b.n	8005d52 <_free_r+0x22>
 8005d76:	461a      	mov	r2, r3
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	b10b      	cbz	r3, 8005d80 <_free_r+0x50>
 8005d7c:	42a3      	cmp	r3, r4
 8005d7e:	d9fa      	bls.n	8005d76 <_free_r+0x46>
 8005d80:	6811      	ldr	r1, [r2, #0]
 8005d82:	1855      	adds	r5, r2, r1
 8005d84:	42a5      	cmp	r5, r4
 8005d86:	d10b      	bne.n	8005da0 <_free_r+0x70>
 8005d88:	6824      	ldr	r4, [r4, #0]
 8005d8a:	4421      	add	r1, r4
 8005d8c:	1854      	adds	r4, r2, r1
 8005d8e:	42a3      	cmp	r3, r4
 8005d90:	6011      	str	r1, [r2, #0]
 8005d92:	d1e0      	bne.n	8005d56 <_free_r+0x26>
 8005d94:	681c      	ldr	r4, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	6053      	str	r3, [r2, #4]
 8005d9a:	4421      	add	r1, r4
 8005d9c:	6011      	str	r1, [r2, #0]
 8005d9e:	e7da      	b.n	8005d56 <_free_r+0x26>
 8005da0:	d902      	bls.n	8005da8 <_free_r+0x78>
 8005da2:	230c      	movs	r3, #12
 8005da4:	6003      	str	r3, [r0, #0]
 8005da6:	e7d6      	b.n	8005d56 <_free_r+0x26>
 8005da8:	6825      	ldr	r5, [r4, #0]
 8005daa:	1961      	adds	r1, r4, r5
 8005dac:	428b      	cmp	r3, r1
 8005dae:	bf04      	itt	eq
 8005db0:	6819      	ldreq	r1, [r3, #0]
 8005db2:	685b      	ldreq	r3, [r3, #4]
 8005db4:	6063      	str	r3, [r4, #4]
 8005db6:	bf04      	itt	eq
 8005db8:	1949      	addeq	r1, r1, r5
 8005dba:	6021      	streq	r1, [r4, #0]
 8005dbc:	6054      	str	r4, [r2, #4]
 8005dbe:	e7ca      	b.n	8005d56 <_free_r+0x26>
 8005dc0:	b003      	add	sp, #12
 8005dc2:	bd30      	pop	{r4, r5, pc}
 8005dc4:	2000676c 	.word	0x2000676c

08005dc8 <_read_r>:
 8005dc8:	b538      	push	{r3, r4, r5, lr}
 8005dca:	4d07      	ldr	r5, [pc, #28]	; (8005de8 <_read_r+0x20>)
 8005dcc:	4604      	mov	r4, r0
 8005dce:	4608      	mov	r0, r1
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	602a      	str	r2, [r5, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f7fa fe0f 	bl	80009fa <_read>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d102      	bne.n	8005de6 <_read_r+0x1e>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	b103      	cbz	r3, 8005de6 <_read_r+0x1e>
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	20006774 	.word	0x20006774

08005dec <_fstat_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	4d07      	ldr	r5, [pc, #28]	; (8005e0c <_fstat_r+0x20>)
 8005df0:	2300      	movs	r3, #0
 8005df2:	4604      	mov	r4, r0
 8005df4:	4608      	mov	r0, r1
 8005df6:	4611      	mov	r1, r2
 8005df8:	602b      	str	r3, [r5, #0]
 8005dfa:	f7fa fe27 	bl	8000a4c <_fstat>
 8005dfe:	1c43      	adds	r3, r0, #1
 8005e00:	d102      	bne.n	8005e08 <_fstat_r+0x1c>
 8005e02:	682b      	ldr	r3, [r5, #0]
 8005e04:	b103      	cbz	r3, 8005e08 <_fstat_r+0x1c>
 8005e06:	6023      	str	r3, [r4, #0]
 8005e08:	bd38      	pop	{r3, r4, r5, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20006774 	.word	0x20006774

08005e10 <_isatty_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	4d06      	ldr	r5, [pc, #24]	; (8005e2c <_isatty_r+0x1c>)
 8005e14:	2300      	movs	r3, #0
 8005e16:	4604      	mov	r4, r0
 8005e18:	4608      	mov	r0, r1
 8005e1a:	602b      	str	r3, [r5, #0]
 8005e1c:	f7fa fe26 	bl	8000a6c <_isatty>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d102      	bne.n	8005e2a <_isatty_r+0x1a>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	b103      	cbz	r3, 8005e2a <_isatty_r+0x1a>
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	20006774 	.word	0x20006774

08005e30 <_init>:
 8005e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e32:	bf00      	nop
 8005e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e36:	bc08      	pop	{r3}
 8005e38:	469e      	mov	lr, r3
 8005e3a:	4770      	bx	lr

08005e3c <_fini>:
 8005e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3e:	bf00      	nop
 8005e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e42:	bc08      	pop	{r3}
 8005e44:	469e      	mov	lr, r3
 8005e46:	4770      	bx	lr
