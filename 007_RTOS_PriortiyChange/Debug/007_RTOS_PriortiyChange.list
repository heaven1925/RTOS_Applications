
007_RTOS_PriortiyChange.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  0800cf24  0800cf24  0001cf24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d190  0800d190  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d190  0800d190  0001d190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d198  0800d198  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d198  0800d198  0001d198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d19c  0800d19c  0001d19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d1a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00006dac  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006e40  20006e40  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020408  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b3c  00000000  00000000  000404cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001780  00000000  00000000  00045008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015a8  00000000  00000000  00046788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027e0e  00000000  00000000  00047d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e55a  00000000  00000000  0006fb3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc2e8  00000000  00000000  0008e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016a380  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000069e0  00000000  00000000  0016a3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cf0c 	.word	0x0800cf0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800cf0c 	.word	0x0800cf0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <vApplicationGetIdleTaskMemory+0x30>)
 800058a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	200000b0 	.word	0x200000b0
 80005a4:	20000104 	.word	0x20000104

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	DWT->CTRL |= ( 1 << 0 );
 80005ae:	4b23      	ldr	r3, [pc, #140]	; (800063c <main+0x94>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a22      	ldr	r2, [pc, #136]	; (800063c <main+0x94>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fc5f 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f853 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f8e5 	bl	8000790 <MX_GPIO_Init>
 // MX_I2C1_Init();
 // MX_I2S3_Init();
 // MX_SPI1_Init();
  MX_USART2_UART_Init();
 80005c6:	f000 f8b9 	bl	800073c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	SEGGER_SYSVIEW_Conf();
 80005ca:	f009 fb25 	bl	8009c18 <SEGGER_SYSVIEW_Conf>
	vSetVarulMaxPRIGROUPValuE();
 80005ce:	f009 f8d3 	bl	8009778 <vSetVarulMaxPRIGROUPValuE>
	SEGGER_SYSVIEW_Start();
 80005d2:	f00a fb01 	bl	800abd8 <SEGGER_SYSVIEW_Start>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <main+0x98>)
 80005d8:	1d3c      	adds	r4, r7, #4
 80005da:	461d      	mov	r5, r3
 80005dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f006 fe8c 	bl	800730a <osThreadCreate>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a13      	ldr	r2, [pc, #76]	; (8000644 <main+0x9c>)
 80005f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2102      	movs	r1, #2
 80005fc:	4812      	ldr	r0, [pc, #72]	; (8000648 <main+0xa0>)
 80005fe:	f000 ff81 	bl	8001504 <HAL_GPIO_WritePin>

	printf("Starting RTOS Project. \n");
 8000602:	4812      	ldr	r0, [pc, #72]	; (800064c <main+0xa4>)
 8000604:	f00b fd70 	bl	800c0e8 <puts>

	xTaskCreate(Task1_Handler, "Task1", configMINIMAL_STACK_SIZE, NULL, 4,
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <main+0xa8>)
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2304      	movs	r3, #4
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	490f      	ldr	r1, [pc, #60]	; (8000654 <main+0xac>)
 8000616:	4810      	ldr	r0, [pc, #64]	; (8000658 <main+0xb0>)
 8000618:	f007 fe99 	bl	800834e <xTaskCreate>
			&myTaskHandle1);
	xTaskCreate(Task2_Handler, "Task2", configMINIMAL_STACK_SIZE, NULL, 2,
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <main+0xb4>)
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2302      	movs	r3, #2
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2300      	movs	r3, #0
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	490d      	ldr	r1, [pc, #52]	; (8000660 <main+0xb8>)
 800062a:	480e      	ldr	r0, [pc, #56]	; (8000664 <main+0xbc>)
 800062c:	f007 fe8f 	bl	800834e <xTaskCreate>
			&myTaskHandle2);

	// TASK1 prio yuksek oldugu icin surekli calisacak
	vTaskStartScheduler();
 8000630:	f008 f8f4 	bl	800881c <vTaskStartScheduler>

	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000634:	f006 fe62 	bl	80072fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000638:	e7fe      	b.n	8000638 <main+0x90>
 800063a:	bf00      	nop
 800063c:	e0001000 	.word	0xe0001000
 8000640:	0800cf58 	.word	0x0800cf58
 8000644:	20000348 	.word	0x20000348
 8000648:	40020000 	.word	0x40020000
 800064c:	0800cf30 	.word	0x0800cf30
 8000650:	2000034c 	.word	0x2000034c
 8000654:	0800cf48 	.word	0x0800cf48
 8000658:	080009c1 	.word	0x080009c1
 800065c:	20000350 	.word	0x20000350
 8000660:	0800cf50 	.word	0x0800cf50
 8000664:	08000a81 	.word	0x08000a81

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f00b fbe0 	bl	800be3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a27      	ldr	r2, [pc, #156]	; (8000734 <SystemClock_Config+0xcc>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a21      	ldr	r2, [pc, #132]	; (8000738 <SystemClock_Config+0xd0>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c4:	2301      	movs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d8:	2304      	movs	r3, #4
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006dc:	23a8      	movs	r3, #168	; 0xa8
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e4:	2307      	movs	r3, #7
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0320 	add.w	r3, r7, #32
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 fb51 	bl	8002d94 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f8:	f000 fa2c 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2302      	movs	r3, #2
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000704:	2390      	movs	r3, #144	; 0x90
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000708:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000712:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2101      	movs	r1, #1
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fdb2 	bl	8003284 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000726:	f000 fa15 	bl	8000b54 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	; 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART2_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000748:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000774:	f002 ffa6 	bl	80036c4 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f9e9 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000304 	.word	0x20000304
 800078c:	40004400 	.word	0x40004400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	4b7f      	ldr	r3, [pc, #508]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a7e      	ldr	r2, [pc, #504]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b7c      	ldr	r3, [pc, #496]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	4b78      	ldr	r3, [pc, #480]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a77      	ldr	r2, [pc, #476]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b75      	ldr	r3, [pc, #468]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b71      	ldr	r3, [pc, #452]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a70      	ldr	r2, [pc, #448]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b6e      	ldr	r3, [pc, #440]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b6a      	ldr	r3, [pc, #424]	; (80009a8 <MX_GPIO_Init+0x218>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a69      	ldr	r2, [pc, #420]	; (80009a8 <MX_GPIO_Init+0x218>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b67      	ldr	r3, [pc, #412]	; (80009a8 <MX_GPIO_Init+0x218>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b63      	ldr	r3, [pc, #396]	; (80009a8 <MX_GPIO_Init+0x218>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a62      	ldr	r2, [pc, #392]	; (80009a8 <MX_GPIO_Init+0x218>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b60      	ldr	r3, [pc, #384]	; (80009a8 <MX_GPIO_Init+0x218>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b5c      	ldr	r3, [pc, #368]	; (80009a8 <MX_GPIO_Init+0x218>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a5b      	ldr	r2, [pc, #364]	; (80009a8 <MX_GPIO_Init+0x218>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b59      	ldr	r3, [pc, #356]	; (80009a8 <MX_GPIO_Init+0x218>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	4856      	ldr	r0, [pc, #344]	; (80009ac <MX_GPIO_Init+0x21c>)
 8000854:	f000 fe56 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2101      	movs	r1, #1
 800085c:	4854      	ldr	r0, [pc, #336]	; (80009b0 <MX_GPIO_Init+0x220>)
 800085e:	f000 fe51 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2102      	movs	r1, #2
 8000866:	4853      	ldr	r0, [pc, #332]	; (80009b4 <MX_GPIO_Init+0x224>)
 8000868:	f000 fe4c 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086c:	2200      	movs	r2, #0
 800086e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000872:	4851      	ldr	r0, [pc, #324]	; (80009b8 <MX_GPIO_Init+0x228>)
 8000874:	f000 fe46 	bl	8001504 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000878:	2308      	movs	r3, #8
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4847      	ldr	r0, [pc, #284]	; (80009ac <MX_GPIO_Init+0x21c>)
 8000890:	f000 fc9c 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000894:	2301      	movs	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	4841      	ldr	r0, [pc, #260]	; (80009b0 <MX_GPIO_Init+0x220>)
 80008ac:	f000 fc8e 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008b0:	2308      	movs	r3, #8
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c0:	2305      	movs	r3, #5
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4839      	ldr	r0, [pc, #228]	; (80009b0 <MX_GPIO_Init+0x220>)
 80008cc:	f000 fc7e 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008d0:	2301      	movs	r3, #1
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008da:	2302      	movs	r3, #2
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4833      	ldr	r0, [pc, #204]	; (80009b4 <MX_GPIO_Init+0x224>)
 80008e6:	f000 fc71 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	482c      	ldr	r0, [pc, #176]	; (80009b4 <MX_GPIO_Init+0x224>)
 8000902:	f000 fc63 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000906:	2304      	movs	r3, #4
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4828      	ldr	r0, [pc, #160]	; (80009bc <MX_GPIO_Init+0x22c>)
 800091a:	f000 fc57 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800091e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000930:	2305      	movs	r3, #5
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4820      	ldr	r0, [pc, #128]	; (80009bc <MX_GPIO_Init+0x22c>)
 800093c:	f000 fc46 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000940:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000944:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4817      	ldr	r0, [pc, #92]	; (80009b8 <MX_GPIO_Init+0x228>)
 800095a:	f000 fc37 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800095e:	2320      	movs	r3, #32
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4811      	ldr	r0, [pc, #68]	; (80009b8 <MX_GPIO_Init+0x228>)
 8000972:	f000 fc2b 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000976:	2302      	movs	r3, #2
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800097a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4808      	ldr	r0, [pc, #32]	; (80009ac <MX_GPIO_Init+0x21c>)
 800098c:	f000 fc1e 	bl	80011cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2105      	movs	r1, #5
 8000994:	2006      	movs	r0, #6
 8000996:	f000 fbe2 	bl	800115e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800099a:	2006      	movs	r0, #6
 800099c:	f000 fbfb 	bl	8001196 <HAL_NVIC_EnableIRQ>

}
 80009a0:	bf00      	nop
 80009a2:	3730      	adds	r7, #48	; 0x30
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020c00 	.word	0x40020c00
 80009bc:	40020400 	.word	0x40020400

080009c0 <Task1_Handler>:

/* USER CODE BEGIN 4 */


void Task1_Handler(void *params)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	UBaseType_t  pr1, pr2;

	sprintf(&message[0], "Task 1 is running \r\n" );
 80009c8:	4925      	ldr	r1, [pc, #148]	; (8000a60 <Task1_Handler+0xa0>)
 80009ca:	4826      	ldr	r0, [pc, #152]	; (8000a64 <Task1_Handler+0xa4>)
 80009cc:	f00b fba4 	bl	800c118 <siprintf>
	HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 80009d0:	2364      	movs	r3, #100	; 0x64
 80009d2:	2219      	movs	r2, #25
 80009d4:	4923      	ldr	r1, [pc, #140]	; (8000a64 <Task1_Handler+0xa4>)
 80009d6:	4824      	ldr	r0, [pc, #144]	; (8000a68 <Task1_Handler+0xa8>)
 80009d8:	f002 fec1 	bl	800375e <HAL_UART_Transmit>

	sprintf(&message[0], "Task 1 prio = %x \r\n" , uxTaskPriorityGet(myTaskHandle1) );
 80009dc:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <Task1_Handler+0xac>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f007 fe41 	bl	8008668 <uxTaskPriorityGet>
 80009e6:	4603      	mov	r3, r0
 80009e8:	461a      	mov	r2, r3
 80009ea:	4921      	ldr	r1, [pc, #132]	; (8000a70 <Task1_Handler+0xb0>)
 80009ec:	481d      	ldr	r0, [pc, #116]	; (8000a64 <Task1_Handler+0xa4>)
 80009ee:	f00b fb93 	bl	800c118 <siprintf>
	HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 80009f2:	2364      	movs	r3, #100	; 0x64
 80009f4:	2219      	movs	r2, #25
 80009f6:	491b      	ldr	r1, [pc, #108]	; (8000a64 <Task1_Handler+0xa4>)
 80009f8:	481b      	ldr	r0, [pc, #108]	; (8000a68 <Task1_Handler+0xa8>)
 80009fa:	f002 feb0 	bl	800375e <HAL_UART_Transmit>

	sprintf(&message[0], "Task 2 prio = %x \r\n" , uxTaskPriorityGet(myTaskHandle2) );
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <Task1_Handler+0xb4>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f007 fe30 	bl	8008668 <uxTaskPriorityGet>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	491a      	ldr	r1, [pc, #104]	; (8000a78 <Task1_Handler+0xb8>)
 8000a0e:	4815      	ldr	r0, [pc, #84]	; (8000a64 <Task1_Handler+0xa4>)
 8000a10:	f00b fb82 	bl	800c118 <siprintf>
	HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 8000a14:	2364      	movs	r3, #100	; 0x64
 8000a16:	2219      	movs	r2, #25
 8000a18:	4912      	ldr	r1, [pc, #72]	; (8000a64 <Task1_Handler+0xa4>)
 8000a1a:	4813      	ldr	r0, [pc, #76]	; (8000a68 <Task1_Handler+0xa8>)
 8000a1c:	f002 fe9f 	bl	800375e <HAL_UART_Transmit>

	while(1)
	{
		if(button_state == 1 )
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <Task1_Handler+0xbc>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d1fb      	bne.n	8000a20 <Task1_Handler+0x60>
		{// it girildi demektir.
			button_state = 0;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <Task1_Handler+0xbc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
			pr1 = uxTaskPriorityGet(myTaskHandle1);
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <Task1_Handler+0xac>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f007 fe18 	bl	8008668 <uxTaskPriorityGet>
 8000a38:	60f8      	str	r0, [r7, #12]
			pr2 = uxTaskPriorityGet(myTaskHandle2);
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <Task1_Handler+0xb4>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f007 fe12 	bl	8008668 <uxTaskPriorityGet>
 8000a44:	60b8      	str	r0, [r7, #8]

			vTaskPrioritySet(myTaskHandle1, pr2);
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <Task1_Handler+0xac>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	68b9      	ldr	r1, [r7, #8]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f007 fe25 	bl	800869c <vTaskPrioritySet>
			vTaskPrioritySet(myTaskHandle2, pr1);
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <Task1_Handler+0xb4>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	68f9      	ldr	r1, [r7, #12]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f007 fe1f 	bl	800869c <vTaskPrioritySet>
		if(button_state == 1 )
 8000a5e:	e7df      	b.n	8000a20 <Task1_Handler+0x60>
 8000a60:	0800cf74 	.word	0x0800cf74
 8000a64:	20000354 	.word	0x20000354
 8000a68:	20000304 	.word	0x20000304
 8000a6c:	2000034c 	.word	0x2000034c
 8000a70:	0800cf8c 	.word	0x0800cf8c
 8000a74:	20000350 	.word	0x20000350
 8000a78:	0800cfa0 	.word	0x0800cfa0
 8000a7c:	2000036d 	.word	0x2000036d

08000a80 <Task2_Handler>:
	}
}


void Task2_Handler(void *params)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	UBaseType_t  pr1, pr2;

	sprintf(&message[0], "Task 2 is running \r\n" );
 8000a88:	4925      	ldr	r1, [pc, #148]	; (8000b20 <Task2_Handler+0xa0>)
 8000a8a:	4826      	ldr	r0, [pc, #152]	; (8000b24 <Task2_Handler+0xa4>)
 8000a8c:	f00b fb44 	bl	800c118 <siprintf>
	HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 8000a90:	2364      	movs	r3, #100	; 0x64
 8000a92:	2219      	movs	r2, #25
 8000a94:	4923      	ldr	r1, [pc, #140]	; (8000b24 <Task2_Handler+0xa4>)
 8000a96:	4824      	ldr	r0, [pc, #144]	; (8000b28 <Task2_Handler+0xa8>)
 8000a98:	f002 fe61 	bl	800375e <HAL_UART_Transmit>

	sprintf(&message[0], "Task 2 prio = %x \r\n" , uxTaskPriorityGet(myTaskHandle2) );
 8000a9c:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <Task2_Handler+0xac>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f007 fde1 	bl	8008668 <uxTaskPriorityGet>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4921      	ldr	r1, [pc, #132]	; (8000b30 <Task2_Handler+0xb0>)
 8000aac:	481d      	ldr	r0, [pc, #116]	; (8000b24 <Task2_Handler+0xa4>)
 8000aae:	f00b fb33 	bl	800c118 <siprintf>
	HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 8000ab2:	2364      	movs	r3, #100	; 0x64
 8000ab4:	2219      	movs	r2, #25
 8000ab6:	491b      	ldr	r1, [pc, #108]	; (8000b24 <Task2_Handler+0xa4>)
 8000ab8:	481b      	ldr	r0, [pc, #108]	; (8000b28 <Task2_Handler+0xa8>)
 8000aba:	f002 fe50 	bl	800375e <HAL_UART_Transmit>

	sprintf(&message[0], "Task 1 prio = %x \r\n" , uxTaskPriorityGet(myTaskHandle1) );
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <Task2_Handler+0xb4>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f007 fdd0 	bl	8008668 <uxTaskPriorityGet>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	461a      	mov	r2, r3
 8000acc:	491a      	ldr	r1, [pc, #104]	; (8000b38 <Task2_Handler+0xb8>)
 8000ace:	4815      	ldr	r0, [pc, #84]	; (8000b24 <Task2_Handler+0xa4>)
 8000ad0:	f00b fb22 	bl	800c118 <siprintf>
	HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 8000ad4:	2364      	movs	r3, #100	; 0x64
 8000ad6:	2219      	movs	r2, #25
 8000ad8:	4912      	ldr	r1, [pc, #72]	; (8000b24 <Task2_Handler+0xa4>)
 8000ada:	4813      	ldr	r0, [pc, #76]	; (8000b28 <Task2_Handler+0xa8>)
 8000adc:	f002 fe3f 	bl	800375e <HAL_UART_Transmit>

	while(1)
	{
		if(button_state == 1 )
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <Task2_Handler+0xbc>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d1fb      	bne.n	8000ae0 <Task2_Handler+0x60>
		{// it girildi demektir.
			button_state = 0;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <Task2_Handler+0xbc>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
			pr1 = uxTaskPriorityGet(myTaskHandle1);
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <Task2_Handler+0xb4>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f007 fdb8 	bl	8008668 <uxTaskPriorityGet>
 8000af8:	60f8      	str	r0, [r7, #12]
			pr2 = uxTaskPriorityGet(myTaskHandle2);
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <Task2_Handler+0xac>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f007 fdb2 	bl	8008668 <uxTaskPriorityGet>
 8000b04:	60b8      	str	r0, [r7, #8]

			vTaskPrioritySet(myTaskHandle1, pr2);
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <Task2_Handler+0xb4>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	68b9      	ldr	r1, [r7, #8]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f007 fdc5 	bl	800869c <vTaskPrioritySet>
			vTaskPrioritySet(myTaskHandle2, pr1);
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <Task2_Handler+0xac>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68f9      	ldr	r1, [r7, #12]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f007 fdbf 	bl	800869c <vTaskPrioritySet>
		if(button_state == 1 )
 8000b1e:	e7df      	b.n	8000ae0 <Task2_Handler+0x60>
 8000b20:	0800cfb4 	.word	0x0800cfb4
 8000b24:	20000354 	.word	0x20000354
 8000b28:	20000304 	.word	0x20000304
 8000b2c:	20000350 	.word	0x20000350
 8000b30:	0800cfa0 	.word	0x0800cfa0
 8000b34:	2000034c 	.word	0x2000034c
 8000b38:	0800cf8c 	.word	0x0800cf8c
 8000b3c:	2000036d 	.word	0x2000036d

08000b40 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000b48:	f00a fe1e 	bl	800b788 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f006 fc28 	bl	80073a2 <osDelay>
 8000b52:	e7fb      	b.n	8000b4c <StartDefaultTask+0xc>

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b5c:	e7fe      	b.n	8000b5c <Error_Handler+0x8>
	...

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	f06f 0001 	mvn.w	r0, #1
 8000ba6:	f000 fada 	bl	800115e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <HAL_UART_MspInit+0x84>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d12b      	bne.n	8000c32 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c12:	230c      	movs	r3, #12
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c22:	2307      	movs	r3, #7
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <HAL_UART_MspInit+0x8c>)
 8000c2e:	f000 facd 	bl	80011cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c78:	f000 f952 	bl	8000f20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c7c:	f008 fa08 	bl	8009090 <xTaskGetSchedulerState>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d001      	beq.n	8000c8a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c86:	f008 fcdf 	bl	8009648 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f000 fc4f 	bl	8001538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */


  button_state = 1;
 8000c9a:	4b02      	ldr	r3, [pc, #8]	; (8000ca4 <EXTI0_IRQHandler+0x14>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]




  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000036d 	.word	0x2000036d

08000ca8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <OTG_FS_IRQHandler+0x10>)
 8000cae:	f000 fed1 	bl	8001a54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20006b2c 	.word	0x20006b2c

08000cbc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	e00a      	b.n	8000ce4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cce:	f3af 8000 	nop.w
 8000cd2:	4601      	mov	r1, r0
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	1c5a      	adds	r2, r3, #1
 8000cd8:	60ba      	str	r2, [r7, #8]
 8000cda:	b2ca      	uxtb	r2, r1
 8000cdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dbf0      	blt.n	8000cce <_read+0x12>
	}

return len;
 8000cec:	687b      	ldr	r3, [r7, #4]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	60f8      	str	r0, [r7, #12]
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	e009      	b.n	8000d1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	60ba      	str	r2, [r7, #8]
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	dbf1      	blt.n	8000d08 <_write+0x12>
	}
	return len;
 8000d24:	687b      	ldr	r3, [r7, #4]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_close>:

int _close(int file)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	return -1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d56:	605a      	str	r2, [r3, #4]
	return 0;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <_isatty>:

int _isatty(int file)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d6e:	2301      	movs	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
	return 0;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <_sbrk+0x5c>)
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <_sbrk+0x60>)
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <_sbrk+0x64>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <_sbrk+0x68>)
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d207      	bcs.n	8000dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc8:	f00a ffe0 	bl	800bd8c <__errno>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	220c      	movs	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <_sbrk+0x64>)
 8000de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20020000 	.word	0x20020000
 8000df8:	00000400 	.word	0x00000400
 8000dfc:	20000370 	.word	0x20000370
 8000e00:	20006e40 	.word	0x20006e40

08000e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e2c:	480d      	ldr	r0, [pc, #52]	; (8000e64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e2e:	490e      	ldr	r1, [pc, #56]	; (8000e68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e30:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e44:	4c0b      	ldr	r4, [pc, #44]	; (8000e74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e52:	f7ff ffd7 	bl	8000e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e56:	f00a ff9f 	bl	800bd98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5a:	f7ff fba5 	bl	80005a8 <main>
  bx  lr    
 8000e5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000e6c:	0800d1a0 	.word	0x0800d1a0
  ldr r2, =_sbss
 8000e70:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000e74:	20006e40 	.word	0x20006e40

08000e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <HAL_Init+0x40>)
 8000e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <HAL_Init+0x40>)
 8000e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <HAL_Init+0x40>)
 8000e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 f94f 	bl	8001148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	200f      	movs	r0, #15
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fe56 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023c00 	.word	0x40023c00

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f967 	bl	80011b2 <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f000 f92f 	bl	800115e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000004 	.word	0x20000004

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000374 	.word	0x20000374

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000374 	.word	0x20000374

08000f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f68:	f7ff ffee 	bl	8000f48 <HAL_GetTick>
 8000f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f78:	d005      	beq.n	8000f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_Delay+0x44>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f86:	bf00      	nop
 8000f88:	f7ff ffde 	bl	8000f48 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d8f7      	bhi.n	8000f88 <HAL_Delay+0x28>
  {
  }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	db0b      	blt.n	8001036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	4907      	ldr	r1, [pc, #28]	; (8001044 <__NVIC_EnableIRQ+0x38>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	2001      	movs	r0, #1
 800102e:	fa00 f202 	lsl.w	r2, r0, r2
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000e100 	.word	0xe000e100

08001048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0a      	blt.n	8001072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	490c      	ldr	r1, [pc, #48]	; (8001094 <__NVIC_SetPriority+0x4c>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001070:	e00a      	b.n	8001088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4908      	ldr	r1, [pc, #32]	; (8001098 <__NVIC_SetPriority+0x50>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	440b      	add	r3, r1
 8001086:	761a      	strb	r2, [r3, #24]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f1c3 0307 	rsb	r3, r3, #7
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf28      	it	cs
 80010ba:	2304      	movcs	r3, #4
 80010bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3304      	adds	r3, #4
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d902      	bls.n	80010cc <NVIC_EncodePriority+0x30>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	e000      	b.n	80010ce <NVIC_EncodePriority+0x32>
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	4313      	orrs	r3, r2
         );
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	; 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001114:	d301      	bcc.n	800111a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001116:	2301      	movs	r3, #1
 8001118:	e00f      	b.n	800113a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <SysTick_Config+0x40>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001122:	210f      	movs	r1, #15
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f7ff ff8e 	bl	8001048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <SysTick_Config+0x40>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SysTick_Config+0x40>)
 8001134:	2207      	movs	r2, #7
 8001136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	e000e010 	.word	0xe000e010

08001148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff29 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001170:	f7ff ff3e 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 8001174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff ff8e 	bl	800109c <NVIC_EncodePriority>
 8001180:	4602      	mov	r2, r0
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff5d 	bl	8001048 <__NVIC_SetPriority>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff31 	bl	800100c <__NVIC_EnableIRQ>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffa2 	bl	8001104 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
 80011e6:	e16b      	b.n	80014c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011e8:	2201      	movs	r2, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	429a      	cmp	r2, r3
 8001202:	f040 815a 	bne.w	80014ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b01      	cmp	r3, #1
 8001210:	d005      	beq.n	800121e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121a:	2b02      	cmp	r3, #2
 800121c:	d130      	bne.n	8001280 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	2203      	movs	r2, #3
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001254:	2201      	movs	r2, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	091b      	lsrs	r3, r3, #4
 800126a:	f003 0201 	and.w	r2, r3, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b03      	cmp	r3, #3
 800128a:	d017      	beq.n	80012bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d123      	bne.n	8001310 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	08da      	lsrs	r2, r3, #3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3208      	adds	r2, #8
 80012d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	220f      	movs	r2, #15
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	691a      	ldr	r2, [r3, #16]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	08da      	lsrs	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3208      	adds	r2, #8
 800130a:	69b9      	ldr	r1, [r7, #24]
 800130c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0203 	and.w	r2, r3, #3
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 80b4 	beq.w	80014ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b60      	ldr	r3, [pc, #384]	; (80014d8 <HAL_GPIO_Init+0x30c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a5f      	ldr	r2, [pc, #380]	; (80014d8 <HAL_GPIO_Init+0x30c>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b5d      	ldr	r3, [pc, #372]	; (80014d8 <HAL_GPIO_Init+0x30c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800136e:	4a5b      	ldr	r2, [pc, #364]	; (80014dc <HAL_GPIO_Init+0x310>)
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	220f      	movs	r2, #15
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a52      	ldr	r2, [pc, #328]	; (80014e0 <HAL_GPIO_Init+0x314>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d02b      	beq.n	80013f2 <HAL_GPIO_Init+0x226>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a51      	ldr	r2, [pc, #324]	; (80014e4 <HAL_GPIO_Init+0x318>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d025      	beq.n	80013ee <HAL_GPIO_Init+0x222>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a50      	ldr	r2, [pc, #320]	; (80014e8 <HAL_GPIO_Init+0x31c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d01f      	beq.n	80013ea <HAL_GPIO_Init+0x21e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4f      	ldr	r2, [pc, #316]	; (80014ec <HAL_GPIO_Init+0x320>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d019      	beq.n	80013e6 <HAL_GPIO_Init+0x21a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4e      	ldr	r2, [pc, #312]	; (80014f0 <HAL_GPIO_Init+0x324>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x216>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4d      	ldr	r2, [pc, #308]	; (80014f4 <HAL_GPIO_Init+0x328>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x212>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4c      	ldr	r2, [pc, #304]	; (80014f8 <HAL_GPIO_Init+0x32c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x20e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4b      	ldr	r2, [pc, #300]	; (80014fc <HAL_GPIO_Init+0x330>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x20a>
 80013d2:	2307      	movs	r3, #7
 80013d4:	e00e      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013d6:	2308      	movs	r3, #8
 80013d8:	e00c      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013da:	2306      	movs	r3, #6
 80013dc:	e00a      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013de:	2305      	movs	r3, #5
 80013e0:	e008      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013e2:	2304      	movs	r3, #4
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013e6:	2303      	movs	r3, #3
 80013e8:	e004      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e002      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013f2:	2300      	movs	r3, #0
 80013f4:	69fa      	ldr	r2, [r7, #28]
 80013f6:	f002 0203 	and.w	r2, r2, #3
 80013fa:	0092      	lsls	r2, r2, #2
 80013fc:	4093      	lsls	r3, r2
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001404:	4935      	ldr	r1, [pc, #212]	; (80014dc <HAL_GPIO_Init+0x310>)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3302      	adds	r3, #2
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001412:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <HAL_GPIO_Init+0x334>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001436:	4a32      	ldr	r2, [pc, #200]	; (8001500 <HAL_GPIO_Init+0x334>)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800143c:	4b30      	ldr	r3, [pc, #192]	; (8001500 <HAL_GPIO_Init+0x334>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001460:	4a27      	ldr	r2, [pc, #156]	; (8001500 <HAL_GPIO_Init+0x334>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <HAL_GPIO_Init+0x334>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800148a:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <HAL_GPIO_Init+0x334>)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_GPIO_Init+0x334>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b4:	4a12      	ldr	r2, [pc, #72]	; (8001500 <HAL_GPIO_Init+0x334>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3301      	adds	r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	2b0f      	cmp	r3, #15
 80014c4:	f67f ae90 	bls.w	80011e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3724      	adds	r7, #36	; 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40013800 	.word	0x40013800
 80014e0:	40020000 	.word	0x40020000
 80014e4:	40020400 	.word	0x40020400
 80014e8:	40020800 	.word	0x40020800
 80014ec:	40020c00 	.word	0x40020c00
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40021400 	.word	0x40021400
 80014f8:	40021800 	.word	0x40021800
 80014fc:	40021c00 	.word	0x40021c00
 8001500:	40013c00 	.word	0x40013c00

08001504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
 8001510:	4613      	mov	r3, r2
 8001512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001514:	787b      	ldrb	r3, [r7, #1]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001520:	e003      	b.n	800152a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	041a      	lsls	r2, r3, #16
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	619a      	str	r2, [r3, #24]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	4013      	ands	r3, r2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d006      	beq.n	800155c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f806 	bl	8001568 <HAL_GPIO_EXTI_Callback>
  }
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40013c00 	.word	0x40013c00

08001568 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800157e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001580:	b08f      	sub	sp, #60	; 0x3c
 8001582:	af0a      	add	r7, sp, #40	; 0x28
 8001584:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e054      	b.n	800163a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d106      	bne.n	80015b0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f00a f940 	bl	800b830 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2203      	movs	r2, #3
 80015b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 fcac 	bl	8003f2c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	687e      	ldr	r6, [r7, #4]
 80015dc:	466d      	mov	r5, sp
 80015de:	f106 0410 	add.w	r4, r6, #16
 80015e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80015f2:	1d33      	adds	r3, r6, #4
 80015f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f6:	6838      	ldr	r0, [r7, #0]
 80015f8:	f002 fc26 	bl	8003e48 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2101      	movs	r1, #1
 8001602:	4618      	mov	r0, r3
 8001604:	f002 fca3 	bl	8003f4e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	687e      	ldr	r6, [r7, #4]
 8001610:	466d      	mov	r5, sp
 8001612:	f106 0410 	add.w	r4, r6, #16
 8001616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001622:	e885 0003 	stmia.w	r5, {r0, r1}
 8001626:	1d33      	adds	r3, r6, #4
 8001628:	cb0e      	ldmia	r3, {r1, r2, r3}
 800162a:	6838      	ldr	r0, [r7, #0]
 800162c:	f002 fe2c 	bl	8004288 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001642 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001642:	b590      	push	{r4, r7, lr}
 8001644:	b089      	sub	sp, #36	; 0x24
 8001646:	af04      	add	r7, sp, #16
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	4608      	mov	r0, r1
 800164c:	4611      	mov	r1, r2
 800164e:	461a      	mov	r2, r3
 8001650:	4603      	mov	r3, r0
 8001652:	70fb      	strb	r3, [r7, #3]
 8001654:	460b      	mov	r3, r1
 8001656:	70bb      	strb	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_HCD_HC_Init+0x28>
 8001666:	2302      	movs	r3, #2
 8001668:	e076      	b.n	8001758 <HAL_HCD_HC_Init+0x116>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	212c      	movs	r1, #44	; 0x2c
 8001678:	fb01 f303 	mul.w	r3, r1, r3
 800167c:	4413      	add	r3, r2
 800167e:	333d      	adds	r3, #61	; 0x3d
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	212c      	movs	r1, #44	; 0x2c
 800168a:	fb01 f303 	mul.w	r3, r1, r3
 800168e:	4413      	add	r3, r2
 8001690:	3338      	adds	r3, #56	; 0x38
 8001692:	787a      	ldrb	r2, [r7, #1]
 8001694:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	212c      	movs	r1, #44	; 0x2c
 800169c:	fb01 f303 	mul.w	r3, r1, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	3340      	adds	r3, #64	; 0x40
 80016a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016a6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	212c      	movs	r1, #44	; 0x2c
 80016ae:	fb01 f303 	mul.w	r3, r1, r3
 80016b2:	4413      	add	r3, r2
 80016b4:	3339      	adds	r3, #57	; 0x39
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	212c      	movs	r1, #44	; 0x2c
 80016c0:	fb01 f303 	mul.w	r3, r1, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	333f      	adds	r3, #63	; 0x3f
 80016c8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	78ba      	ldrb	r2, [r7, #2]
 80016d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016d6:	b2d0      	uxtb	r0, r2
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	212c      	movs	r1, #44	; 0x2c
 80016dc:	fb01 f303 	mul.w	r3, r1, r3
 80016e0:	4413      	add	r3, r2
 80016e2:	333a      	adds	r3, #58	; 0x3a
 80016e4:	4602      	mov	r2, r0
 80016e6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80016e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da09      	bge.n	8001704 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	212c      	movs	r1, #44	; 0x2c
 80016f6:	fb01 f303 	mul.w	r3, r1, r3
 80016fa:	4413      	add	r3, r2
 80016fc:	333b      	adds	r3, #59	; 0x3b
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	e008      	b.n	8001716 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	212c      	movs	r1, #44	; 0x2c
 800170a:	fb01 f303 	mul.w	r3, r1, r3
 800170e:	4413      	add	r3, r2
 8001710:	333b      	adds	r3, #59	; 0x3b
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	212c      	movs	r1, #44	; 0x2c
 800171c:	fb01 f303 	mul.w	r3, r1, r3
 8001720:	4413      	add	r3, r2
 8001722:	333c      	adds	r3, #60	; 0x3c
 8001724:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001728:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	787c      	ldrb	r4, [r7, #1]
 8001730:	78ba      	ldrb	r2, [r7, #2]
 8001732:	78f9      	ldrb	r1, [r7, #3]
 8001734:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001736:	9302      	str	r3, [sp, #8]
 8001738:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	4623      	mov	r3, r4
 8001746:	f002 ff25 	bl	8004594 <USB_HC_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001756:	7bfb      	ldrb	r3, [r7, #15]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}

08001760 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_HCD_HC_Halt+0x1e>
 800177a:	2302      	movs	r3, #2
 800177c:	e00f      	b.n	800179e <HAL_HCD_HC_Halt+0x3e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	78fa      	ldrb	r2, [r7, #3]
 800178c:	4611      	mov	r1, r2
 800178e:	4618      	mov	r0, r3
 8001790:	f003 f975 	bl	8004a7e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800179c:	7bfb      	ldrb	r3, [r7, #15]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	4608      	mov	r0, r1
 80017b2:	4611      	mov	r1, r2
 80017b4:	461a      	mov	r2, r3
 80017b6:	4603      	mov	r3, r0
 80017b8:	70fb      	strb	r3, [r7, #3]
 80017ba:	460b      	mov	r3, r1
 80017bc:	70bb      	strb	r3, [r7, #2]
 80017be:	4613      	mov	r3, r2
 80017c0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	212c      	movs	r1, #44	; 0x2c
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	333b      	adds	r3, #59	; 0x3b
 80017d0:	78ba      	ldrb	r2, [r7, #2]
 80017d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	212c      	movs	r1, #44	; 0x2c
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	4413      	add	r3, r2
 80017e0:	333f      	adds	r3, #63	; 0x3f
 80017e2:	787a      	ldrb	r2, [r7, #1]
 80017e4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017e6:	7c3b      	ldrb	r3, [r7, #16]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d112      	bne.n	8001812 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	212c      	movs	r1, #44	; 0x2c
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	3342      	adds	r3, #66	; 0x42
 80017fa:	2203      	movs	r2, #3
 80017fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	212c      	movs	r1, #44	; 0x2c
 8001804:	fb01 f303 	mul.w	r3, r1, r3
 8001808:	4413      	add	r3, r2
 800180a:	333d      	adds	r3, #61	; 0x3d
 800180c:	7f3a      	ldrb	r2, [r7, #28]
 800180e:	701a      	strb	r2, [r3, #0]
 8001810:	e008      	b.n	8001824 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	212c      	movs	r1, #44	; 0x2c
 8001818:	fb01 f303 	mul.w	r3, r1, r3
 800181c:	4413      	add	r3, r2
 800181e:	3342      	adds	r3, #66	; 0x42
 8001820:	2202      	movs	r2, #2
 8001822:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001824:	787b      	ldrb	r3, [r7, #1]
 8001826:	2b03      	cmp	r3, #3
 8001828:	f200 80c6 	bhi.w	80019b8 <HAL_HCD_HC_SubmitRequest+0x210>
 800182c:	a201      	add	r2, pc, #4	; (adr r2, 8001834 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800182e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001832:	bf00      	nop
 8001834:	08001845 	.word	0x08001845
 8001838:	080019a5 	.word	0x080019a5
 800183c:	080018a9 	.word	0x080018a9
 8001840:	08001927 	.word	0x08001927
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001844:	7c3b      	ldrb	r3, [r7, #16]
 8001846:	2b01      	cmp	r3, #1
 8001848:	f040 80b8 	bne.w	80019bc <HAL_HCD_HC_SubmitRequest+0x214>
 800184c:	78bb      	ldrb	r3, [r7, #2]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f040 80b4 	bne.w	80019bc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001854:	8b3b      	ldrh	r3, [r7, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d108      	bne.n	800186c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	212c      	movs	r1, #44	; 0x2c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	3355      	adds	r3, #85	; 0x55
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	212c      	movs	r1, #44	; 0x2c
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	4413      	add	r3, r2
 8001878:	3355      	adds	r3, #85	; 0x55
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d109      	bne.n	8001894 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	212c      	movs	r1, #44	; 0x2c
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	4413      	add	r3, r2
 800188c:	3342      	adds	r3, #66	; 0x42
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001892:	e093      	b.n	80019bc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	212c      	movs	r1, #44	; 0x2c
 800189a:	fb01 f303 	mul.w	r3, r1, r3
 800189e:	4413      	add	r3, r2
 80018a0:	3342      	adds	r3, #66	; 0x42
 80018a2:	2202      	movs	r2, #2
 80018a4:	701a      	strb	r2, [r3, #0]
      break;
 80018a6:	e089      	b.n	80019bc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018a8:	78bb      	ldrb	r3, [r7, #2]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d11d      	bne.n	80018ea <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	212c      	movs	r1, #44	; 0x2c
 80018b4:	fb01 f303 	mul.w	r3, r1, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	3355      	adds	r3, #85	; 0x55
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	212c      	movs	r1, #44	; 0x2c
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	3342      	adds	r3, #66	; 0x42
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018d4:	e073      	b.n	80019be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	212c      	movs	r1, #44	; 0x2c
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	3342      	adds	r3, #66	; 0x42
 80018e4:	2202      	movs	r2, #2
 80018e6:	701a      	strb	r2, [r3, #0]
      break;
 80018e8:	e069      	b.n	80019be <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	212c      	movs	r1, #44	; 0x2c
 80018f0:	fb01 f303 	mul.w	r3, r1, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	3354      	adds	r3, #84	; 0x54
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	212c      	movs	r1, #44	; 0x2c
 8001904:	fb01 f303 	mul.w	r3, r1, r3
 8001908:	4413      	add	r3, r2
 800190a:	3342      	adds	r3, #66	; 0x42
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
      break;
 8001910:	e055      	b.n	80019be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	212c      	movs	r1, #44	; 0x2c
 8001918:	fb01 f303 	mul.w	r3, r1, r3
 800191c:	4413      	add	r3, r2
 800191e:	3342      	adds	r3, #66	; 0x42
 8001920:	2202      	movs	r2, #2
 8001922:	701a      	strb	r2, [r3, #0]
      break;
 8001924:	e04b      	b.n	80019be <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001926:	78bb      	ldrb	r3, [r7, #2]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d11d      	bne.n	8001968 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	212c      	movs	r1, #44	; 0x2c
 8001932:	fb01 f303 	mul.w	r3, r1, r3
 8001936:	4413      	add	r3, r2
 8001938:	3355      	adds	r3, #85	; 0x55
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d109      	bne.n	8001954 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	212c      	movs	r1, #44	; 0x2c
 8001946:	fb01 f303 	mul.w	r3, r1, r3
 800194a:	4413      	add	r3, r2
 800194c:	3342      	adds	r3, #66	; 0x42
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001952:	e034      	b.n	80019be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	212c      	movs	r1, #44	; 0x2c
 800195a:	fb01 f303 	mul.w	r3, r1, r3
 800195e:	4413      	add	r3, r2
 8001960:	3342      	adds	r3, #66	; 0x42
 8001962:	2202      	movs	r2, #2
 8001964:	701a      	strb	r2, [r3, #0]
      break;
 8001966:	e02a      	b.n	80019be <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	212c      	movs	r1, #44	; 0x2c
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	4413      	add	r3, r2
 8001974:	3354      	adds	r3, #84	; 0x54
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d109      	bne.n	8001990 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	212c      	movs	r1, #44	; 0x2c
 8001982:	fb01 f303 	mul.w	r3, r1, r3
 8001986:	4413      	add	r3, r2
 8001988:	3342      	adds	r3, #66	; 0x42
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
      break;
 800198e:	e016      	b.n	80019be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	212c      	movs	r1, #44	; 0x2c
 8001996:	fb01 f303 	mul.w	r3, r1, r3
 800199a:	4413      	add	r3, r2
 800199c:	3342      	adds	r3, #66	; 0x42
 800199e:	2202      	movs	r2, #2
 80019a0:	701a      	strb	r2, [r3, #0]
      break;
 80019a2:	e00c      	b.n	80019be <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	212c      	movs	r1, #44	; 0x2c
 80019aa:	fb01 f303 	mul.w	r3, r1, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	3342      	adds	r3, #66	; 0x42
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
      break;
 80019b6:	e002      	b.n	80019be <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80019b8:	bf00      	nop
 80019ba:	e000      	b.n	80019be <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80019bc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	212c      	movs	r1, #44	; 0x2c
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	3344      	adds	r3, #68	; 0x44
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	8b3a      	ldrh	r2, [r7, #24]
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	202c      	movs	r0, #44	; 0x2c
 80019d8:	fb00 f303 	mul.w	r3, r0, r3
 80019dc:	440b      	add	r3, r1
 80019de:	334c      	adds	r3, #76	; 0x4c
 80019e0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	212c      	movs	r1, #44	; 0x2c
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	3360      	adds	r3, #96	; 0x60
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	212c      	movs	r1, #44	; 0x2c
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	3350      	adds	r3, #80	; 0x50
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	212c      	movs	r1, #44	; 0x2c
 8001a0c:	fb01 f303 	mul.w	r3, r1, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	3339      	adds	r3, #57	; 0x39
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	212c      	movs	r1, #44	; 0x2c
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	3361      	adds	r3, #97	; 0x61
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	222c      	movs	r2, #44	; 0x2c
 8001a32:	fb02 f303 	mul.w	r3, r2, r3
 8001a36:	3338      	adds	r3, #56	; 0x38
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	18d1      	adds	r1, r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	f002 fec8 	bl	80047d8 <USB_HC_StartXfer>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop

08001a54 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fbc9 	bl	8004202 <USB_GetMode>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	f040 80f6 	bne.w	8001c64 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 fbad 	bl	80041dc <USB_ReadInterrupts>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80ec 	beq.w	8001c62 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f002 fba4 	bl	80041dc <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a9e:	d104      	bne.n	8001aaa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001aa8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 fb94 	bl	80041dc <USB_ReadInterrupts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001abe:	d104      	bne.n	8001aca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ac8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 fb84 	bl	80041dc <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ada:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ade:	d104      	bne.n	8001aea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ae8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 fb74 	bl	80041dc <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d103      	bne.n	8001b06 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2202      	movs	r2, #2
 8001b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 fb66 	bl	80041dc <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b1a:	d11c      	bne.n	8001b56 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b24:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10f      	bne.n	8001b56 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b36:	2110      	movs	r1, #16
 8001b38:	6938      	ldr	r0, [r7, #16]
 8001b3a:	f002 fa55 	bl	8003fe8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b3e:	6938      	ldr	r0, [r7, #16]
 8001b40:	f002 fa86 	bl	8004050 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2101      	movs	r1, #1
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 fc5c 	bl	8004408 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f009 feeb 	bl	800b92c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 fb3e 	bl	80041dc <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b6a:	d102      	bne.n	8001b72 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f001 f89e 	bl	8002cae <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f002 fb30 	bl	80041dc <USB_ReadInterrupts>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d106      	bne.n	8001b94 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f009 feb4 	bl	800b8f4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2208      	movs	r2, #8
 8001b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 fb1f 	bl	80041dc <USB_ReadInterrupts>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b10      	cmp	r3, #16
 8001ba6:	d101      	bne.n	8001bac <HAL_HCD_IRQHandler+0x158>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <HAL_HCD_IRQHandler+0x15a>
 8001bac:	2300      	movs	r3, #0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d012      	beq.n	8001bd8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699a      	ldr	r2, [r3, #24]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0210 	bic.w	r2, r2, #16
 8001bc0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 ffa1 	bl	8002b0a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699a      	ldr	r2, [r3, #24]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0210 	orr.w	r2, r2, #16
 8001bd6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f002 fafd 	bl	80041dc <USB_ReadInterrupts>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bec:	d13a      	bne.n	8001c64 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 ff32 	bl	8004a5c <USB_HC_ReadInterrupt>
 8001bf8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e025      	b.n	8001c4c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d018      	beq.n	8001c46 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	015a      	lsls	r2, r3, #5
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c2a:	d106      	bne.n	8001c3a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	4619      	mov	r1, r3
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f8ab 	bl	8001d8e <HCD_HC_IN_IRQHandler>
 8001c38:	e005      	b.n	8001c46 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	4619      	mov	r1, r3
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 fbf9 	bl	8002438 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d3d4      	bcc.n	8001c00 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c5e:	615a      	str	r2, [r3, #20]
 8001c60:	e000      	b.n	8001c64 <HAL_HCD_IRQHandler+0x210>
      return;
 8001c62:	bf00      	nop
    }
  }
}
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_HCD_Start+0x16>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e013      	b.n	8001ca8 <HAL_HCD_Start+0x3e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 fc1e 	bl	80044d0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f002 f936 	bl	8003f0a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_HCD_Stop+0x16>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e00d      	b.n	8001ce2 <HAL_HCD_Stop+0x32>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 f80c 	bl	8004cf0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f002 fbc0 	bl	800447c <USB_ResetPort>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	212c      	movs	r1, #44	; 0x2c
 8001d18:	fb01 f303 	mul.w	r3, r1, r3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3360      	adds	r3, #96	; 0x60
 8001d20:	781b      	ldrb	r3, [r3, #0]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	460b      	mov	r3, r1
 8001d38:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	212c      	movs	r1, #44	; 0x2c
 8001d40:	fb01 f303 	mul.w	r3, r1, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	3350      	adds	r3, #80	; 0x50
 8001d48:	681b      	ldr	r3, [r3, #0]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f002 fc04 	bl	8004570 <USB_GetCurrentFrame>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f002 fbdf 	bl	8004542 <USB_GetHostSpeed>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	015a      	lsls	r2, r3, #5
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d11a      	bne.n	8001df4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	015a      	lsls	r2, r3, #5
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2304      	movs	r3, #4
 8001dce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	212c      	movs	r1, #44	; 0x2c
 8001dd6:	fb01 f303 	mul.w	r3, r1, r3
 8001dda:	4413      	add	r3, r2
 8001ddc:	3361      	adds	r3, #97	; 0x61
 8001dde:	2206      	movs	r2, #6
 8001de0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f002 fe46 	bl	8004a7e <USB_HC_Halt>
 8001df2:	e0af      	b.n	8001f54 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e0a:	d11b      	bne.n	8001e44 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	212c      	movs	r1, #44	; 0x2c
 8001e26:	fb01 f303 	mul.w	r3, r1, r3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3361      	adds	r3, #97	; 0x61
 8001e2e:	2207      	movs	r2, #7
 8001e30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f002 fe1e 	bl	8004a7e <USB_HC_Halt>
 8001e42:	e087      	b.n	8001f54 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	d109      	bne.n	8001e6e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	015a      	lsls	r2, r3, #5
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e66:	461a      	mov	r2, r3
 8001e68:	2320      	movs	r3, #32
 8001e6a:	6093      	str	r3, [r2, #8]
 8001e6c:	e072      	b.n	8001f54 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d11a      	bne.n	8001eba <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	015a      	lsls	r2, r3, #5
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e90:	461a      	mov	r2, r3
 8001e92:	2308      	movs	r3, #8
 8001e94:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	212c      	movs	r1, #44	; 0x2c
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3361      	adds	r3, #97	; 0x61
 8001ea4:	2205      	movs	r2, #5
 8001ea6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f002 fde3 	bl	8004a7e <USB_HC_Halt>
 8001eb8:	e04c      	b.n	8001f54 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed0:	d11b      	bne.n	8001f0a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	212c      	movs	r1, #44	; 0x2c
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3361      	adds	r3, #97	; 0x61
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 fdbb 	bl	8004a7e <USB_HC_Halt>
 8001f08:	e024      	b.n	8001f54 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1c:	2b80      	cmp	r3, #128	; 0x80
 8001f1e:	d119      	bne.n	8001f54 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	015a      	lsls	r2, r3, #5
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	212c      	movs	r1, #44	; 0x2c
 8001f38:	fb01 f303 	mul.w	r3, r1, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3361      	adds	r3, #97	; 0x61
 8001f40:	2206      	movs	r2, #6
 8001f42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 fd95 	bl	8004a7e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f6a:	d112      	bne.n	8001f92 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f002 fd81 	bl	8004a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f88:	461a      	mov	r2, r3
 8001f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f90:	e24e      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	f040 80df 	bne.w	8002168 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d019      	beq.n	8001fe6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	212c      	movs	r1, #44	; 0x2c
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3348      	adds	r3, #72	; 0x48
 8001fc0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	0159      	lsls	r1, r3, #5
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	440b      	add	r3, r1
 8001fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fd4:	1ad2      	subs	r2, r2, r3
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	202c      	movs	r0, #44	; 0x2c
 8001fdc:	fb00 f303 	mul.w	r3, r0, r3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3350      	adds	r3, #80	; 0x50
 8001fe4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	212c      	movs	r1, #44	; 0x2c
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3361      	adds	r3, #97	; 0x61
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	212c      	movs	r1, #44	; 0x2c
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
 8002002:	4413      	add	r3, r2
 8002004:	335c      	adds	r3, #92	; 0x5c
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4413      	add	r3, r2
 8002012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002016:	461a      	mov	r2, r3
 8002018:	2301      	movs	r3, #1
 800201a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	212c      	movs	r1, #44	; 0x2c
 8002022:	fb01 f303 	mul.w	r3, r1, r3
 8002026:	4413      	add	r3, r2
 8002028:	333f      	adds	r3, #63	; 0x3f
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d009      	beq.n	8002044 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	212c      	movs	r1, #44	; 0x2c
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	333f      	adds	r3, #63	; 0x3f
 800203e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002040:	2b02      	cmp	r3, #2
 8002042:	d111      	bne.n	8002068 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	4611      	mov	r1, r2
 800204e:	4618      	mov	r0, r3
 8002050:	f002 fd15 	bl	8004a7e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	015a      	lsls	r2, r3, #5
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4413      	add	r3, r2
 800205c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002060:	461a      	mov	r2, r3
 8002062:	2310      	movs	r3, #16
 8002064:	6093      	str	r3, [r2, #8]
 8002066:	e03a      	b.n	80020de <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	212c      	movs	r1, #44	; 0x2c
 800206e:	fb01 f303 	mul.w	r3, r1, r3
 8002072:	4413      	add	r3, r2
 8002074:	333f      	adds	r3, #63	; 0x3f
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b03      	cmp	r3, #3
 800207a:	d009      	beq.n	8002090 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	212c      	movs	r1, #44	; 0x2c
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	4413      	add	r3, r2
 8002088:	333f      	adds	r3, #63	; 0x3f
 800208a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800208c:	2b01      	cmp	r3, #1
 800208e:	d126      	bne.n	80020de <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4413      	add	r3, r2
 8002098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	0151      	lsls	r1, r2, #5
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	440a      	add	r2, r1
 80020a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020ae:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	212c      	movs	r1, #44	; 0x2c
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	3360      	adds	r3, #96	; 0x60
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	b2d9      	uxtb	r1, r3
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	202c      	movs	r0, #44	; 0x2c
 80020cc:	fb00 f303 	mul.w	r3, r0, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	3360      	adds	r3, #96	; 0x60
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f009 fc35 	bl	800b948 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d12b      	bne.n	800213e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	212c      	movs	r1, #44	; 0x2c
 80020ec:	fb01 f303 	mul.w	r3, r1, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	3348      	adds	r3, #72	; 0x48
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	202c      	movs	r0, #44	; 0x2c
 80020fc:	fb00 f202 	mul.w	r2, r0, r2
 8002100:	440a      	add	r2, r1
 8002102:	3240      	adds	r2, #64	; 0x40
 8002104:	8812      	ldrh	r2, [r2, #0]
 8002106:	fbb3 f3f2 	udiv	r3, r3, r2
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 818e 	beq.w	8002430 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	212c      	movs	r1, #44	; 0x2c
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	3354      	adds	r3, #84	; 0x54
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	f083 0301 	eor.w	r3, r3, #1
 8002128:	b2d8      	uxtb	r0, r3
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	212c      	movs	r1, #44	; 0x2c
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	3354      	adds	r3, #84	; 0x54
 8002138:	4602      	mov	r2, r0
 800213a:	701a      	strb	r2, [r3, #0]
}
 800213c:	e178      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3354      	adds	r3, #84	; 0x54
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	f083 0301 	eor.w	r3, r3, #1
 8002152:	b2d8      	uxtb	r0, r3
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	212c      	movs	r1, #44	; 0x2c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	3354      	adds	r3, #84	; 0x54
 8002162:	4602      	mov	r2, r0
 8002164:	701a      	strb	r2, [r3, #0]
}
 8002166:	e163      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4413      	add	r3, r2
 8002170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b02      	cmp	r3, #2
 800217c:	f040 80f6 	bne.w	800236c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	212c      	movs	r1, #44	; 0x2c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	3361      	adds	r3, #97	; 0x61
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d109      	bne.n	80021a8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	212c      	movs	r1, #44	; 0x2c
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	4413      	add	r3, r2
 80021a0:	3360      	adds	r3, #96	; 0x60
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	e0c9      	b.n	800233c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	212c      	movs	r1, #44	; 0x2c
 80021ae:	fb01 f303 	mul.w	r3, r1, r3
 80021b2:	4413      	add	r3, r2
 80021b4:	3361      	adds	r3, #97	; 0x61
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d109      	bne.n	80021d0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	3360      	adds	r3, #96	; 0x60
 80021ca:	2205      	movs	r2, #5
 80021cc:	701a      	strb	r2, [r3, #0]
 80021ce:	e0b5      	b.n	800233c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	3361      	adds	r3, #97	; 0x61
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b06      	cmp	r3, #6
 80021e2:	d009      	beq.n	80021f8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3361      	adds	r3, #97	; 0x61
 80021f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d150      	bne.n	800229a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	335c      	adds	r3, #92	; 0x5c
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	202c      	movs	r0, #44	; 0x2c
 8002210:	fb00 f303 	mul.w	r3, r0, r3
 8002214:	440b      	add	r3, r1
 8002216:	335c      	adds	r3, #92	; 0x5c
 8002218:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	212c      	movs	r1, #44	; 0x2c
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	335c      	adds	r3, #92	; 0x5c
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d912      	bls.n	8002254 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	212c      	movs	r1, #44	; 0x2c
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	4413      	add	r3, r2
 800223a:	335c      	adds	r3, #92	; 0x5c
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	212c      	movs	r1, #44	; 0x2c
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4413      	add	r3, r2
 800224c:	3360      	adds	r3, #96	; 0x60
 800224e:	2204      	movs	r2, #4
 8002250:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002252:	e073      	b.n	800233c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	212c      	movs	r1, #44	; 0x2c
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	3360      	adds	r3, #96	; 0x60
 8002262:	2202      	movs	r2, #2
 8002264:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4413      	add	r3, r2
 800226e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800227c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002284:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	461a      	mov	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002298:	e050      	b.n	800233c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	212c      	movs	r1, #44	; 0x2c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	3361      	adds	r3, #97	; 0x61
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d122      	bne.n	80022f4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	212c      	movs	r1, #44	; 0x2c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	3360      	adds	r3, #96	; 0x60
 80022bc:	2202      	movs	r2, #2
 80022be:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022d6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022de:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ec:	461a      	mov	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e023      	b.n	800233c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	3361      	adds	r3, #97	; 0x61
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b07      	cmp	r3, #7
 8002306:	d119      	bne.n	800233c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	335c      	adds	r3, #92	; 0x5c
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	202c      	movs	r0, #44	; 0x2c
 8002320:	fb00 f303 	mul.w	r3, r0, r3
 8002324:	440b      	add	r3, r1
 8002326:	335c      	adds	r3, #92	; 0x5c
 8002328:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	212c      	movs	r1, #44	; 0x2c
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	3360      	adds	r3, #96	; 0x60
 8002338:	2204      	movs	r2, #4
 800233a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	461a      	mov	r2, r3
 800234a:	2302      	movs	r3, #2
 800234c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	b2d9      	uxtb	r1, r3
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	202c      	movs	r0, #44	; 0x2c
 8002358:	fb00 f303 	mul.w	r3, r0, r3
 800235c:	4413      	add	r3, r2
 800235e:	3360      	adds	r3, #96	; 0x60
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f009 faef 	bl	800b948 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800236a:	e061      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4413      	add	r3, r2
 8002374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b10      	cmp	r3, #16
 8002380:	d156      	bne.n	8002430 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	333f      	adds	r3, #63	; 0x3f
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b03      	cmp	r3, #3
 8002394:	d111      	bne.n	80023ba <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	212c      	movs	r1, #44	; 0x2c
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	335c      	adds	r3, #92	; 0x5c
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f002 fb63 	bl	8004a7e <USB_HC_Halt>
 80023b8:	e031      	b.n	800241e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	212c      	movs	r1, #44	; 0x2c
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	333f      	adds	r3, #63	; 0x3f
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	212c      	movs	r1, #44	; 0x2c
 80023d4:	fb01 f303 	mul.w	r3, r1, r3
 80023d8:	4413      	add	r3, r2
 80023da:	333f      	adds	r3, #63	; 0x3f
 80023dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d11d      	bne.n	800241e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	212c      	movs	r1, #44	; 0x2c
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	335c      	adds	r3, #92	; 0x5c
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d110      	bne.n	800241e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	3361      	adds	r3, #97	; 0x61
 800240a:	2203      	movs	r2, #3
 800240c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f002 fb30 	bl	8004a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4413      	add	r3, r2
 8002426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242a:	461a      	mov	r2, r3
 800242c:	2310      	movs	r3, #16
 800242e:	6093      	str	r3, [r2, #8]
}
 8002430:	bf00      	nop
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b04      	cmp	r3, #4
 8002466:	d11a      	bne.n	800249e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002474:	461a      	mov	r2, r3
 8002476:	2304      	movs	r3, #4
 8002478:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	3361      	adds	r3, #97	; 0x61
 8002488:	2206      	movs	r2, #6
 800248a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f002 faf1 	bl	8004a7e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800249c:	e331      	b.n	8002b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	d12e      	bne.n	8002512 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c0:	461a      	mov	r2, r3
 80024c2:	2320      	movs	r3, #32
 80024c4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	333d      	adds	r3, #61	; 0x3d
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	f040 8313 	bne.w	8002b02 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	333d      	adds	r3, #61	; 0x3d
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	212c      	movs	r1, #44	; 0x2c
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	3360      	adds	r3, #96	; 0x60
 80024fc:	2202      	movs	r2, #2
 80024fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f002 fab7 	bl	8004a7e <USB_HC_Halt>
}
 8002510:	e2f7      	b.n	8002b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	4413      	add	r3, r2
 800251a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002528:	d112      	bne.n	8002550 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	461a      	mov	r2, r3
 8002538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800253c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f002 fa98 	bl	8004a7e <USB_HC_Halt>
}
 800254e:	e2d8      	b.n	8002b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	4413      	add	r3, r2
 8002558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b01      	cmp	r3, #1
 8002564:	d140      	bne.n	80025e8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	335c      	adds	r3, #92	; 0x5c
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	4413      	add	r3, r2
 8002580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258a:	2b40      	cmp	r3, #64	; 0x40
 800258c:	d111      	bne.n	80025b2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	333d      	adds	r3, #61	; 0x3d
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	461a      	mov	r2, r3
 80025ae:	2340      	movs	r3, #64	; 0x40
 80025b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025be:	461a      	mov	r2, r3
 80025c0:	2301      	movs	r3, #1
 80025c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	212c      	movs	r1, #44	; 0x2c
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	3361      	adds	r3, #97	; 0x61
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f002 fa4c 	bl	8004a7e <USB_HC_Halt>
}
 80025e6:	e28c      	b.n	8002b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b40      	cmp	r3, #64	; 0x40
 80025fc:	d12c      	bne.n	8002658 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	212c      	movs	r1, #44	; 0x2c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	3361      	adds	r3, #97	; 0x61
 800260c:	2204      	movs	r2, #4
 800260e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	212c      	movs	r1, #44	; 0x2c
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	4413      	add	r3, r2
 800261c:	333d      	adds	r3, #61	; 0x3d
 800261e:	2201      	movs	r2, #1
 8002620:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	212c      	movs	r1, #44	; 0x2c
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	335c      	adds	r3, #92	; 0x5c
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f002 fa1d 	bl	8004a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	461a      	mov	r2, r3
 8002652:	2340      	movs	r3, #64	; 0x40
 8002654:	6093      	str	r3, [r2, #8]
}
 8002656:	e254      	b.n	8002b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b08      	cmp	r3, #8
 800266c:	d11a      	bne.n	80026a4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	4413      	add	r3, r2
 8002676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267a:	461a      	mov	r2, r3
 800267c:	2308      	movs	r3, #8
 800267e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	212c      	movs	r1, #44	; 0x2c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	3361      	adds	r3, #97	; 0x61
 800268e:	2205      	movs	r2, #5
 8002690:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f002 f9ee 	bl	8004a7e <USB_HC_Halt>
}
 80026a2:	e22e      	b.n	8002b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d140      	bne.n	800273c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	335c      	adds	r3, #92	; 0x5c
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	212c      	movs	r1, #44	; 0x2c
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	3361      	adds	r3, #97	; 0x61
 80026da:	2203      	movs	r2, #3
 80026dc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	333d      	adds	r3, #61	; 0x3d
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d112      	bne.n	8002718 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	333c      	adds	r3, #60	; 0x3c
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d108      	bne.n	8002718 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	333d      	adds	r3, #61	; 0x3d
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f002 f9ab 	bl	8004a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002734:	461a      	mov	r2, r3
 8002736:	2310      	movs	r3, #16
 8002738:	6093      	str	r3, [r2, #8]
}
 800273a:	e1e2      	b.n	8002b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274e:	2b80      	cmp	r3, #128	; 0x80
 8002750:	d164      	bne.n	800281c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d111      	bne.n	800277e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	212c      	movs	r1, #44	; 0x2c
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	3361      	adds	r3, #97	; 0x61
 8002768:	2206      	movs	r2, #6
 800276a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f002 f981 	bl	8004a7e <USB_HC_Halt>
 800277c:	e044      	b.n	8002808 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	335c      	adds	r3, #92	; 0x5c
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	202c      	movs	r0, #44	; 0x2c
 8002796:	fb00 f303 	mul.w	r3, r0, r3
 800279a:	440b      	add	r3, r1
 800279c:	335c      	adds	r3, #92	; 0x5c
 800279e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	212c      	movs	r1, #44	; 0x2c
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	335c      	adds	r3, #92	; 0x5c
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d920      	bls.n	80027f6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	335c      	adds	r3, #92	; 0x5c
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	212c      	movs	r1, #44	; 0x2c
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	3360      	adds	r3, #96	; 0x60
 80027d4:	2204      	movs	r2, #4
 80027d6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	b2d9      	uxtb	r1, r3
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	202c      	movs	r0, #44	; 0x2c
 80027e2:	fb00 f303 	mul.w	r3, r0, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	3360      	adds	r3, #96	; 0x60
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f009 f8aa 	bl	800b948 <HAL_HCD_HC_NotifyURBChange_Callback>
 80027f4:	e008      	b.n	8002808 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	3360      	adds	r3, #96	; 0x60
 8002804:	2202      	movs	r2, #2
 8002806:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	461a      	mov	r2, r3
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	6093      	str	r3, [r2, #8]
}
 800281a:	e172      	b.n	8002b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002832:	d11b      	bne.n	800286c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	3361      	adds	r3, #97	; 0x61
 8002842:	2208      	movs	r2, #8
 8002844:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f002 f914 	bl	8004a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002862:	461a      	mov	r2, r3
 8002864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002868:	6093      	str	r3, [r2, #8]
}
 800286a:	e14a      	b.n	8002b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b02      	cmp	r3, #2
 8002880:	f040 813f 	bne.w	8002b02 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	212c      	movs	r1, #44	; 0x2c
 800288a:	fb01 f303 	mul.w	r3, r1, r3
 800288e:	4413      	add	r3, r2
 8002890:	3361      	adds	r3, #97	; 0x61
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d17d      	bne.n	8002994 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	3360      	adds	r3, #96	; 0x60
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	333f      	adds	r3, #63	; 0x3f
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d00a      	beq.n	80028d4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	333f      	adds	r3, #63	; 0x3f
 80028cc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	f040 8100 	bne.w	8002ad4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d113      	bne.n	8002904 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	3355      	adds	r3, #85	; 0x55
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	f083 0301 	eor.w	r3, r3, #1
 80028f0:	b2d8      	uxtb	r0, r3
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	3355      	adds	r3, #85	; 0x55
 8002900:	4602      	mov	r2, r0
 8002902:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	2b01      	cmp	r3, #1
 800290a:	f040 80e3 	bne.w	8002ad4 <HCD_HC_OUT_IRQHandler+0x69c>
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	212c      	movs	r1, #44	; 0x2c
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	334c      	adds	r3, #76	; 0x4c
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 80d8 	beq.w	8002ad4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	334c      	adds	r3, #76	; 0x4c
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	202c      	movs	r0, #44	; 0x2c
 800293a:	fb00 f202 	mul.w	r2, r0, r2
 800293e:	440a      	add	r2, r1
 8002940:	3240      	adds	r2, #64	; 0x40
 8002942:	8812      	ldrh	r2, [r2, #0]
 8002944:	4413      	add	r3, r2
 8002946:	3b01      	subs	r3, #1
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	202c      	movs	r0, #44	; 0x2c
 800294e:	fb00 f202 	mul.w	r2, r0, r2
 8002952:	440a      	add	r2, r1
 8002954:	3240      	adds	r2, #64	; 0x40
 8002956:	8812      	ldrh	r2, [r2, #0]
 8002958:	fbb3 f3f2 	udiv	r3, r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80b5 	beq.w	8002ad4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	3355      	adds	r3, #85	; 0x55
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	f083 0301 	eor.w	r3, r3, #1
 800297e:	b2d8      	uxtb	r0, r3
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	3355      	adds	r3, #85	; 0x55
 800298e:	4602      	mov	r2, r0
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	e09f      	b.n	8002ad4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	3361      	adds	r3, #97	; 0x61
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d109      	bne.n	80029bc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	3360      	adds	r3, #96	; 0x60
 80029b6:	2202      	movs	r2, #2
 80029b8:	701a      	strb	r2, [r3, #0]
 80029ba:	e08b      	b.n	8002ad4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	212c      	movs	r1, #44	; 0x2c
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	3361      	adds	r3, #97	; 0x61
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d109      	bne.n	80029e4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	3360      	adds	r3, #96	; 0x60
 80029de:	2202      	movs	r2, #2
 80029e0:	701a      	strb	r2, [r3, #0]
 80029e2:	e077      	b.n	8002ad4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	212c      	movs	r1, #44	; 0x2c
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	3361      	adds	r3, #97	; 0x61
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b05      	cmp	r3, #5
 80029f6:	d109      	bne.n	8002a0c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	3360      	adds	r3, #96	; 0x60
 8002a06:	2205      	movs	r2, #5
 8002a08:	701a      	strb	r2, [r3, #0]
 8002a0a:	e063      	b.n	8002ad4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	3361      	adds	r3, #97	; 0x61
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b06      	cmp	r3, #6
 8002a1e:	d009      	beq.n	8002a34 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3361      	adds	r3, #97	; 0x61
 8002a2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d14f      	bne.n	8002ad4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	335c      	adds	r3, #92	; 0x5c
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	202c      	movs	r0, #44	; 0x2c
 8002a4c:	fb00 f303 	mul.w	r3, r0, r3
 8002a50:	440b      	add	r3, r1
 8002a52:	335c      	adds	r3, #92	; 0x5c
 8002a54:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	212c      	movs	r1, #44	; 0x2c
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	335c      	adds	r3, #92	; 0x5c
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d912      	bls.n	8002a90 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	335c      	adds	r3, #92	; 0x5c
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3360      	adds	r3, #96	; 0x60
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e021      	b.n	8002ad4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	212c      	movs	r1, #44	; 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3360      	adds	r3, #96	; 0x60
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ab8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ac0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ace:	461a      	mov	r2, r3
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	b2d9      	uxtb	r1, r3
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	202c      	movs	r0, #44	; 0x2c
 8002af0:	fb00 f303 	mul.w	r3, r0, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3360      	adds	r3, #96	; 0x60
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f008 ff23 	bl	800b948 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b02:	bf00      	nop
 8002b04:	3720      	adds	r7, #32
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b08a      	sub	sp, #40	; 0x28
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	0c5b      	lsrs	r3, r3, #17
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b3e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d004      	beq.n	8002b50 <HCD_RXQLVL_IRQHandler+0x46>
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b05      	cmp	r3, #5
 8002b4a:	f000 80a9 	beq.w	8002ca0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b4e:	e0aa      	b.n	8002ca6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 80a6 	beq.w	8002ca4 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	3344      	adds	r3, #68	; 0x44
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 809b 	beq.w	8002ca4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	3350      	adds	r3, #80	; 0x50
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	441a      	add	r2, r3
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	202c      	movs	r0, #44	; 0x2c
 8002b88:	fb00 f303 	mul.w	r3, r0, r3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	334c      	adds	r3, #76	; 0x4c
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d87a      	bhi.n	8002c8c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	212c      	movs	r1, #44	; 0x2c
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3344      	adds	r3, #68	; 0x44
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	b292      	uxth	r2, r2
 8002bae:	4619      	mov	r1, r3
 8002bb0:	f001 fabc 	bl	800412c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	212c      	movs	r1, #44	; 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3344      	adds	r3, #68	; 0x44
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	441a      	add	r2, r3
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	202c      	movs	r0, #44	; 0x2c
 8002bce:	fb00 f303 	mul.w	r3, r0, r3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3344      	adds	r3, #68	; 0x44
 8002bd6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	212c      	movs	r1, #44	; 0x2c
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	3350      	adds	r3, #80	; 0x50
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	441a      	add	r2, r3
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	202c      	movs	r0, #44	; 0x2c
 8002bf2:	fb00 f303 	mul.w	r3, r0, r3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3350      	adds	r3, #80	; 0x50
 8002bfa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	0cdb      	lsrs	r3, r3, #19
 8002c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c10:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3340      	adds	r3, #64	; 0x40
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d13c      	bne.n	8002ca4 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d039      	beq.n	8002ca4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c46:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c4e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3354      	adds	r3, #84	; 0x54
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	f083 0301 	eor.w	r3, r3, #1
 8002c76:	b2d8      	uxtb	r0, r3
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3354      	adds	r3, #84	; 0x54
 8002c86:	4602      	mov	r2, r0
 8002c88:	701a      	strb	r2, [r3, #0]
      break;
 8002c8a:	e00b      	b.n	8002ca4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	3360      	adds	r3, #96	; 0x60
 8002c9a:	2204      	movs	r2, #4
 8002c9c:	701a      	strb	r2, [r3, #0]
      break;
 8002c9e:	e001      	b.n	8002ca4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002ca0:	bf00      	nop
 8002ca2:	e000      	b.n	8002ca6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002ca4:	bf00      	nop
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	3728      	adds	r7, #40	; 0x28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b086      	sub	sp, #24
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cda:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d10b      	bne.n	8002cfe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d102      	bne.n	8002cf6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f008 fe0d 	bl	800b910 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f043 0302 	orr.w	r3, r3, #2
 8002cfc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d132      	bne.n	8002d6e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f043 0308 	orr.w	r3, r3, #8
 8002d0e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d126      	bne.n	8002d68 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d113      	bne.n	8002d4a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d2c:	d106      	bne.n	8002d3c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2102      	movs	r1, #2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f001 fb67 	bl	8004408 <USB_InitFSLSPClkSel>
 8002d3a:	e011      	b.n	8002d60 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2101      	movs	r1, #1
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 fb60 	bl	8004408 <USB_InitFSLSPClkSel>
 8002d48:	e00a      	b.n	8002d60 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d106      	bne.n	8002d60 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d5e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f008 fe03 	bl	800b96c <HAL_HCD_PortEnabled_Callback>
 8002d66:	e002      	b.n	8002d6e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f008 fe0d 	bl	800b988 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d103      	bne.n	8002d80 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f043 0320 	orr.w	r3, r3, #32
 8002d7e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d86:	461a      	mov	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	6013      	str	r3, [r2, #0]
}
 8002d8c:	bf00      	nop
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e267      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d075      	beq.n	8002e9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002db2:	4b88      	ldr	r3, [pc, #544]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d00c      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dbe:	4b85      	ldr	r3, [pc, #532]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d112      	bne.n	8002df0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dca:	4b82      	ldr	r3, [pc, #520]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd6:	d10b      	bne.n	8002df0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd8:	4b7e      	ldr	r3, [pc, #504]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d05b      	beq.n	8002e9c <HAL_RCC_OscConfig+0x108>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d157      	bne.n	8002e9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e242      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df8:	d106      	bne.n	8002e08 <HAL_RCC_OscConfig+0x74>
 8002dfa:	4b76      	ldr	r3, [pc, #472]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a75      	ldr	r2, [pc, #468]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e01d      	b.n	8002e44 <HAL_RCC_OscConfig+0xb0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x98>
 8002e12:	4b70      	ldr	r3, [pc, #448]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a6f      	ldr	r2, [pc, #444]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	4b6d      	ldr	r3, [pc, #436]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a6c      	ldr	r2, [pc, #432]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e00b      	b.n	8002e44 <HAL_RCC_OscConfig+0xb0>
 8002e2c:	4b69      	ldr	r3, [pc, #420]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a68      	ldr	r2, [pc, #416]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	4b66      	ldr	r3, [pc, #408]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a65      	ldr	r2, [pc, #404]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d013      	beq.n	8002e74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe f87c 	bl	8000f48 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e54:	f7fe f878 	bl	8000f48 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e207      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e66:	4b5b      	ldr	r3, [pc, #364]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0xc0>
 8002e72:	e014      	b.n	8002e9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fe f868 	bl	8000f48 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e7c:	f7fe f864 	bl	8000f48 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e1f3      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8e:	4b51      	ldr	r3, [pc, #324]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0xe8>
 8002e9a:	e000      	b.n	8002e9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d063      	beq.n	8002f72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eaa:	4b4a      	ldr	r3, [pc, #296]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00b      	beq.n	8002ece <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb6:	4b47      	ldr	r3, [pc, #284]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d11c      	bne.n	8002efc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ec2:	4b44      	ldr	r3, [pc, #272]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d116      	bne.n	8002efc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ece:	4b41      	ldr	r3, [pc, #260]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x152>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d001      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e1c7      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee6:	4b3b      	ldr	r3, [pc, #236]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4937      	ldr	r1, [pc, #220]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efa:	e03a      	b.n	8002f72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d020      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f04:	4b34      	ldr	r3, [pc, #208]	; (8002fd8 <HAL_RCC_OscConfig+0x244>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0a:	f7fe f81d 	bl	8000f48 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f12:	f7fe f819 	bl	8000f48 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e1a8      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f24:	4b2b      	ldr	r3, [pc, #172]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f30:	4b28      	ldr	r3, [pc, #160]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4925      	ldr	r1, [pc, #148]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]
 8002f44:	e015      	b.n	8002f72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f46:	4b24      	ldr	r3, [pc, #144]	; (8002fd8 <HAL_RCC_OscConfig+0x244>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fd fffc 	bl	8000f48 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f54:	f7fd fff8 	bl	8000f48 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e187      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f66:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d036      	beq.n	8002fec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d016      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f86:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <HAL_RCC_OscConfig+0x248>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fd ffdc 	bl	8000f48 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f94:	f7fd ffd8 	bl	8000f48 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e167      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0x200>
 8002fb2:	e01b      	b.n	8002fec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <HAL_RCC_OscConfig+0x248>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fba:	f7fd ffc5 	bl	8000f48 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc0:	e00e      	b.n	8002fe0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc2:	f7fd ffc1 	bl	8000f48 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d907      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e150      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	42470000 	.word	0x42470000
 8002fdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe0:	4b88      	ldr	r3, [pc, #544]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1ea      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8097 	beq.w	8003128 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ffe:	4b81      	ldr	r3, [pc, #516]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10f      	bne.n	800302a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	4b7d      	ldr	r3, [pc, #500]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	4a7c      	ldr	r2, [pc, #496]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003018:	6413      	str	r3, [r2, #64]	; 0x40
 800301a:	4b7a      	ldr	r3, [pc, #488]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003026:	2301      	movs	r3, #1
 8003028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302a:	4b77      	ldr	r3, [pc, #476]	; (8003208 <HAL_RCC_OscConfig+0x474>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003032:	2b00      	cmp	r3, #0
 8003034:	d118      	bne.n	8003068 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003036:	4b74      	ldr	r3, [pc, #464]	; (8003208 <HAL_RCC_OscConfig+0x474>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a73      	ldr	r2, [pc, #460]	; (8003208 <HAL_RCC_OscConfig+0x474>)
 800303c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003042:	f7fd ff81 	bl	8000f48 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304a:	f7fd ff7d 	bl	8000f48 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e10c      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305c:	4b6a      	ldr	r3, [pc, #424]	; (8003208 <HAL_RCC_OscConfig+0x474>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d106      	bne.n	800307e <HAL_RCC_OscConfig+0x2ea>
 8003070:	4b64      	ldr	r3, [pc, #400]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	4a63      	ldr	r2, [pc, #396]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6713      	str	r3, [r2, #112]	; 0x70
 800307c:	e01c      	b.n	80030b8 <HAL_RCC_OscConfig+0x324>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b05      	cmp	r3, #5
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x30c>
 8003086:	4b5f      	ldr	r3, [pc, #380]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	4a5e      	ldr	r2, [pc, #376]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 800308c:	f043 0304 	orr.w	r3, r3, #4
 8003090:	6713      	str	r3, [r2, #112]	; 0x70
 8003092:	4b5c      	ldr	r3, [pc, #368]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	4a5b      	ldr	r2, [pc, #364]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	6713      	str	r3, [r2, #112]	; 0x70
 800309e:	e00b      	b.n	80030b8 <HAL_RCC_OscConfig+0x324>
 80030a0:	4b58      	ldr	r3, [pc, #352]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	4a57      	ldr	r2, [pc, #348]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	6713      	str	r3, [r2, #112]	; 0x70
 80030ac:	4b55      	ldr	r3, [pc, #340]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	4a54      	ldr	r2, [pc, #336]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 80030b2:	f023 0304 	bic.w	r3, r3, #4
 80030b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d015      	beq.n	80030ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7fd ff42 	bl	8000f48 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c6:	e00a      	b.n	80030de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7fd ff3e 	bl	8000f48 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e0cb      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030de:	4b49      	ldr	r3, [pc, #292]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0ee      	beq.n	80030c8 <HAL_RCC_OscConfig+0x334>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ec:	f7fd ff2c 	bl	8000f48 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f2:	e00a      	b.n	800310a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f4:	f7fd ff28 	bl	8000f48 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e0b5      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310a:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1ee      	bne.n	80030f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003116:	7dfb      	ldrb	r3, [r7, #23]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d105      	bne.n	8003128 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311c:	4b39      	ldr	r3, [pc, #228]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	4a38      	ldr	r2, [pc, #224]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 8003122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003126:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 80a1 	beq.w	8003274 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003132:	4b34      	ldr	r3, [pc, #208]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b08      	cmp	r3, #8
 800313c:	d05c      	beq.n	80031f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d141      	bne.n	80031ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003146:	4b31      	ldr	r3, [pc, #196]	; (800320c <HAL_RCC_OscConfig+0x478>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fd fefc 	bl	8000f48 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003154:	f7fd fef8 	bl	8000f48 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e087      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003166:	4b27      	ldr	r3, [pc, #156]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69da      	ldr	r2, [r3, #28]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	019b      	lsls	r3, r3, #6
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	085b      	lsrs	r3, r3, #1
 800318a:	3b01      	subs	r3, #1
 800318c:	041b      	lsls	r3, r3, #16
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	061b      	lsls	r3, r3, #24
 8003196:	491b      	ldr	r1, [pc, #108]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800319c:	4b1b      	ldr	r3, [pc, #108]	; (800320c <HAL_RCC_OscConfig+0x478>)
 800319e:	2201      	movs	r2, #1
 80031a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a2:	f7fd fed1 	bl	8000f48 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031aa:	f7fd fecd 	bl	8000f48 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e05c      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031bc:	4b11      	ldr	r3, [pc, #68]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x416>
 80031c8:	e054      	b.n	8003274 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <HAL_RCC_OscConfig+0x478>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d0:	f7fd feba 	bl	8000f48 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d8:	f7fd feb6 	bl	8000f48 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e045      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <HAL_RCC_OscConfig+0x470>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x444>
 80031f6:	e03d      	b.n	8003274 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d107      	bne.n	8003210 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e038      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
 8003204:	40023800 	.word	0x40023800
 8003208:	40007000 	.word	0x40007000
 800320c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <HAL_RCC_OscConfig+0x4ec>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d028      	beq.n	8003270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d121      	bne.n	8003270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003236:	429a      	cmp	r2, r3
 8003238:	d11a      	bne.n	8003270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003240:	4013      	ands	r3, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003246:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003248:	4293      	cmp	r3, r2
 800324a:	d111      	bne.n	8003270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	085b      	lsrs	r3, r3, #1
 8003258:	3b01      	subs	r3, #1
 800325a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800325c:	429a      	cmp	r2, r3
 800325e:	d107      	bne.n	8003270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800

08003284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0cc      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003298:	4b68      	ldr	r3, [pc, #416]	; (800343c <HAL_RCC_ClockConfig+0x1b8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d90c      	bls.n	80032c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b65      	ldr	r3, [pc, #404]	; (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b63      	ldr	r3, [pc, #396]	; (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0b8      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d020      	beq.n	800330e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d8:	4b59      	ldr	r3, [pc, #356]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	4a58      	ldr	r2, [pc, #352]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f0:	4b53      	ldr	r3, [pc, #332]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a52      	ldr	r2, [pc, #328]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032fc:	4b50      	ldr	r3, [pc, #320]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	494d      	ldr	r1, [pc, #308]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d044      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d107      	bne.n	8003332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	4b47      	ldr	r3, [pc, #284]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d119      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e07f      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d003      	beq.n	8003342 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800333e:	2b03      	cmp	r3, #3
 8003340:	d107      	bne.n	8003352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003342:	4b3f      	ldr	r3, [pc, #252]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e06f      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003352:	4b3b      	ldr	r3, [pc, #236]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e067      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003362:	4b37      	ldr	r3, [pc, #220]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f023 0203 	bic.w	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4934      	ldr	r1, [pc, #208]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	4313      	orrs	r3, r2
 8003372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003374:	f7fd fde8 	bl	8000f48 <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337a:	e00a      	b.n	8003392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337c:	f7fd fde4 	bl	8000f48 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	; 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e04f      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	4b2b      	ldr	r3, [pc, #172]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 020c 	and.w	r2, r3, #12
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d1eb      	bne.n	800337c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a4:	4b25      	ldr	r3, [pc, #148]	; (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d20c      	bcs.n	80033cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b22      	ldr	r3, [pc, #136]	; (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	4b20      	ldr	r3, [pc, #128]	; (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e032      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d8:	4b19      	ldr	r3, [pc, #100]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4916      	ldr	r1, [pc, #88]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f6:	4b12      	ldr	r3, [pc, #72]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	490e      	ldr	r1, [pc, #56]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	4313      	orrs	r3, r2
 8003408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800340a:	f000 f821 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 800340e:	4602      	mov	r2, r0
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	490a      	ldr	r1, [pc, #40]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	5ccb      	ldrb	r3, [r1, r3]
 800341e:	fa22 f303 	lsr.w	r3, r2, r3
 8003422:	4a09      	ldr	r2, [pc, #36]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fd48 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023c00 	.word	0x40023c00
 8003440:	40023800 	.word	0x40023800
 8003444:	0800d0cc 	.word	0x0800d0cc
 8003448:	20000000 	.word	0x20000000
 800344c:	20000004 	.word	0x20000004

08003450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003454:	b094      	sub	sp, #80	; 0x50
 8003456:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	647b      	str	r3, [r7, #68]	; 0x44
 800345c:	2300      	movs	r3, #0
 800345e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003460:	2300      	movs	r3, #0
 8003462:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003468:	4b79      	ldr	r3, [pc, #484]	; (8003650 <HAL_RCC_GetSysClockFreq+0x200>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b08      	cmp	r3, #8
 8003472:	d00d      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x40>
 8003474:	2b08      	cmp	r3, #8
 8003476:	f200 80e1 	bhi.w	800363c <HAL_RCC_GetSysClockFreq+0x1ec>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x34>
 800347e:	2b04      	cmp	r3, #4
 8003480:	d003      	beq.n	800348a <HAL_RCC_GetSysClockFreq+0x3a>
 8003482:	e0db      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003484:	4b73      	ldr	r3, [pc, #460]	; (8003654 <HAL_RCC_GetSysClockFreq+0x204>)
 8003486:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003488:	e0db      	b.n	8003642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800348a:	4b73      	ldr	r3, [pc, #460]	; (8003658 <HAL_RCC_GetSysClockFreq+0x208>)
 800348c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800348e:	e0d8      	b.n	8003642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003490:	4b6f      	ldr	r3, [pc, #444]	; (8003650 <HAL_RCC_GetSysClockFreq+0x200>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003498:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800349a:	4b6d      	ldr	r3, [pc, #436]	; (8003650 <HAL_RCC_GetSysClockFreq+0x200>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d063      	beq.n	800356e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a6:	4b6a      	ldr	r3, [pc, #424]	; (8003650 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	099b      	lsrs	r3, r3, #6
 80034ac:	2200      	movs	r2, #0
 80034ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80034b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b8:	633b      	str	r3, [r7, #48]	; 0x30
 80034ba:	2300      	movs	r3, #0
 80034bc:	637b      	str	r3, [r7, #52]	; 0x34
 80034be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034c2:	4622      	mov	r2, r4
 80034c4:	462b      	mov	r3, r5
 80034c6:	f04f 0000 	mov.w	r0, #0
 80034ca:	f04f 0100 	mov.w	r1, #0
 80034ce:	0159      	lsls	r1, r3, #5
 80034d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034d4:	0150      	lsls	r0, r2, #5
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4621      	mov	r1, r4
 80034dc:	1a51      	subs	r1, r2, r1
 80034de:	6139      	str	r1, [r7, #16]
 80034e0:	4629      	mov	r1, r5
 80034e2:	eb63 0301 	sbc.w	r3, r3, r1
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034f4:	4659      	mov	r1, fp
 80034f6:	018b      	lsls	r3, r1, #6
 80034f8:	4651      	mov	r1, sl
 80034fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034fe:	4651      	mov	r1, sl
 8003500:	018a      	lsls	r2, r1, #6
 8003502:	4651      	mov	r1, sl
 8003504:	ebb2 0801 	subs.w	r8, r2, r1
 8003508:	4659      	mov	r1, fp
 800350a:	eb63 0901 	sbc.w	r9, r3, r1
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800351a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800351e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003522:	4690      	mov	r8, r2
 8003524:	4699      	mov	r9, r3
 8003526:	4623      	mov	r3, r4
 8003528:	eb18 0303 	adds.w	r3, r8, r3
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	462b      	mov	r3, r5
 8003530:	eb49 0303 	adc.w	r3, r9, r3
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003542:	4629      	mov	r1, r5
 8003544:	024b      	lsls	r3, r1, #9
 8003546:	4621      	mov	r1, r4
 8003548:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800354c:	4621      	mov	r1, r4
 800354e:	024a      	lsls	r2, r1, #9
 8003550:	4610      	mov	r0, r2
 8003552:	4619      	mov	r1, r3
 8003554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003556:	2200      	movs	r2, #0
 8003558:	62bb      	str	r3, [r7, #40]	; 0x28
 800355a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800355c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003560:	f7fc fe86 	bl	8000270 <__aeabi_uldivmod>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4613      	mov	r3, r2
 800356a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800356c:	e058      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800356e:	4b38      	ldr	r3, [pc, #224]	; (8003650 <HAL_RCC_GetSysClockFreq+0x200>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	099b      	lsrs	r3, r3, #6
 8003574:	2200      	movs	r2, #0
 8003576:	4618      	mov	r0, r3
 8003578:	4611      	mov	r1, r2
 800357a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800357e:	623b      	str	r3, [r7, #32]
 8003580:	2300      	movs	r3, #0
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
 8003584:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003588:	4642      	mov	r2, r8
 800358a:	464b      	mov	r3, r9
 800358c:	f04f 0000 	mov.w	r0, #0
 8003590:	f04f 0100 	mov.w	r1, #0
 8003594:	0159      	lsls	r1, r3, #5
 8003596:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800359a:	0150      	lsls	r0, r2, #5
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4641      	mov	r1, r8
 80035a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80035a6:	4649      	mov	r1, r9
 80035a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035c0:	ebb2 040a 	subs.w	r4, r2, sl
 80035c4:	eb63 050b 	sbc.w	r5, r3, fp
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	00eb      	lsls	r3, r5, #3
 80035d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035d6:	00e2      	lsls	r2, r4, #3
 80035d8:	4614      	mov	r4, r2
 80035da:	461d      	mov	r5, r3
 80035dc:	4643      	mov	r3, r8
 80035de:	18e3      	adds	r3, r4, r3
 80035e0:	603b      	str	r3, [r7, #0]
 80035e2:	464b      	mov	r3, r9
 80035e4:	eb45 0303 	adc.w	r3, r5, r3
 80035e8:	607b      	str	r3, [r7, #4]
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035f6:	4629      	mov	r1, r5
 80035f8:	028b      	lsls	r3, r1, #10
 80035fa:	4621      	mov	r1, r4
 80035fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003600:	4621      	mov	r1, r4
 8003602:	028a      	lsls	r2, r1, #10
 8003604:	4610      	mov	r0, r2
 8003606:	4619      	mov	r1, r3
 8003608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360a:	2200      	movs	r2, #0
 800360c:	61bb      	str	r3, [r7, #24]
 800360e:	61fa      	str	r2, [r7, #28]
 8003610:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003614:	f7fc fe2c 	bl	8000270 <__aeabi_uldivmod>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4613      	mov	r3, r2
 800361e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003620:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <HAL_RCC_GetSysClockFreq+0x200>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	0c1b      	lsrs	r3, r3, #16
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	3301      	adds	r3, #1
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003630:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003634:	fbb2 f3f3 	udiv	r3, r2, r3
 8003638:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800363a:	e002      	b.n	8003642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <HAL_RCC_GetSysClockFreq+0x204>)
 800363e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003644:	4618      	mov	r0, r3
 8003646:	3750      	adds	r7, #80	; 0x50
 8003648:	46bd      	mov	sp, r7
 800364a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800364e:	bf00      	nop
 8003650:	40023800 	.word	0x40023800
 8003654:	00f42400 	.word	0x00f42400
 8003658:	007a1200 	.word	0x007a1200

0800365c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003660:	4b03      	ldr	r3, [pc, #12]	; (8003670 <HAL_RCC_GetHCLKFreq+0x14>)
 8003662:	681b      	ldr	r3, [r3, #0]
}
 8003664:	4618      	mov	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000000 	.word	0x20000000

08003674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003678:	f7ff fff0 	bl	800365c <HAL_RCC_GetHCLKFreq>
 800367c:	4602      	mov	r2, r0
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	0a9b      	lsrs	r3, r3, #10
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	4903      	ldr	r1, [pc, #12]	; (8003698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800368a:	5ccb      	ldrb	r3, [r1, r3]
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003690:	4618      	mov	r0, r3
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40023800 	.word	0x40023800
 8003698:	0800d0dc 	.word	0x0800d0dc

0800369c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036a0:	f7ff ffdc 	bl	800365c <HAL_RCC_GetHCLKFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	0b5b      	lsrs	r3, r3, #13
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4903      	ldr	r1, [pc, #12]	; (80036c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40023800 	.word	0x40023800
 80036c0:	0800d0dc 	.word	0x0800d0dc

080036c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e03f      	b.n	8003756 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd fa64 	bl	8000bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2224      	movs	r2, #36	; 0x24
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f929 	bl	8003960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800371c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695a      	ldr	r2, [r3, #20]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800372c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800373c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b08a      	sub	sp, #40	; 0x28
 8003762:	af02      	add	r7, sp, #8
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	603b      	str	r3, [r7, #0]
 800376a:	4613      	mov	r3, r2
 800376c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b20      	cmp	r3, #32
 800377c:	d17c      	bne.n	8003878 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HAL_UART_Transmit+0x2c>
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e075      	b.n	800387a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_UART_Transmit+0x3e>
 8003798:	2302      	movs	r3, #2
 800379a:	e06e      	b.n	800387a <HAL_UART_Transmit+0x11c>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2221      	movs	r2, #33	; 0x21
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037b2:	f7fd fbc9 	bl	8000f48 <HAL_GetTick>
 80037b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	88fa      	ldrh	r2, [r7, #6]
 80037bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	88fa      	ldrh	r2, [r7, #6]
 80037c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037cc:	d108      	bne.n	80037e0 <HAL_UART_Transmit+0x82>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d104      	bne.n	80037e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	e003      	b.n	80037e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037f0:	e02a      	b.n	8003848 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2200      	movs	r2, #0
 80037fa:	2180      	movs	r1, #128	; 0x80
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f840 	bl	8003882 <UART_WaitOnFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e036      	b.n	800387a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	3302      	adds	r3, #2
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	e007      	b.n	800383a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	3301      	adds	r3, #1
 8003838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1cf      	bne.n	80037f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2200      	movs	r2, #0
 800385a:	2140      	movs	r1, #64	; 0x40
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f810 	bl	8003882 <UART_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e006      	b.n	800387a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b090      	sub	sp, #64	; 0x40
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	4613      	mov	r3, r2
 8003890:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003892:	e050      	b.n	8003936 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389a:	d04c      	beq.n	8003936 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800389c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80038a2:	f7fd fb51 	bl	8000f48 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d241      	bcs.n	8003936 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	330c      	adds	r3, #12
 80038b8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	e853 3f00 	ldrex	r3, [r3]
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	330c      	adds	r3, #12
 80038d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038d2:	637a      	str	r2, [r7, #52]	; 0x34
 80038d4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038da:	e841 2300 	strex	r3, r2, [r1]
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1e5      	bne.n	80038b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3314      	adds	r3, #20
 80038ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	e853 3f00 	ldrex	r3, [r3]
 80038f4:	613b      	str	r3, [r7, #16]
   return(result);
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3314      	adds	r3, #20
 8003904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003906:	623a      	str	r2, [r7, #32]
 8003908:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390a:	69f9      	ldr	r1, [r7, #28]
 800390c:	6a3a      	ldr	r2, [r7, #32]
 800390e:	e841 2300 	strex	r3, r2, [r1]
 8003912:	61bb      	str	r3, [r7, #24]
   return(result);
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1e5      	bne.n	80038e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e00f      	b.n	8003956 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4013      	ands	r3, r2
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	bf0c      	ite	eq
 8003946:	2301      	moveq	r3, #1
 8003948:	2300      	movne	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	429a      	cmp	r2, r3
 8003952:	d09f      	beq.n	8003894 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3740      	adds	r7, #64	; 0x40
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003964:	b0c0      	sub	sp, #256	; 0x100
 8003966:	af00      	add	r7, sp, #0
 8003968:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	68d9      	ldr	r1, [r3, #12]
 800397e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	ea40 0301 	orr.w	r3, r0, r1
 8003988:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	431a      	orrs	r2, r3
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	431a      	orrs	r2, r3
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039b8:	f021 010c 	bic.w	r1, r1, #12
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039c6:	430b      	orrs	r3, r1
 80039c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039da:	6999      	ldr	r1, [r3, #24]
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	ea40 0301 	orr.w	r3, r0, r1
 80039e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	4b8f      	ldr	r3, [pc, #572]	; (8003c2c <UART_SetConfig+0x2cc>)
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d005      	beq.n	8003a00 <UART_SetConfig+0xa0>
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4b8d      	ldr	r3, [pc, #564]	; (8003c30 <UART_SetConfig+0x2d0>)
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d104      	bne.n	8003a0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a00:	f7ff fe4c 	bl	800369c <HAL_RCC_GetPCLK2Freq>
 8003a04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a08:	e003      	b.n	8003a12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a0a:	f7ff fe33 	bl	8003674 <HAL_RCC_GetPCLK1Freq>
 8003a0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a1c:	f040 810c 	bne.w	8003c38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a24:	2200      	movs	r2, #0
 8003a26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a32:	4622      	mov	r2, r4
 8003a34:	462b      	mov	r3, r5
 8003a36:	1891      	adds	r1, r2, r2
 8003a38:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a3a:	415b      	adcs	r3, r3
 8003a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a42:	4621      	mov	r1, r4
 8003a44:	eb12 0801 	adds.w	r8, r2, r1
 8003a48:	4629      	mov	r1, r5
 8003a4a:	eb43 0901 	adc.w	r9, r3, r1
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a62:	4690      	mov	r8, r2
 8003a64:	4699      	mov	r9, r3
 8003a66:	4623      	mov	r3, r4
 8003a68:	eb18 0303 	adds.w	r3, r8, r3
 8003a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a70:	462b      	mov	r3, r5
 8003a72:	eb49 0303 	adc.w	r3, r9, r3
 8003a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a8e:	460b      	mov	r3, r1
 8003a90:	18db      	adds	r3, r3, r3
 8003a92:	653b      	str	r3, [r7, #80]	; 0x50
 8003a94:	4613      	mov	r3, r2
 8003a96:	eb42 0303 	adc.w	r3, r2, r3
 8003a9a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003aa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003aa4:	f7fc fbe4 	bl	8000270 <__aeabi_uldivmod>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4b61      	ldr	r3, [pc, #388]	; (8003c34 <UART_SetConfig+0x2d4>)
 8003aae:	fba3 2302 	umull	r2, r3, r3, r2
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	011c      	lsls	r4, r3, #4
 8003ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ac0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ac4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ac8:	4642      	mov	r2, r8
 8003aca:	464b      	mov	r3, r9
 8003acc:	1891      	adds	r1, r2, r2
 8003ace:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ad0:	415b      	adcs	r3, r3
 8003ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ad8:	4641      	mov	r1, r8
 8003ada:	eb12 0a01 	adds.w	sl, r2, r1
 8003ade:	4649      	mov	r1, r9
 8003ae0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003af0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003af4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003af8:	4692      	mov	sl, r2
 8003afa:	469b      	mov	fp, r3
 8003afc:	4643      	mov	r3, r8
 8003afe:	eb1a 0303 	adds.w	r3, sl, r3
 8003b02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b06:	464b      	mov	r3, r9
 8003b08:	eb4b 0303 	adc.w	r3, fp, r3
 8003b0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b24:	460b      	mov	r3, r1
 8003b26:	18db      	adds	r3, r3, r3
 8003b28:	643b      	str	r3, [r7, #64]	; 0x40
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	eb42 0303 	adc.w	r3, r2, r3
 8003b30:	647b      	str	r3, [r7, #68]	; 0x44
 8003b32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b3a:	f7fc fb99 	bl	8000270 <__aeabi_uldivmod>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4611      	mov	r1, r2
 8003b44:	4b3b      	ldr	r3, [pc, #236]	; (8003c34 <UART_SetConfig+0x2d4>)
 8003b46:	fba3 2301 	umull	r2, r3, r3, r1
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2264      	movs	r2, #100	; 0x64
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
 8003b52:	1acb      	subs	r3, r1, r3
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b5a:	4b36      	ldr	r3, [pc, #216]	; (8003c34 <UART_SetConfig+0x2d4>)
 8003b5c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b60:	095b      	lsrs	r3, r3, #5
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b68:	441c      	add	r4, r3
 8003b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	464b      	mov	r3, r9
 8003b80:	1891      	adds	r1, r2, r2
 8003b82:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b84:	415b      	adcs	r3, r3
 8003b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	1851      	adds	r1, r2, r1
 8003b90:	6339      	str	r1, [r7, #48]	; 0x30
 8003b92:	4649      	mov	r1, r9
 8003b94:	414b      	adcs	r3, r1
 8003b96:	637b      	str	r3, [r7, #52]	; 0x34
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ba4:	4659      	mov	r1, fp
 8003ba6:	00cb      	lsls	r3, r1, #3
 8003ba8:	4651      	mov	r1, sl
 8003baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bae:	4651      	mov	r1, sl
 8003bb0:	00ca      	lsls	r2, r1, #3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4642      	mov	r2, r8
 8003bba:	189b      	adds	r3, r3, r2
 8003bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	460a      	mov	r2, r1
 8003bc4:	eb42 0303 	adc.w	r3, r2, r3
 8003bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bd8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003be0:	460b      	mov	r3, r1
 8003be2:	18db      	adds	r3, r3, r3
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be6:	4613      	mov	r3, r2
 8003be8:	eb42 0303 	adc.w	r3, r2, r3
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bf2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bf6:	f7fc fb3b 	bl	8000270 <__aeabi_uldivmod>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <UART_SetConfig+0x2d4>)
 8003c00:	fba3 1302 	umull	r1, r3, r3, r2
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	2164      	movs	r1, #100	; 0x64
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	3332      	adds	r3, #50	; 0x32
 8003c12:	4a08      	ldr	r2, [pc, #32]	; (8003c34 <UART_SetConfig+0x2d4>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	f003 0207 	and.w	r2, r3, #7
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4422      	add	r2, r4
 8003c26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c28:	e105      	b.n	8003e36 <UART_SetConfig+0x4d6>
 8003c2a:	bf00      	nop
 8003c2c:	40011000 	.word	0x40011000
 8003c30:	40011400 	.word	0x40011400
 8003c34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c4a:	4642      	mov	r2, r8
 8003c4c:	464b      	mov	r3, r9
 8003c4e:	1891      	adds	r1, r2, r2
 8003c50:	6239      	str	r1, [r7, #32]
 8003c52:	415b      	adcs	r3, r3
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
 8003c56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c5a:	4641      	mov	r1, r8
 8003c5c:	1854      	adds	r4, r2, r1
 8003c5e:	4649      	mov	r1, r9
 8003c60:	eb43 0501 	adc.w	r5, r3, r1
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	00eb      	lsls	r3, r5, #3
 8003c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c72:	00e2      	lsls	r2, r4, #3
 8003c74:	4614      	mov	r4, r2
 8003c76:	461d      	mov	r5, r3
 8003c78:	4643      	mov	r3, r8
 8003c7a:	18e3      	adds	r3, r4, r3
 8003c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c80:	464b      	mov	r3, r9
 8003c82:	eb45 0303 	adc.w	r3, r5, r3
 8003c86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	008b      	lsls	r3, r1, #2
 8003caa:	4621      	mov	r1, r4
 8003cac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	008a      	lsls	r2, r1, #2
 8003cb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003cb8:	f7fc fada 	bl	8000270 <__aeabi_uldivmod>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4b60      	ldr	r3, [pc, #384]	; (8003e44 <UART_SetConfig+0x4e4>)
 8003cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	011c      	lsls	r4, r3, #4
 8003cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cdc:	4642      	mov	r2, r8
 8003cde:	464b      	mov	r3, r9
 8003ce0:	1891      	adds	r1, r2, r2
 8003ce2:	61b9      	str	r1, [r7, #24]
 8003ce4:	415b      	adcs	r3, r3
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cec:	4641      	mov	r1, r8
 8003cee:	1851      	adds	r1, r2, r1
 8003cf0:	6139      	str	r1, [r7, #16]
 8003cf2:	4649      	mov	r1, r9
 8003cf4:	414b      	adcs	r3, r1
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d04:	4659      	mov	r1, fp
 8003d06:	00cb      	lsls	r3, r1, #3
 8003d08:	4651      	mov	r1, sl
 8003d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d0e:	4651      	mov	r1, sl
 8003d10:	00ca      	lsls	r2, r1, #3
 8003d12:	4610      	mov	r0, r2
 8003d14:	4619      	mov	r1, r3
 8003d16:	4603      	mov	r3, r0
 8003d18:	4642      	mov	r2, r8
 8003d1a:	189b      	adds	r3, r3, r2
 8003d1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d20:	464b      	mov	r3, r9
 8003d22:	460a      	mov	r2, r1
 8003d24:	eb42 0303 	adc.w	r3, r2, r3
 8003d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d36:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d44:	4649      	mov	r1, r9
 8003d46:	008b      	lsls	r3, r1, #2
 8003d48:	4641      	mov	r1, r8
 8003d4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d4e:	4641      	mov	r1, r8
 8003d50:	008a      	lsls	r2, r1, #2
 8003d52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d56:	f7fc fa8b 	bl	8000270 <__aeabi_uldivmod>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <UART_SetConfig+0x4e4>)
 8003d60:	fba3 1302 	umull	r1, r3, r3, r2
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	2164      	movs	r1, #100	; 0x64
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	3332      	adds	r3, #50	; 0x32
 8003d72:	4a34      	ldr	r2, [pc, #208]	; (8003e44 <UART_SetConfig+0x4e4>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d7e:	441c      	add	r4, r3
 8003d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d84:	2200      	movs	r2, #0
 8003d86:	673b      	str	r3, [r7, #112]	; 0x70
 8003d88:	677a      	str	r2, [r7, #116]	; 0x74
 8003d8a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d8e:	4642      	mov	r2, r8
 8003d90:	464b      	mov	r3, r9
 8003d92:	1891      	adds	r1, r2, r2
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	415b      	adcs	r3, r3
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d9e:	4641      	mov	r1, r8
 8003da0:	1851      	adds	r1, r2, r1
 8003da2:	6039      	str	r1, [r7, #0]
 8003da4:	4649      	mov	r1, r9
 8003da6:	414b      	adcs	r3, r1
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003db6:	4659      	mov	r1, fp
 8003db8:	00cb      	lsls	r3, r1, #3
 8003dba:	4651      	mov	r1, sl
 8003dbc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dc0:	4651      	mov	r1, sl
 8003dc2:	00ca      	lsls	r2, r1, #3
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4603      	mov	r3, r0
 8003dca:	4642      	mov	r2, r8
 8003dcc:	189b      	adds	r3, r3, r2
 8003dce:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dd0:	464b      	mov	r3, r9
 8003dd2:	460a      	mov	r2, r1
 8003dd4:	eb42 0303 	adc.w	r3, r2, r3
 8003dd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	663b      	str	r3, [r7, #96]	; 0x60
 8003de4:	667a      	str	r2, [r7, #100]	; 0x64
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003df2:	4649      	mov	r1, r9
 8003df4:	008b      	lsls	r3, r1, #2
 8003df6:	4641      	mov	r1, r8
 8003df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	008a      	lsls	r2, r1, #2
 8003e00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e04:	f7fc fa34 	bl	8000270 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <UART_SetConfig+0x4e4>)
 8003e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	2164      	movs	r1, #100	; 0x64
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	3332      	adds	r3, #50	; 0x32
 8003e20:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <UART_SetConfig+0x4e4>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	f003 020f 	and.w	r2, r3, #15
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4422      	add	r2, r4
 8003e34:	609a      	str	r2, [r3, #8]
}
 8003e36:	bf00      	nop
 8003e38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e42:	bf00      	nop
 8003e44:	51eb851f 	.word	0x51eb851f

08003e48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e48:	b084      	sub	sp, #16
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	f107 001c 	add.w	r0, r7, #28
 8003e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d122      	bne.n	8003ea6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d105      	bne.n	8003e9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f9c0 	bl	8004220 <USB_CoreReset>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73fb      	strb	r3, [r7, #15]
 8003ea4:	e01a      	b.n	8003edc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f9b4 	bl	8004220 <USB_CoreReset>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38
 8003ece:	e005      	b.n	8003edc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d10b      	bne.n	8003efa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f043 0206 	orr.w	r2, r3, #6
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f043 0220 	orr.w	r2, r3, #32
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f06:	b004      	add	sp, #16
 8003f08:	4770      	bx	lr

08003f0a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f043 0201 	orr.w	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f023 0201 	bic.w	r2, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	460b      	mov	r3, r1
 8003f58:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d115      	bne.n	8003f9c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	f7fc ffef 	bl	8000f60 <HAL_Delay>
      ms++;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	3301      	adds	r3, #1
 8003f86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f93a 	bl	8004202 <USB_GetMode>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d01e      	beq.n	8003fd2 <USB_SetCurrentMode+0x84>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b31      	cmp	r3, #49	; 0x31
 8003f98:	d9f0      	bls.n	8003f7c <USB_SetCurrentMode+0x2e>
 8003f9a:	e01a      	b.n	8003fd2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d115      	bne.n	8003fce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fae:	2001      	movs	r0, #1
 8003fb0:	f7fc ffd6 	bl	8000f60 <HAL_Delay>
      ms++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f921 	bl	8004202 <USB_GetMode>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <USB_SetCurrentMode+0x84>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b31      	cmp	r3, #49	; 0x31
 8003fca:	d9f0      	bls.n	8003fae <USB_SetCurrentMode+0x60>
 8003fcc:	e001      	b.n	8003fd2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e005      	b.n	8003fde <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b32      	cmp	r3, #50	; 0x32
 8003fd6:	d101      	bne.n	8003fdc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4a13      	ldr	r2, [pc, #76]	; (800404c <USB_FlushTxFifo+0x64>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d901      	bls.n	8004008 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e01b      	b.n	8004040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	daf2      	bge.n	8003ff6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	019b      	lsls	r3, r3, #6
 8004018:	f043 0220 	orr.w	r2, r3, #32
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3301      	adds	r3, #1
 8004024:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a08      	ldr	r2, [pc, #32]	; (800404c <USB_FlushTxFifo+0x64>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e006      	b.n	8004040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b20      	cmp	r3, #32
 800403c:	d0f0      	beq.n	8004020 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	00030d40 	.word	0x00030d40

08004050 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3301      	adds	r3, #1
 8004060:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4a11      	ldr	r2, [pc, #68]	; (80040ac <USB_FlushRxFifo+0x5c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e018      	b.n	80040a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	daf2      	bge.n	800405c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2210      	movs	r2, #16
 800407e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3301      	adds	r3, #1
 8004084:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4a08      	ldr	r2, [pc, #32]	; (80040ac <USB_FlushRxFifo+0x5c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e006      	b.n	80040a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b10      	cmp	r3, #16
 800409c:	d0f0      	beq.n	8004080 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	00030d40 	.word	0x00030d40

080040b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b089      	sub	sp, #36	; 0x24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	4611      	mov	r1, r2
 80040bc:	461a      	mov	r2, r3
 80040be:	460b      	mov	r3, r1
 80040c0:	71fb      	strb	r3, [r7, #7]
 80040c2:	4613      	mov	r3, r2
 80040c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80040ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d123      	bne.n	800411e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80040d6:	88bb      	ldrh	r3, [r7, #4]
 80040d8:	3303      	adds	r3, #3
 80040da:	089b      	lsrs	r3, r3, #2
 80040dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80040de:	2300      	movs	r3, #0
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	e018      	b.n	8004116 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	031a      	lsls	r2, r3, #12
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f0:	461a      	mov	r2, r3
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	3301      	adds	r3, #1
 80040fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3301      	adds	r3, #1
 8004102:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	3301      	adds	r3, #1
 8004108:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	3301      	adds	r3, #1
 800410e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	3301      	adds	r3, #1
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	429a      	cmp	r2, r3
 800411c:	d3e2      	bcc.n	80040e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3724      	adds	r7, #36	; 0x24
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800412c:	b480      	push	{r7}
 800412e:	b08b      	sub	sp, #44	; 0x2c
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	4613      	mov	r3, r2
 8004138:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004142:	88fb      	ldrh	r3, [r7, #6]
 8004144:	089b      	lsrs	r3, r3, #2
 8004146:	b29b      	uxth	r3, r3
 8004148:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	f003 0303 	and.w	r3, r3, #3
 8004150:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004152:	2300      	movs	r3, #0
 8004154:	623b      	str	r3, [r7, #32]
 8004156:	e014      	b.n	8004182 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	601a      	str	r2, [r3, #0]
    pDest++;
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	3301      	adds	r3, #1
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	3301      	adds	r3, #1
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	3301      	adds	r3, #1
 8004174:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	3301      	adds	r3, #1
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	3301      	adds	r3, #1
 8004180:	623b      	str	r3, [r7, #32]
 8004182:	6a3a      	ldr	r2, [r7, #32]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	429a      	cmp	r2, r3
 8004188:	d3e6      	bcc.n	8004158 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800418a:	8bfb      	ldrh	r3, [r7, #30]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01e      	beq.n	80041ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419a:	461a      	mov	r2, r3
 800419c:	f107 0310 	add.w	r3, r7, #16
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	701a      	strb	r2, [r3, #0]
      i++;
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	3301      	adds	r3, #1
 80041ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	3301      	adds	r3, #1
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80041c2:	8bfb      	ldrh	r3, [r7, #30]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80041c8:	8bfb      	ldrh	r3, [r7, #30]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1ea      	bne.n	80041a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	372c      	adds	r7, #44	; 0x2c
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4013      	ands	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80041f4:	68fb      	ldr	r3, [r7, #12]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f003 0301 	and.w	r3, r3, #1
}
 8004212:	4618      	mov	r0, r3
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3301      	adds	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4a13      	ldr	r2, [pc, #76]	; (8004284 <USB_CoreReset+0x64>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e01b      	b.n	8004276 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	daf2      	bge.n	800422c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f043 0201 	orr.w	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3301      	adds	r3, #1
 800425a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4a09      	ldr	r2, [pc, #36]	; (8004284 <USB_CoreReset+0x64>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d901      	bls.n	8004268 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e006      	b.n	8004276 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b01      	cmp	r3, #1
 8004272:	d0f0      	beq.n	8004256 <USB_CoreReset+0x36>

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	00030d40 	.word	0x00030d40

08004288 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004288:	b084      	sub	sp, #16
 800428a:	b580      	push	{r7, lr}
 800428c:	b086      	sub	sp, #24
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004296:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042a8:	461a      	mov	r2, r3
 80042aa:	2300      	movs	r3, #0
 80042ac:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d018      	beq.n	8004310 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d10a      	bne.n	80042fa <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042f2:	f043 0304 	orr.w	r3, r3, #4
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	e014      	b.n	8004324 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004308:	f023 0304 	bic.w	r3, r3, #4
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e009      	b.n	8004324 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800431e:	f023 0304 	bic.w	r3, r3, #4
 8004322:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004324:	2110      	movs	r1, #16
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff fe5e 	bl	8003fe8 <USB_FlushTxFifo>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff fe8a 	bl	8004050 <USB_FlushRxFifo>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	e015      	b.n	8004378 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004358:	461a      	mov	r2, r3
 800435a:	f04f 33ff 	mov.w	r3, #4294967295
 800435e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436c:	461a      	mov	r2, r3
 800436e:	2300      	movs	r3, #0
 8004370:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	3301      	adds	r3, #1
 8004376:	613b      	str	r3, [r7, #16]
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	429a      	cmp	r2, r3
 800437e:	d3e5      	bcc.n	800434c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f04f 32ff 	mov.w	r2, #4294967295
 800438c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00b      	beq.n	80043b2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a13      	ldr	r2, [pc, #76]	; (80043f4 <USB_HostInit+0x16c>)
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a13      	ldr	r2, [pc, #76]	; (80043f8 <USB_HostInit+0x170>)
 80043ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80043b0:	e009      	b.n	80043c6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2280      	movs	r2, #128	; 0x80
 80043b6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a10      	ldr	r2, [pc, #64]	; (80043fc <USB_HostInit+0x174>)
 80043bc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a0f      	ldr	r2, [pc, #60]	; (8004400 <USB_HostInit+0x178>)
 80043c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d105      	bne.n	80043d8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f043 0210 	orr.w	r2, r3, #16
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699a      	ldr	r2, [r3, #24]
 80043dc:	4b09      	ldr	r3, [pc, #36]	; (8004404 <USB_HostInit+0x17c>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043f0:	b004      	add	sp, #16
 80043f2:	4770      	bx	lr
 80043f4:	01000200 	.word	0x01000200
 80043f8:	00e00300 	.word	0x00e00300
 80043fc:	00600080 	.word	0x00600080
 8004400:	004000e0 	.word	0x004000e0
 8004404:	a3200008 	.word	0xa3200008

08004408 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004426:	f023 0303 	bic.w	r3, r3, #3
 800442a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	68f9      	ldr	r1, [r7, #12]
 800443c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004440:	4313      	orrs	r3, r2
 8004442:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d107      	bne.n	800445a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004450:	461a      	mov	r2, r3
 8004452:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004456:	6053      	str	r3, [r2, #4]
 8004458:	e009      	b.n	800446e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800445a:	78fb      	ldrb	r3, [r7, #3]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d106      	bne.n	800446e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004466:	461a      	mov	r2, r3
 8004468:	f241 7370 	movw	r3, #6000	; 0x1770
 800446c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800449c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80044a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044aa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80044ac:	2064      	movs	r0, #100	; 0x64
 80044ae:	f7fc fd57 	bl	8000f60 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80044ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044be:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80044c0:	200a      	movs	r0, #10
 80044c2:	f7fc fd4d 	bl	8000f60 <HAL_Delay>

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80044f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d109      	bne.n	8004514 <USB_DriveVbus+0x44>
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d106      	bne.n	8004514 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800450e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004512:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800451a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800451e:	d109      	bne.n	8004534 <USB_DriveVbus+0x64>
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800452e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004532:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004542:	b480      	push	{r7}
 8004544:	b085      	sub	sp, #20
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	0c5b      	lsrs	r3, r3, #17
 8004560:	f003 0303 	and.w	r3, r3, #3
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	b29b      	uxth	r3, r3
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	4608      	mov	r0, r1
 800459e:	4611      	mov	r1, r2
 80045a0:	461a      	mov	r2, r3
 80045a2:	4603      	mov	r3, r0
 80045a4:	70fb      	strb	r3, [r7, #3]
 80045a6:	460b      	mov	r3, r1
 80045a8:	70bb      	strb	r3, [r7, #2]
 80045aa:	4613      	mov	r3, r2
 80045ac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80045b6:	78fb      	ldrb	r3, [r7, #3]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c2:	461a      	mov	r2, r3
 80045c4:	f04f 33ff 	mov.w	r3, #4294967295
 80045c8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80045ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d87e      	bhi.n	80046d0 <USB_HC_Init+0x13c>
 80045d2:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <USB_HC_Init+0x44>)
 80045d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d8:	080045e9 	.word	0x080045e9
 80045dc:	08004693 	.word	0x08004693
 80045e0:	080045e9 	.word	0x080045e9
 80045e4:	08004655 	.word	0x08004655
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80045e8:	78fb      	ldrb	r3, [r7, #3]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f4:	461a      	mov	r2, r3
 80045f6:	f240 439d 	movw	r3, #1181	; 0x49d
 80045fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80045fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004600:	2b00      	cmp	r3, #0
 8004602:	da10      	bge.n	8004626 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4413      	add	r3, r2
 800460c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	78fa      	ldrb	r2, [r7, #3]
 8004614:	0151      	lsls	r1, r2, #5
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	440a      	add	r2, r1
 800461a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800461e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004622:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004624:	e057      	b.n	80046d6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d051      	beq.n	80046d6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004632:	78fb      	ldrb	r3, [r7, #3]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4413      	add	r3, r2
 800463a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	440a      	add	r2, r1
 8004648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800464c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004650:	60d3      	str	r3, [r2, #12]
      break;
 8004652:	e040      	b.n	80046d6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004654:	78fb      	ldrb	r3, [r7, #3]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	4413      	add	r3, r2
 800465c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004660:	461a      	mov	r2, r3
 8004662:	f240 639d 	movw	r3, #1693	; 0x69d
 8004666:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004668:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800466c:	2b00      	cmp	r3, #0
 800466e:	da34      	bge.n	80046da <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	4413      	add	r3, r2
 8004678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	0151      	lsls	r1, r2, #5
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	440a      	add	r2, r1
 8004686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800468a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004690:	e023      	b.n	80046da <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4413      	add	r3, r2
 800469a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469e:	461a      	mov	r2, r3
 80046a0:	f240 2325 	movw	r3, #549	; 0x225
 80046a4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80046a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	da17      	bge.n	80046de <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80046ae:	78fb      	ldrb	r3, [r7, #3]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	78fa      	ldrb	r2, [r7, #3]
 80046be:	0151      	lsls	r1, r2, #5
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	440a      	add	r2, r1
 80046c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046c8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80046cc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80046ce:	e006      	b.n	80046de <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	77fb      	strb	r3, [r7, #31]
      break;
 80046d4:	e004      	b.n	80046e0 <USB_HC_Init+0x14c>
      break;
 80046d6:	bf00      	nop
 80046d8:	e002      	b.n	80046e0 <USB_HC_Init+0x14c>
      break;
 80046da:	bf00      	nop
 80046dc:	e000      	b.n	80046e0 <USB_HC_Init+0x14c>
      break;
 80046de:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	78fa      	ldrb	r2, [r7, #3]
 80046f0:	0151      	lsls	r1, r2, #5
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	440a      	add	r2, r1
 80046f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046fa:	f043 0302 	orr.w	r3, r3, #2
 80046fe:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004706:	699a      	ldr	r2, [r3, #24]
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	2101      	movs	r1, #1
 8004710:	fa01 f303 	lsl.w	r3, r1, r3
 8004714:	6939      	ldr	r1, [r7, #16]
 8004716:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800471a:	4313      	orrs	r3, r2
 800471c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800472a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800472e:	2b00      	cmp	r3, #0
 8004730:	da03      	bge.n	800473a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	e001      	b.n	800473e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff feff 	bl	8004542 <USB_GetHostSpeed>
 8004744:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004746:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800474a:	2b02      	cmp	r3, #2
 800474c:	d106      	bne.n	800475c <USB_HC_Init+0x1c8>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d003      	beq.n	800475c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004754:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	e001      	b.n	8004760 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004760:	787b      	ldrb	r3, [r7, #1]
 8004762:	059b      	lsls	r3, r3, #22
 8004764:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004768:	78bb      	ldrb	r3, [r7, #2]
 800476a:	02db      	lsls	r3, r3, #11
 800476c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004770:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004772:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004776:	049b      	lsls	r3, r3, #18
 8004778:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800477c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800477e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004780:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004784:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800478a:	78fb      	ldrb	r3, [r7, #3]
 800478c:	0159      	lsls	r1, r3, #5
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	440b      	add	r3, r1
 8004792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004796:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800479c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800479e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d003      	beq.n	80047ae <USB_HC_Init+0x21a>
 80047a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d10f      	bne.n	80047ce <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80047ae:	78fb      	ldrb	r3, [r7, #3]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	78fa      	ldrb	r2, [r7, #3]
 80047be:	0151      	lsls	r1, r2, #5
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	440a      	add	r2, r1
 80047c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047cc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80047ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3720      	adds	r7, #32
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08c      	sub	sp, #48	; 0x30
 80047dc:	af02      	add	r7, sp, #8
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	4613      	mov	r3, r2
 80047e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	785b      	ldrb	r3, [r3, #1]
 80047ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80047f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047f4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d02d      	beq.n	800485e <USB_HC_StartXfer+0x86>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	791b      	ldrb	r3, [r3, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d129      	bne.n	800485e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d117      	bne.n	8004840 <USB_HC_StartXfer+0x68>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	79db      	ldrb	r3, [r3, #7]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <USB_HC_StartXfer+0x48>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	79db      	ldrb	r3, [r3, #7]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d10f      	bne.n	8004840 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	4413      	add	r3, r2
 8004828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	0151      	lsls	r1, r2, #5
 8004832:	6a3a      	ldr	r2, [r7, #32]
 8004834:	440a      	add	r2, r1
 8004836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10b      	bne.n	800485e <USB_HC_StartXfer+0x86>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	795b      	ldrb	r3, [r3, #5]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d107      	bne.n	800485e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	785b      	ldrb	r3, [r3, #1]
 8004852:	4619      	mov	r1, r3
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 fa0f 	bl	8004c78 <USB_DoPing>
      return HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	e0f8      	b.n	8004a50 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d018      	beq.n	8004898 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	8912      	ldrh	r2, [r2, #8]
 800486e:	4413      	add	r3, r2
 8004870:	3b01      	subs	r3, #1
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	8912      	ldrh	r2, [r2, #8]
 8004876:	fbb3 f3f2 	udiv	r3, r3, r2
 800487a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800487c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800487e:	8b7b      	ldrh	r3, [r7, #26]
 8004880:	429a      	cmp	r2, r3
 8004882:	d90b      	bls.n	800489c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004884:	8b7b      	ldrh	r3, [r7, #26]
 8004886:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004888:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	8912      	ldrh	r2, [r2, #8]
 800488e:	fb03 f202 	mul.w	r2, r3, r2
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	611a      	str	r2, [r3, #16]
 8004896:	e001      	b.n	800489c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004898:	2301      	movs	r3, #1
 800489a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	78db      	ldrb	r3, [r3, #3]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80048a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	8912      	ldrh	r2, [r2, #8]
 80048aa:	fb03 f202 	mul.w	r2, r3, r2
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	611a      	str	r2, [r3, #16]
 80048b2:	e003      	b.n	80048bc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	695a      	ldr	r2, [r3, #20]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80048c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80048c6:	04d9      	lsls	r1, r3, #19
 80048c8:	4b63      	ldr	r3, [pc, #396]	; (8004a58 <USB_HC_StartXfer+0x280>)
 80048ca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80048cc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	7a9b      	ldrb	r3, [r3, #10]
 80048d2:	075b      	lsls	r3, r3, #29
 80048d4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80048d8:	69f9      	ldr	r1, [r7, #28]
 80048da:	0148      	lsls	r0, r1, #5
 80048dc:	6a39      	ldr	r1, [r7, #32]
 80048de:	4401      	add	r1, r0
 80048e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80048e4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80048e6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d009      	beq.n	8004902 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	68d9      	ldr	r1, [r3, #12]
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fe:	460a      	mov	r2, r1
 8004900:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	bf0c      	ite	eq
 8004912:	2301      	moveq	r3, #1
 8004914:	2300      	movne	r3, #0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	4413      	add	r3, r2
 8004922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	0151      	lsls	r1, r2, #5
 800492c:	6a3a      	ldr	r2, [r7, #32]
 800492e:	440a      	add	r2, r1
 8004930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004934:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004938:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	4413      	add	r3, r2
 8004942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	7e7b      	ldrb	r3, [r7, #25]
 800494a:	075b      	lsls	r3, r3, #29
 800494c:	69f9      	ldr	r1, [r7, #28]
 800494e:	0148      	lsls	r0, r1, #5
 8004950:	6a39      	ldr	r1, [r7, #32]
 8004952:	4401      	add	r1, r0
 8004954:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004958:	4313      	orrs	r3, r2
 800495a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	4413      	add	r3, r2
 8004964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004972:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	78db      	ldrb	r3, [r3, #3]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d004      	beq.n	8004986 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	e003      	b.n	800498e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800498c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004994:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	4413      	add	r3, r2
 800499e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a2:	461a      	mov	r2, r3
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80049a8:	79fb      	ldrb	r3, [r7, #7]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	e04e      	b.n	8004a50 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	78db      	ldrb	r3, [r3, #3]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d149      	bne.n	8004a4e <USB_HC_StartXfer+0x276>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d045      	beq.n	8004a4e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	79db      	ldrb	r3, [r3, #7]
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d830      	bhi.n	8004a2c <USB_HC_StartXfer+0x254>
 80049ca:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <USB_HC_StartXfer+0x1f8>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	080049e1 	.word	0x080049e1
 80049d4:	08004a05 	.word	0x08004a05
 80049d8:	080049e1 	.word	0x080049e1
 80049dc:	08004a05 	.word	0x08004a05
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	3303      	adds	r3, #3
 80049e6:	089b      	lsrs	r3, r3, #2
 80049e8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80049ea:	8afa      	ldrh	r2, [r7, #22]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d91c      	bls.n	8004a30 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	f043 0220 	orr.w	r2, r3, #32
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	619a      	str	r2, [r3, #24]
        }
        break;
 8004a02:	e015      	b.n	8004a30 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	3303      	adds	r3, #3
 8004a0a:	089b      	lsrs	r3, r3, #2
 8004a0c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004a0e:	8afa      	ldrh	r2, [r7, #22]
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d90a      	bls.n	8004a34 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	619a      	str	r2, [r3, #24]
        }
        break;
 8004a2a:	e003      	b.n	8004a34 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004a2c:	bf00      	nop
 8004a2e:	e002      	b.n	8004a36 <USB_HC_StartXfer+0x25e>
        break;
 8004a30:	bf00      	nop
 8004a32:	e000      	b.n	8004a36 <USB_HC_StartXfer+0x25e>
        break;
 8004a34:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	68d9      	ldr	r1, [r3, #12]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	785a      	ldrb	r2, [r3, #1]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2000      	movs	r0, #0
 8004a46:	9000      	str	r0, [sp, #0]
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f7ff fb31 	bl	80040b0 <USB_WritePacket>
  }

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3728      	adds	r7, #40	; 0x28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	1ff80000 	.word	0x1ff80000

08004a5c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	b29b      	uxth	r3, r3
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b089      	sub	sp, #36	; 0x24
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	460b      	mov	r3, r1
 8004a88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	0c9b      	lsrs	r3, r3, #18
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	0fdb      	lsrs	r3, r3, #31
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d104      	bne.n	8004ad8 <USB_HC_Halt+0x5a>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e0c8      	b.n	8004c6a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <USB_HC_Halt+0x66>
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d163      	bne.n	8004bac <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004afe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b02:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 0320 	and.w	r3, r3, #32
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f040 80ab 	bne.w	8004c68 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d133      	bne.n	8004b86 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b3c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b5c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3301      	adds	r3, #1
 8004b62:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b6a:	d81d      	bhi.n	8004ba8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b82:	d0ec      	beq.n	8004b5e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004b84:	e070      	b.n	8004c68 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	0151      	lsls	r1, r2, #5
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	440a      	add	r2, r1
 8004b9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ba0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ba4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004ba6:	e05f      	b.n	8004c68 <USB_HC_Halt+0x1ea>
            break;
 8004ba8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004baa:	e05d      	b.n	8004c68 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	0151      	lsls	r1, r2, #5
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	440a      	add	r2, r1
 8004bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bca:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d133      	bne.n	8004c44 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bfa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c1a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c28:	d81d      	bhi.n	8004c66 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c40:	d0ec      	beq.n	8004c1c <USB_HC_Halt+0x19e>
 8004c42:	e011      	b.n	8004c68 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	0151      	lsls	r1, r2, #5
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	440a      	add	r2, r1
 8004c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	e000      	b.n	8004c68 <USB_HC_Halt+0x1ea>
          break;
 8004c66:	bf00      	nop
    }
  }

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3724      	adds	r7, #36	; 0x24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
	...

08004c78 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	04da      	lsls	r2, r3, #19
 8004c94:	4b15      	ldr	r3, [pc, #84]	; (8004cec <USB_DoPing+0x74>)
 8004c96:	4013      	ands	r3, r2
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	0151      	lsls	r1, r2, #5
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	440a      	add	r2, r1
 8004ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ca4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ca8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cc0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cc8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	1ff80000 	.word	0x1ff80000

08004cf0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff f911 	bl	8003f2c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d0a:	2110      	movs	r1, #16
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff f96b 	bl	8003fe8 <USB_FlushTxFifo>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff f997 	bl	8004050 <USB_FlushRxFifo>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61bb      	str	r3, [r7, #24]
 8004d30:	e01f      	b.n	8004d72 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d48:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d50:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d58:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d66:	461a      	mov	r2, r3
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	61bb      	str	r3, [r7, #24]
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	2b0f      	cmp	r3, #15
 8004d76:	d9dc      	bls.n	8004d32 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004d78:	2300      	movs	r3, #0
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	e034      	b.n	8004de8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d94:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d9c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004da4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db2:	461a      	mov	r2, r3
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dc4:	d80c      	bhi.n	8004de0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ddc:	d0ec      	beq.n	8004db8 <USB_StopHost+0xc8>
 8004dde:	e000      	b.n	8004de2 <USB_StopHost+0xf2>
        break;
 8004de0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	3301      	adds	r3, #1
 8004de6:	61bb      	str	r3, [r7, #24]
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b0f      	cmp	r3, #15
 8004dec:	d9c7      	bls.n	8004d7e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004df4:	461a      	mov	r2, r3
 8004df6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8004e02:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7ff f880 	bl	8003f0a <USB_EnableGlobalInt>

  return ret;
 8004e0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004e14:	b590      	push	{r4, r7, lr}
 8004e16:	b089      	sub	sp, #36	; 0x24
 8004e18:	af04      	add	r7, sp, #16
 8004e1a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	2202      	movs	r2, #2
 8004e20:	2102      	movs	r1, #2
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fcb8 	bl	8005798 <USBH_FindInterface>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	2bff      	cmp	r3, #255	; 0xff
 8004e30:	d002      	beq.n	8004e38 <USBH_CDC_InterfaceInit+0x24>
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d901      	bls.n	8004e3c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e13d      	b.n	80050b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
 8004e3e:	4619      	mov	r1, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fc8d 	bl	8005760 <USBH_SelectInterface>
 8004e46:	4603      	mov	r3, r0
 8004e48:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8004e4a:	7bbb      	ldrb	r3, [r7, #14]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8004e50:	2302      	movs	r3, #2
 8004e52:	e131      	b.n	80050b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8004e5a:	2050      	movs	r0, #80	; 0x50
 8004e5c:	f006 ffc0 	bl	800bde0 <malloc>
 8004e60:	4603      	mov	r3, r0
 8004e62:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8004e74:	2302      	movs	r3, #2
 8004e76:	e11f      	b.n	80050b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8004e78:	2250      	movs	r2, #80	; 0x50
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	68b8      	ldr	r0, [r7, #8]
 8004e7e:	f006 ffdd 	bl	800be3c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	211a      	movs	r1, #26
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	b25b      	sxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	da15      	bge.n	8004ec6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	211a      	movs	r1, #26
 8004ea0:	fb01 f303 	mul.w	r3, r1, r3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004eaa:	781a      	ldrb	r2, [r3, #0]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	211a      	movs	r1, #26
 8004eb6:	fb01 f303 	mul.w	r3, r1, r3
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004ec0:	881a      	ldrh	r2, [r3, #0]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	785b      	ldrb	r3, [r3, #1]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f002 f988 	bl	80071e2 <USBH_AllocPipe>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	7819      	ldrb	r1, [r3, #0]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	7858      	ldrb	r0, [r3, #1]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	8952      	ldrh	r2, [r2, #10]
 8004ef2:	9202      	str	r2, [sp, #8]
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	9201      	str	r2, [sp, #4]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	4623      	mov	r3, r4
 8004efc:	4602      	mov	r2, r0
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f002 f940 	bl	8007184 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f006 feb9 	bl	800bc84 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8004f12:	2300      	movs	r3, #0
 8004f14:	2200      	movs	r2, #0
 8004f16:	210a      	movs	r1, #10
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fc3d 	bl	8005798 <USBH_FindInterface>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	2bff      	cmp	r3, #255	; 0xff
 8004f26:	d002      	beq.n	8004f2e <USBH_CDC_InterfaceInit+0x11a>
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d901      	bls.n	8004f32 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e0c2      	b.n	80050b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	211a      	movs	r1, #26
 8004f38:	fb01 f303 	mul.w	r3, r1, r3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	b25b      	sxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	da16      	bge.n	8004f78 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	211a      	movs	r1, #26
 8004f50:	fb01 f303 	mul.w	r3, r1, r3
 8004f54:	4413      	add	r3, r2
 8004f56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004f5a:	781a      	ldrb	r2, [r3, #0]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	211a      	movs	r1, #26
 8004f66:	fb01 f303 	mul.w	r3, r1, r3
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004f70:	881a      	ldrh	r2, [r3, #0]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	835a      	strh	r2, [r3, #26]
 8004f76:	e015      	b.n	8004fa4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	211a      	movs	r1, #26
 8004f7e:	fb01 f303 	mul.w	r3, r1, r3
 8004f82:	4413      	add	r3, r2
 8004f84:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004f88:	781a      	ldrb	r2, [r3, #0]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	211a      	movs	r1, #26
 8004f94:	fb01 f303 	mul.w	r3, r1, r3
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004f9e:	881a      	ldrh	r2, [r3, #0]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	211a      	movs	r1, #26
 8004faa:	fb01 f303 	mul.w	r3, r1, r3
 8004fae:	4413      	add	r3, r2
 8004fb0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	b25b      	sxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	da16      	bge.n	8004fea <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	211a      	movs	r1, #26
 8004fc2:	fb01 f303 	mul.w	r3, r1, r3
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004fcc:	781a      	ldrb	r2, [r3, #0]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	211a      	movs	r1, #26
 8004fd8:	fb01 f303 	mul.w	r3, r1, r3
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004fe2:	881a      	ldrh	r2, [r3, #0]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	835a      	strh	r2, [r3, #26]
 8004fe8:	e015      	b.n	8005016 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	211a      	movs	r1, #26
 8004ff0:	fb01 f303 	mul.w	r3, r1, r3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004ffa:	781a      	ldrb	r2, [r3, #0]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	211a      	movs	r1, #26
 8005006:	fb01 f303 	mul.w	r3, r1, r3
 800500a:	4413      	add	r3, r2
 800500c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005010:	881a      	ldrh	r2, [r3, #0]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	7b9b      	ldrb	r3, [r3, #14]
 800501a:	4619      	mov	r1, r3
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f002 f8e0 	bl	80071e2 <USBH_AllocPipe>
 8005022:	4603      	mov	r3, r0
 8005024:	461a      	mov	r2, r3
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	7bdb      	ldrb	r3, [r3, #15]
 800502e:	4619      	mov	r1, r3
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f002 f8d6 	bl	80071e2 <USBH_AllocPipe>
 8005036:	4603      	mov	r3, r0
 8005038:	461a      	mov	r2, r3
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	7b59      	ldrb	r1, [r3, #13]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	7b98      	ldrb	r0, [r3, #14]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	8b12      	ldrh	r2, [r2, #24]
 8005056:	9202      	str	r2, [sp, #8]
 8005058:	2202      	movs	r2, #2
 800505a:	9201      	str	r2, [sp, #4]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	4623      	mov	r3, r4
 8005060:	4602      	mov	r2, r0
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f002 f88e 	bl	8007184 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	7b19      	ldrb	r1, [r3, #12]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	7bd8      	ldrb	r0, [r3, #15]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	8b52      	ldrh	r2, [r2, #26]
 8005080:	9202      	str	r2, [sp, #8]
 8005082:	2202      	movs	r2, #2
 8005084:	9201      	str	r2, [sp, #4]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	4623      	mov	r3, r4
 800508a:	4602      	mov	r2, r0
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f002 f879 	bl	8007184 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	7b5b      	ldrb	r3, [r3, #13]
 800509e:	2200      	movs	r2, #0
 80050a0:	4619      	mov	r1, r3
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f006 fdee 	bl	800bc84 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	7b1b      	ldrb	r3, [r3, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f006 fde7 	bl	800bc84 <USBH_LL_SetToggle>

  return USBH_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd90      	pop	{r4, r7, pc}

080050c0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00e      	beq.n	80050f8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	4619      	mov	r1, r3
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f002 f86e 	bl	80071c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f002 f899 	bl	8007224 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	7b1b      	ldrb	r3, [r3, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00e      	beq.n	800511e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	7b1b      	ldrb	r3, [r3, #12]
 8005104:	4619      	mov	r1, r3
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f002 f85b 	bl	80071c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	7b1b      	ldrb	r3, [r3, #12]
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f002 f886 	bl	8007224 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	7b5b      	ldrb	r3, [r3, #13]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00e      	beq.n	8005144 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	7b5b      	ldrb	r3, [r3, #13]
 800512a:	4619      	mov	r1, r3
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f002 f848 	bl	80071c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	7b5b      	ldrb	r3, [r3, #13]
 8005136:	4619      	mov	r1, r3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f002 f873 	bl	8007224 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00b      	beq.n	8005168 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	4618      	mov	r0, r3
 800515a:	f006 fe49 	bl	800bdf0 <free>
    phost->pActiveClass->pData = 0U;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005164:	2200      	movs	r2, #0
 8005166:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3340      	adds	r3, #64	; 0x40
 8005188:	4619      	mov	r1, r3
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f8b1 	bl	80052f2 <GetLineCoding>
 8005190:	4603      	mov	r3, r0
 8005192:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005194:	7afb      	ldrb	r3, [r7, #11]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d105      	bne.n	80051a6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80051a0:	2102      	movs	r1, #2
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80051a6:	7afb      	ldrb	r3, [r7, #11]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d877      	bhi.n	80052c4 <USBH_CDC_Process+0x114>
 80051d4:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <USBH_CDC_Process+0x2c>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	080051f1 	.word	0x080051f1
 80051e0:	080051f7 	.word	0x080051f7
 80051e4:	08005227 	.word	0x08005227
 80051e8:	0800529b 	.word	0x0800529b
 80051ec:	080052a9 	.word	0x080052a9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	73fb      	strb	r3, [r7, #15]
      break;
 80051f4:	e06d      	b.n	80052d2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051fa:	4619      	mov	r1, r3
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f897 	bl	8005330 <SetLineCoding>
 8005202:	4603      	mov	r3, r0
 8005204:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005206:	7bbb      	ldrb	r3, [r7, #14]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d104      	bne.n	8005216 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005214:	e058      	b.n	80052c8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005216:	7bbb      	ldrb	r3, [r7, #14]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d055      	beq.n	80052c8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2204      	movs	r2, #4
 8005220:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005224:	e050      	b.n	80052c8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	3340      	adds	r3, #64	; 0x40
 800522a:	4619      	mov	r1, r3
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f860 	bl	80052f2 <GetLineCoding>
 8005232:	4603      	mov	r3, r0
 8005234:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005236:	7bbb      	ldrb	r3, [r7, #14]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d126      	bne.n	800528a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800524e:	791b      	ldrb	r3, [r3, #4]
 8005250:	429a      	cmp	r2, r3
 8005252:	d13b      	bne.n	80052cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800525e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005260:	429a      	cmp	r2, r3
 8005262:	d133      	bne.n	80052cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800526e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005270:	429a      	cmp	r2, r3
 8005272:	d12b      	bne.n	80052cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800527e:	429a      	cmp	r2, r3
 8005280:	d124      	bne.n	80052cc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f982 	bl	800558c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005288:	e020      	b.n	80052cc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800528a:	7bbb      	ldrb	r3, [r7, #14]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d01d      	beq.n	80052cc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2204      	movs	r2, #4
 8005294:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005298:	e018      	b.n	80052cc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f867 	bl	800536e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f8f6 	bl	8005492 <CDC_ProcessReception>
      break;
 80052a6:	e014      	b.n	80052d2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80052a8:	2100      	movs	r1, #0
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f001 f95b 	bl	8006566 <USBH_ClrFeature>
 80052b0:	4603      	mov	r3, r0
 80052b2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80052b4:	7bbb      	ldrb	r3, [r7, #14]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10a      	bne.n	80052d0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80052c2:	e005      	b.n	80052d0 <USBH_CDC_Process+0x120>

    default:
      break;
 80052c4:	bf00      	nop
 80052c6:	e004      	b.n	80052d2 <USBH_CDC_Process+0x122>
      break;
 80052c8:	bf00      	nop
 80052ca:	e002      	b.n	80052d2 <USBH_CDC_Process+0x122>
      break;
 80052cc:	bf00      	nop
 80052ce:	e000      	b.n	80052d2 <USBH_CDC_Process+0x122>
      break;
 80052d0:	bf00      	nop

  }

  return status;
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	22a1      	movs	r2, #161	; 0xa1
 8005300:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2221      	movs	r2, #33	; 0x21
 8005306:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2207      	movs	r2, #7
 8005318:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2207      	movs	r2, #7
 800531e:	4619      	mov	r1, r3
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f001 fbed 	bl	8006b00 <USBH_CtlReq>
 8005326:	4603      	mov	r3, r0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2221      	movs	r2, #33	; 0x21
 800533e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2207      	movs	r2, #7
 8005356:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2207      	movs	r2, #7
 800535c:	4619      	mov	r1, r3
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f001 fbce 	bl	8006b00 <USBH_CtlReq>
 8005364:	4603      	mov	r3, r0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b086      	sub	sp, #24
 8005372:	af02      	add	r7, sp, #8
 8005374:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005380:	2300      	movs	r3, #0
 8005382:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800538a:	2b01      	cmp	r3, #1
 800538c:	d002      	beq.n	8005394 <CDC_ProcessTransmission+0x26>
 800538e:	2b02      	cmp	r3, #2
 8005390:	d023      	beq.n	80053da <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005392:	e07a      	b.n	800548a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	8b12      	ldrh	r2, [r2, #24]
 800539c:	4293      	cmp	r3, r2
 800539e:	d90b      	bls.n	80053b8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	69d9      	ldr	r1, [r3, #28]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8b1a      	ldrh	r2, [r3, #24]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	7b5b      	ldrb	r3, [r3, #13]
 80053ac:	2001      	movs	r0, #1
 80053ae:	9000      	str	r0, [sp, #0]
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f001 fea4 	bl	80070fe <USBH_BulkSendData>
 80053b6:	e00b      	b.n	80053d0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	7b5b      	ldrb	r3, [r3, #13]
 80053c6:	2001      	movs	r0, #1
 80053c8:	9000      	str	r0, [sp, #0]
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f001 fe97 	bl	80070fe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80053d8:	e057      	b.n	800548a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	7b5b      	ldrb	r3, [r3, #13]
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f006 fc25 	bl	800bc30 <USBH_LL_GetURBState>
 80053e6:	4603      	mov	r3, r0
 80053e8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80053ea:	7afb      	ldrb	r3, [r7, #11]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d136      	bne.n	800545e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	8b12      	ldrh	r2, [r2, #24]
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d90e      	bls.n	800541a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	8b12      	ldrh	r2, [r2, #24]
 8005404:	1a9a      	subs	r2, r3, r2
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	8b12      	ldrh	r2, [r2, #24]
 8005412:	441a      	add	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	61da      	str	r2, [r3, #28]
 8005418:	e002      	b.n	8005420 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	2b00      	cmp	r3, #0
 8005426:	d004      	beq.n	8005432 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8005430:	e006      	b.n	8005440 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f892 	bl	8005564 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2204      	movs	r2, #4
 8005444:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005454:	2200      	movs	r2, #0
 8005456:	4619      	mov	r1, r3
 8005458:	f001 ffe0 	bl	800741c <osMessagePut>
      break;
 800545c:	e014      	b.n	8005488 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800545e:	7afb      	ldrb	r3, [r7, #11]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d111      	bne.n	8005488 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2204      	movs	r2, #4
 8005470:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005480:	2200      	movs	r2, #0
 8005482:	4619      	mov	r1, r3
 8005484:	f001 ffca 	bl	800741c <osMessagePut>
      break;
 8005488:	bf00      	nop
  }
}
 800548a:	bf00      	nop
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b086      	sub	sp, #24
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80054a4:	2300      	movs	r3, #0
 80054a6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d002      	beq.n	80054b8 <CDC_ProcessReception+0x26>
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d00e      	beq.n	80054d4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80054b6:	e051      	b.n	800555c <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	6a19      	ldr	r1, [r3, #32]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	8b5a      	ldrh	r2, [r3, #26]
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	7b1b      	ldrb	r3, [r3, #12]
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f001 fe3f 	bl	8007148 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2204      	movs	r2, #4
 80054ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80054d2:	e043      	b.n	800555c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	7b1b      	ldrb	r3, [r3, #12]
 80054d8:	4619      	mov	r1, r3
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f006 fba8 	bl	800bc30 <USBH_LL_GetURBState>
 80054e0:	4603      	mov	r3, r0
 80054e2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80054e4:	7cfb      	ldrb	r3, [r7, #19]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d137      	bne.n	800555a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	7b1b      	ldrb	r3, [r3, #12]
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f006 fb0b 	bl	800bb0c <USBH_LL_GetLastXferSize>
 80054f6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d016      	beq.n	8005530 <CDC_ProcessReception+0x9e>
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	8b5b      	ldrh	r3, [r3, #26]
 8005506:	461a      	mov	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4293      	cmp	r3, r2
 800550c:	d910      	bls.n	8005530 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1ad2      	subs	r2, r2, r3
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	6a1a      	ldr	r2, [r3, #32]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	441a      	add	r2, r3
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2203      	movs	r2, #3
 800552a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800552e:	e006      	b.n	800553e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f81d 	bl	8005578 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2204      	movs	r2, #4
 8005542:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005552:	2200      	movs	r2, #0
 8005554:	4619      	mov	r1, r3
 8005556:	f001 ff61 	bl	800741c <osMessagePut>
      break;
 800555a:	bf00      	nop
  }
}
 800555c:	bf00      	nop
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80055a0:	b5b0      	push	{r4, r5, r7, lr}
 80055a2:	b090      	sub	sp, #64	; 0x40
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	4613      	mov	r3, r2
 80055ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80055b4:	2302      	movs	r3, #2
 80055b6:	e04d      	b.n	8005654 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	79fa      	ldrb	r2, [r7, #7]
 80055bc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f847 	bl	8005664 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8005604:	4b15      	ldr	r3, [pc, #84]	; (800565c <USBH_Init+0xbc>)
 8005606:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800560a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800560c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8005610:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005614:	2100      	movs	r1, #0
 8005616:	4618      	mov	r0, r3
 8005618:	f001 fed7 	bl	80073ca <osMessageCreate>
 800561c:	4602      	mov	r2, r0
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8005624:	4b0e      	ldr	r3, [pc, #56]	; (8005660 <USBH_Init+0xc0>)
 8005626:	f107 0414 	add.w	r4, r7, #20
 800562a:	461d      	mov	r5, r3
 800562c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800562e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8005638:	f107 0314 	add.w	r3, r7, #20
 800563c:	68f9      	ldr	r1, [r7, #12]
 800563e:	4618      	mov	r0, r3
 8005640:	f001 fe63 	bl	800730a <osThreadCreate>
 8005644:	4602      	mov	r2, r0
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f006 f9a9 	bl	800b9a4 <USBH_LL_Init>

  return USBH_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3740      	adds	r7, #64	; 0x40
 8005658:	46bd      	mov	sp, r7
 800565a:	bdb0      	pop	{r4, r5, r7, pc}
 800565c:	0800cfdc 	.word	0x0800cfdc
 8005660:	0800cfec 	.word	0x0800cfec

08005664 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	e009      	b.n	800568a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	33e0      	adds	r3, #224	; 0xe0
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	2200      	movs	r2, #0
 8005682:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3301      	adds	r3, #1
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b0f      	cmp	r3, #15
 800568e:	d9f2      	bls.n	8005676 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005690:	2300      	movs	r3, #0
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	e009      	b.n	80056aa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4413      	add	r3, r2
 800569c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80056a0:	2200      	movs	r2, #0
 80056a2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3301      	adds	r3, #1
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b0:	d3f1      	bcc.n	8005696 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2240      	movs	r2, #64	; 0x40
 80056d6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d016      	beq.n	800574e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10e      	bne.n	8005748 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005730:	1c59      	adds	r1, r3, #1
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	33de      	adds	r3, #222	; 0xde
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	73fb      	strb	r3, [r7, #15]
 8005746:	e004      	b.n	8005752 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005748:	2302      	movs	r3, #2
 800574a:	73fb      	strb	r3, [r7, #15]
 800574c:	e001      	b.n	8005752 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800574e:	2302      	movs	r3, #2
 8005750:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005752:	7bfb      	ldrb	r3, [r7, #15]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005776:	78fa      	ldrb	r2, [r7, #3]
 8005778:	429a      	cmp	r2, r3
 800577a:	d204      	bcs.n	8005786 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	78fa      	ldrb	r2, [r7, #3]
 8005780:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005784:	e001      	b.n	800578a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005786:	2302      	movs	r3, #2
 8005788:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800578a:	7bfb      	ldrb	r3, [r7, #15]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	4608      	mov	r0, r1
 80057a2:	4611      	mov	r1, r2
 80057a4:	461a      	mov	r2, r3
 80057a6:	4603      	mov	r3, r0
 80057a8:	70fb      	strb	r3, [r7, #3]
 80057aa:	460b      	mov	r3, r1
 80057ac:	70bb      	strb	r3, [r7, #2]
 80057ae:	4613      	mov	r3, r2
 80057b0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80057c0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80057c2:	e025      	b.n	8005810 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80057c4:	7dfb      	ldrb	r3, [r7, #23]
 80057c6:	221a      	movs	r2, #26
 80057c8:	fb02 f303 	mul.w	r3, r2, r3
 80057cc:	3308      	adds	r3, #8
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4413      	add	r3, r2
 80057d2:	3302      	adds	r3, #2
 80057d4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	795b      	ldrb	r3, [r3, #5]
 80057da:	78fa      	ldrb	r2, [r7, #3]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d002      	beq.n	80057e6 <USBH_FindInterface+0x4e>
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	2bff      	cmp	r3, #255	; 0xff
 80057e4:	d111      	bne.n	800580a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80057ea:	78ba      	ldrb	r2, [r7, #2]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d002      	beq.n	80057f6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80057f0:	78bb      	ldrb	r3, [r7, #2]
 80057f2:	2bff      	cmp	r3, #255	; 0xff
 80057f4:	d109      	bne.n	800580a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80057fa:	787a      	ldrb	r2, [r7, #1]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d002      	beq.n	8005806 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005800:	787b      	ldrb	r3, [r7, #1]
 8005802:	2bff      	cmp	r3, #255	; 0xff
 8005804:	d101      	bne.n	800580a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005806:	7dfb      	ldrb	r3, [r7, #23]
 8005808:	e006      	b.n	8005818 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800580a:	7dfb      	ldrb	r3, [r7, #23]
 800580c:	3301      	adds	r3, #1
 800580e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005810:	7dfb      	ldrb	r3, [r7, #23]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d9d6      	bls.n	80057c4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005816:	23ff      	movs	r3, #255	; 0xff
}
 8005818:	4618      	mov	r0, r3
 800581a:	371c      	adds	r7, #28
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f006 f8f5 	bl	800ba1c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005832:	2101      	movs	r1, #1
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f006 fa0e 	bl	800bc56 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af04      	add	r7, sp, #16
 800584a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800584c:	2302      	movs	r3, #2
 800584e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b01      	cmp	r3, #1
 800585e:	d102      	bne.n	8005866 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2203      	movs	r2, #3
 8005864:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b0b      	cmp	r3, #11
 800586e:	f200 8247 	bhi.w	8005d00 <USBH_Process+0x4bc>
 8005872:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <USBH_Process+0x34>)
 8005874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005878:	080058a9 	.word	0x080058a9
 800587c:	080058f7 	.word	0x080058f7
 8005880:	0800597b 	.word	0x0800597b
 8005884:	08005c7f 	.word	0x08005c7f
 8005888:	08005d01 	.word	0x08005d01
 800588c:	08005a3b 	.word	0x08005a3b
 8005890:	08005c09 	.word	0x08005c09
 8005894:	08005a8d 	.word	0x08005a8d
 8005898:	08005ac9 	.word	0x08005ac9
 800589c:	08005b03 	.word	0x08005b03
 80058a0:	08005b61 	.word	0x08005b61
 80058a4:	08005c67 	.word	0x08005c67
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8227 	beq.w	8005d04 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80058bc:	20c8      	movs	r0, #200	; 0xc8
 80058be:	f006 fa11 	bl	800bce4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f006 f907 	bl	800bad6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80058ec:	2200      	movs	r2, #0
 80058ee:	4619      	mov	r1, r3
 80058f0:	f001 fd94 	bl	800741c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80058f4:	e206      	b.n	8005d04 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d107      	bne.n	8005910 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	e025      	b.n	800595c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005916:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800591a:	d914      	bls.n	8005946 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005922:	3301      	adds	r3, #1
 8005924:	b2da      	uxtb	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005932:	2b03      	cmp	r3, #3
 8005934:	d903      	bls.n	800593e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	220d      	movs	r2, #13
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	e00e      	b.n	800595c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e00a      	b.n	800595c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800594c:	f103 020a 	add.w	r2, r3, #10
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005956:	200a      	movs	r0, #10
 8005958:	f006 f9c4 	bl	800bce4 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005970:	2200      	movs	r2, #0
 8005972:	4619      	mov	r1, r3
 8005974:	f001 fd52 	bl	800741c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005978:	e1cb      	b.n	8005d12 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005980:	2b00      	cmp	r3, #0
 8005982:	d005      	beq.n	8005990 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800598a:	2104      	movs	r1, #4
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005990:	2064      	movs	r0, #100	; 0x64
 8005992:	f006 f9a7 	bl	800bce4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f006 f876 	bl	800ba88 <USBH_LL_GetSpeed>
 800599c:	4603      	mov	r3, r0
 800599e:	461a      	mov	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2205      	movs	r2, #5
 80059aa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80059ac:	2100      	movs	r1, #0
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f001 fc17 	bl	80071e2 <USBH_AllocPipe>
 80059b4:	4603      	mov	r3, r0
 80059b6:	461a      	mov	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80059bc:	2180      	movs	r1, #128	; 0x80
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 fc0f 	bl	80071e2 <USBH_AllocPipe>
 80059c4:	4603      	mov	r3, r0
 80059c6:	461a      	mov	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	7919      	ldrb	r1, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80059e0:	b292      	uxth	r2, r2
 80059e2:	9202      	str	r2, [sp, #8]
 80059e4:	2200      	movs	r2, #0
 80059e6:	9201      	str	r2, [sp, #4]
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	4603      	mov	r3, r0
 80059ec:	2280      	movs	r2, #128	; 0x80
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f001 fbc8 	bl	8007184 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	7959      	ldrb	r1, [r3, #5]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005a08:	b292      	uxth	r2, r2
 8005a0a:	9202      	str	r2, [sp, #8]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	9201      	str	r2, [sp, #4]
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	4603      	mov	r3, r0
 8005a14:	2200      	movs	r2, #0
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f001 fbb4 	bl	8007184 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005a30:	2200      	movs	r2, #0
 8005a32:	4619      	mov	r1, r3
 8005a34:	f001 fcf2 	bl	800741c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005a38:	e16b      	b.n	8005d12 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f96e 	bl	8005d1c <USBH_HandleEnum>
 8005a40:	4603      	mov	r3, r0
 8005a42:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005a44:	7bbb      	ldrb	r3, [r7, #14]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f040 815d 	bne.w	8005d08 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d103      	bne.n	8005a68 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2208      	movs	r2, #8
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	e002      	b.n	8005a6e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2207      	movs	r2, #7
 8005a6c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2205      	movs	r2, #5
 8005a72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005a82:	2200      	movs	r2, #0
 8005a84:	4619      	mov	r1, r3
 8005a86:	f001 fcc9 	bl	800741c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005a8a:	e13d      	b.n	8005d08 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 813a 	beq.w	8005d0c <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2208      	movs	r2, #8
 8005aa8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2205      	movs	r2, #5
 8005aae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005abe:	2200      	movs	r2, #0
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	f001 fcab 	bl	800741c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8005ac6:	e121      	b.n	8005d0c <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fd00 	bl	80064d8 <USBH_SetCfg>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2209      	movs	r2, #9
 8005ae2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005af8:	2200      	movs	r2, #0
 8005afa:	4619      	mov	r1, r3
 8005afc:	f001 fc8e 	bl	800741c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005b00:	e107      	b.n	8005d12 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d015      	beq.n	8005b3c <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8005b10:	2101      	movs	r1, #1
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fd03 	bl	800651e <USBH_SetFeature>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005b1c:	7bbb      	ldrb	r3, [r7, #14]
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d103      	bne.n	8005b2c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	220a      	movs	r2, #10
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	e00a      	b.n	8005b42 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8005b2c:	7bbb      	ldrb	r3, [r7, #14]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d106      	bne.n	8005b42 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	220a      	movs	r2, #10
 8005b38:	701a      	strb	r2, [r3, #0]
 8005b3a:	e002      	b.n	8005b42 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	220a      	movs	r2, #10
 8005b40:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005b56:	2200      	movs	r2, #0
 8005b58:	4619      	mov	r1, r3
 8005b5a:	f001 fc5f 	bl	800741c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005b5e:	e0d8      	b.n	8005d12 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d03f      	beq.n	8005bea <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005b72:	2300      	movs	r3, #0
 8005b74:	73fb      	strb	r3, [r7, #15]
 8005b76:	e016      	b.n	8005ba6 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005b78:	7bfa      	ldrb	r2, [r7, #15]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	32de      	adds	r2, #222	; 0xde
 8005b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b82:	791a      	ldrb	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d108      	bne.n	8005ba0 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005b8e:	7bfa      	ldrb	r2, [r7, #15]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	32de      	adds	r2, #222	; 0xde
 8005b94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005b9e:	e005      	b.n	8005bac <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0e5      	beq.n	8005b78 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d016      	beq.n	8005be4 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	4798      	blx	r3
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d109      	bne.n	8005bdc <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2206      	movs	r2, #6
 8005bcc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005bd4:	2103      	movs	r1, #3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	4798      	blx	r3
 8005bda:	e006      	b.n	8005bea <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	220d      	movs	r2, #13
 8005be0:	701a      	strb	r2, [r3, #0]
 8005be2:	e002      	b.n	8005bea <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	220d      	movs	r2, #13
 8005be8:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2205      	movs	r2, #5
 8005bee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005bfe:	2200      	movs	r2, #0
 8005c00:	4619      	mov	r1, r3
 8005c02:	f001 fc0b 	bl	800741c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005c06:	e084      	b.n	8005d12 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d017      	beq.n	8005c42 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4798      	blx	r3
 8005c1e:	4603      	mov	r3, r0
 8005c20:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005c22:	7bbb      	ldrb	r3, [r7, #14]
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d103      	bne.n	8005c32 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	220b      	movs	r2, #11
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	e00a      	b.n	8005c48 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8005c32:	7bbb      	ldrb	r3, [r7, #14]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d106      	bne.n	8005c48 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	220d      	movs	r2, #13
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	e002      	b.n	8005c48 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	220d      	movs	r2, #13
 8005c46:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2205      	movs	r2, #5
 8005c4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	4619      	mov	r1, r3
 8005c60:	f001 fbdc 	bl	800741c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005c64:	e055      	b.n	8005d12 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d04f      	beq.n	8005d10 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	4798      	blx	r3
      }
      break;
 8005c7c:	e048      	b.n	8005d10 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff fcec 	bl	8005664 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d009      	beq.n	8005caa <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005cba:	2105      	movs	r1, #5
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d107      	bne.n	8005cdc <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff fda5 	bl	8005824 <USBH_Start>
 8005cda:	e002      	b.n	8005ce2 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f005 fe9d 	bl	800ba1c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	f001 fb8f 	bl	800741c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005cfe:	e008      	b.n	8005d12 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8005d00:	bf00      	nop
 8005d02:	e006      	b.n	8005d12 <USBH_Process+0x4ce>
      break;
 8005d04:	bf00      	nop
 8005d06:	e004      	b.n	8005d12 <USBH_Process+0x4ce>
      break;
 8005d08:	bf00      	nop
 8005d0a:	e002      	b.n	8005d12 <USBH_Process+0x4ce>
    break;
 8005d0c:	bf00      	nop
 8005d0e:	e000      	b.n	8005d12 <USBH_Process+0x4ce>
      break;
 8005d10:	bf00      	nop
  }
  return USBH_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af04      	add	r7, sp, #16
 8005d22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005d24:	2301      	movs	r3, #1
 8005d26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	2b07      	cmp	r3, #7
 8005d32:	f200 8208 	bhi.w	8006146 <USBH_HandleEnum+0x42a>
 8005d36:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <USBH_HandleEnum+0x20>)
 8005d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3c:	08005d5d 	.word	0x08005d5d
 8005d40:	08005e1b 	.word	0x08005e1b
 8005d44:	08005e85 	.word	0x08005e85
 8005d48:	08005f13 	.word	0x08005f13
 8005d4c:	08005f7d 	.word	0x08005f7d
 8005d50:	08005fed 	.word	0x08005fed
 8005d54:	08006089 	.word	0x08006089
 8005d58:	08006107 	.word	0x08006107
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005d5c:	2108      	movs	r1, #8
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 faea 	bl	8006338 <USBH_Get_DevDesc>
 8005d64:	4603      	mov	r3, r0
 8005d66:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005d68:	7bbb      	ldrb	r3, [r7, #14]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d130      	bne.n	8005dd0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	7919      	ldrb	r1, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005d92:	b292      	uxth	r2, r2
 8005d94:	9202      	str	r2, [sp, #8]
 8005d96:	2200      	movs	r2, #0
 8005d98:	9201      	str	r2, [sp, #4]
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2280      	movs	r2, #128	; 0x80
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f001 f9ef 	bl	8007184 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	7959      	ldrb	r1, [r3, #5]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005dba:	b292      	uxth	r2, r2
 8005dbc:	9202      	str	r2, [sp, #8]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	9201      	str	r2, [sp, #4]
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f001 f9db 	bl	8007184 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005dce:	e1bc      	b.n	800614a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005dd0:	7bbb      	ldrb	r3, [r7, #14]
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	f040 81b9 	bne.w	800614a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005dde:	3301      	adds	r3, #1
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d903      	bls.n	8005dfa <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	220d      	movs	r2, #13
 8005df6:	701a      	strb	r2, [r3, #0]
      break;
 8005df8:	e1a7      	b.n	800614a <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	795b      	ldrb	r3, [r3, #5]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 fa0f 	bl	8007224 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	791b      	ldrb	r3, [r3, #4]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f001 fa09 	bl	8007224 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	701a      	strb	r2, [r3, #0]
      break;
 8005e18:	e197      	b.n	800614a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005e1a:	2112      	movs	r1, #18
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 fa8b 	bl	8006338 <USBH_Get_DevDesc>
 8005e22:	4603      	mov	r3, r0
 8005e24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005e26:	7bbb      	ldrb	r3, [r7, #14]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d103      	bne.n	8005e34 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005e32:	e18c      	b.n	800614e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005e34:	7bbb      	ldrb	r3, [r7, #14]
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	f040 8189 	bne.w	800614e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005e42:	3301      	adds	r3, #1
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d903      	bls.n	8005e5e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	220d      	movs	r2, #13
 8005e5a:	701a      	strb	r2, [r3, #0]
      break;
 8005e5c:	e177      	b.n	800614e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	795b      	ldrb	r3, [r3, #5]
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f001 f9dd 	bl	8007224 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	791b      	ldrb	r3, [r3, #4]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f001 f9d7 	bl	8007224 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	701a      	strb	r2, [r3, #0]
      break;
 8005e82:	e164      	b.n	800614e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005e84:	2101      	movs	r1, #1
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fb02 	bl	8006490 <USBH_SetAddress>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005e90:	7bbb      	ldrb	r3, [r7, #14]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d132      	bne.n	8005efc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8005e96:	2002      	movs	r0, #2
 8005e98:	f005 ff24 	bl	800bce4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	7919      	ldrb	r1, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005ebe:	b292      	uxth	r2, r2
 8005ec0:	9202      	str	r2, [sp, #8]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	9201      	str	r2, [sp, #4]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2280      	movs	r2, #128	; 0x80
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f001 f959 	bl	8007184 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	7959      	ldrb	r1, [r3, #5]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005ee6:	b292      	uxth	r2, r2
 8005ee8:	9202      	str	r2, [sp, #8]
 8005eea:	2200      	movs	r2, #0
 8005eec:	9201      	str	r2, [sp, #4]
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f001 f945 	bl	8007184 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005efa:	e12a      	b.n	8006152 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005efc:	7bbb      	ldrb	r3, [r7, #14]
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	f040 8127 	bne.w	8006152 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	220d      	movs	r2, #13
 8005f08:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	705a      	strb	r2, [r3, #1]
      break;
 8005f10:	e11f      	b.n	8006152 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8005f12:	2109      	movs	r1, #9
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fa37 	bl	8006388 <USBH_Get_CfgDesc>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005f1e:	7bbb      	ldrb	r3, [r7, #14]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d103      	bne.n	8005f2c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2204      	movs	r2, #4
 8005f28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005f2a:	e114      	b.n	8006156 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005f2c:	7bbb      	ldrb	r3, [r7, #14]
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	f040 8111 	bne.w	8006156 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d903      	bls.n	8005f56 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	220d      	movs	r2, #13
 8005f52:	701a      	strb	r2, [r3, #0]
      break;
 8005f54:	e0ff      	b.n	8006156 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	795b      	ldrb	r3, [r3, #5]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f001 f961 	bl	8007224 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	791b      	ldrb	r3, [r3, #4]
 8005f66:	4619      	mov	r1, r3
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f001 f95b 	bl	8007224 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	701a      	strb	r2, [r3, #0]
      break;
 8005f7a:	e0ec      	b.n	8006156 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f9ff 	bl	8006388 <USBH_Get_CfgDesc>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005f8e:	7bbb      	ldrb	r3, [r7, #14]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d103      	bne.n	8005f9c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2205      	movs	r2, #5
 8005f98:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005f9a:	e0de      	b.n	800615a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005f9c:	7bbb      	ldrb	r3, [r7, #14]
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	f040 80db 	bne.w	800615a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005faa:	3301      	adds	r3, #1
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d903      	bls.n	8005fc6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	220d      	movs	r2, #13
 8005fc2:	701a      	strb	r2, [r3, #0]
      break;
 8005fc4:	e0c9      	b.n	800615a <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	795b      	ldrb	r3, [r3, #5]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 f929 	bl	8007224 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	791b      	ldrb	r3, [r3, #4]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 f923 	bl	8007224 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	701a      	strb	r2, [r3, #0]
      break;
 8005fea:	e0b6      	b.n	800615a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d036      	beq.n	8006064 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006002:	23ff      	movs	r3, #255	; 0xff
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f9e3 	bl	80063d0 <USBH_Get_StringDesc>
 800600a:	4603      	mov	r3, r0
 800600c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800600e:	7bbb      	ldrb	r3, [r7, #14]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d111      	bne.n	8006038 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2206      	movs	r2, #6
 8006018:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2205      	movs	r2, #5
 800601e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800602e:	2200      	movs	r2, #0
 8006030:	4619      	mov	r1, r3
 8006032:	f001 f9f3 	bl	800741c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006036:	e092      	b.n	800615e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006038:	7bbb      	ldrb	r3, [r7, #14]
 800603a:	2b03      	cmp	r3, #3
 800603c:	f040 808f 	bne.w	800615e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2206      	movs	r2, #6
 8006044:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2205      	movs	r2, #5
 800604a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800605a:	2200      	movs	r2, #0
 800605c:	4619      	mov	r1, r3
 800605e:	f001 f9dd 	bl	800741c <osMessagePut>
      break;
 8006062:	e07c      	b.n	800615e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2206      	movs	r2, #6
 8006068:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2205      	movs	r2, #5
 800606e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800607e:	2200      	movs	r2, #0
 8006080:	4619      	mov	r1, r3
 8006082:	f001 f9cb 	bl	800741c <osMessagePut>
      break;
 8006086:	e06a      	b.n	800615e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800608e:	2b00      	cmp	r3, #0
 8006090:	d027      	beq.n	80060e2 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800609e:	23ff      	movs	r3, #255	; 0xff
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f995 	bl	80063d0 <USBH_Get_StringDesc>
 80060a6:	4603      	mov	r3, r0
 80060a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d103      	bne.n	80060b8 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2207      	movs	r2, #7
 80060b4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80060b6:	e054      	b.n	8006162 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80060b8:	7bbb      	ldrb	r3, [r7, #14]
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d151      	bne.n	8006162 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2207      	movs	r2, #7
 80060c2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2205      	movs	r2, #5
 80060c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80060d8:	2200      	movs	r2, #0
 80060da:	4619      	mov	r1, r3
 80060dc:	f001 f99e 	bl	800741c <osMessagePut>
      break;
 80060e0:	e03f      	b.n	8006162 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2207      	movs	r2, #7
 80060e6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2205      	movs	r2, #5
 80060ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80060fc:	2200      	movs	r2, #0
 80060fe:	4619      	mov	r1, r3
 8006100:	f001 f98c 	bl	800741c <osMessagePut>
      break;
 8006104:	e02d      	b.n	8006162 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800610c:	2b00      	cmp	r3, #0
 800610e:	d017      	beq.n	8006140 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800611c:	23ff      	movs	r3, #255	; 0xff
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f956 	bl	80063d0 <USBH_Get_StringDesc>
 8006124:	4603      	mov	r3, r0
 8006126:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006128:	7bbb      	ldrb	r3, [r7, #14]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d102      	bne.n	8006134 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006132:	e018      	b.n	8006166 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006134:	7bbb      	ldrb	r3, [r7, #14]
 8006136:	2b03      	cmp	r3, #3
 8006138:	d115      	bne.n	8006166 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	73fb      	strb	r3, [r7, #15]
      break;
 800613e:	e012      	b.n	8006166 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8006140:	2300      	movs	r3, #0
 8006142:	73fb      	strb	r3, [r7, #15]
      break;
 8006144:	e00f      	b.n	8006166 <USBH_HandleEnum+0x44a>

    default:
      break;
 8006146:	bf00      	nop
 8006148:	e00e      	b.n	8006168 <USBH_HandleEnum+0x44c>
      break;
 800614a:	bf00      	nop
 800614c:	e00c      	b.n	8006168 <USBH_HandleEnum+0x44c>
      break;
 800614e:	bf00      	nop
 8006150:	e00a      	b.n	8006168 <USBH_HandleEnum+0x44c>
      break;
 8006152:	bf00      	nop
 8006154:	e008      	b.n	8006168 <USBH_HandleEnum+0x44c>
      break;
 8006156:	bf00      	nop
 8006158:	e006      	b.n	8006168 <USBH_HandleEnum+0x44c>
      break;
 800615a:	bf00      	nop
 800615c:	e004      	b.n	8006168 <USBH_HandleEnum+0x44c>
      break;
 800615e:	bf00      	nop
 8006160:	e002      	b.n	8006168 <USBH_HandleEnum+0x44c>
      break;
 8006162:	bf00      	nop
 8006164:	e000      	b.n	8006168 <USBH_HandleEnum+0x44c>
      break;
 8006166:	bf00      	nop
  }
  return Status;
 8006168:	7bfb      	ldrb	r3, [r7, #15]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop

08006174 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f804 	bl	80061b6 <USBH_HandleSof>
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b0b      	cmp	r3, #11
 80061c6:	d10a      	bne.n	80061de <USBH_HandleSof+0x28>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d005      	beq.n	80061de <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	4798      	blx	r3
  }
}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b082      	sub	sp, #8
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800620a:	2200      	movs	r2, #0
 800620c:	4619      	mov	r1, r3
 800620e:	f001 f905 	bl	800741c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006212:	bf00      	nop
}
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800622a:	bf00      	nop
}
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800626a:	2200      	movs	r2, #0
 800626c:	4619      	mov	r1, r3
 800626e:	f001 f8d5 	bl	800741c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f005 fbd8 	bl	800ba52 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	791b      	ldrb	r3, [r3, #4]
 80062a6:	4619      	mov	r1, r3
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 ffbb 	bl	8007224 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	795b      	ldrb	r3, [r3, #5]
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 ffb5 	bl	8007224 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80062ce:	2200      	movs	r2, #0
 80062d0:	4619      	mov	r1, r3
 80062d2:	f001 f8a3 	bl	800741c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 80062ee:	f107 030c 	add.w	r3, r7, #12
 80062f2:	f04f 32ff 	mov.w	r2, #4294967295
 80062f6:	4618      	mov	r0, r3
 80062f8:	f001 f8d0 	bl	800749c <osMessageGet>
    if (event.status == osEventMessage)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b10      	cmp	r3, #16
 8006300:	d1f2      	bne.n	80062e8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7ff fa9e 	bl	8005844 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8006308:	e7ee      	b.n	80062e8 <USBH_Process_OS+0x8>

0800630a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b082      	sub	sp, #8
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006326:	2200      	movs	r2, #0
 8006328:	4619      	mov	r1, r3
 800632a:	f001 f877 	bl	800741c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af02      	add	r7, sp, #8
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800634a:	78fb      	ldrb	r3, [r7, #3]
 800634c:	b29b      	uxth	r3, r3
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	4613      	mov	r3, r2
 8006352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006356:	2100      	movs	r1, #0
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f864 	bl	8006426 <USBH_GetDescriptor>
 800635e:	4603      	mov	r3, r0
 8006360:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006374:	78fa      	ldrb	r2, [r7, #3]
 8006376:	b292      	uxth	r2, r2
 8006378:	4619      	mov	r1, r3
 800637a:	f000 f918 	bl	80065ae <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800637e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af02      	add	r7, sp, #8
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	331c      	adds	r3, #28
 8006398:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800639a:	887b      	ldrh	r3, [r7, #2]
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063a4:	2100      	movs	r1, #0
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f83d 	bl	8006426 <USBH_GetDescriptor>
 80063ac:	4603      	mov	r3, r0
 80063ae:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d107      	bne.n	80063c6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80063b6:	887b      	ldrh	r3, [r7, #2]
 80063b8:	461a      	mov	r2, r3
 80063ba:	68b9      	ldr	r1, [r7, #8]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f987 	bl	80066d0 <USBH_ParseCfgDesc>
 80063c2:	4603      	mov	r3, r0
 80063c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	607a      	str	r2, [r7, #4]
 80063da:	461a      	mov	r2, r3
 80063dc:	460b      	mov	r3, r1
 80063de:	72fb      	strb	r3, [r7, #11]
 80063e0:	4613      	mov	r3, r2
 80063e2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80063e4:	7afb      	ldrb	r3, [r7, #11]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80063ec:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80063f4:	893b      	ldrh	r3, [r7, #8]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	460b      	mov	r3, r1
 80063fa:	2100      	movs	r1, #0
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 f812 	bl	8006426 <USBH_GetDescriptor>
 8006402:	4603      	mov	r3, r0
 8006404:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006406:	7dfb      	ldrb	r3, [r7, #23]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d107      	bne.n	800641c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006412:	893a      	ldrh	r2, [r7, #8]
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fb24 	bl	8006a64 <USBH_ParseStringDesc>
  }

  return status;
 800641c:	7dfb      	ldrb	r3, [r7, #23]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b084      	sub	sp, #16
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	607b      	str	r3, [r7, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	72fb      	strb	r3, [r7, #11]
 8006434:	4613      	mov	r3, r2
 8006436:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	789b      	ldrb	r3, [r3, #2]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d11c      	bne.n	800647a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006440:	7afb      	ldrb	r3, [r7, #11]
 8006442:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006446:	b2da      	uxtb	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2206      	movs	r2, #6
 8006450:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	893a      	ldrh	r2, [r7, #8]
 8006456:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006458:	893b      	ldrh	r3, [r7, #8]
 800645a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800645e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006462:	d104      	bne.n	800646e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f240 4209 	movw	r2, #1033	; 0x409
 800646a:	829a      	strh	r2, [r3, #20]
 800646c:	e002      	b.n	8006474 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8b3a      	ldrh	r2, [r7, #24]
 8006478:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800647a:	8b3b      	ldrh	r3, [r7, #24]
 800647c:	461a      	mov	r2, r3
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 fb3d 	bl	8006b00 <USBH_CtlReq>
 8006486:	4603      	mov	r3, r0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	789b      	ldrb	r3, [r3, #2]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d10f      	bne.n	80064c4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2205      	movs	r2, #5
 80064ae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80064c4:	2200      	movs	r2, #0
 80064c6:	2100      	movs	r1, #0
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fb19 	bl	8006b00 <USBH_CtlReq>
 80064ce:	4603      	mov	r3, r0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	789b      	ldrb	r3, [r3, #2]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d10e      	bne.n	800650a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2209      	movs	r2, #9
 80064f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	887a      	ldrh	r2, [r7, #2]
 80064fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800650a:	2200      	movs	r2, #0
 800650c:	2100      	movs	r1, #0
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 faf6 	bl	8006b00 <USBH_CtlReq>
 8006514:	4603      	mov	r3, r0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b082      	sub	sp, #8
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	789b      	ldrb	r3, [r3, #2]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d10f      	bne.n	8006552 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2203      	movs	r2, #3
 800653c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800653e:	78fb      	ldrb	r3, [r7, #3]
 8006540:	b29a      	uxth	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006552:	2200      	movs	r2, #0
 8006554:	2100      	movs	r1, #0
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fad2 	bl	8006b00 <USBH_CtlReq>
 800655c:	4603      	mov	r3, r0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b082      	sub	sp, #8
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	460b      	mov	r3, r1
 8006570:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	789b      	ldrb	r3, [r3, #2]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d10f      	bne.n	800659a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2202      	movs	r2, #2
 800657e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	b29a      	uxth	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800659a:	2200      	movs	r2, #0
 800659c:	2100      	movs	r1, #0
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 faae 	bl	8006b00 <USBH_CtlReq>
 80065a4:	4603      	mov	r3, r0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b085      	sub	sp, #20
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	4613      	mov	r3, r2
 80065ba:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	781a      	ldrb	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	785a      	ldrb	r2, [r3, #1]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	3302      	adds	r3, #2
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	3303      	adds	r3, #3
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	b29b      	uxth	r3, r3
 80065e0:	4313      	orrs	r3, r2
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	791a      	ldrb	r2, [r3, #4]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	795a      	ldrb	r2, [r3, #5]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	799a      	ldrb	r2, [r3, #6]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	79da      	ldrb	r2, [r3, #7]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	79db      	ldrb	r3, [r3, #7]
 800660c:	2b20      	cmp	r3, #32
 800660e:	dc11      	bgt.n	8006634 <USBH_ParseDevDesc+0x86>
 8006610:	2b08      	cmp	r3, #8
 8006612:	db16      	blt.n	8006642 <USBH_ParseDevDesc+0x94>
 8006614:	3b08      	subs	r3, #8
 8006616:	2201      	movs	r2, #1
 8006618:	fa02 f303 	lsl.w	r3, r2, r3
 800661c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006624:	2b00      	cmp	r3, #0
 8006626:	bf14      	ite	ne
 8006628:	2301      	movne	r3, #1
 800662a:	2300      	moveq	r3, #0
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d102      	bne.n	8006638 <USBH_ParseDevDesc+0x8a>
 8006632:	e006      	b.n	8006642 <USBH_ParseDevDesc+0x94>
 8006634:	2b40      	cmp	r3, #64	; 0x40
 8006636:	d104      	bne.n	8006642 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	79da      	ldrb	r2, [r3, #7]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	71da      	strb	r2, [r3, #7]
      break;
 8006640:	e003      	b.n	800664a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2240      	movs	r2, #64	; 0x40
 8006646:	71da      	strb	r2, [r3, #7]
      break;
 8006648:	bf00      	nop
  }

  if (length > 8U)
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	2b08      	cmp	r3, #8
 800664e:	d939      	bls.n	80066c4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	3308      	adds	r3, #8
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	b29a      	uxth	r2, r3
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	3309      	adds	r3, #9
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	021b      	lsls	r3, r3, #8
 8006662:	b29b      	uxth	r3, r3
 8006664:	4313      	orrs	r3, r2
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	330a      	adds	r3, #10
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	b29a      	uxth	r2, r3
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	330b      	adds	r3, #11
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	b29b      	uxth	r3, r3
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	b29b      	uxth	r3, r3
 8006680:	4313      	orrs	r3, r2
 8006682:	b29a      	uxth	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	330c      	adds	r3, #12
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	b29a      	uxth	r2, r3
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	330d      	adds	r3, #13
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	021b      	lsls	r3, r3, #8
 800669a:	b29b      	uxth	r3, r3
 800669c:	4313      	orrs	r3, r2
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	7b9a      	ldrb	r2, [r3, #14]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	7bda      	ldrb	r2, [r3, #15]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	7c1a      	ldrb	r2, [r3, #16]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	7c5a      	ldrb	r2, [r3, #17]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	745a      	strb	r2, [r3, #17]
  }
}
 80066c4:	bf00      	nop
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08c      	sub	sp, #48	; 0x30
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	4613      	mov	r3, r2
 80066dc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80066e4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	781a      	ldrb	r2, [r3, #0]
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	785a      	ldrb	r2, [r3, #1]
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	3302      	adds	r3, #2
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	b29a      	uxth	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	3303      	adds	r3, #3
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	b29b      	uxth	r3, r3
 8006724:	4313      	orrs	r3, r2
 8006726:	b29b      	uxth	r3, r3
 8006728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800672c:	bf28      	it	cs
 800672e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006732:	b29a      	uxth	r2, r3
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	791a      	ldrb	r2, [r3, #4]
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	795a      	ldrb	r2, [r3, #5]
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	799a      	ldrb	r2, [r3, #6]
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	79da      	ldrb	r2, [r3, #7]
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	7a1a      	ldrb	r2, [r3, #8]
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b09      	cmp	r3, #9
 8006766:	d002      	beq.n	800676e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	2209      	movs	r2, #9
 800676c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800676e:	88fb      	ldrh	r3, [r7, #6]
 8006770:	2b09      	cmp	r3, #9
 8006772:	f240 809d 	bls.w	80068b0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006776:	2309      	movs	r3, #9
 8006778:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800677a:	2300      	movs	r3, #0
 800677c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800677e:	e081      	b.n	8006884 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006780:	f107 0316 	add.w	r3, r7, #22
 8006784:	4619      	mov	r1, r3
 8006786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006788:	f000 f99f 	bl	8006aca <USBH_GetNextDesc>
 800678c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	785b      	ldrb	r3, [r3, #1]
 8006792:	2b04      	cmp	r3, #4
 8006794:	d176      	bne.n	8006884 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b09      	cmp	r3, #9
 800679c:	d002      	beq.n	80067a4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800679e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a0:	2209      	movs	r2, #9
 80067a2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80067a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067a8:	221a      	movs	r2, #26
 80067aa:	fb02 f303 	mul.w	r3, r2, r3
 80067ae:	3308      	adds	r3, #8
 80067b0:	6a3a      	ldr	r2, [r7, #32]
 80067b2:	4413      	add	r3, r2
 80067b4:	3302      	adds	r3, #2
 80067b6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80067b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067ba:	69f8      	ldr	r0, [r7, #28]
 80067bc:	f000 f87e 	bl	80068bc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80067ca:	e043      	b.n	8006854 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80067cc:	f107 0316 	add.w	r3, r7, #22
 80067d0:	4619      	mov	r1, r3
 80067d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067d4:	f000 f979 	bl	8006aca <USBH_GetNextDesc>
 80067d8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80067da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067dc:	785b      	ldrb	r3, [r3, #1]
 80067de:	2b05      	cmp	r3, #5
 80067e0:	d138      	bne.n	8006854 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	795b      	ldrb	r3, [r3, #5]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d10f      	bne.n	800680a <USBH_ParseCfgDesc+0x13a>
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	799b      	ldrb	r3, [r3, #6]
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d10b      	bne.n	800680a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	79db      	ldrb	r3, [r3, #7]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10f      	bne.n	800681a <USBH_ParseCfgDesc+0x14a>
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	2b09      	cmp	r3, #9
 8006800:	d00b      	beq.n	800681a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006804:	2209      	movs	r2, #9
 8006806:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006808:	e007      	b.n	800681a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	2b07      	cmp	r3, #7
 8006810:	d004      	beq.n	800681c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006814:	2207      	movs	r2, #7
 8006816:	701a      	strb	r2, [r3, #0]
 8006818:	e000      	b.n	800681c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800681a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800681c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006820:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006824:	3201      	adds	r2, #1
 8006826:	00d2      	lsls	r2, r2, #3
 8006828:	211a      	movs	r1, #26
 800682a:	fb01 f303 	mul.w	r3, r1, r3
 800682e:	4413      	add	r3, r2
 8006830:	3308      	adds	r3, #8
 8006832:	6a3a      	ldr	r2, [r7, #32]
 8006834:	4413      	add	r3, r2
 8006836:	3304      	adds	r3, #4
 8006838:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800683a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800683c:	69b9      	ldr	r1, [r7, #24]
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 f86b 	bl	800691a <USBH_ParseEPDesc>
 8006844:	4603      	mov	r3, r0
 8006846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800684a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800684e:	3301      	adds	r3, #1
 8006850:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	791b      	ldrb	r3, [r3, #4]
 8006858:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800685c:	429a      	cmp	r2, r3
 800685e:	d204      	bcs.n	800686a <USBH_ParseCfgDesc+0x19a>
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	885a      	ldrh	r2, [r3, #2]
 8006864:	8afb      	ldrh	r3, [r7, #22]
 8006866:	429a      	cmp	r2, r3
 8006868:	d8b0      	bhi.n	80067cc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	791b      	ldrb	r3, [r3, #4]
 800686e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006872:	429a      	cmp	r2, r3
 8006874:	d201      	bcs.n	800687a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006876:	2303      	movs	r3, #3
 8006878:	e01c      	b.n	80068b4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800687a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800687e:	3301      	adds	r3, #1
 8006880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006888:	2b01      	cmp	r3, #1
 800688a:	d805      	bhi.n	8006898 <USBH_ParseCfgDesc+0x1c8>
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	885a      	ldrh	r2, [r3, #2]
 8006890:	8afb      	ldrh	r3, [r7, #22]
 8006892:	429a      	cmp	r2, r3
 8006894:	f63f af74 	bhi.w	8006780 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	791b      	ldrb	r3, [r3, #4]
 800689c:	2b02      	cmp	r3, #2
 800689e:	bf28      	it	cs
 80068a0:	2302      	movcs	r3, #2
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d201      	bcs.n	80068b0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e001      	b.n	80068b4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80068b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3730      	adds	r7, #48	; 0x30
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781a      	ldrb	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	785a      	ldrb	r2, [r3, #1]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	789a      	ldrb	r2, [r3, #2]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	78da      	ldrb	r2, [r3, #3]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	791a      	ldrb	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	795a      	ldrb	r2, [r3, #5]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	799a      	ldrb	r2, [r3, #6]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	79da      	ldrb	r2, [r3, #7]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	7a1a      	ldrb	r2, [r3, #8]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	721a      	strb	r2, [r3, #8]
}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800691a:	b480      	push	{r7}
 800691c:	b087      	sub	sp, #28
 800691e:	af00      	add	r7, sp, #0
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	781a      	ldrb	r2, [r3, #0]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	785a      	ldrb	r2, [r3, #1]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	789a      	ldrb	r2, [r3, #2]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	78da      	ldrb	r2, [r3, #3]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	3304      	adds	r3, #4
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	b29a      	uxth	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	3305      	adds	r3, #5
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	b29b      	uxth	r3, r3
 800695a:	021b      	lsls	r3, r3, #8
 800695c:	b29b      	uxth	r3, r3
 800695e:	4313      	orrs	r3, r2
 8006960:	b29a      	uxth	r2, r3
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	799a      	ldrb	r2, [r3, #6]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	889b      	ldrh	r3, [r3, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d102      	bne.n	800697c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006976:	2303      	movs	r3, #3
 8006978:	75fb      	strb	r3, [r7, #23]
 800697a:	e033      	b.n	80069e4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	889b      	ldrh	r3, [r3, #4]
 8006980:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006984:	f023 0307 	bic.w	r3, r3, #7
 8006988:	b29a      	uxth	r2, r3
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	889b      	ldrh	r3, [r3, #4]
 8006992:	b21a      	sxth	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3304      	adds	r3, #4
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	b299      	uxth	r1, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3305      	adds	r3, #5
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	021b      	lsls	r3, r3, #8
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	430b      	orrs	r3, r1
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d110      	bne.n	80069d6 <USBH_ParseEPDesc+0xbc>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3304      	adds	r3, #4
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	b299      	uxth	r1, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3305      	adds	r3, #5
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	021b      	lsls	r3, r3, #8
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	430b      	orrs	r3, r1
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	b21b      	sxth	r3, r3
 80069ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069d2:	b21b      	sxth	r3, r3
 80069d4:	e001      	b.n	80069da <USBH_ParseEPDesc+0xc0>
 80069d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069da:	4313      	orrs	r3, r2
 80069dc:	b21b      	sxth	r3, r3
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d116      	bne.n	8006a1c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	78db      	ldrb	r3, [r3, #3]
 80069f2:	f003 0303 	and.w	r3, r3, #3
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d005      	beq.n	8006a06 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	78db      	ldrb	r3, [r3, #3]
 80069fe:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d127      	bne.n	8006a56 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	799b      	ldrb	r3, [r3, #6]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <USBH_ParseEPDesc+0xfc>
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	799b      	ldrb	r3, [r3, #6]
 8006a12:	2b10      	cmp	r3, #16
 8006a14:	d91f      	bls.n	8006a56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006a16:	2303      	movs	r3, #3
 8006a18:	75fb      	strb	r3, [r7, #23]
 8006a1a:	e01c      	b.n	8006a56 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	78db      	ldrb	r3, [r3, #3]
 8006a20:	f003 0303 	and.w	r3, r3, #3
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d10a      	bne.n	8006a3e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	799b      	ldrb	r3, [r3, #6]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <USBH_ParseEPDesc+0x11e>
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	799b      	ldrb	r3, [r3, #6]
 8006a34:	2b10      	cmp	r3, #16
 8006a36:	d90e      	bls.n	8006a56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	75fb      	strb	r3, [r7, #23]
 8006a3c:	e00b      	b.n	8006a56 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	78db      	ldrb	r3, [r3, #3]
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d105      	bne.n	8006a56 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	799b      	ldrb	r3, [r3, #6]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006a52:	2303      	movs	r3, #3
 8006a54:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3301      	adds	r3, #1
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d120      	bne.n	8006abe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	1e9a      	subs	r2, r3, #2
 8006a82:	88fb      	ldrh	r3, [r7, #6]
 8006a84:	4293      	cmp	r3, r2
 8006a86:	bf28      	it	cs
 8006a88:	4613      	movcs	r3, r2
 8006a8a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3302      	adds	r3, #2
 8006a90:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006a92:	2300      	movs	r3, #0
 8006a94:	82fb      	strh	r3, [r7, #22]
 8006a96:	e00b      	b.n	8006ab0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006a98:	8afb      	ldrh	r3, [r7, #22]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	781a      	ldrb	r2, [r3, #0]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006aaa:	8afb      	ldrh	r3, [r7, #22]
 8006aac:	3302      	adds	r3, #2
 8006aae:	82fb      	strh	r3, [r7, #22]
 8006ab0:	8afa      	ldrh	r2, [r7, #22]
 8006ab2:	8abb      	ldrh	r3, [r7, #20]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d3ef      	bcc.n	8006a98 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2200      	movs	r2, #0
 8006abc:	701a      	strb	r2, [r3, #0]
  }
}
 8006abe:	bf00      	nop
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b085      	sub	sp, #20
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	881a      	ldrh	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	4413      	add	r3, r2
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4413      	add	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006af2:	68fb      	ldr	r3, [r7, #12]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	789b      	ldrb	r3, [r3, #2]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d002      	beq.n	8006b20 <USBH_CtlReq+0x20>
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d01d      	beq.n	8006b5a <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8006b1e:	e043      	b.n	8006ba8 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	88fa      	ldrh	r2, [r7, #6]
 8006b2a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2202      	movs	r2, #2
 8006b36:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2203      	movs	r2, #3
 8006b40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006b50:	2200      	movs	r2, #0
 8006b52:	4619      	mov	r1, r3
 8006b54:	f000 fc62 	bl	800741c <osMessagePut>
      break;
 8006b58:	e026      	b.n	8006ba8 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f000 f82a 	bl	8006bb4 <USBH_HandleControl>
 8006b60:	4603      	mov	r3, r0
 8006b62:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006b64:	7dfb      	ldrb	r3, [r7, #23]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <USBH_CtlReq+0x70>
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d106      	bne.n	8006b7e <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2201      	movs	r2, #1
 8006b74:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	761a      	strb	r2, [r3, #24]
 8006b7c:	e005      	b.n	8006b8a <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d102      	bne.n	8006b8a <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2201      	movs	r2, #1
 8006b88:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2203      	movs	r2, #3
 8006b8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	f000 fc3b 	bl	800741c <osMessagePut>
      break;
 8006ba6:	bf00      	nop
  }
  return status;
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
	...

08006bb4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	7e1b      	ldrb	r3, [r3, #24]
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	2b0a      	cmp	r3, #10
 8006bcc:	f200 8229 	bhi.w	8007022 <USBH_HandleControl+0x46e>
 8006bd0:	a201      	add	r2, pc, #4	; (adr r2, 8006bd8 <USBH_HandleControl+0x24>)
 8006bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd6:	bf00      	nop
 8006bd8:	08006c05 	.word	0x08006c05
 8006bdc:	08006c1f 	.word	0x08006c1f
 8006be0:	08006cc1 	.word	0x08006cc1
 8006be4:	08006ce7 	.word	0x08006ce7
 8006be8:	08006d73 	.word	0x08006d73
 8006bec:	08006d9d 	.word	0x08006d9d
 8006bf0:	08006e5f 	.word	0x08006e5f
 8006bf4:	08006e81 	.word	0x08006e81
 8006bf8:	08006f13 	.word	0x08006f13
 8006bfc:	08006f39 	.word	0x08006f39
 8006c00:	08006fcb 	.word	0x08006fcb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f103 0110 	add.w	r1, r3, #16
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	795b      	ldrb	r3, [r3, #5]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fa17 	bl	8007044 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	761a      	strb	r2, [r3, #24]
      break;
 8006c1c:	e20c      	b.n	8007038 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	795b      	ldrb	r3, [r3, #5]
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f005 f803 	bl	800bc30 <USBH_LL_GetURBState>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d12c      	bne.n	8006c8e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	7c1b      	ldrb	r3, [r3, #16]
 8006c38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c3c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	8adb      	ldrh	r3, [r3, #22]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006c46:	7b7b      	ldrb	r3, [r7, #13]
 8006c48:	2b80      	cmp	r3, #128	; 0x80
 8006c4a:	d103      	bne.n	8006c54 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2203      	movs	r2, #3
 8006c50:	761a      	strb	r2, [r3, #24]
 8006c52:	e00d      	b.n	8006c70 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2205      	movs	r2, #5
 8006c58:	761a      	strb	r2, [r3, #24]
 8006c5a:	e009      	b.n	8006c70 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8006c5c:	7b7b      	ldrb	r3, [r7, #13]
 8006c5e:	2b80      	cmp	r3, #128	; 0x80
 8006c60:	d103      	bne.n	8006c6a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2209      	movs	r2, #9
 8006c66:	761a      	strb	r2, [r3, #24]
 8006c68:	e002      	b.n	8006c70 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2207      	movs	r2, #7
 8006c6e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2203      	movs	r2, #3
 8006c74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006c84:	2200      	movs	r2, #0
 8006c86:	4619      	mov	r1, r3
 8006c88:	f000 fbc8 	bl	800741c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006c8c:	e1cb      	b.n	8007026 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006c8e:	7bbb      	ldrb	r3, [r7, #14]
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d003      	beq.n	8006c9c <USBH_HandleControl+0xe8>
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	f040 81c5 	bne.w	8007026 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	220b      	movs	r2, #11
 8006ca0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2203      	movs	r2, #3
 8006ca6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	4619      	mov	r1, r3
 8006cba:	f000 fbaf 	bl	800741c <osMessagePut>
      break;
 8006cbe:	e1b2      	b.n	8007026 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6899      	ldr	r1, [r3, #8]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	899a      	ldrh	r2, [r3, #12]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	791b      	ldrb	r3, [r3, #4]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f9f2 	bl	80070c2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2204      	movs	r2, #4
 8006ce2:	761a      	strb	r2, [r3, #24]
      break;
 8006ce4:	e1a8      	b.n	8007038 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	791b      	ldrb	r3, [r3, #4]
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f004 ff9f 	bl	800bc30 <USBH_LL_GetURBState>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006cf6:	7bbb      	ldrb	r3, [r7, #14]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d110      	bne.n	8006d1e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2209      	movs	r2, #9
 8006d00:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2203      	movs	r2, #3
 8006d06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006d16:	2200      	movs	r2, #0
 8006d18:	4619      	mov	r1, r3
 8006d1a:	f000 fb7f 	bl	800741c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	2b05      	cmp	r3, #5
 8006d22:	d110      	bne.n	8006d46 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006d24:	2303      	movs	r3, #3
 8006d26:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2203      	movs	r2, #3
 8006d2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	4619      	mov	r1, r3
 8006d40:	f000 fb6c 	bl	800741c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006d44:	e171      	b.n	800702a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	f040 816e 	bne.w	800702a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	220b      	movs	r2, #11
 8006d52:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2203      	movs	r2, #3
 8006d58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006d68:	2200      	movs	r2, #0
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	f000 fb56 	bl	800741c <osMessagePut>
      break;
 8006d70:	e15b      	b.n	800702a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6899      	ldr	r1, [r3, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	899a      	ldrh	r2, [r3, #12]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	795b      	ldrb	r3, [r3, #5]
 8006d7e:	2001      	movs	r0, #1
 8006d80:	9000      	str	r0, [sp, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f978 	bl	8007078 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2206      	movs	r2, #6
 8006d98:	761a      	strb	r2, [r3, #24]
      break;
 8006d9a:	e14d      	b.n	8007038 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	795b      	ldrb	r3, [r3, #5]
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f004 ff44 	bl	800bc30 <USBH_LL_GetURBState>
 8006da8:	4603      	mov	r3, r0
 8006daa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d111      	bne.n	8006dd6 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2207      	movs	r2, #7
 8006db6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2203      	movs	r2, #3
 8006dbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4619      	mov	r1, r3
 8006dd0:	f000 fb24 	bl	800741c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006dd4:	e12b      	b.n	800702e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	2b05      	cmp	r3, #5
 8006dda:	d113      	bne.n	8006e04 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	220c      	movs	r2, #12
 8006de0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006de2:	2303      	movs	r3, #3
 8006de4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2203      	movs	r2, #3
 8006dea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	f000 fb0d 	bl	800741c <osMessagePut>
      break;
 8006e02:	e114      	b.n	800702e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d111      	bne.n	8006e2e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2205      	movs	r2, #5
 8006e0e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2203      	movs	r2, #3
 8006e14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006e24:	2200      	movs	r2, #0
 8006e26:	4619      	mov	r1, r3
 8006e28:	f000 faf8 	bl	800741c <osMessagePut>
      break;
 8006e2c:	e0ff      	b.n	800702e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	2b04      	cmp	r3, #4
 8006e32:	f040 80fc 	bne.w	800702e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	220b      	movs	r2, #11
 8006e3a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2203      	movs	r2, #3
 8006e44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006e54:	2200      	movs	r2, #0
 8006e56:	4619      	mov	r1, r3
 8006e58:	f000 fae0 	bl	800741c <osMessagePut>
      break;
 8006e5c:	e0e7      	b.n	800702e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	791b      	ldrb	r3, [r3, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	2100      	movs	r1, #0
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f92b 	bl	80070c2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2208      	movs	r2, #8
 8006e7c:	761a      	strb	r2, [r3, #24]

      break;
 8006e7e:	e0db      	b.n	8007038 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	791b      	ldrb	r3, [r3, #4]
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f004 fed2 	bl	800bc30 <USBH_LL_GetURBState>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006e90:	7bbb      	ldrb	r3, [r7, #14]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d113      	bne.n	8006ebe <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	220d      	movs	r2, #13
 8006e9a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2203      	movs	r2, #3
 8006ea4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	f000 fab0 	bl	800741c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006ebc:	e0b9      	b.n	8007032 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	2b04      	cmp	r3, #4
 8006ec2:	d111      	bne.n	8006ee8 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	220b      	movs	r2, #11
 8006ec8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2203      	movs	r2, #3
 8006ece:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006ede:	2200      	movs	r2, #0
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	f000 fa9b 	bl	800741c <osMessagePut>
      break;
 8006ee6:	e0a4      	b.n	8007032 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b05      	cmp	r3, #5
 8006eec:	f040 80a1 	bne.w	8007032 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2203      	movs	r2, #3
 8006ef8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006f08:	2200      	movs	r2, #0
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	f000 fa86 	bl	800741c <osMessagePut>
      break;
 8006f10:	e08f      	b.n	8007032 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	795b      	ldrb	r3, [r3, #5]
 8006f16:	2201      	movs	r2, #1
 8006f18:	9200      	str	r2, [sp, #0]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f8aa 	bl	8007078 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	220a      	movs	r2, #10
 8006f34:	761a      	strb	r2, [r3, #24]
      break;
 8006f36:	e07f      	b.n	8007038 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	795b      	ldrb	r3, [r3, #5]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f004 fe76 	bl	800bc30 <USBH_LL_GetURBState>
 8006f44:	4603      	mov	r3, r0
 8006f46:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006f48:	7bbb      	ldrb	r3, [r7, #14]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d113      	bne.n	8006f76 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	220d      	movs	r2, #13
 8006f56:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2203      	movs	r2, #3
 8006f5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	4619      	mov	r1, r3
 8006f70:	f000 fa54 	bl	800741c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006f74:	e05f      	b.n	8007036 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d111      	bne.n	8006fa0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2209      	movs	r2, #9
 8006f80:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2203      	movs	r2, #3
 8006f86:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006f96:	2200      	movs	r2, #0
 8006f98:	4619      	mov	r1, r3
 8006f9a:	f000 fa3f 	bl	800741c <osMessagePut>
      break;
 8006f9e:	e04a      	b.n	8007036 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	d147      	bne.n	8007036 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	220b      	movs	r2, #11
 8006faa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2203      	movs	r2, #3
 8006fb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	f000 fa2a 	bl	800741c <osMessagePut>
      break;
 8006fc8:	e035      	b.n	8007036 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	7e5b      	ldrb	r3, [r3, #25]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	765a      	strb	r2, [r3, #25]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	7e5b      	ldrb	r3, [r3, #25]
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d806      	bhi.n	8006fec <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006fea:	e025      	b.n	8007038 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ff2:	2106      	movs	r1, #6
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	795b      	ldrb	r3, [r3, #5]
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f90d 	bl	8007224 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	791b      	ldrb	r3, [r3, #4]
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f907 	bl	8007224 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800701c:	2302      	movs	r3, #2
 800701e:	73fb      	strb	r3, [r7, #15]
      break;
 8007020:	e00a      	b.n	8007038 <USBH_HandleControl+0x484>

    default:
      break;
 8007022:	bf00      	nop
 8007024:	e008      	b.n	8007038 <USBH_HandleControl+0x484>
      break;
 8007026:	bf00      	nop
 8007028:	e006      	b.n	8007038 <USBH_HandleControl+0x484>
      break;
 800702a:	bf00      	nop
 800702c:	e004      	b.n	8007038 <USBH_HandleControl+0x484>
      break;
 800702e:	bf00      	nop
 8007030:	e002      	b.n	8007038 <USBH_HandleControl+0x484>
      break;
 8007032:	bf00      	nop
 8007034:	e000      	b.n	8007038 <USBH_HandleControl+0x484>
      break;
 8007036:	bf00      	nop
  }

  return status;
 8007038:	7bfb      	ldrb	r3, [r7, #15]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop

08007044 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af04      	add	r7, sp, #16
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	4613      	mov	r3, r2
 8007050:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007052:	79f9      	ldrb	r1, [r7, #7]
 8007054:	2300      	movs	r3, #0
 8007056:	9303      	str	r3, [sp, #12]
 8007058:	2308      	movs	r3, #8
 800705a:	9302      	str	r3, [sp, #8]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	9301      	str	r3, [sp, #4]
 8007060:	2300      	movs	r3, #0
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	2300      	movs	r3, #0
 8007066:	2200      	movs	r2, #0
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f004 fdb0 	bl	800bbce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af04      	add	r7, sp, #16
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	4611      	mov	r1, r2
 8007084:	461a      	mov	r2, r3
 8007086:	460b      	mov	r3, r1
 8007088:	80fb      	strh	r3, [r7, #6]
 800708a:	4613      	mov	r3, r2
 800708c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800709c:	7979      	ldrb	r1, [r7, #5]
 800709e:	7e3b      	ldrb	r3, [r7, #24]
 80070a0:	9303      	str	r3, [sp, #12]
 80070a2:	88fb      	ldrh	r3, [r7, #6]
 80070a4:	9302      	str	r3, [sp, #8]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	2301      	movs	r3, #1
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	2300      	movs	r3, #0
 80070b0:	2200      	movs	r2, #0
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f004 fd8b 	bl	800bbce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b088      	sub	sp, #32
 80070c6:	af04      	add	r7, sp, #16
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	4611      	mov	r1, r2
 80070ce:	461a      	mov	r2, r3
 80070d0:	460b      	mov	r3, r1
 80070d2:	80fb      	strh	r3, [r7, #6]
 80070d4:	4613      	mov	r3, r2
 80070d6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80070d8:	7979      	ldrb	r1, [r7, #5]
 80070da:	2300      	movs	r3, #0
 80070dc:	9303      	str	r3, [sp, #12]
 80070de:	88fb      	ldrh	r3, [r7, #6]
 80070e0:	9302      	str	r3, [sp, #8]
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	9301      	str	r3, [sp, #4]
 80070e6:	2301      	movs	r3, #1
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	2300      	movs	r3, #0
 80070ec:	2201      	movs	r2, #1
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f004 fd6d 	bl	800bbce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80070f4:	2300      	movs	r3, #0

}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b088      	sub	sp, #32
 8007102:	af04      	add	r7, sp, #16
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	4611      	mov	r1, r2
 800710a:	461a      	mov	r2, r3
 800710c:	460b      	mov	r3, r1
 800710e:	80fb      	strh	r3, [r7, #6]
 8007110:	4613      	mov	r3, r2
 8007112:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007122:	7979      	ldrb	r1, [r7, #5]
 8007124:	7e3b      	ldrb	r3, [r7, #24]
 8007126:	9303      	str	r3, [sp, #12]
 8007128:	88fb      	ldrh	r3, [r7, #6]
 800712a:	9302      	str	r3, [sp, #8]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	2301      	movs	r3, #1
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	2302      	movs	r3, #2
 8007136:	2200      	movs	r2, #0
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f004 fd48 	bl	800bbce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af04      	add	r7, sp, #16
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	4611      	mov	r1, r2
 8007154:	461a      	mov	r2, r3
 8007156:	460b      	mov	r3, r1
 8007158:	80fb      	strh	r3, [r7, #6]
 800715a:	4613      	mov	r3, r2
 800715c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800715e:	7979      	ldrb	r1, [r7, #5]
 8007160:	2300      	movs	r3, #0
 8007162:	9303      	str	r3, [sp, #12]
 8007164:	88fb      	ldrh	r3, [r7, #6]
 8007166:	9302      	str	r3, [sp, #8]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	9301      	str	r3, [sp, #4]
 800716c:	2301      	movs	r3, #1
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	2302      	movs	r3, #2
 8007172:	2201      	movs	r2, #1
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f004 fd2a 	bl	800bbce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af04      	add	r7, sp, #16
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	4608      	mov	r0, r1
 800718e:	4611      	mov	r1, r2
 8007190:	461a      	mov	r2, r3
 8007192:	4603      	mov	r3, r0
 8007194:	70fb      	strb	r3, [r7, #3]
 8007196:	460b      	mov	r3, r1
 8007198:	70bb      	strb	r3, [r7, #2]
 800719a:	4613      	mov	r3, r2
 800719c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800719e:	7878      	ldrb	r0, [r7, #1]
 80071a0:	78ba      	ldrb	r2, [r7, #2]
 80071a2:	78f9      	ldrb	r1, [r7, #3]
 80071a4:	8b3b      	ldrh	r3, [r7, #24]
 80071a6:	9302      	str	r3, [sp, #8]
 80071a8:	7d3b      	ldrb	r3, [r7, #20]
 80071aa:	9301      	str	r3, [sp, #4]
 80071ac:	7c3b      	ldrb	r3, [r7, #16]
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	4603      	mov	r3, r0
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f004 fcbd 	bl	800bb32 <USBH_LL_OpenPipe>

  return USBH_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80071ce:	78fb      	ldrb	r3, [r7, #3]
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f004 fcdc 	bl	800bb90 <USBH_LL_ClosePipe>

  return USBH_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	460b      	mov	r3, r1
 80071ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f836 	bl	8007260 <USBH_GetFreePipe>
 80071f4:	4603      	mov	r3, r0
 80071f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80071f8:	89fb      	ldrh	r3, [r7, #14]
 80071fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071fe:	4293      	cmp	r3, r2
 8007200:	d00a      	beq.n	8007218 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007202:	78fa      	ldrb	r2, [r7, #3]
 8007204:	89fb      	ldrh	r3, [r7, #14]
 8007206:	f003 030f 	and.w	r3, r3, #15
 800720a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	33e0      	adds	r3, #224	; 0xe0
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	440b      	add	r3, r1
 8007216:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007218:	89fb      	ldrh	r3, [r7, #14]
 800721a:	b2db      	uxtb	r3, r3
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007230:	78fb      	ldrb	r3, [r7, #3]
 8007232:	2b0f      	cmp	r3, #15
 8007234:	d80d      	bhi.n	8007252 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007236:	78fb      	ldrb	r3, [r7, #3]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	33e0      	adds	r3, #224	; 0xe0
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	78fb      	ldrb	r3, [r7, #3]
 8007244:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007248:	6879      	ldr	r1, [r7, #4]
 800724a:	33e0      	adds	r3, #224	; 0xe0
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	440b      	add	r3, r1
 8007250:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800726c:	2300      	movs	r3, #0
 800726e:	73fb      	strb	r3, [r7, #15]
 8007270:	e00f      	b.n	8007292 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007272:	7bfb      	ldrb	r3, [r7, #15]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	33e0      	adds	r3, #224	; 0xe0
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d102      	bne.n	800728c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	b29b      	uxth	r3, r3
 800728a:	e007      	b.n	800729c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	3301      	adds	r3, #1
 8007290:	73fb      	strb	r3, [r7, #15]
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	2b0f      	cmp	r3, #15
 8007296:	d9ec      	bls.n	8007272 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007298:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80072b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072ba:	2b84      	cmp	r3, #132	; 0x84
 80072bc:	d005      	beq.n	80072ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80072be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4413      	add	r3, r2
 80072c6:	3303      	adds	r3, #3
 80072c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80072ca:	68fb      	ldr	r3, [r7, #12]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072de:	f3ef 8305 	mrs	r3, IPSR
 80072e2:	607b      	str	r3, [r7, #4]
  return(result);
 80072e4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	bf14      	ite	ne
 80072ea:	2301      	movne	r3, #1
 80072ec:	2300      	moveq	r3, #0
 80072ee:	b2db      	uxtb	r3, r3
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007300:	f001 fa8c 	bl	800881c <vTaskStartScheduler>
  
  return osOK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	bd80      	pop	{r7, pc}

0800730a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800730a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800730c:	b089      	sub	sp, #36	; 0x24
 800730e:	af04      	add	r7, sp, #16
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d020      	beq.n	800735e <osThreadCreate+0x54>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d01c      	beq.n	800735e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685c      	ldr	r4, [r3, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681d      	ldr	r5, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691e      	ldr	r6, [r3, #16]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007336:	4618      	mov	r0, r3
 8007338:	f7ff ffb6 	bl	80072a8 <makeFreeRtosPriority>
 800733c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007346:	9202      	str	r2, [sp, #8]
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	9100      	str	r1, [sp, #0]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	4632      	mov	r2, r6
 8007350:	4629      	mov	r1, r5
 8007352:	4620      	mov	r0, r4
 8007354:	f000 ff9e 	bl	8008294 <xTaskCreateStatic>
 8007358:	4603      	mov	r3, r0
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	e01c      	b.n	8007398 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685c      	ldr	r4, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800736a:	b29e      	uxth	r6, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff ff98 	bl	80072a8 <makeFreeRtosPriority>
 8007378:	4602      	mov	r2, r0
 800737a:	f107 030c 	add.w	r3, r7, #12
 800737e:	9301      	str	r3, [sp, #4]
 8007380:	9200      	str	r2, [sp, #0]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	4632      	mov	r2, r6
 8007386:	4629      	mov	r1, r5
 8007388:	4620      	mov	r0, r4
 800738a:	f000 ffe0 	bl	800834e <xTaskCreate>
 800738e:	4603      	mov	r3, r0
 8007390:	2b01      	cmp	r3, #1
 8007392:	d001      	beq.n	8007398 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	e000      	b.n	800739a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007398:	68fb      	ldr	r3, [r7, #12]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <osDelay+0x16>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	e000      	b.n	80073ba <osDelay+0x18>
 80073b8:	2301      	movs	r3, #1
 80073ba:	4618      	mov	r0, r3
 80073bc:	f001 f91c 	bl	80085f8 <vTaskDelay>
  
  return osOK;
 80073c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80073ca:	b590      	push	{r4, r7, lr}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af02      	add	r7, sp, #8
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d011      	beq.n	8007400 <osMessageCreate+0x36>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00d      	beq.n	8007400 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6818      	ldr	r0, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6859      	ldr	r1, [r3, #4]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2400      	movs	r4, #0
 80073f6:	9400      	str	r4, [sp, #0]
 80073f8:	f000 f9e0 	bl	80077bc <xQueueGenericCreateStatic>
 80073fc:	4603      	mov	r3, r0
 80073fe:	e008      	b.n	8007412 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6818      	ldr	r0, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	4619      	mov	r1, r3
 800740c:	f000 fa4e 	bl	80078ac <xQueueGenericCreate>
 8007410:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	bd90      	pop	{r4, r7, pc}
	...

0800741c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007428:	2300      	movs	r3, #0
 800742a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <osMessagePut+0x1e>
    ticks = 1;
 8007436:	2301      	movs	r3, #1
 8007438:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800743a:	f7ff ff4d 	bl	80072d8 <inHandlerMode>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d018      	beq.n	8007476 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007444:	f107 0210 	add.w	r2, r7, #16
 8007448:	f107 0108 	add.w	r1, r7, #8
 800744c:	2300      	movs	r3, #0
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 fbb2 	bl	8007bb8 <xQueueGenericSendFromISR>
 8007454:	4603      	mov	r3, r0
 8007456:	2b01      	cmp	r3, #1
 8007458:	d001      	beq.n	800745e <osMessagePut+0x42>
      return osErrorOS;
 800745a:	23ff      	movs	r3, #255	; 0xff
 800745c:	e018      	b.n	8007490 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d014      	beq.n	800748e <osMessagePut+0x72>
 8007464:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <osMessagePut+0x7c>)
 8007466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	e00b      	b.n	800748e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007476:	f107 0108 	add.w	r1, r7, #8
 800747a:	2300      	movs	r3, #0
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 fa74 	bl	800796c <xQueueGenericSend>
 8007484:	4603      	mov	r3, r0
 8007486:	2b01      	cmp	r3, #1
 8007488:	d001      	beq.n	800748e <osMessagePut+0x72>
      return osErrorOS;
 800748a:	23ff      	movs	r3, #255	; 0xff
 800748c:	e000      	b.n	8007490 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	e000ed04 	.word	0xe000ed04

0800749c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800749c:	b590      	push	{r4, r7, lr}
 800749e:	b08b      	sub	sp, #44	; 0x2c
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10a      	bne.n	80074cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80074b6:	2380      	movs	r3, #128	; 0x80
 80074b8:	617b      	str	r3, [r7, #20]
    return event;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	461c      	mov	r4, r3
 80074be:	f107 0314 	add.w	r3, r7, #20
 80074c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80074c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80074ca:	e054      	b.n	8007576 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80074cc:	2300      	movs	r3, #0
 80074ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80074d0:	2300      	movs	r3, #0
 80074d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074da:	d103      	bne.n	80074e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80074dc:	f04f 33ff 	mov.w	r3, #4294967295
 80074e0:	627b      	str	r3, [r7, #36]	; 0x24
 80074e2:	e009      	b.n	80074f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d006      	beq.n	80074f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80074ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <osMessageGet+0x5c>
      ticks = 1;
 80074f4:	2301      	movs	r3, #1
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80074f8:	f7ff feee 	bl	80072d8 <inHandlerMode>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d01c      	beq.n	800753c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007502:	f107 0220 	add.w	r2, r7, #32
 8007506:	f107 0314 	add.w	r3, r7, #20
 800750a:	3304      	adds	r3, #4
 800750c:	4619      	mov	r1, r3
 800750e:	68b8      	ldr	r0, [r7, #8]
 8007510:	f000 fd12 	bl	8007f38 <xQueueReceiveFromISR>
 8007514:	4603      	mov	r3, r0
 8007516:	2b01      	cmp	r3, #1
 8007518:	d102      	bne.n	8007520 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800751a:	2310      	movs	r3, #16
 800751c:	617b      	str	r3, [r7, #20]
 800751e:	e001      	b.n	8007524 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007520:	2300      	movs	r3, #0
 8007522:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d01d      	beq.n	8007566 <osMessageGet+0xca>
 800752a:	4b15      	ldr	r3, [pc, #84]	; (8007580 <osMessageGet+0xe4>)
 800752c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	e014      	b.n	8007566 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800753c:	f107 0314 	add.w	r3, r7, #20
 8007540:	3304      	adds	r3, #4
 8007542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007544:	4619      	mov	r1, r3
 8007546:	68b8      	ldr	r0, [r7, #8]
 8007548:	f000 fbe6 	bl	8007d18 <xQueueReceive>
 800754c:	4603      	mov	r3, r0
 800754e:	2b01      	cmp	r3, #1
 8007550:	d102      	bne.n	8007558 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007552:	2310      	movs	r3, #16
 8007554:	617b      	str	r3, [r7, #20]
 8007556:	e006      	b.n	8007566 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <osMessageGet+0xc6>
 800755e:	2300      	movs	r3, #0
 8007560:	e000      	b.n	8007564 <osMessageGet+0xc8>
 8007562:	2340      	movs	r3, #64	; 0x40
 8007564:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	461c      	mov	r4, r3
 800756a:	f107 0314 	add.w	r3, r7, #20
 800756e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007572:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	372c      	adds	r7, #44	; 0x2c
 800757a:	46bd      	mov	sp, r7
 800757c:	bd90      	pop	{r4, r7, pc}
 800757e:	bf00      	nop
 8007580:	e000ed04 	.word	0xe000ed04

08007584 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f103 0208 	add.w	r2, r3, #8
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f04f 32ff 	mov.w	r2, #4294967295
 800759c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f103 0208 	add.w	r2, r3, #8
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f103 0208 	add.w	r2, r3, #8
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075d2:	bf00      	nop
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075de:	b480      	push	{r7}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	1c5a      	adds	r2, r3, #1
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	601a      	str	r2, [r3, #0]
}
 800761a:	bf00      	nop
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007626:	b480      	push	{r7}
 8007628:	b085      	sub	sp, #20
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763c:	d103      	bne.n	8007646 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	e00c      	b.n	8007660 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3308      	adds	r3, #8
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	e002      	b.n	8007654 <vListInsert+0x2e>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	429a      	cmp	r2, r3
 800765e:	d2f6      	bcs.n	800764e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	601a      	str	r2, [r3, #0]
}
 800768c:	bf00      	nop
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6892      	ldr	r2, [r2, #8]
 80076ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	6852      	ldr	r2, [r2, #4]
 80076b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d103      	bne.n	80076cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	1e5a      	subs	r2, r3, #1
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10a      	bne.n	8007716 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007712:	bf00      	nop
 8007714:	e7fe      	b.n	8007714 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007716:	f001 ff05 	bl	8009524 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007722:	68f9      	ldr	r1, [r7, #12]
 8007724:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007726:	fb01 f303 	mul.w	r3, r1, r3
 800772a:	441a      	add	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007746:	3b01      	subs	r3, #1
 8007748:	68f9      	ldr	r1, [r7, #12]
 800774a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800774c:	fb01 f303 	mul.w	r3, r1, r3
 8007750:	441a      	add	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	22ff      	movs	r2, #255	; 0xff
 800775a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	22ff      	movs	r2, #255	; 0xff
 8007762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d114      	bne.n	8007796 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d01a      	beq.n	80077aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	3310      	adds	r3, #16
 8007778:	4618      	mov	r0, r3
 800777a:	f001 fac9 	bl	8008d10 <xTaskRemoveFromEventList>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d012      	beq.n	80077aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007784:	4b0c      	ldr	r3, [pc, #48]	; (80077b8 <xQueueGenericReset+0xcc>)
 8007786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	e009      	b.n	80077aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3310      	adds	r3, #16
 800779a:	4618      	mov	r0, r3
 800779c:	f7ff fef2 	bl	8007584 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	3324      	adds	r3, #36	; 0x24
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7ff feed 	bl	8007584 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80077aa:	f001 feeb 	bl	8009584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80077ae:	2301      	movs	r3, #1
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	e000ed04 	.word	0xe000ed04

080077bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b08e      	sub	sp, #56	; 0x38
 80077c0:	af02      	add	r7, sp, #8
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10a      	bne.n	80077e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077e2:	bf00      	nop
 80077e4:	e7fe      	b.n	80077e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <xQueueGenericCreateStatic+0x52>
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <xQueueGenericCreateStatic+0x56>
 800780e:	2301      	movs	r3, #1
 8007810:	e000      	b.n	8007814 <xQueueGenericCreateStatic+0x58>
 8007812:	2300      	movs	r3, #0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10a      	bne.n	800782e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781c:	f383 8811 	msr	BASEPRI, r3
 8007820:	f3bf 8f6f 	isb	sy
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	623b      	str	r3, [r7, #32]
}
 800782a:	bf00      	nop
 800782c:	e7fe      	b.n	800782c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d102      	bne.n	800783a <xQueueGenericCreateStatic+0x7e>
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <xQueueGenericCreateStatic+0x82>
 800783a:	2301      	movs	r3, #1
 800783c:	e000      	b.n	8007840 <xQueueGenericCreateStatic+0x84>
 800783e:	2300      	movs	r3, #0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10a      	bne.n	800785a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	61fb      	str	r3, [r7, #28]
}
 8007856:	bf00      	nop
 8007858:	e7fe      	b.n	8007858 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800785a:	2348      	movs	r3, #72	; 0x48
 800785c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2b48      	cmp	r3, #72	; 0x48
 8007862:	d00a      	beq.n	800787a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	61bb      	str	r3, [r7, #24]
}
 8007876:	bf00      	nop
 8007878:	e7fe      	b.n	8007878 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800787a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00d      	beq.n	80078a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800788e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	4613      	mov	r3, r2
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	68b9      	ldr	r1, [r7, #8]
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 f83f 	bl	8007920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3730      	adds	r7, #48	; 0x30
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b08a      	sub	sp, #40	; 0x28
 80078b0:	af02      	add	r7, sp, #8
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	4613      	mov	r3, r2
 80078b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10a      	bne.n	80078d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	613b      	str	r3, [r7, #16]
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	fb02 f303 	mul.w	r3, r2, r3
 80078de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	3348      	adds	r3, #72	; 0x48
 80078e4:	4618      	mov	r0, r3
 80078e6:	f001 ff9f 	bl	8009828 <pvPortMalloc>
 80078ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d011      	beq.n	8007916 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	3348      	adds	r3, #72	; 0x48
 80078fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007904:	79fa      	ldrb	r2, [r7, #7]
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	4613      	mov	r3, r2
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	68b9      	ldr	r1, [r7, #8]
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f805 	bl	8007920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007916:	69bb      	ldr	r3, [r7, #24]
	}
 8007918:	4618      	mov	r0, r3
 800791a:	3720      	adds	r7, #32
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d103      	bne.n	800793c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	69ba      	ldr	r2, [r7, #24]
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	e002      	b.n	8007942 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800794e:	2101      	movs	r1, #1
 8007950:	69b8      	ldr	r0, [r7, #24]
 8007952:	f7ff fecb 	bl	80076ec <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8007956:	78fb      	ldrb	r3, [r7, #3]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	68f9      	ldr	r1, [r7, #12]
 800795c:	2073      	movs	r0, #115	; 0x73
 800795e:	f003 f833 	bl	800a9c8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8007962:	bf00      	nop
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b090      	sub	sp, #64	; 0x40
 8007970:	af02      	add	r7, sp, #8
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800797a:	2300      	movs	r3, #0
 800797c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10a      	bne.n	800799e <xQueueGenericSend+0x32>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800799a:	bf00      	nop
 800799c:	e7fe      	b.n	800799c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d103      	bne.n	80079ac <xQueueGenericSend+0x40>
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <xQueueGenericSend+0x44>
 80079ac:	2301      	movs	r3, #1
 80079ae:	e000      	b.n	80079b2 <xQueueGenericSend+0x46>
 80079b0:	2300      	movs	r3, #0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10a      	bne.n	80079cc <xQueueGenericSend+0x60>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079c8:	bf00      	nop
 80079ca:	e7fe      	b.n	80079ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d103      	bne.n	80079da <xQueueGenericSend+0x6e>
 80079d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d101      	bne.n	80079de <xQueueGenericSend+0x72>
 80079da:	2301      	movs	r3, #1
 80079dc:	e000      	b.n	80079e0 <xQueueGenericSend+0x74>
 80079de:	2300      	movs	r3, #0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <xQueueGenericSend+0x8e>
	__asm volatile
 80079e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	623b      	str	r3, [r7, #32]
}
 80079f6:	bf00      	nop
 80079f8:	e7fe      	b.n	80079f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079fa:	f001 fb49 	bl	8009090 <xTaskGetSchedulerState>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d102      	bne.n	8007a0a <xQueueGenericSend+0x9e>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <xQueueGenericSend+0xa2>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e000      	b.n	8007a10 <xQueueGenericSend+0xa4>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10a      	bne.n	8007a2a <xQueueGenericSend+0xbe>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	61fb      	str	r3, [r7, #28]
}
 8007a26:	bf00      	nop
 8007a28:	e7fe      	b.n	8007a28 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a2a:	f001 fd7b 	bl	8009524 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d302      	bcc.n	8007a40 <xQueueGenericSend+0xd4>
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d136      	bne.n	8007aae <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	4618      	mov	r0, r3
 8007a44:	f003 fd56 	bl	800b4f4 <SEGGER_SYSVIEW_ShrinkId>
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	460b      	mov	r3, r1
 8007a52:	4601      	mov	r1, r0
 8007a54:	205a      	movs	r0, #90	; 0x5a
 8007a56:	f003 f82d 	bl	800aab4 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	68b9      	ldr	r1, [r7, #8]
 8007a5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a60:	f000 fb08 	bl	8008074 <prvCopyDataToQueue>
 8007a64:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d010      	beq.n	8007a90 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	3324      	adds	r3, #36	; 0x24
 8007a72:	4618      	mov	r0, r3
 8007a74:	f001 f94c 	bl	8008d10 <xTaskRemoveFromEventList>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d013      	beq.n	8007aa6 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a7e:	4b4d      	ldr	r3, [pc, #308]	; (8007bb4 <xQueueGenericSend+0x248>)
 8007a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	e00a      	b.n	8007aa6 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d007      	beq.n	8007aa6 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a96:	4b47      	ldr	r3, [pc, #284]	; (8007bb4 <xQueueGenericSend+0x248>)
 8007a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007aa6:	f001 fd6d 	bl	8009584 <vPortExitCritical>
				return pdPASS;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e07d      	b.n	8007baa <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d110      	bne.n	8007ad6 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ab4:	f001 fd66 	bl	8009584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aba:	4618      	mov	r0, r3
 8007abc:	f003 fd1a 	bl	800b4f4 <SEGGER_SYSVIEW_ShrinkId>
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	4601      	mov	r1, r0
 8007acc:	205a      	movs	r0, #90	; 0x5a
 8007ace:	f002 fff1 	bl	800aab4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e069      	b.n	8007baa <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d106      	bne.n	8007aea <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007adc:	f107 0314 	add.w	r3, r7, #20
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f001 f97b 	bl	8008ddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007aea:	f001 fd4b 	bl	8009584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007aee:	f000 ff05 	bl	80088fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007af2:	f001 fd17 	bl	8009524 <vPortEnterCritical>
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007afc:	b25b      	sxtb	r3, r3
 8007afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b02:	d103      	bne.n	8007b0c <xQueueGenericSend+0x1a0>
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b12:	b25b      	sxtb	r3, r3
 8007b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b18:	d103      	bne.n	8007b22 <xQueueGenericSend+0x1b6>
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b22:	f001 fd2f 	bl	8009584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b26:	1d3a      	adds	r2, r7, #4
 8007b28:	f107 0314 	add.w	r3, r7, #20
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f001 f96a 	bl	8008e08 <xTaskCheckForTimeOut>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d124      	bne.n	8007b84 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b3c:	f000 fb92 	bl	8008264 <prvIsQueueFull>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d018      	beq.n	8007b78 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	3310      	adds	r3, #16
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 f8ba 	bl	8008cc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b56:	f000 fb1d 	bl	8008194 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b5a:	f000 fedd 	bl	8008918 <xTaskResumeAll>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f47f af62 	bne.w	8007a2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007b66:	4b13      	ldr	r3, [pc, #76]	; (8007bb4 <xQueueGenericSend+0x248>)
 8007b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	e758      	b.n	8007a2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b7a:	f000 fb0b 	bl	8008194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b7e:	f000 fecb 	bl	8008918 <xTaskResumeAll>
 8007b82:	e752      	b.n	8007a2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b86:	f000 fb05 	bl	8008194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b8a:	f000 fec5 	bl	8008918 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	4618      	mov	r0, r3
 8007b92:	f003 fcaf 	bl	800b4f4 <SEGGER_SYSVIEW_ShrinkId>
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	6879      	ldr	r1, [r7, #4]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4601      	mov	r1, r0
 8007ba2:	205a      	movs	r0, #90	; 0x5a
 8007ba4:	f002 ff86 	bl	800aab4 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8007ba8:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3738      	adds	r7, #56	; 0x38
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	e000ed04 	.word	0xe000ed04

08007bb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b090      	sub	sp, #64	; 0x40
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10a      	bne.n	8007be6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007be2:	bf00      	nop
 8007be4:	e7fe      	b.n	8007be4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d103      	bne.n	8007bf4 <xQueueGenericSendFromISR+0x3c>
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <xQueueGenericSendFromISR+0x40>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e000      	b.n	8007bfa <xQueueGenericSendFromISR+0x42>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10a      	bne.n	8007c14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c10:	bf00      	nop
 8007c12:	e7fe      	b.n	8007c12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d103      	bne.n	8007c22 <xQueueGenericSendFromISR+0x6a>
 8007c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d101      	bne.n	8007c26 <xQueueGenericSendFromISR+0x6e>
 8007c22:	2301      	movs	r3, #1
 8007c24:	e000      	b.n	8007c28 <xQueueGenericSendFromISR+0x70>
 8007c26:	2300      	movs	r3, #0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10a      	bne.n	8007c42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	623b      	str	r3, [r7, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c42:	f001 fd59 	bl	80096f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c46:	f3ef 8211 	mrs	r2, BASEPRI
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	61fa      	str	r2, [r7, #28]
 8007c5c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007c5e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c60:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d302      	bcc.n	8007c74 <xQueueGenericSendFromISR+0xbc>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d139      	bne.n	8007ce8 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c82:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8007c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c86:	4618      	mov	r0, r3
 8007c88:	f003 fc34 	bl	800b4f4 <SEGGER_SYSVIEW_ShrinkId>
 8007c8c:	4601      	mov	r1, r0
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	461a      	mov	r2, r3
 8007c92:	2060      	movs	r0, #96	; 0x60
 8007c94:	f002 fe3e 	bl	800a914 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	68b9      	ldr	r1, [r7, #8]
 8007c9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c9e:	f000 f9e9 	bl	8008074 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ca2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007caa:	d112      	bne.n	8007cd2 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d016      	beq.n	8007ce2 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	3324      	adds	r3, #36	; 0x24
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f001 f829 	bl	8008d10 <xTaskRemoveFromEventList>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00e      	beq.n	8007ce2 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00b      	beq.n	8007ce2 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	e007      	b.n	8007ce2 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007cd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	b25a      	sxtb	r2, r3
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007ce6:	e00b      	b.n	8007d00 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cea:	4618      	mov	r0, r3
 8007cec:	f003 fc02 	bl	800b4f4 <SEGGER_SYSVIEW_ShrinkId>
 8007cf0:	4601      	mov	r1, r0
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	2060      	movs	r0, #96	; 0x60
 8007cf8:	f002 fe0c 	bl	800a914 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d02:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3740      	adds	r7, #64	; 0x40
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d18:	b590      	push	{r4, r7, lr}
 8007d1a:	b08f      	sub	sp, #60	; 0x3c
 8007d1c:	af02      	add	r7, sp, #8
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d24:	2300      	movs	r3, #0
 8007d26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10a      	bne.n	8007d48 <xQueueReceive+0x30>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	623b      	str	r3, [r7, #32]
}
 8007d44:	bf00      	nop
 8007d46:	e7fe      	b.n	8007d46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d103      	bne.n	8007d56 <xQueueReceive+0x3e>
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <xQueueReceive+0x42>
 8007d56:	2301      	movs	r3, #1
 8007d58:	e000      	b.n	8007d5c <xQueueReceive+0x44>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10a      	bne.n	8007d76 <xQueueReceive+0x5e>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	61fb      	str	r3, [r7, #28]
}
 8007d72:	bf00      	nop
 8007d74:	e7fe      	b.n	8007d74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d76:	f001 f98b 	bl	8009090 <xTaskGetSchedulerState>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d102      	bne.n	8007d86 <xQueueReceive+0x6e>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <xQueueReceive+0x72>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e000      	b.n	8007d8c <xQueueReceive+0x74>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10a      	bne.n	8007da6 <xQueueReceive+0x8e>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	61bb      	str	r3, [r7, #24]
}
 8007da2:	bf00      	nop
 8007da4:	e7fe      	b.n	8007da4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007da6:	f001 fbbd 	bl	8009524 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d02f      	beq.n	8007e16 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007db6:	68b9      	ldr	r1, [r7, #8]
 8007db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dba:	f000 f9c5 	bl	8008148 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8007dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f003 fb97 	bl	800b4f4 <SEGGER_SYSVIEW_ShrinkId>
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	2000      	movs	r0, #0
 8007dca:	f003 fb93 	bl	800b4f4 <SEGGER_SYSVIEW_ShrinkId>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	9100      	str	r1, [sp, #0]
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	205c      	movs	r0, #92	; 0x5c
 8007dda:	f002 fe6b 	bl	800aab4 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de0:	1e5a      	subs	r2, r3, #1
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00f      	beq.n	8007e0e <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df0:	3310      	adds	r3, #16
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 ff8c 	bl	8008d10 <xTaskRemoveFromEventList>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d007      	beq.n	8007e0e <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007dfe:	4b4d      	ldr	r3, [pc, #308]	; (8007f34 <xQueueReceive+0x21c>)
 8007e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e0e:	f001 fbb9 	bl	8009584 <vPortExitCritical>
				return pdPASS;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e08a      	b.n	8007f2c <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d113      	bne.n	8007e44 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e1c:	f001 fbb2 	bl	8009584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e22:	4618      	mov	r0, r3
 8007e24:	f003 fb66 	bl	800b4f4 <SEGGER_SYSVIEW_ShrinkId>
 8007e28:	4604      	mov	r4, r0
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	f003 fb62 	bl	800b4f4 <SEGGER_SYSVIEW_ShrinkId>
 8007e30:	4602      	mov	r2, r0
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2101      	movs	r1, #1
 8007e36:	9100      	str	r1, [sp, #0]
 8007e38:	4621      	mov	r1, r4
 8007e3a:	205c      	movs	r0, #92	; 0x5c
 8007e3c:	f002 fe3a 	bl	800aab4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8007e40:	2300      	movs	r3, #0
 8007e42:	e073      	b.n	8007f2c <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e4a:	f107 0310 	add.w	r3, r7, #16
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 ffc4 	bl	8008ddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e54:	2301      	movs	r3, #1
 8007e56:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e58:	f001 fb94 	bl	8009584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e5c:	f000 fd4e 	bl	80088fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e60:	f001 fb60 	bl	8009524 <vPortEnterCritical>
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e6a:	b25b      	sxtb	r3, r3
 8007e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e70:	d103      	bne.n	8007e7a <xQueueReceive+0x162>
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e80:	b25b      	sxtb	r3, r3
 8007e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e86:	d103      	bne.n	8007e90 <xQueueReceive+0x178>
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e90:	f001 fb78 	bl	8009584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e94:	1d3a      	adds	r2, r7, #4
 8007e96:	f107 0310 	add.w	r3, r7, #16
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 ffb3 	bl	8008e08 <xTaskCheckForTimeOut>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d124      	bne.n	8007ef2 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eaa:	f000 f9c5 	bl	8008238 <prvIsQueueEmpty>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d018      	beq.n	8007ee6 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb6:	3324      	adds	r3, #36	; 0x24
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	4611      	mov	r1, r2
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 ff03 	bl	8008cc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ec4:	f000 f966 	bl	8008194 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ec8:	f000 fd26 	bl	8008918 <xTaskResumeAll>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f47f af69 	bne.w	8007da6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007ed4:	4b17      	ldr	r3, [pc, #92]	; (8007f34 <xQueueReceive+0x21c>)
 8007ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	e75f      	b.n	8007da6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ee8:	f000 f954 	bl	8008194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007eec:	f000 fd14 	bl	8008918 <xTaskResumeAll>
 8007ef0:	e759      	b.n	8007da6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef4:	f000 f94e 	bl	8008194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ef8:	f000 fd0e 	bl	8008918 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007efe:	f000 f99b 	bl	8008238 <prvIsQueueEmpty>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f43f af4e 	beq.w	8007da6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f003 faf1 	bl	800b4f4 <SEGGER_SYSVIEW_ShrinkId>
 8007f12:	4604      	mov	r4, r0
 8007f14:	2000      	movs	r0, #0
 8007f16:	f003 faed 	bl	800b4f4 <SEGGER_SYSVIEW_ShrinkId>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2101      	movs	r1, #1
 8007f20:	9100      	str	r1, [sp, #0]
 8007f22:	4621      	mov	r1, r4
 8007f24:	205c      	movs	r0, #92	; 0x5c
 8007f26:	f002 fdc5 	bl	800aab4 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8007f2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3734      	adds	r7, #52	; 0x34
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd90      	pop	{r4, r7, pc}
 8007f34:	e000ed04 	.word	0xe000ed04

08007f38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f38:	b590      	push	{r4, r7, lr}
 8007f3a:	b08f      	sub	sp, #60	; 0x3c
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10a      	bne.n	8007f64 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	623b      	str	r3, [r7, #32]
}
 8007f60:	bf00      	nop
 8007f62:	e7fe      	b.n	8007f62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d103      	bne.n	8007f72 <xQueueReceiveFromISR+0x3a>
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <xQueueReceiveFromISR+0x3e>
 8007f72:	2301      	movs	r3, #1
 8007f74:	e000      	b.n	8007f78 <xQueueReceiveFromISR+0x40>
 8007f76:	2300      	movs	r3, #0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	61fb      	str	r3, [r7, #28]
}
 8007f8e:	bf00      	nop
 8007f90:	e7fe      	b.n	8007f90 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f92:	f001 fbb1 	bl	80096f8 <vPortValidateInterruptPriority>
	__asm volatile
 8007f96:	f3ef 8211 	mrs	r2, BASEPRI
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	61ba      	str	r2, [r7, #24]
 8007fac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007fae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d03e      	beq.n	800803c <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f003 fa92 	bl	800b4f4 <SEGGER_SYSVIEW_ShrinkId>
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f003 fa8d 	bl	800b4f4 <SEGGER_SYSVIEW_ShrinkId>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4621      	mov	r1, r4
 8007fe0:	2062      	movs	r0, #98	; 0x62
 8007fe2:	f002 fcf1 	bl	800a9c8 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fe6:	68b9      	ldr	r1, [r7, #8]
 8007fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fea:	f000 f8ad 	bl	8008148 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff0:	1e5a      	subs	r2, r3, #1
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007ff6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffe:	d112      	bne.n	8008026 <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d016      	beq.n	8008036 <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800a:	3310      	adds	r3, #16
 800800c:	4618      	mov	r0, r3
 800800e:	f000 fe7f 	bl	8008d10 <xTaskRemoveFromEventList>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00e      	beq.n	8008036 <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00b      	beq.n	8008036 <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	e007      	b.n	8008036 <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008026:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800802a:	3301      	adds	r3, #1
 800802c:	b2db      	uxtb	r3, r3
 800802e:	b25a      	sxtb	r2, r3
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008036:	2301      	movs	r3, #1
 8008038:	637b      	str	r3, [r7, #52]	; 0x34
 800803a:	e010      	b.n	800805e <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 800803c:	2300      	movs	r3, #0
 800803e:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	4618      	mov	r0, r3
 8008044:	f003 fa56 	bl	800b4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008048:	4604      	mov	r4, r0
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	4618      	mov	r0, r3
 800804e:	f003 fa51 	bl	800b4f4 <SEGGER_SYSVIEW_ShrinkId>
 8008052:	4602      	mov	r2, r0
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4621      	mov	r1, r4
 8008058:	2062      	movs	r0, #98	; 0x62
 800805a:	f002 fcb5 	bl	800a9c8 <SEGGER_SYSVIEW_RecordU32x3>
 800805e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008060:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	f383 8811 	msr	BASEPRI, r3
}
 8008068:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800806a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800806c:	4618      	mov	r0, r3
 800806e:	373c      	adds	r7, #60	; 0x3c
 8008070:	46bd      	mov	sp, r7
 8008072:	bd90      	pop	{r4, r7, pc}

08008074 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008080:	2300      	movs	r3, #0
 8008082:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008088:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10d      	bne.n	80080ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d14d      	bne.n	8008136 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	4618      	mov	r0, r3
 80080a0:	f001 f814 	bl	80090cc <xTaskPriorityDisinherit>
 80080a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	609a      	str	r2, [r3, #8]
 80080ac:	e043      	b.n	8008136 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d119      	bne.n	80080e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6858      	ldr	r0, [r3, #4]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080bc:	461a      	mov	r2, r3
 80080be:	68b9      	ldr	r1, [r7, #8]
 80080c0:	f003 feae 	bl	800be20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080cc:	441a      	add	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d32b      	bcc.n	8008136 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	605a      	str	r2, [r3, #4]
 80080e6:	e026      	b.n	8008136 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	68d8      	ldr	r0, [r3, #12]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f0:	461a      	mov	r2, r3
 80080f2:	68b9      	ldr	r1, [r7, #8]
 80080f4:	f003 fe94 	bl	800be20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	68da      	ldr	r2, [r3, #12]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008100:	425b      	negs	r3, r3
 8008102:	441a      	add	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	68da      	ldr	r2, [r3, #12]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	429a      	cmp	r2, r3
 8008112:	d207      	bcs.n	8008124 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811c:	425b      	negs	r3, r3
 800811e:	441a      	add	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b02      	cmp	r3, #2
 8008128:	d105      	bne.n	8008136 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	3b01      	subs	r3, #1
 8008134:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800813e:	697b      	ldr	r3, [r7, #20]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3718      	adds	r7, #24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	2b00      	cmp	r3, #0
 8008158:	d018      	beq.n	800818c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008162:	441a      	add	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	68da      	ldr	r2, [r3, #12]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	429a      	cmp	r2, r3
 8008172:	d303      	bcc.n	800817c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68d9      	ldr	r1, [r3, #12]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008184:	461a      	mov	r2, r3
 8008186:	6838      	ldr	r0, [r7, #0]
 8008188:	f003 fe4a 	bl	800be20 <memcpy>
	}
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800819c:	f001 f9c2 	bl	8009524 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081a8:	e011      	b.n	80081ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d012      	beq.n	80081d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	3324      	adds	r3, #36	; 0x24
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 fdaa 	bl	8008d10 <xTaskRemoveFromEventList>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80081c2:	f000 fe83 	bl	8008ecc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	dce9      	bgt.n	80081aa <prvUnlockQueue+0x16>
 80081d6:	e000      	b.n	80081da <prvUnlockQueue+0x46>
					break;
 80081d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	22ff      	movs	r2, #255	; 0xff
 80081de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80081e2:	f001 f9cf 	bl	8009584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081e6:	f001 f99d 	bl	8009524 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081f2:	e011      	b.n	8008218 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d012      	beq.n	8008222 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3310      	adds	r3, #16
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fd85 	bl	8008d10 <xTaskRemoveFromEventList>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800820c:	f000 fe5e 	bl	8008ecc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	3b01      	subs	r3, #1
 8008214:	b2db      	uxtb	r3, r3
 8008216:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800821c:	2b00      	cmp	r3, #0
 800821e:	dce9      	bgt.n	80081f4 <prvUnlockQueue+0x60>
 8008220:	e000      	b.n	8008224 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008222:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	22ff      	movs	r2, #255	; 0xff
 8008228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800822c:	f001 f9aa 	bl	8009584 <vPortExitCritical>
}
 8008230:	bf00      	nop
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008240:	f001 f970 	bl	8009524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008248:	2b00      	cmp	r3, #0
 800824a:	d102      	bne.n	8008252 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800824c:	2301      	movs	r3, #1
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	e001      	b.n	8008256 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008252:	2300      	movs	r3, #0
 8008254:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008256:	f001 f995 	bl	8009584 <vPortExitCritical>

	return xReturn;
 800825a:	68fb      	ldr	r3, [r7, #12]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800826c:	f001 f95a 	bl	8009524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008278:	429a      	cmp	r2, r3
 800827a:	d102      	bne.n	8008282 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800827c:	2301      	movs	r3, #1
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	e001      	b.n	8008286 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008286:	f001 f97d 	bl	8009584 <vPortExitCritical>

	return xReturn;
 800828a:	68fb      	ldr	r3, [r7, #12]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008294:	b580      	push	{r7, lr}
 8008296:	b08e      	sub	sp, #56	; 0x38
 8008298:	af04      	add	r7, sp, #16
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
 80082a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80082a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10a      	bne.n	80082be <xTaskCreateStatic+0x2a>
	__asm volatile
 80082a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	623b      	str	r3, [r7, #32]
}
 80082ba:	bf00      	nop
 80082bc:	e7fe      	b.n	80082bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80082be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10a      	bne.n	80082da <xTaskCreateStatic+0x46>
	__asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	61fb      	str	r3, [r7, #28]
}
 80082d6:	bf00      	nop
 80082d8:	e7fe      	b.n	80082d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80082da:	2354      	movs	r3, #84	; 0x54
 80082dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	2b54      	cmp	r3, #84	; 0x54
 80082e2:	d00a      	beq.n	80082fa <xTaskCreateStatic+0x66>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	61bb      	str	r3, [r7, #24]
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80082fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80082fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d01e      	beq.n	8008340 <xTaskCreateStatic+0xac>
 8008302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008304:	2b00      	cmp	r3, #0
 8008306:	d01b      	beq.n	8008340 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008310:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	2202      	movs	r2, #2
 8008316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800831a:	2300      	movs	r3, #0
 800831c:	9303      	str	r3, [sp, #12]
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	9302      	str	r3, [sp, #8]
 8008322:	f107 0314 	add.w	r3, r7, #20
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	68b9      	ldr	r1, [r7, #8]
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f000 f850 	bl	80083d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800833a:	f000 f8d5 	bl	80084e8 <prvAddNewTaskToReadyList>
 800833e:	e001      	b.n	8008344 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008340:	2300      	movs	r3, #0
 8008342:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008344:	697b      	ldr	r3, [r7, #20]
	}
 8008346:	4618      	mov	r0, r3
 8008348:	3728      	adds	r7, #40	; 0x28
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800834e:	b580      	push	{r7, lr}
 8008350:	b08c      	sub	sp, #48	; 0x30
 8008352:	af04      	add	r7, sp, #16
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	603b      	str	r3, [r7, #0]
 800835a:	4613      	mov	r3, r2
 800835c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800835e:	88fb      	ldrh	r3, [r7, #6]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4618      	mov	r0, r3
 8008364:	f001 fa60 	bl	8009828 <pvPortMalloc>
 8008368:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00e      	beq.n	800838e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008370:	2054      	movs	r0, #84	; 0x54
 8008372:	f001 fa59 	bl	8009828 <pvPortMalloc>
 8008376:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	631a      	str	r2, [r3, #48]	; 0x30
 8008384:	e005      	b.n	8008392 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008386:	6978      	ldr	r0, [r7, #20]
 8008388:	f001 fb1a 	bl	80099c0 <vPortFree>
 800838c:	e001      	b.n	8008392 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800838e:	2300      	movs	r3, #0
 8008390:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d017      	beq.n	80083c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083a0:	88fa      	ldrh	r2, [r7, #6]
 80083a2:	2300      	movs	r3, #0
 80083a4:	9303      	str	r3, [sp, #12]
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	9302      	str	r3, [sp, #8]
 80083aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ac:	9301      	str	r3, [sp, #4]
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	68b9      	ldr	r1, [r7, #8]
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 f80e 	bl	80083d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083bc:	69f8      	ldr	r0, [r7, #28]
 80083be:	f000 f893 	bl	80084e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083c2:	2301      	movs	r3, #1
 80083c4:	61bb      	str	r3, [r7, #24]
 80083c6:	e002      	b.n	80083ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083c8:	f04f 33ff 	mov.w	r3, #4294967295
 80083cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083ce:	69bb      	ldr	r3, [r7, #24]
	}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3720      	adds	r7, #32
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b088      	sub	sp, #32
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80083f0:	3b01      	subs	r3, #1
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	f023 0307 	bic.w	r3, r3, #7
 80083fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	f003 0307 	and.w	r3, r3, #7
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <prvInitialiseNewTask+0x48>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	617b      	str	r3, [r7, #20]
}
 800841c:	bf00      	nop
 800841e:	e7fe      	b.n	800841e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d01f      	beq.n	8008466 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008426:	2300      	movs	r3, #0
 8008428:	61fb      	str	r3, [r7, #28]
 800842a:	e012      	b.n	8008452 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	4413      	add	r3, r2
 8008432:	7819      	ldrb	r1, [r3, #0]
 8008434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	4413      	add	r3, r2
 800843a:	3334      	adds	r3, #52	; 0x34
 800843c:	460a      	mov	r2, r1
 800843e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	4413      	add	r3, r2
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d006      	beq.n	800845a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	3301      	adds	r3, #1
 8008450:	61fb      	str	r3, [r7, #28]
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	2b0f      	cmp	r3, #15
 8008456:	d9e9      	bls.n	800842c <prvInitialiseNewTask+0x54>
 8008458:	e000      	b.n	800845c <prvInitialiseNewTask+0x84>
			{
				break;
 800845a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800845c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008464:	e003      	b.n	800846e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	2200      	movs	r2, #0
 800846a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008470:	2b06      	cmp	r3, #6
 8008472:	d901      	bls.n	8008478 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008474:	2306      	movs	r3, #6
 8008476:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800847c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008482:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	2200      	movs	r2, #0
 8008488:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848c:	3304      	adds	r3, #4
 800848e:	4618      	mov	r0, r3
 8008490:	f7ff f898 	bl	80075c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	3318      	adds	r3, #24
 8008498:	4618      	mov	r0, r3
 800849a:	f7ff f893 	bl	80075c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	f1c3 0207 	rsb	r2, r3, #7
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	2200      	movs	r2, #0
 80084b8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	68f9      	ldr	r1, [r7, #12]
 80084c6:	69b8      	ldr	r0, [r7, #24]
 80084c8:	f000 ff02 	bl	80092d0 <pxPortInitialiseStack>
 80084cc:	4602      	mov	r2, r0
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084de:	bf00      	nop
 80084e0:	3720      	adds	r7, #32
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084e8:	b5b0      	push	{r4, r5, r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af02      	add	r7, sp, #8
 80084ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084f0:	f001 f818 	bl	8009524 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084f4:	4b39      	ldr	r3, [pc, #228]	; (80085dc <prvAddNewTaskToReadyList+0xf4>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3301      	adds	r3, #1
 80084fa:	4a38      	ldr	r2, [pc, #224]	; (80085dc <prvAddNewTaskToReadyList+0xf4>)
 80084fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80084fe:	4b38      	ldr	r3, [pc, #224]	; (80085e0 <prvAddNewTaskToReadyList+0xf8>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d109      	bne.n	800851a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008506:	4a36      	ldr	r2, [pc, #216]	; (80085e0 <prvAddNewTaskToReadyList+0xf8>)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800850c:	4b33      	ldr	r3, [pc, #204]	; (80085dc <prvAddNewTaskToReadyList+0xf4>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d110      	bne.n	8008536 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008514:	f000 fcfe 	bl	8008f14 <prvInitialiseTaskLists>
 8008518:	e00d      	b.n	8008536 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800851a:	4b32      	ldr	r3, [pc, #200]	; (80085e4 <prvAddNewTaskToReadyList+0xfc>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008522:	4b2f      	ldr	r3, [pc, #188]	; (80085e0 <prvAddNewTaskToReadyList+0xf8>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	429a      	cmp	r2, r3
 800852e:	d802      	bhi.n	8008536 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008530:	4a2b      	ldr	r2, [pc, #172]	; (80085e0 <prvAddNewTaskToReadyList+0xf8>)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008536:	4b2c      	ldr	r3, [pc, #176]	; (80085e8 <prvAddNewTaskToReadyList+0x100>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3301      	adds	r3, #1
 800853c:	4a2a      	ldr	r2, [pc, #168]	; (80085e8 <prvAddNewTaskToReadyList+0x100>)
 800853e:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d016      	beq.n	8008574 <prvAddNewTaskToReadyList+0x8c>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4618      	mov	r0, r3
 800854a:	f002 fea7 	bl	800b29c <SEGGER_SYSVIEW_OnTaskCreate>
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855e:	461d      	mov	r5, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	461c      	mov	r4, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856a:	1ae3      	subs	r3, r4, r3
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	462b      	mov	r3, r5
 8008570:	f001 fbf4 	bl	8009d5c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4618      	mov	r0, r3
 8008578:	f002 ff18 	bl	800b3ac <SEGGER_SYSVIEW_OnTaskStartReady>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	2201      	movs	r2, #1
 8008582:	409a      	lsls	r2, r3
 8008584:	4b19      	ldr	r3, [pc, #100]	; (80085ec <prvAddNewTaskToReadyList+0x104>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4313      	orrs	r3, r2
 800858a:	4a18      	ldr	r2, [pc, #96]	; (80085ec <prvAddNewTaskToReadyList+0x104>)
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4a15      	ldr	r2, [pc, #84]	; (80085f0 <prvAddNewTaskToReadyList+0x108>)
 800859c:	441a      	add	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	3304      	adds	r3, #4
 80085a2:	4619      	mov	r1, r3
 80085a4:	4610      	mov	r0, r2
 80085a6:	f7ff f81a 	bl	80075de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085aa:	f000 ffeb 	bl	8009584 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80085ae:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <prvAddNewTaskToReadyList+0xfc>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00e      	beq.n	80085d4 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085b6:	4b0a      	ldr	r3, [pc, #40]	; (80085e0 <prvAddNewTaskToReadyList+0xf8>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d207      	bcs.n	80085d4 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80085c4:	4b0b      	ldr	r3, [pc, #44]	; (80085f4 <prvAddNewTaskToReadyList+0x10c>)
 80085c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085d4:	bf00      	nop
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bdb0      	pop	{r4, r5, r7, pc}
 80085dc:	20000478 	.word	0x20000478
 80085e0:	20000378 	.word	0x20000378
 80085e4:	20000484 	.word	0x20000484
 80085e8:	20000494 	.word	0x20000494
 80085ec:	20000480 	.word	0x20000480
 80085f0:	2000037c 	.word	0x2000037c
 80085f4:	e000ed04 	.word	0xe000ed04

080085f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008600:	2300      	movs	r3, #0
 8008602:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d01b      	beq.n	8008642 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800860a:	4b15      	ldr	r3, [pc, #84]	; (8008660 <vTaskDelay+0x68>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00a      	beq.n	8008628 <vTaskDelay+0x30>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	60bb      	str	r3, [r7, #8]
}
 8008624:	bf00      	nop
 8008626:	e7fe      	b.n	8008626 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008628:	f000 f968 	bl	80088fc <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800862c:	6879      	ldr	r1, [r7, #4]
 800862e:	2023      	movs	r0, #35	; 0x23
 8008630:	f002 f934 	bl	800a89c <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008634:	2100      	movs	r1, #0
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fdd2 	bl	80091e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800863c:	f000 f96c 	bl	8008918 <xTaskResumeAll>
 8008640:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d107      	bne.n	8008658 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8008648:	4b06      	ldr	r3, [pc, #24]	; (8008664 <vTaskDelay+0x6c>)
 800864a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008658:	bf00      	nop
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	200004a0 	.word	0x200004a0
 8008664:	e000ed04 	.word	0xe000ed04

08008668 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8008670:	f000 ff58 	bl	8009524 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d102      	bne.n	8008680 <uxTaskPriorityGet+0x18>
 800867a:	4b07      	ldr	r3, [pc, #28]	; (8008698 <uxTaskPriorityGet+0x30>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	e000      	b.n	8008682 <uxTaskPriorityGet+0x1a>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008688:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 800868a:	f000 ff7b 	bl	8009584 <vPortExitCritical>

		return uxReturn;
 800868e:	68bb      	ldr	r3, [r7, #8]
	}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	20000378 	.word	0x20000378

0800869c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08a      	sub	sp, #40	; 0x28
 80086a0:	af02      	add	r7, sp, #8
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80086a6:	2300      	movs	r3, #0
 80086a8:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2b06      	cmp	r3, #6
 80086ae:	d90a      	bls.n	80086c6 <vTaskPrioritySet+0x2a>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	60fb      	str	r3, [r7, #12]
}
 80086c2:	bf00      	nop
 80086c4:	e7fe      	b.n	80086c4 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	2b06      	cmp	r3, #6
 80086ca:	d901      	bls.n	80086d0 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086cc:	2306      	movs	r3, #6
 80086ce:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80086d0:	f000 ff28 	bl	8009524 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d102      	bne.n	80086e0 <vTaskPrioritySet+0x44>
 80086da:	4b4c      	ldr	r3, [pc, #304]	; (800880c <vTaskPrioritySet+0x170>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	e000      	b.n	80086e2 <vTaskPrioritySet+0x46>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f002 ff04 	bl	800b4f4 <SEGGER_SYSVIEW_ShrinkId>
 80086ec:	4603      	mov	r3, r0
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	4619      	mov	r1, r3
 80086f2:	2028      	movs	r0, #40	; 0x28
 80086f4:	f002 f90e 	bl	800a914 <SEGGER_SYSVIEW_RecordU32x2>
 80086f8:	69b8      	ldr	r0, [r7, #24]
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008704:	461a      	mov	r2, r3
 8008706:	2300      	movs	r3, #0
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	4613      	mov	r3, r2
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	f001 fb8d 	bl	8009e2c <SYSVIEW_UpdateTask>

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008716:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d06f      	beq.n	8008800 <vTaskPrioritySet+0x164>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	429a      	cmp	r2, r3
 8008726:	d90d      	bls.n	8008744 <vTaskPrioritySet+0xa8>
				{
					if( pxTCB != pxCurrentTCB )
 8008728:	4b38      	ldr	r3, [pc, #224]	; (800880c <vTaskPrioritySet+0x170>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	69ba      	ldr	r2, [r7, #24]
 800872e:	429a      	cmp	r2, r3
 8008730:	d00f      	beq.n	8008752 <vTaskPrioritySet+0xb6>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8008732:	4b36      	ldr	r3, [pc, #216]	; (800880c <vTaskPrioritySet+0x170>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008738:	683a      	ldr	r2, [r7, #0]
 800873a:	429a      	cmp	r2, r3
 800873c:	d309      	bcc.n	8008752 <vTaskPrioritySet+0xb6>
						{
							xYieldRequired = pdTRUE;
 800873e:	2301      	movs	r3, #1
 8008740:	61fb      	str	r3, [r7, #28]
 8008742:	e006      	b.n	8008752 <vTaskPrioritySet+0xb6>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8008744:	4b31      	ldr	r3, [pc, #196]	; (800880c <vTaskPrioritySet+0x170>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	429a      	cmp	r2, r3
 800874c:	d101      	bne.n	8008752 <vTaskPrioritySet+0xb6>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800874e:	2301      	movs	r3, #1
 8008750:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008756:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008760:	429a      	cmp	r2, r3
 8008762:	d102      	bne.n	800876a <vTaskPrioritySet+0xce>
					{
						pxTCB->uxPriority = uxNewPriority;
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	683a      	ldr	r2, [r7, #0]
 800876e:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	2b00      	cmp	r3, #0
 8008776:	db04      	blt.n	8008782 <vTaskPrioritySet+0xe6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	f1c3 0207 	rsb	r2, r3, #7
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	6959      	ldr	r1, [r3, #20]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	4613      	mov	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4a1f      	ldr	r2, [pc, #124]	; (8008810 <vTaskPrioritySet+0x174>)
 8008792:	4413      	add	r3, r2
 8008794:	4299      	cmp	r1, r3
 8008796:	d128      	bne.n	80087ea <vTaskPrioritySet+0x14e>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	3304      	adds	r3, #4
 800879c:	4618      	mov	r0, r3
 800879e:	f7fe ff7b 	bl	8007698 <uxListRemove>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d109      	bne.n	80087bc <vTaskPrioritySet+0x120>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80087a8:	2201      	movs	r2, #1
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	fa02 f303 	lsl.w	r3, r2, r3
 80087b0:	43da      	mvns	r2, r3
 80087b2:	4b18      	ldr	r3, [pc, #96]	; (8008814 <vTaskPrioritySet+0x178>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4013      	ands	r3, r2
 80087b8:	4a16      	ldr	r2, [pc, #88]	; (8008814 <vTaskPrioritySet+0x178>)
 80087ba:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvReaddTaskToReadyList( pxTCB );
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c0:	2201      	movs	r2, #1
 80087c2:	409a      	lsls	r2, r3
 80087c4:	4b13      	ldr	r3, [pc, #76]	; (8008814 <vTaskPrioritySet+0x178>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	4a12      	ldr	r2, [pc, #72]	; (8008814 <vTaskPrioritySet+0x178>)
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d2:	4613      	mov	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4a0d      	ldr	r2, [pc, #52]	; (8008810 <vTaskPrioritySet+0x174>)
 80087dc:	441a      	add	r2, r3
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	3304      	adds	r3, #4
 80087e2:	4619      	mov	r1, r3
 80087e4:	4610      	mov	r0, r2
 80087e6:	f7fe fefa 	bl	80075de <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d007      	beq.n	8008800 <vTaskPrioritySet+0x164>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80087f0:	4b09      	ldr	r3, [pc, #36]	; (8008818 <vTaskPrioritySet+0x17c>)
 80087f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8008800:	f000 fec0 	bl	8009584 <vPortExitCritical>
	}
 8008804:	bf00      	nop
 8008806:	3720      	adds	r7, #32
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	20000378 	.word	0x20000378
 8008810:	2000037c 	.word	0x2000037c
 8008814:	20000480 	.word	0x20000480
 8008818:	e000ed04 	.word	0xe000ed04

0800881c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08a      	sub	sp, #40	; 0x28
 8008820:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008822:	2300      	movs	r3, #0
 8008824:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008826:	2300      	movs	r3, #0
 8008828:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800882a:	463a      	mov	r2, r7
 800882c:	1d39      	adds	r1, r7, #4
 800882e:	f107 0308 	add.w	r3, r7, #8
 8008832:	4618      	mov	r0, r3
 8008834:	f7f7 fe9e 	bl	8000574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	9202      	str	r2, [sp, #8]
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	2300      	movs	r3, #0
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	2300      	movs	r3, #0
 8008848:	460a      	mov	r2, r1
 800884a:	4925      	ldr	r1, [pc, #148]	; (80088e0 <vTaskStartScheduler+0xc4>)
 800884c:	4825      	ldr	r0, [pc, #148]	; (80088e4 <vTaskStartScheduler+0xc8>)
 800884e:	f7ff fd21 	bl	8008294 <xTaskCreateStatic>
 8008852:	4603      	mov	r3, r0
 8008854:	4a24      	ldr	r2, [pc, #144]	; (80088e8 <vTaskStartScheduler+0xcc>)
 8008856:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008858:	4b23      	ldr	r3, [pc, #140]	; (80088e8 <vTaskStartScheduler+0xcc>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008860:	2301      	movs	r3, #1
 8008862:	617b      	str	r3, [r7, #20]
 8008864:	e001      	b.n	800886a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008866:	2300      	movs	r3, #0
 8008868:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d124      	bne.n	80088ba <vTaskStartScheduler+0x9e>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	613b      	str	r3, [r7, #16]
}
 8008882:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008884:	4b19      	ldr	r3, [pc, #100]	; (80088ec <vTaskStartScheduler+0xd0>)
 8008886:	f04f 32ff 	mov.w	r2, #4294967295
 800888a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800888c:	4b18      	ldr	r3, [pc, #96]	; (80088f0 <vTaskStartScheduler+0xd4>)
 800888e:	2201      	movs	r2, #1
 8008890:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008892:	4b18      	ldr	r3, [pc, #96]	; (80088f4 <vTaskStartScheduler+0xd8>)
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8008898:	4b17      	ldr	r3, [pc, #92]	; (80088f8 <vTaskStartScheduler+0xdc>)
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	4b12      	ldr	r3, [pc, #72]	; (80088e8 <vTaskStartScheduler+0xcc>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d102      	bne.n	80088aa <vTaskStartScheduler+0x8e>
 80088a4:	f002 fcde 	bl	800b264 <SEGGER_SYSVIEW_OnIdle>
 80088a8:	e004      	b.n	80088b4 <vTaskStartScheduler+0x98>
 80088aa:	4b13      	ldr	r3, [pc, #76]	; (80088f8 <vTaskStartScheduler+0xdc>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f002 fd38 	bl	800b324 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088b4:	f000 fd94 	bl	80093e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088b8:	e00e      	b.n	80088d8 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c0:	d10a      	bne.n	80088d8 <vTaskStartScheduler+0xbc>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	60fb      	str	r3, [r7, #12]
}
 80088d4:	bf00      	nop
 80088d6:	e7fe      	b.n	80088d6 <vTaskStartScheduler+0xba>
}
 80088d8:	bf00      	nop
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	0800d008 	.word	0x0800d008
 80088e4:	08008ee5 	.word	0x08008ee5
 80088e8:	2000049c 	.word	0x2000049c
 80088ec:	20000498 	.word	0x20000498
 80088f0:	20000484 	.word	0x20000484
 80088f4:	2000047c 	.word	0x2000047c
 80088f8:	20000378 	.word	0x20000378

080088fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088fc:	b480      	push	{r7}
 80088fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008900:	4b04      	ldr	r3, [pc, #16]	; (8008914 <vTaskSuspendAll+0x18>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3301      	adds	r3, #1
 8008906:	4a03      	ldr	r2, [pc, #12]	; (8008914 <vTaskSuspendAll+0x18>)
 8008908:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800890a:	bf00      	nop
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	200004a0 	.word	0x200004a0

08008918 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800891e:	2300      	movs	r3, #0
 8008920:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008922:	2300      	movs	r3, #0
 8008924:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008926:	4b43      	ldr	r3, [pc, #268]	; (8008a34 <xTaskResumeAll+0x11c>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10a      	bne.n	8008944 <xTaskResumeAll+0x2c>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	603b      	str	r3, [r7, #0]
}
 8008940:	bf00      	nop
 8008942:	e7fe      	b.n	8008942 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008944:	f000 fdee 	bl	8009524 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008948:	4b3a      	ldr	r3, [pc, #232]	; (8008a34 <xTaskResumeAll+0x11c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3b01      	subs	r3, #1
 800894e:	4a39      	ldr	r2, [pc, #228]	; (8008a34 <xTaskResumeAll+0x11c>)
 8008950:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008952:	4b38      	ldr	r3, [pc, #224]	; (8008a34 <xTaskResumeAll+0x11c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d165      	bne.n	8008a26 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800895a:	4b37      	ldr	r3, [pc, #220]	; (8008a38 <xTaskResumeAll+0x120>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d061      	beq.n	8008a26 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008962:	e032      	b.n	80089ca <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008964:	4b35      	ldr	r3, [pc, #212]	; (8008a3c <xTaskResumeAll+0x124>)
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3318      	adds	r3, #24
 8008970:	4618      	mov	r0, r3
 8008972:	f7fe fe91 	bl	8007698 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3304      	adds	r3, #4
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe fe8c 	bl	8007698 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4618      	mov	r0, r3
 8008984:	f002 fd12 	bl	800b3ac <SEGGER_SYSVIEW_OnTaskStartReady>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898c:	2201      	movs	r2, #1
 800898e:	409a      	lsls	r2, r3
 8008990:	4b2b      	ldr	r3, [pc, #172]	; (8008a40 <xTaskResumeAll+0x128>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4313      	orrs	r3, r2
 8008996:	4a2a      	ldr	r2, [pc, #168]	; (8008a40 <xTaskResumeAll+0x128>)
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899e:	4613      	mov	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4a27      	ldr	r2, [pc, #156]	; (8008a44 <xTaskResumeAll+0x12c>)
 80089a8:	441a      	add	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3304      	adds	r3, #4
 80089ae:	4619      	mov	r1, r3
 80089b0:	4610      	mov	r0, r2
 80089b2:	f7fe fe14 	bl	80075de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ba:	4b23      	ldr	r3, [pc, #140]	; (8008a48 <xTaskResumeAll+0x130>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d302      	bcc.n	80089ca <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80089c4:	4b21      	ldr	r3, [pc, #132]	; (8008a4c <xTaskResumeAll+0x134>)
 80089c6:	2201      	movs	r2, #1
 80089c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089ca:	4b1c      	ldr	r3, [pc, #112]	; (8008a3c <xTaskResumeAll+0x124>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1c8      	bne.n	8008964 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089d8:	f000 fb3a 	bl	8009050 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089dc:	4b1c      	ldr	r3, [pc, #112]	; (8008a50 <xTaskResumeAll+0x138>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d010      	beq.n	8008a0a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089e8:	f000 f848 	bl	8008a7c <xTaskIncrementTick>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d002      	beq.n	80089f8 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80089f2:	4b16      	ldr	r3, [pc, #88]	; (8008a4c <xTaskResumeAll+0x134>)
 80089f4:	2201      	movs	r2, #1
 80089f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	3b01      	subs	r3, #1
 80089fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1f1      	bne.n	80089e8 <xTaskResumeAll+0xd0>

						xPendedTicks = 0;
 8008a04:	4b12      	ldr	r3, [pc, #72]	; (8008a50 <xTaskResumeAll+0x138>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a0a:	4b10      	ldr	r3, [pc, #64]	; (8008a4c <xTaskResumeAll+0x134>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d009      	beq.n	8008a26 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a12:	2301      	movs	r3, #1
 8008a14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a16:	4b0f      	ldr	r3, [pc, #60]	; (8008a54 <xTaskResumeAll+0x13c>)
 8008a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a26:	f000 fdad 	bl	8009584 <vPortExitCritical>

	return xAlreadyYielded;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	200004a0 	.word	0x200004a0
 8008a38:	20000478 	.word	0x20000478
 8008a3c:	20000438 	.word	0x20000438
 8008a40:	20000480 	.word	0x20000480
 8008a44:	2000037c 	.word	0x2000037c
 8008a48:	20000378 	.word	0x20000378
 8008a4c:	2000048c 	.word	0x2000048c
 8008a50:	20000488 	.word	0x20000488
 8008a54:	e000ed04 	.word	0xe000ed04

08008a58 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a5e:	f000 fe4b 	bl	80096f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008a62:	2300      	movs	r3, #0
 8008a64:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008a66:	4b04      	ldr	r3, [pc, #16]	; (8008a78 <xTaskGetTickCountFromISR+0x20>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a6c:	683b      	ldr	r3, [r7, #0]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	2000047c 	.word	0x2000047c

08008a7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a82:	2300      	movs	r3, #0
 8008a84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a86:	4b50      	ldr	r3, [pc, #320]	; (8008bc8 <xTaskIncrementTick+0x14c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f040 8092 	bne.w	8008bb4 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a90:	4b4e      	ldr	r3, [pc, #312]	; (8008bcc <xTaskIncrementTick+0x150>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3301      	adds	r3, #1
 8008a96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a98:	4a4c      	ldr	r2, [pc, #304]	; (8008bcc <xTaskIncrementTick+0x150>)
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d120      	bne.n	8008ae6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008aa4:	4b4a      	ldr	r3, [pc, #296]	; (8008bd0 <xTaskIncrementTick+0x154>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00a      	beq.n	8008ac4 <xTaskIncrementTick+0x48>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	603b      	str	r3, [r7, #0]
}
 8008ac0:	bf00      	nop
 8008ac2:	e7fe      	b.n	8008ac2 <xTaskIncrementTick+0x46>
 8008ac4:	4b42      	ldr	r3, [pc, #264]	; (8008bd0 <xTaskIncrementTick+0x154>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	4b42      	ldr	r3, [pc, #264]	; (8008bd4 <xTaskIncrementTick+0x158>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a40      	ldr	r2, [pc, #256]	; (8008bd0 <xTaskIncrementTick+0x154>)
 8008ad0:	6013      	str	r3, [r2, #0]
 8008ad2:	4a40      	ldr	r2, [pc, #256]	; (8008bd4 <xTaskIncrementTick+0x158>)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	4b3f      	ldr	r3, [pc, #252]	; (8008bd8 <xTaskIncrementTick+0x15c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3301      	adds	r3, #1
 8008ade:	4a3e      	ldr	r2, [pc, #248]	; (8008bd8 <xTaskIncrementTick+0x15c>)
 8008ae0:	6013      	str	r3, [r2, #0]
 8008ae2:	f000 fab5 	bl	8009050 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ae6:	4b3d      	ldr	r3, [pc, #244]	; (8008bdc <xTaskIncrementTick+0x160>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d34c      	bcc.n	8008b8a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008af0:	4b37      	ldr	r3, [pc, #220]	; (8008bd0 <xTaskIncrementTick+0x154>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d104      	bne.n	8008b04 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008afa:	4b38      	ldr	r3, [pc, #224]	; (8008bdc <xTaskIncrementTick+0x160>)
 8008afc:	f04f 32ff 	mov.w	r2, #4294967295
 8008b00:	601a      	str	r2, [r3, #0]
					break;
 8008b02:	e042      	b.n	8008b8a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b04:	4b32      	ldr	r3, [pc, #200]	; (8008bd0 <xTaskIncrementTick+0x154>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d203      	bcs.n	8008b24 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b1c:	4a2f      	ldr	r2, [pc, #188]	; (8008bdc <xTaskIncrementTick+0x160>)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b22:	e032      	b.n	8008b8a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	3304      	adds	r3, #4
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fe fdb5 	bl	8007698 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d004      	beq.n	8008b40 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	3318      	adds	r3, #24
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe fdac 	bl	8007698 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f002 fc32 	bl	800b3ac <SEGGER_SYSVIEW_OnTaskStartReady>
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	409a      	lsls	r2, r3
 8008b50:	4b23      	ldr	r3, [pc, #140]	; (8008be0 <xTaskIncrementTick+0x164>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	4a22      	ldr	r2, [pc, #136]	; (8008be0 <xTaskIncrementTick+0x164>)
 8008b58:	6013      	str	r3, [r2, #0]
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5e:	4613      	mov	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4a1f      	ldr	r2, [pc, #124]	; (8008be4 <xTaskIncrementTick+0x168>)
 8008b68:	441a      	add	r2, r3
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	4619      	mov	r1, r3
 8008b70:	4610      	mov	r0, r2
 8008b72:	f7fe fd34 	bl	80075de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7a:	4b1b      	ldr	r3, [pc, #108]	; (8008be8 <xTaskIncrementTick+0x16c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d3b5      	bcc.n	8008af0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b84:	2301      	movs	r3, #1
 8008b86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b88:	e7b2      	b.n	8008af0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b8a:	4b17      	ldr	r3, [pc, #92]	; (8008be8 <xTaskIncrementTick+0x16c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b90:	4914      	ldr	r1, [pc, #80]	; (8008be4 <xTaskIncrementTick+0x168>)
 8008b92:	4613      	mov	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	440b      	add	r3, r1
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d901      	bls.n	8008ba6 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ba6:	4b11      	ldr	r3, [pc, #68]	; (8008bec <xTaskIncrementTick+0x170>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d007      	beq.n	8008bbe <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	e004      	b.n	8008bbe <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008bb4:	4b0e      	ldr	r3, [pc, #56]	; (8008bf0 <xTaskIncrementTick+0x174>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	4a0d      	ldr	r2, [pc, #52]	; (8008bf0 <xTaskIncrementTick+0x174>)
 8008bbc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008bbe:	697b      	ldr	r3, [r7, #20]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	200004a0 	.word	0x200004a0
 8008bcc:	2000047c 	.word	0x2000047c
 8008bd0:	20000430 	.word	0x20000430
 8008bd4:	20000434 	.word	0x20000434
 8008bd8:	20000490 	.word	0x20000490
 8008bdc:	20000498 	.word	0x20000498
 8008be0:	20000480 	.word	0x20000480
 8008be4:	2000037c 	.word	0x2000037c
 8008be8:	20000378 	.word	0x20000378
 8008bec:	2000048c 	.word	0x2000048c
 8008bf0:	20000488 	.word	0x20000488

08008bf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bfa:	4b2d      	ldr	r3, [pc, #180]	; (8008cb0 <vTaskSwitchContext+0xbc>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c02:	4b2c      	ldr	r3, [pc, #176]	; (8008cb4 <vTaskSwitchContext+0xc0>)
 8008c04:	2201      	movs	r2, #1
 8008c06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c08:	e04d      	b.n	8008ca6 <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 8008c0a:	4b2a      	ldr	r3, [pc, #168]	; (8008cb4 <vTaskSwitchContext+0xc0>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c10:	4b29      	ldr	r3, [pc, #164]	; (8008cb8 <vTaskSwitchContext+0xc4>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	fab3 f383 	clz	r3, r3
 8008c1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008c1e:	7afb      	ldrb	r3, [r7, #11]
 8008c20:	f1c3 031f 	rsb	r3, r3, #31
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	4925      	ldr	r1, [pc, #148]	; (8008cbc <vTaskSwitchContext+0xc8>)
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	440b      	add	r3, r1
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10a      	bne.n	8008c50 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	607b      	str	r3, [r7, #4]
}
 8008c4c:	bf00      	nop
 8008c4e:	e7fe      	b.n	8008c4e <vTaskSwitchContext+0x5a>
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	4613      	mov	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4a18      	ldr	r2, [pc, #96]	; (8008cbc <vTaskSwitchContext+0xc8>)
 8008c5c:	4413      	add	r3, r2
 8008c5e:	613b      	str	r3, [r7, #16]
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	605a      	str	r2, [r3, #4]
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	3308      	adds	r3, #8
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d104      	bne.n	8008c80 <vTaskSwitchContext+0x8c>
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	605a      	str	r2, [r3, #4]
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	4a0e      	ldr	r2, [pc, #56]	; (8008cc0 <vTaskSwitchContext+0xcc>)
 8008c88:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8008c8a:	4b0d      	ldr	r3, [pc, #52]	; (8008cc0 <vTaskSwitchContext+0xcc>)
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	4b0d      	ldr	r3, [pc, #52]	; (8008cc4 <vTaskSwitchContext+0xd0>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d102      	bne.n	8008c9c <vTaskSwitchContext+0xa8>
 8008c96:	f002 fae5 	bl	800b264 <SEGGER_SYSVIEW_OnIdle>
}
 8008c9a:	e004      	b.n	8008ca6 <vTaskSwitchContext+0xb2>
		traceTASK_SWITCHED_IN();
 8008c9c:	4b08      	ldr	r3, [pc, #32]	; (8008cc0 <vTaskSwitchContext+0xcc>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f002 fb3f 	bl	800b324 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8008ca6:	bf00      	nop
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	200004a0 	.word	0x200004a0
 8008cb4:	2000048c 	.word	0x2000048c
 8008cb8:	20000480 	.word	0x20000480
 8008cbc:	2000037c 	.word	0x2000037c
 8008cc0:	20000378 	.word	0x20000378
 8008cc4:	2000049c 	.word	0x2000049c

08008cc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10a      	bne.n	8008cee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cdc:	f383 8811 	msr	BASEPRI, r3
 8008ce0:	f3bf 8f6f 	isb	sy
 8008ce4:	f3bf 8f4f 	dsb	sy
 8008ce8:	60fb      	str	r3, [r7, #12]
}
 8008cea:	bf00      	nop
 8008cec:	e7fe      	b.n	8008cec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cee:	4b07      	ldr	r3, [pc, #28]	; (8008d0c <vTaskPlaceOnEventList+0x44>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3318      	adds	r3, #24
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7fe fc95 	bl	8007626 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008cfc:	2101      	movs	r1, #1
 8008cfe:	6838      	ldr	r0, [r7, #0]
 8008d00:	f000 fa6e 	bl	80091e0 <prvAddCurrentTaskToDelayedList>
}
 8008d04:	bf00      	nop
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20000378 	.word	0x20000378

08008d10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10a      	bne.n	8008d3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	60fb      	str	r3, [r7, #12]
}
 8008d38:	bf00      	nop
 8008d3a:	e7fe      	b.n	8008d3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	3318      	adds	r3, #24
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fe fca9 	bl	8007698 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d46:	4b1f      	ldr	r3, [pc, #124]	; (8008dc4 <xTaskRemoveFromEventList+0xb4>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d120      	bne.n	8008d90 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	3304      	adds	r3, #4
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe fca0 	bl	8007698 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f002 fb26 	bl	800b3ac <SEGGER_SYSVIEW_OnTaskStartReady>
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d64:	2201      	movs	r2, #1
 8008d66:	409a      	lsls	r2, r3
 8008d68:	4b17      	ldr	r3, [pc, #92]	; (8008dc8 <xTaskRemoveFromEventList+0xb8>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	4a16      	ldr	r2, [pc, #88]	; (8008dc8 <xTaskRemoveFromEventList+0xb8>)
 8008d70:	6013      	str	r3, [r2, #0]
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d76:	4613      	mov	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	4a13      	ldr	r2, [pc, #76]	; (8008dcc <xTaskRemoveFromEventList+0xbc>)
 8008d80:	441a      	add	r2, r3
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	3304      	adds	r3, #4
 8008d86:	4619      	mov	r1, r3
 8008d88:	4610      	mov	r0, r2
 8008d8a:	f7fe fc28 	bl	80075de <vListInsertEnd>
 8008d8e:	e005      	b.n	8008d9c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	3318      	adds	r3, #24
 8008d94:	4619      	mov	r1, r3
 8008d96:	480e      	ldr	r0, [pc, #56]	; (8008dd0 <xTaskRemoveFromEventList+0xc0>)
 8008d98:	f7fe fc21 	bl	80075de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da0:	4b0c      	ldr	r3, [pc, #48]	; (8008dd4 <xTaskRemoveFromEventList+0xc4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d905      	bls.n	8008db6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008daa:	2301      	movs	r3, #1
 8008dac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008dae:	4b0a      	ldr	r3, [pc, #40]	; (8008dd8 <xTaskRemoveFromEventList+0xc8>)
 8008db0:	2201      	movs	r2, #1
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	e001      	b.n	8008dba <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008dba:	697b      	ldr	r3, [r7, #20]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	200004a0 	.word	0x200004a0
 8008dc8:	20000480 	.word	0x20000480
 8008dcc:	2000037c 	.word	0x2000037c
 8008dd0:	20000438 	.word	0x20000438
 8008dd4:	20000378 	.word	0x20000378
 8008dd8:	2000048c 	.word	0x2000048c

08008ddc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008de4:	4b06      	ldr	r3, [pc, #24]	; (8008e00 <vTaskInternalSetTimeOutState+0x24>)
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008dec:	4b05      	ldr	r3, [pc, #20]	; (8008e04 <vTaskInternalSetTimeOutState+0x28>)
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	605a      	str	r2, [r3, #4]
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	20000490 	.word	0x20000490
 8008e04:	2000047c 	.word	0x2000047c

08008e08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b088      	sub	sp, #32
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10a      	bne.n	8008e2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1c:	f383 8811 	msr	BASEPRI, r3
 8008e20:	f3bf 8f6f 	isb	sy
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	613b      	str	r3, [r7, #16]
}
 8008e2a:	bf00      	nop
 8008e2c:	e7fe      	b.n	8008e2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10a      	bne.n	8008e4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	60fb      	str	r3, [r7, #12]
}
 8008e46:	bf00      	nop
 8008e48:	e7fe      	b.n	8008e48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008e4a:	f000 fb6b 	bl	8009524 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e4e:	4b1d      	ldr	r3, [pc, #116]	; (8008ec4 <xTaskCheckForTimeOut+0xbc>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	69ba      	ldr	r2, [r7, #24]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e66:	d102      	bne.n	8008e6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	61fb      	str	r3, [r7, #28]
 8008e6c:	e023      	b.n	8008eb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	4b15      	ldr	r3, [pc, #84]	; (8008ec8 <xTaskCheckForTimeOut+0xc0>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d007      	beq.n	8008e8a <xTaskCheckForTimeOut+0x82>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	69ba      	ldr	r2, [r7, #24]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d302      	bcc.n	8008e8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e84:	2301      	movs	r3, #1
 8008e86:	61fb      	str	r3, [r7, #28]
 8008e88:	e015      	b.n	8008eb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	697a      	ldr	r2, [r7, #20]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d20b      	bcs.n	8008eac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	1ad2      	subs	r2, r2, r3
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7ff ff9b 	bl	8008ddc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	61fb      	str	r3, [r7, #28]
 8008eaa:	e004      	b.n	8008eb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008eb6:	f000 fb65 	bl	8009584 <vPortExitCritical>

	return xReturn;
 8008eba:	69fb      	ldr	r3, [r7, #28]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3720      	adds	r7, #32
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	2000047c 	.word	0x2000047c
 8008ec8:	20000490 	.word	0x20000490

08008ecc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ed0:	4b03      	ldr	r3, [pc, #12]	; (8008ee0 <vTaskMissedYield+0x14>)
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]
}
 8008ed6:	bf00      	nop
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	2000048c 	.word	0x2000048c

08008ee4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008eec:	f000 f852 	bl	8008f94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ef0:	4b06      	ldr	r3, [pc, #24]	; (8008f0c <prvIdleTask+0x28>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d9f9      	bls.n	8008eec <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ef8:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <prvIdleTask+0x2c>)
 8008efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f08:	e7f0      	b.n	8008eec <prvIdleTask+0x8>
 8008f0a:	bf00      	nop
 8008f0c:	2000037c 	.word	0x2000037c
 8008f10:	e000ed04 	.word	0xe000ed04

08008f14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	607b      	str	r3, [r7, #4]
 8008f1e:	e00c      	b.n	8008f3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	4613      	mov	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4a12      	ldr	r2, [pc, #72]	; (8008f74 <prvInitialiseTaskLists+0x60>)
 8008f2c:	4413      	add	r3, r2
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe fb28 	bl	8007584 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	3301      	adds	r3, #1
 8008f38:	607b      	str	r3, [r7, #4]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2b06      	cmp	r3, #6
 8008f3e:	d9ef      	bls.n	8008f20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f40:	480d      	ldr	r0, [pc, #52]	; (8008f78 <prvInitialiseTaskLists+0x64>)
 8008f42:	f7fe fb1f 	bl	8007584 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f46:	480d      	ldr	r0, [pc, #52]	; (8008f7c <prvInitialiseTaskLists+0x68>)
 8008f48:	f7fe fb1c 	bl	8007584 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f4c:	480c      	ldr	r0, [pc, #48]	; (8008f80 <prvInitialiseTaskLists+0x6c>)
 8008f4e:	f7fe fb19 	bl	8007584 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f52:	480c      	ldr	r0, [pc, #48]	; (8008f84 <prvInitialiseTaskLists+0x70>)
 8008f54:	f7fe fb16 	bl	8007584 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f58:	480b      	ldr	r0, [pc, #44]	; (8008f88 <prvInitialiseTaskLists+0x74>)
 8008f5a:	f7fe fb13 	bl	8007584 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f5e:	4b0b      	ldr	r3, [pc, #44]	; (8008f8c <prvInitialiseTaskLists+0x78>)
 8008f60:	4a05      	ldr	r2, [pc, #20]	; (8008f78 <prvInitialiseTaskLists+0x64>)
 8008f62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f64:	4b0a      	ldr	r3, [pc, #40]	; (8008f90 <prvInitialiseTaskLists+0x7c>)
 8008f66:	4a05      	ldr	r2, [pc, #20]	; (8008f7c <prvInitialiseTaskLists+0x68>)
 8008f68:	601a      	str	r2, [r3, #0]
}
 8008f6a:	bf00      	nop
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	2000037c 	.word	0x2000037c
 8008f78:	20000408 	.word	0x20000408
 8008f7c:	2000041c 	.word	0x2000041c
 8008f80:	20000438 	.word	0x20000438
 8008f84:	2000044c 	.word	0x2000044c
 8008f88:	20000464 	.word	0x20000464
 8008f8c:	20000430 	.word	0x20000430
 8008f90:	20000434 	.word	0x20000434

08008f94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f9a:	e019      	b.n	8008fd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f9c:	f000 fac2 	bl	8009524 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa0:	4b10      	ldr	r3, [pc, #64]	; (8008fe4 <prvCheckTasksWaitingTermination+0x50>)
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	3304      	adds	r3, #4
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fe fb73 	bl	8007698 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008fb2:	4b0d      	ldr	r3, [pc, #52]	; (8008fe8 <prvCheckTasksWaitingTermination+0x54>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	4a0b      	ldr	r2, [pc, #44]	; (8008fe8 <prvCheckTasksWaitingTermination+0x54>)
 8008fba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008fbc:	4b0b      	ldr	r3, [pc, #44]	; (8008fec <prvCheckTasksWaitingTermination+0x58>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	4a0a      	ldr	r2, [pc, #40]	; (8008fec <prvCheckTasksWaitingTermination+0x58>)
 8008fc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008fc6:	f000 fadd 	bl	8009584 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f810 	bl	8008ff0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fd0:	4b06      	ldr	r3, [pc, #24]	; (8008fec <prvCheckTasksWaitingTermination+0x58>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1e1      	bne.n	8008f9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	2000044c 	.word	0x2000044c
 8008fe8:	20000478 	.word	0x20000478
 8008fec:	20000460 	.word	0x20000460

08008ff0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d108      	bne.n	8009014 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009006:	4618      	mov	r0, r3
 8009008:	f000 fcda 	bl	80099c0 <vPortFree>
				vPortFree( pxTCB );
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fcd7 	bl	80099c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009012:	e018      	b.n	8009046 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800901a:	2b01      	cmp	r3, #1
 800901c:	d103      	bne.n	8009026 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fcce 	bl	80099c0 <vPortFree>
	}
 8009024:	e00f      	b.n	8009046 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800902c:	2b02      	cmp	r3, #2
 800902e:	d00a      	beq.n	8009046 <prvDeleteTCB+0x56>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	60fb      	str	r3, [r7, #12]
}
 8009042:	bf00      	nop
 8009044:	e7fe      	b.n	8009044 <prvDeleteTCB+0x54>
	}
 8009046:	bf00      	nop
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009056:	4b0c      	ldr	r3, [pc, #48]	; (8009088 <prvResetNextTaskUnblockTime+0x38>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d104      	bne.n	800906a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009060:	4b0a      	ldr	r3, [pc, #40]	; (800908c <prvResetNextTaskUnblockTime+0x3c>)
 8009062:	f04f 32ff 	mov.w	r2, #4294967295
 8009066:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009068:	e008      	b.n	800907c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800906a:	4b07      	ldr	r3, [pc, #28]	; (8009088 <prvResetNextTaskUnblockTime+0x38>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	4a04      	ldr	r2, [pc, #16]	; (800908c <prvResetNextTaskUnblockTime+0x3c>)
 800907a:	6013      	str	r3, [r2, #0]
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	20000430 	.word	0x20000430
 800908c:	20000498 	.word	0x20000498

08009090 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009096:	4b0b      	ldr	r3, [pc, #44]	; (80090c4 <xTaskGetSchedulerState+0x34>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d102      	bne.n	80090a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800909e:	2301      	movs	r3, #1
 80090a0:	607b      	str	r3, [r7, #4]
 80090a2:	e008      	b.n	80090b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090a4:	4b08      	ldr	r3, [pc, #32]	; (80090c8 <xTaskGetSchedulerState+0x38>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d102      	bne.n	80090b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80090ac:	2302      	movs	r3, #2
 80090ae:	607b      	str	r3, [r7, #4]
 80090b0:	e001      	b.n	80090b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090b2:	2300      	movs	r3, #0
 80090b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090b6:	687b      	ldr	r3, [r7, #4]
	}
 80090b8:	4618      	mov	r0, r3
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	20000484 	.word	0x20000484
 80090c8:	200004a0 	.word	0x200004a0

080090cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090d8:	2300      	movs	r3, #0
 80090da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d073      	beq.n	80091ca <xTaskPriorityDisinherit+0xfe>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80090e2:	4b3c      	ldr	r3, [pc, #240]	; (80091d4 <xTaskPriorityDisinherit+0x108>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d00a      	beq.n	8009102 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	60fb      	str	r3, [r7, #12]
}
 80090fe:	bf00      	nop
 8009100:	e7fe      	b.n	8009100 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10a      	bne.n	8009120 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800910a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	60bb      	str	r3, [r7, #8]
}
 800911c:	bf00      	nop
 800911e:	e7fe      	b.n	800911e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009124:	1e5a      	subs	r2, r3, #1
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009132:	429a      	cmp	r2, r3
 8009134:	d049      	beq.n	80091ca <xTaskPriorityDisinherit+0xfe>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800913a:	2b00      	cmp	r3, #0
 800913c:	d145      	bne.n	80091ca <xTaskPriorityDisinherit+0xfe>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	3304      	adds	r3, #4
 8009142:	4618      	mov	r0, r3
 8009144:	f7fe faa8 	bl	8007698 <uxListRemove>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d115      	bne.n	800917a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009152:	4921      	ldr	r1, [pc, #132]	; (80091d8 <xTaskPriorityDisinherit+0x10c>)
 8009154:	4613      	mov	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	4413      	add	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	440b      	add	r3, r1
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10a      	bne.n	800917a <xTaskPriorityDisinherit+0xae>
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009168:	2201      	movs	r2, #1
 800916a:	fa02 f303 	lsl.w	r3, r2, r3
 800916e:	43da      	mvns	r2, r3
 8009170:	4b1a      	ldr	r3, [pc, #104]	; (80091dc <xTaskPriorityDisinherit+0x110>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4013      	ands	r3, r2
 8009176:	4a19      	ldr	r2, [pc, #100]	; (80091dc <xTaskPriorityDisinherit+0x110>)
 8009178:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4619      	mov	r1, r3
 800917e:	204a      	movs	r0, #74	; 0x4a
 8009180:	f001 fb8c 	bl	800a89c <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009190:	f1c3 0207 	rsb	r2, r3, #7
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919c:	2201      	movs	r2, #1
 800919e:	409a      	lsls	r2, r3
 80091a0:	4b0e      	ldr	r3, [pc, #56]	; (80091dc <xTaskPriorityDisinherit+0x110>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	4a0d      	ldr	r2, [pc, #52]	; (80091dc <xTaskPriorityDisinherit+0x110>)
 80091a8:	6013      	str	r3, [r2, #0]
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ae:	4613      	mov	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4a08      	ldr	r2, [pc, #32]	; (80091d8 <xTaskPriorityDisinherit+0x10c>)
 80091b8:	441a      	add	r2, r3
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	3304      	adds	r3, #4
 80091be:	4619      	mov	r1, r3
 80091c0:	4610      	mov	r0, r2
 80091c2:	f7fe fa0c 	bl	80075de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80091c6:	2301      	movs	r3, #1
 80091c8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091ca:	697b      	ldr	r3, [r7, #20]
	}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3718      	adds	r7, #24
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	20000378 	.word	0x20000378
 80091d8:	2000037c 	.word	0x2000037c
 80091dc:	20000480 	.word	0x20000480

080091e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091ea:	4b32      	ldr	r3, [pc, #200]	; (80092b4 <prvAddCurrentTaskToDelayedList+0xd4>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091f0:	4b31      	ldr	r3, [pc, #196]	; (80092b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3304      	adds	r3, #4
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe fa4e 	bl	8007698 <uxListRemove>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10b      	bne.n	800921a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009202:	4b2d      	ldr	r3, [pc, #180]	; (80092b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009208:	2201      	movs	r2, #1
 800920a:	fa02 f303 	lsl.w	r3, r2, r3
 800920e:	43da      	mvns	r2, r3
 8009210:	4b2a      	ldr	r3, [pc, #168]	; (80092bc <prvAddCurrentTaskToDelayedList+0xdc>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4013      	ands	r3, r2
 8009216:	4a29      	ldr	r2, [pc, #164]	; (80092bc <prvAddCurrentTaskToDelayedList+0xdc>)
 8009218:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009220:	d110      	bne.n	8009244 <prvAddCurrentTaskToDelayedList+0x64>
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00d      	beq.n	8009244 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8009228:	4b23      	ldr	r3, [pc, #140]	; (80092b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	211b      	movs	r1, #27
 800922e:	4618      	mov	r0, r3
 8009230:	f002 f900 	bl	800b434 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009234:	4b20      	ldr	r3, [pc, #128]	; (80092b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3304      	adds	r3, #4
 800923a:	4619      	mov	r1, r3
 800923c:	4820      	ldr	r0, [pc, #128]	; (80092c0 <prvAddCurrentTaskToDelayedList+0xe0>)
 800923e:	f7fe f9ce 	bl	80075de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009242:	e032      	b.n	80092aa <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4413      	add	r3, r2
 800924a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800924c:	4b1a      	ldr	r3, [pc, #104]	; (80092b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	429a      	cmp	r2, r3
 800925a:	d20f      	bcs.n	800927c <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800925c:	4b16      	ldr	r3, [pc, #88]	; (80092b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2104      	movs	r1, #4
 8009262:	4618      	mov	r0, r3
 8009264:	f002 f8e6 	bl	800b434 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009268:	4b16      	ldr	r3, [pc, #88]	; (80092c4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	4b12      	ldr	r3, [pc, #72]	; (80092b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	3304      	adds	r3, #4
 8009272:	4619      	mov	r1, r3
 8009274:	4610      	mov	r0, r2
 8009276:	f7fe f9d6 	bl	8007626 <vListInsert>
}
 800927a:	e016      	b.n	80092aa <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 800927c:	4b0e      	ldr	r3, [pc, #56]	; (80092b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2104      	movs	r1, #4
 8009282:	4618      	mov	r0, r3
 8009284:	f002 f8d6 	bl	800b434 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009288:	4b0f      	ldr	r3, [pc, #60]	; (80092c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	4b0a      	ldr	r3, [pc, #40]	; (80092b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3304      	adds	r3, #4
 8009292:	4619      	mov	r1, r3
 8009294:	4610      	mov	r0, r2
 8009296:	f7fe f9c6 	bl	8007626 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800929a:	4b0c      	ldr	r3, [pc, #48]	; (80092cc <prvAddCurrentTaskToDelayedList+0xec>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d202      	bcs.n	80092aa <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 80092a4:	4a09      	ldr	r2, [pc, #36]	; (80092cc <prvAddCurrentTaskToDelayedList+0xec>)
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	6013      	str	r3, [r2, #0]
}
 80092aa:	bf00      	nop
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	2000047c 	.word	0x2000047c
 80092b8:	20000378 	.word	0x20000378
 80092bc:	20000480 	.word	0x20000480
 80092c0:	20000464 	.word	0x20000464
 80092c4:	20000434 	.word	0x20000434
 80092c8:	20000430 	.word	0x20000430
 80092cc:	20000498 	.word	0x20000498

080092d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	3b04      	subs	r3, #4
 80092e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	3b04      	subs	r3, #4
 80092ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f023 0201 	bic.w	r2, r3, #1
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	3b04      	subs	r3, #4
 80092fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009300:	4a0c      	ldr	r2, [pc, #48]	; (8009334 <pxPortInitialiseStack+0x64>)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3b14      	subs	r3, #20
 800930a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3b04      	subs	r3, #4
 8009316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f06f 0202 	mvn.w	r2, #2
 800931e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	3b20      	subs	r3, #32
 8009324:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009326:	68fb      	ldr	r3, [r7, #12]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	08009339 	.word	0x08009339

08009338 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009342:	4b12      	ldr	r3, [pc, #72]	; (800938c <prvTaskExitError+0x54>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934a:	d00a      	beq.n	8009362 <prvTaskExitError+0x2a>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	60fb      	str	r3, [r7, #12]
}
 800935e:	bf00      	nop
 8009360:	e7fe      	b.n	8009360 <prvTaskExitError+0x28>
	__asm volatile
 8009362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	60bb      	str	r3, [r7, #8]
}
 8009374:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009376:	bf00      	nop
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d0fc      	beq.n	8009378 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800937e:	bf00      	nop
 8009380:	bf00      	nop
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	2000002c 	.word	0x2000002c

08009390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009390:	4b07      	ldr	r3, [pc, #28]	; (80093b0 <pxCurrentTCBConst2>)
 8009392:	6819      	ldr	r1, [r3, #0]
 8009394:	6808      	ldr	r0, [r1, #0]
 8009396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939a:	f380 8809 	msr	PSP, r0
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f04f 0000 	mov.w	r0, #0
 80093a6:	f380 8811 	msr	BASEPRI, r0
 80093aa:	4770      	bx	lr
 80093ac:	f3af 8000 	nop.w

080093b0 <pxCurrentTCBConst2>:
 80093b0:	20000378 	.word	0x20000378
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80093b4:	bf00      	nop
 80093b6:	bf00      	nop

080093b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80093b8:	4808      	ldr	r0, [pc, #32]	; (80093dc <prvPortStartFirstTask+0x24>)
 80093ba:	6800      	ldr	r0, [r0, #0]
 80093bc:	6800      	ldr	r0, [r0, #0]
 80093be:	f380 8808 	msr	MSP, r0
 80093c2:	f04f 0000 	mov.w	r0, #0
 80093c6:	f380 8814 	msr	CONTROL, r0
 80093ca:	b662      	cpsie	i
 80093cc:	b661      	cpsie	f
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	df00      	svc	0
 80093d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093da:	bf00      	nop
 80093dc:	e000ed08 	.word	0xe000ed08

080093e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80093e6:	4b46      	ldr	r3, [pc, #280]	; (8009500 <xPortStartScheduler+0x120>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a46      	ldr	r2, [pc, #280]	; (8009504 <xPortStartScheduler+0x124>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d10a      	bne.n	8009406 <xPortStartScheduler+0x26>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	613b      	str	r3, [r7, #16]
}
 8009402:	bf00      	nop
 8009404:	e7fe      	b.n	8009404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009406:	4b3e      	ldr	r3, [pc, #248]	; (8009500 <xPortStartScheduler+0x120>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a3f      	ldr	r2, [pc, #252]	; (8009508 <xPortStartScheduler+0x128>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d10a      	bne.n	8009426 <xPortStartScheduler+0x46>
	__asm volatile
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	60fb      	str	r3, [r7, #12]
}
 8009422:	bf00      	nop
 8009424:	e7fe      	b.n	8009424 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009426:	4b39      	ldr	r3, [pc, #228]	; (800950c <xPortStartScheduler+0x12c>)
 8009428:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	b2db      	uxtb	r3, r3
 8009430:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	22ff      	movs	r2, #255	; 0xff
 8009436:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	b2db      	uxtb	r3, r3
 800943e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009440:	78fb      	ldrb	r3, [r7, #3]
 8009442:	b2db      	uxtb	r3, r3
 8009444:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009448:	b2da      	uxtb	r2, r3
 800944a:	4b31      	ldr	r3, [pc, #196]	; (8009510 <xPortStartScheduler+0x130>)
 800944c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800944e:	4b31      	ldr	r3, [pc, #196]	; (8009514 <xPortStartScheduler+0x134>)
 8009450:	2207      	movs	r2, #7
 8009452:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009454:	e009      	b.n	800946a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009456:	4b2f      	ldr	r3, [pc, #188]	; (8009514 <xPortStartScheduler+0x134>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3b01      	subs	r3, #1
 800945c:	4a2d      	ldr	r2, [pc, #180]	; (8009514 <xPortStartScheduler+0x134>)
 800945e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009460:	78fb      	ldrb	r3, [r7, #3]
 8009462:	b2db      	uxtb	r3, r3
 8009464:	005b      	lsls	r3, r3, #1
 8009466:	b2db      	uxtb	r3, r3
 8009468:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800946a:	78fb      	ldrb	r3, [r7, #3]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009472:	2b80      	cmp	r3, #128	; 0x80
 8009474:	d0ef      	beq.n	8009456 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009476:	4b27      	ldr	r3, [pc, #156]	; (8009514 <xPortStartScheduler+0x134>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f1c3 0307 	rsb	r3, r3, #7
 800947e:	2b04      	cmp	r3, #4
 8009480:	d00a      	beq.n	8009498 <xPortStartScheduler+0xb8>
	__asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	60bb      	str	r3, [r7, #8]
}
 8009494:	bf00      	nop
 8009496:	e7fe      	b.n	8009496 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009498:	4b1e      	ldr	r3, [pc, #120]	; (8009514 <xPortStartScheduler+0x134>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	021b      	lsls	r3, r3, #8
 800949e:	4a1d      	ldr	r2, [pc, #116]	; (8009514 <xPortStartScheduler+0x134>)
 80094a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094a2:	4b1c      	ldr	r3, [pc, #112]	; (8009514 <xPortStartScheduler+0x134>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094aa:	4a1a      	ldr	r2, [pc, #104]	; (8009514 <xPortStartScheduler+0x134>)
 80094ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094b6:	4b18      	ldr	r3, [pc, #96]	; (8009518 <xPortStartScheduler+0x138>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a17      	ldr	r2, [pc, #92]	; (8009518 <xPortStartScheduler+0x138>)
 80094bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80094c2:	4b15      	ldr	r3, [pc, #84]	; (8009518 <xPortStartScheduler+0x138>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a14      	ldr	r2, [pc, #80]	; (8009518 <xPortStartScheduler+0x138>)
 80094c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80094cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094ce:	f000 f8e5 	bl	800969c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80094d2:	4b12      	ldr	r3, [pc, #72]	; (800951c <xPortStartScheduler+0x13c>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80094d8:	f000 f904 	bl	80096e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80094dc:	4b10      	ldr	r3, [pc, #64]	; (8009520 <xPortStartScheduler+0x140>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a0f      	ldr	r2, [pc, #60]	; (8009520 <xPortStartScheduler+0x140>)
 80094e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80094e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80094e8:	f7ff ff66 	bl	80093b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80094ec:	f7ff fb82 	bl	8008bf4 <vTaskSwitchContext>
	prvTaskExitError();
 80094f0:	f7ff ff22 	bl	8009338 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3718      	adds	r7, #24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	e000ed00 	.word	0xe000ed00
 8009504:	410fc271 	.word	0x410fc271
 8009508:	410fc270 	.word	0x410fc270
 800950c:	e000e400 	.word	0xe000e400
 8009510:	200004a4 	.word	0x200004a4
 8009514:	200004a8 	.word	0x200004a8
 8009518:	e000ed20 	.word	0xe000ed20
 800951c:	2000002c 	.word	0x2000002c
 8009520:	e000ef34 	.word	0xe000ef34

08009524 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
	__asm volatile
 800952a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	607b      	str	r3, [r7, #4]
}
 800953c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800953e:	4b0f      	ldr	r3, [pc, #60]	; (800957c <vPortEnterCritical+0x58>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3301      	adds	r3, #1
 8009544:	4a0d      	ldr	r2, [pc, #52]	; (800957c <vPortEnterCritical+0x58>)
 8009546:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009548:	4b0c      	ldr	r3, [pc, #48]	; (800957c <vPortEnterCritical+0x58>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d10f      	bne.n	8009570 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009550:	4b0b      	ldr	r3, [pc, #44]	; (8009580 <vPortEnterCritical+0x5c>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00a      	beq.n	8009570 <vPortEnterCritical+0x4c>
	__asm volatile
 800955a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	603b      	str	r3, [r7, #0]
}
 800956c:	bf00      	nop
 800956e:	e7fe      	b.n	800956e <vPortEnterCritical+0x4a>
	}
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr
 800957c:	2000002c 	.word	0x2000002c
 8009580:	e000ed04 	.word	0xe000ed04

08009584 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800958a:	4b12      	ldr	r3, [pc, #72]	; (80095d4 <vPortExitCritical+0x50>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <vPortExitCritical+0x24>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	607b      	str	r3, [r7, #4]
}
 80095a4:	bf00      	nop
 80095a6:	e7fe      	b.n	80095a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80095a8:	4b0a      	ldr	r3, [pc, #40]	; (80095d4 <vPortExitCritical+0x50>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3b01      	subs	r3, #1
 80095ae:	4a09      	ldr	r2, [pc, #36]	; (80095d4 <vPortExitCritical+0x50>)
 80095b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095b2:	4b08      	ldr	r3, [pc, #32]	; (80095d4 <vPortExitCritical+0x50>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d105      	bne.n	80095c6 <vPortExitCritical+0x42>
 80095ba:	2300      	movs	r3, #0
 80095bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	f383 8811 	msr	BASEPRI, r3
}
 80095c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	2000002c 	.word	0x2000002c
	...

080095e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095e0:	f3ef 8009 	mrs	r0, PSP
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	4b15      	ldr	r3, [pc, #84]	; (8009640 <pxCurrentTCBConst>)
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	f01e 0f10 	tst.w	lr, #16
 80095f0:	bf08      	it	eq
 80095f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80095f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fa:	6010      	str	r0, [r2, #0]
 80095fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009600:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009604:	f380 8811 	msr	BASEPRI, r0
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f7ff faf0 	bl	8008bf4 <vTaskSwitchContext>
 8009614:	f04f 0000 	mov.w	r0, #0
 8009618:	f380 8811 	msr	BASEPRI, r0
 800961c:	bc09      	pop	{r0, r3}
 800961e:	6819      	ldr	r1, [r3, #0]
 8009620:	6808      	ldr	r0, [r1, #0]
 8009622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009626:	f01e 0f10 	tst.w	lr, #16
 800962a:	bf08      	it	eq
 800962c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009630:	f380 8809 	msr	PSP, r0
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	f3af 8000 	nop.w

08009640 <pxCurrentTCBConst>:
 8009640:	20000378 	.word	0x20000378
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009644:	bf00      	nop
 8009646:	bf00      	nop

08009648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	607b      	str	r3, [r7, #4]
}
 8009660:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8009662:	f001 fd85 	bl	800b170 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009666:	f7ff fa09 	bl	8008a7c <xTaskIncrementTick>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d006      	beq.n	800967e <xPortSysTickHandler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8009670:	f001 fddc 	bl	800b22c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009674:	4b08      	ldr	r3, [pc, #32]	; (8009698 <xPortSysTickHandler+0x50>)
 8009676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800967a:	601a      	str	r2, [r3, #0]
 800967c:	e001      	b.n	8009682 <xPortSysTickHandler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 800967e:	f001 fdb9 	bl	800b1f4 <SEGGER_SYSVIEW_RecordExitISR>
 8009682:	2300      	movs	r3, #0
 8009684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	f383 8811 	msr	BASEPRI, r3
}
 800968c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800968e:	bf00      	nop
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	e000ed04 	.word	0xe000ed04

0800969c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800969c:	b480      	push	{r7}
 800969e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096a0:	4b0b      	ldr	r3, [pc, #44]	; (80096d0 <vPortSetupTimerInterrupt+0x34>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096a6:	4b0b      	ldr	r3, [pc, #44]	; (80096d4 <vPortSetupTimerInterrupt+0x38>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096ac:	4b0a      	ldr	r3, [pc, #40]	; (80096d8 <vPortSetupTimerInterrupt+0x3c>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a0a      	ldr	r2, [pc, #40]	; (80096dc <vPortSetupTimerInterrupt+0x40>)
 80096b2:	fba2 2303 	umull	r2, r3, r2, r3
 80096b6:	099b      	lsrs	r3, r3, #6
 80096b8:	4a09      	ldr	r2, [pc, #36]	; (80096e0 <vPortSetupTimerInterrupt+0x44>)
 80096ba:	3b01      	subs	r3, #1
 80096bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096be:	4b04      	ldr	r3, [pc, #16]	; (80096d0 <vPortSetupTimerInterrupt+0x34>)
 80096c0:	2207      	movs	r2, #7
 80096c2:	601a      	str	r2, [r3, #0]
}
 80096c4:	bf00      	nop
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	e000e010 	.word	0xe000e010
 80096d4:	e000e018 	.word	0xe000e018
 80096d8:	20000000 	.word	0x20000000
 80096dc:	10624dd3 	.word	0x10624dd3
 80096e0:	e000e014 	.word	0xe000e014

080096e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80096e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80096f4 <vPortEnableVFP+0x10>
 80096e8:	6801      	ldr	r1, [r0, #0]
 80096ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80096ee:	6001      	str	r1, [r0, #0]
 80096f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80096f2:	bf00      	nop
 80096f4:	e000ed88 	.word	0xe000ed88

080096f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/


	void vPortValidateInterruptPriority( void )
	{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80096fe:	f3ef 8305 	mrs	r3, IPSR
 8009702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b0f      	cmp	r3, #15
 8009708:	d914      	bls.n	8009734 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800970a:	4a17      	ldr	r2, [pc, #92]	; (8009768 <vPortValidateInterruptPriority+0x70>)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	4413      	add	r3, r2
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009714:	4b15      	ldr	r3, [pc, #84]	; (800976c <vPortValidateInterruptPriority+0x74>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	7afa      	ldrb	r2, [r7, #11]
 800971a:	429a      	cmp	r2, r3
 800971c:	d20a      	bcs.n	8009734 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	607b      	str	r3, [r7, #4]
}
 8009730:	bf00      	nop
 8009732:	e7fe      	b.n	8009732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009734:	4b0e      	ldr	r3, [pc, #56]	; (8009770 <vPortValidateInterruptPriority+0x78>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800973c:	4b0d      	ldr	r3, [pc, #52]	; (8009774 <vPortValidateInterruptPriority+0x7c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	429a      	cmp	r2, r3
 8009742:	d90a      	bls.n	800975a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009748:	f383 8811 	msr	BASEPRI, r3
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	603b      	str	r3, [r7, #0]
}
 8009756:	bf00      	nop
 8009758:	e7fe      	b.n	8009758 <vPortValidateInterruptPriority+0x60>
	}
 800975a:	bf00      	nop
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	e000e3f0 	.word	0xe000e3f0
 800976c:	200004a4 	.word	0x200004a4
 8009770:	e000ed0c 	.word	0xe000ed0c
 8009774:	200004a8 	.word	0x200004a8

08009778 <vSetVarulMaxPRIGROUPValuE>:

#if( configASSERT_DEFINED == 1 )

void vSetVarulMaxPRIGROUPValuE( void )
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
	// copy code port.c line 299 to 359

#if( configASSERT_DEFINED == 1 )
{
	volatile uint32_t ulOriginalPriority;
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800977e:	4b27      	ldr	r3, [pc, #156]	; (800981c <vSetVarulMaxPRIGROUPValuE+0xa4>)
 8009780:	60fb      	str	r3, [r7, #12]
	functions can be called.  ISR safe functions are those that end in
	"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
	ensure interrupt entry is as fast and simple as possible.

	Save the interrupt priority value that is about to be clobbered. */
	ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	b2db      	uxtb	r3, r3
 8009788:	607b      	str	r3, [r7, #4]

	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	22ff      	movs	r2, #255	; 0xff
 800978e:	701a      	strb	r2, [r3, #0]

	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	b2db      	uxtb	r3, r3
 8009796:	70fb      	strb	r3, [r7, #3]

	/* Use the same mask on the maximum system call priority. */
	ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	b2db      	uxtb	r3, r3
 800979c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	4b1f      	ldr	r3, [pc, #124]	; (8009820 <vSetVarulMaxPRIGROUPValuE+0xa8>)
 80097a4:	701a      	strb	r2, [r3, #0]

	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097a6:	4b1f      	ldr	r3, [pc, #124]	; (8009824 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80097a8:	2207      	movs	r2, #7
 80097aa:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097ac:	e009      	b.n	80097c2 <vSetVarulMaxPRIGROUPValuE+0x4a>
	{
		ulMaxPRIGROUPValue--;
 80097ae:	4b1d      	ldr	r3, [pc, #116]	; (8009824 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3b01      	subs	r3, #1
 80097b4:	4a1b      	ldr	r2, [pc, #108]	; (8009824 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80097b6:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097b8:	78fb      	ldrb	r3, [r7, #3]
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	70fb      	strb	r3, [r7, #3]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097c2:	78fb      	ldrb	r3, [r7, #3]
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ca:	2b80      	cmp	r3, #128	; 0x80
 80097cc:	d0ef      	beq.n	80097ae <vSetVarulMaxPRIGROUPValuE+0x36>
	#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097ce:	4b15      	ldr	r3, [pc, #84]	; (8009824 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f1c3 0307 	rsb	r3, r3, #7
 80097d6:	2b04      	cmp	r3, #4
 80097d8:	d00a      	beq.n	80097f0 <vSetVarulMaxPRIGROUPValuE+0x78>
	__asm volatile
 80097da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097de:	f383 8811 	msr	BASEPRI, r3
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	60bb      	str	r3, [r7, #8]
}
 80097ec:	bf00      	nop
 80097ee:	e7fe      	b.n	80097ee <vSetVarulMaxPRIGROUPValuE+0x76>
	}
	#endif

	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097f0:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	021b      	lsls	r3, r3, #8
 80097f6:	4a0b      	ldr	r2, [pc, #44]	; (8009824 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80097f8:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097fa:	4b0a      	ldr	r3, [pc, #40]	; (8009824 <vSetVarulMaxPRIGROUPValuE+0xac>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009802:	4a08      	ldr	r2, [pc, #32]	; (8009824 <vSetVarulMaxPRIGROUPValuE+0xac>)
 8009804:	6013      	str	r3, [r2, #0]

	/* Restore the clobbered interrupt priority register to its original
	value. */
	*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	b2da      	uxtb	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	701a      	strb	r2, [r3, #0]
}
#endif /* conifgASSERT_DEFINED */


}
 800980e:	bf00      	nop
 8009810:	3714      	adds	r7, #20
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	e000e400 	.word	0xe000e400
 8009820:	200004a4 	.word	0x200004a4
 8009824:	200004a8 	.word	0x200004a8

08009828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b08a      	sub	sp, #40	; 0x28
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009830:	2300      	movs	r3, #0
 8009832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009834:	f7ff f862 	bl	80088fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009838:	4b5b      	ldr	r3, [pc, #364]	; (80099a8 <pvPortMalloc+0x180>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009840:	f000 f920 	bl	8009a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009844:	4b59      	ldr	r3, [pc, #356]	; (80099ac <pvPortMalloc+0x184>)
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4013      	ands	r3, r2
 800984c:	2b00      	cmp	r3, #0
 800984e:	f040 8093 	bne.w	8009978 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d01d      	beq.n	8009894 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009858:	2208      	movs	r2, #8
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4413      	add	r3, r2
 800985e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f003 0307 	and.w	r3, r3, #7
 8009866:	2b00      	cmp	r3, #0
 8009868:	d014      	beq.n	8009894 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f023 0307 	bic.w	r3, r3, #7
 8009870:	3308      	adds	r3, #8
 8009872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f003 0307 	and.w	r3, r3, #7
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00a      	beq.n	8009894 <pvPortMalloc+0x6c>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	617b      	str	r3, [r7, #20]
}
 8009890:	bf00      	nop
 8009892:	e7fe      	b.n	8009892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d06e      	beq.n	8009978 <pvPortMalloc+0x150>
 800989a:	4b45      	ldr	r3, [pc, #276]	; (80099b0 <pvPortMalloc+0x188>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d869      	bhi.n	8009978 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80098a4:	4b43      	ldr	r3, [pc, #268]	; (80099b4 <pvPortMalloc+0x18c>)
 80098a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80098a8:	4b42      	ldr	r3, [pc, #264]	; (80099b4 <pvPortMalloc+0x18c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098ae:	e004      	b.n	80098ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80098b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80098b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d903      	bls.n	80098cc <pvPortMalloc+0xa4>
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1f1      	bne.n	80098b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80098cc:	4b36      	ldr	r3, [pc, #216]	; (80099a8 <pvPortMalloc+0x180>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d050      	beq.n	8009978 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2208      	movs	r2, #8
 80098dc:	4413      	add	r3, r2
 80098de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80098e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ea:	685a      	ldr	r2, [r3, #4]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	1ad2      	subs	r2, r2, r3
 80098f0:	2308      	movs	r3, #8
 80098f2:	005b      	lsls	r3, r3, #1
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d91f      	bls.n	8009938 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80098f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4413      	add	r3, r2
 80098fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	f003 0307 	and.w	r3, r3, #7
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00a      	beq.n	8009920 <pvPortMalloc+0xf8>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	613b      	str	r3, [r7, #16]
}
 800991c:	bf00      	nop
 800991e:	e7fe      	b.n	800991e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	1ad2      	subs	r2, r2, r3
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009932:	69b8      	ldr	r0, [r7, #24]
 8009934:	f000 f908 	bl	8009b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009938:	4b1d      	ldr	r3, [pc, #116]	; (80099b0 <pvPortMalloc+0x188>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	4a1b      	ldr	r2, [pc, #108]	; (80099b0 <pvPortMalloc+0x188>)
 8009944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009946:	4b1a      	ldr	r3, [pc, #104]	; (80099b0 <pvPortMalloc+0x188>)
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	4b1b      	ldr	r3, [pc, #108]	; (80099b8 <pvPortMalloc+0x190>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	429a      	cmp	r2, r3
 8009950:	d203      	bcs.n	800995a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009952:	4b17      	ldr	r3, [pc, #92]	; (80099b0 <pvPortMalloc+0x188>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a18      	ldr	r2, [pc, #96]	; (80099b8 <pvPortMalloc+0x190>)
 8009958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	685a      	ldr	r2, [r3, #4]
 800995e:	4b13      	ldr	r3, [pc, #76]	; (80099ac <pvPortMalloc+0x184>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	431a      	orrs	r2, r3
 8009964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996a:	2200      	movs	r2, #0
 800996c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800996e:	4b13      	ldr	r3, [pc, #76]	; (80099bc <pvPortMalloc+0x194>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3301      	adds	r3, #1
 8009974:	4a11      	ldr	r2, [pc, #68]	; (80099bc <pvPortMalloc+0x194>)
 8009976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009978:	f7fe ffce 	bl	8008918 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	f003 0307 	and.w	r3, r3, #7
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00a      	beq.n	800999c <pvPortMalloc+0x174>
	__asm volatile
 8009986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998a:	f383 8811 	msr	BASEPRI, r3
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	f3bf 8f4f 	dsb	sy
 8009996:	60fb      	str	r3, [r7, #12]
}
 8009998:	bf00      	nop
 800999a:	e7fe      	b.n	800999a <pvPortMalloc+0x172>
	return pvReturn;
 800999c:	69fb      	ldr	r3, [r7, #28]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3728      	adds	r7, #40	; 0x28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	200040b4 	.word	0x200040b4
 80099ac:	200040c8 	.word	0x200040c8
 80099b0:	200040b8 	.word	0x200040b8
 80099b4:	200040ac 	.word	0x200040ac
 80099b8:	200040bc 	.word	0x200040bc
 80099bc:	200040c0 	.word	0x200040c0

080099c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d04d      	beq.n	8009a6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80099d2:	2308      	movs	r3, #8
 80099d4:	425b      	negs	r3, r3
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	4413      	add	r3, r2
 80099da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	4b24      	ldr	r3, [pc, #144]	; (8009a78 <vPortFree+0xb8>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4013      	ands	r3, r2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10a      	bne.n	8009a04 <vPortFree+0x44>
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	60fb      	str	r3, [r7, #12]
}
 8009a00:	bf00      	nop
 8009a02:	e7fe      	b.n	8009a02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00a      	beq.n	8009a22 <vPortFree+0x62>
	__asm volatile
 8009a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	60bb      	str	r3, [r7, #8]
}
 8009a1e:	bf00      	nop
 8009a20:	e7fe      	b.n	8009a20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	685a      	ldr	r2, [r3, #4]
 8009a26:	4b14      	ldr	r3, [pc, #80]	; (8009a78 <vPortFree+0xb8>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d01e      	beq.n	8009a6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d11a      	bne.n	8009a6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	4b0e      	ldr	r3, [pc, #56]	; (8009a78 <vPortFree+0xb8>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	43db      	mvns	r3, r3
 8009a42:	401a      	ands	r2, r3
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009a48:	f7fe ff58 	bl	80088fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	685a      	ldr	r2, [r3, #4]
 8009a50:	4b0a      	ldr	r3, [pc, #40]	; (8009a7c <vPortFree+0xbc>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4413      	add	r3, r2
 8009a56:	4a09      	ldr	r2, [pc, #36]	; (8009a7c <vPortFree+0xbc>)
 8009a58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a5a:	6938      	ldr	r0, [r7, #16]
 8009a5c:	f000 f874 	bl	8009b48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009a60:	4b07      	ldr	r3, [pc, #28]	; (8009a80 <vPortFree+0xc0>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3301      	adds	r3, #1
 8009a66:	4a06      	ldr	r2, [pc, #24]	; (8009a80 <vPortFree+0xc0>)
 8009a68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009a6a:	f7fe ff55 	bl	8008918 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a6e:	bf00      	nop
 8009a70:	3718      	adds	r7, #24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	200040c8 	.word	0x200040c8
 8009a7c:	200040b8 	.word	0x200040b8
 8009a80:	200040c4 	.word	0x200040c4

08009a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a90:	4b27      	ldr	r3, [pc, #156]	; (8009b30 <prvHeapInit+0xac>)
 8009a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00c      	beq.n	8009ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3307      	adds	r3, #7
 8009aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f023 0307 	bic.w	r3, r3, #7
 8009aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009aac:	68ba      	ldr	r2, [r7, #8]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	4a1f      	ldr	r2, [pc, #124]	; (8009b30 <prvHeapInit+0xac>)
 8009ab4:	4413      	add	r3, r2
 8009ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009abc:	4a1d      	ldr	r2, [pc, #116]	; (8009b34 <prvHeapInit+0xb0>)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ac2:	4b1c      	ldr	r3, [pc, #112]	; (8009b34 <prvHeapInit+0xb0>)
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	4413      	add	r3, r2
 8009ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ad0:	2208      	movs	r2, #8
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	1a9b      	subs	r3, r3, r2
 8009ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f023 0307 	bic.w	r3, r3, #7
 8009ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	4a15      	ldr	r2, [pc, #84]	; (8009b38 <prvHeapInit+0xb4>)
 8009ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ae6:	4b14      	ldr	r3, [pc, #80]	; (8009b38 <prvHeapInit+0xb4>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2200      	movs	r2, #0
 8009aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009aee:	4b12      	ldr	r3, [pc, #72]	; (8009b38 <prvHeapInit+0xb4>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2200      	movs	r2, #0
 8009af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	1ad2      	subs	r2, r2, r3
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b04:	4b0c      	ldr	r3, [pc, #48]	; (8009b38 <prvHeapInit+0xb4>)
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	4a0a      	ldr	r2, [pc, #40]	; (8009b3c <prvHeapInit+0xb8>)
 8009b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	4a09      	ldr	r2, [pc, #36]	; (8009b40 <prvHeapInit+0xbc>)
 8009b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b1c:	4b09      	ldr	r3, [pc, #36]	; (8009b44 <prvHeapInit+0xc0>)
 8009b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009b22:	601a      	str	r2, [r3, #0]
}
 8009b24:	bf00      	nop
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	200004ac 	.word	0x200004ac
 8009b34:	200040ac 	.word	0x200040ac
 8009b38:	200040b4 	.word	0x200040b4
 8009b3c:	200040bc 	.word	0x200040bc
 8009b40:	200040b8 	.word	0x200040b8
 8009b44:	200040c8 	.word	0x200040c8

08009b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b50:	4b28      	ldr	r3, [pc, #160]	; (8009bf4 <prvInsertBlockIntoFreeList+0xac>)
 8009b52:	60fb      	str	r3, [r7, #12]
 8009b54:	e002      	b.n	8009b5c <prvInsertBlockIntoFreeList+0x14>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	60fb      	str	r3, [r7, #12]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d8f7      	bhi.n	8009b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	4413      	add	r3, r2
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d108      	bne.n	8009b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	685a      	ldr	r2, [r3, #4]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	441a      	add	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	441a      	add	r2, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d118      	bne.n	8009bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	4b15      	ldr	r3, [pc, #84]	; (8009bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d00d      	beq.n	8009bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	441a      	add	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	e008      	b.n	8009bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009bc6:	4b0c      	ldr	r3, [pc, #48]	; (8009bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	601a      	str	r2, [r3, #0]
 8009bce:	e003      	b.n	8009bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d002      	beq.n	8009be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009be6:	bf00      	nop
 8009be8:	3714      	adds	r7, #20
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	200040ac 	.word	0x200040ac
 8009bf8:	200040b4 	.word	0x200040b4

08009bfc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8009c00:	4803      	ldr	r0, [pc, #12]	; (8009c10 <_cbSendSystemDesc+0x14>)
 8009c02:	f001 fa5f 	bl	800b0c4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8009c06:	4803      	ldr	r0, [pc, #12]	; (8009c14 <_cbSendSystemDesc+0x18>)
 8009c08:	f001 fa5c 	bl	800b0c4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8009c0c:	bf00      	nop
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	0800d010 	.word	0x0800d010
 8009c14:	0800d044 	.word	0x0800d044

08009c18 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8009c1c:	4b06      	ldr	r3, [pc, #24]	; (8009c38 <SEGGER_SYSVIEW_Conf+0x20>)
 8009c1e:	6818      	ldr	r0, [r3, #0]
 8009c20:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <SEGGER_SYSVIEW_Conf+0x20>)
 8009c22:	6819      	ldr	r1, [r3, #0]
 8009c24:	4b05      	ldr	r3, [pc, #20]	; (8009c3c <SEGGER_SYSVIEW_Conf+0x24>)
 8009c26:	4a06      	ldr	r2, [pc, #24]	; (8009c40 <SEGGER_SYSVIEW_Conf+0x28>)
 8009c28:	f000 fdcc 	bl	800a7c4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8009c2c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8009c30:	f000 fe06 	bl	800a840 <SEGGER_SYSVIEW_SetRAMBase>
}
 8009c34:	bf00      	nop
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	20000000 	.word	0x20000000
 8009c3c:	08009bfd 	.word	0x08009bfd
 8009c40:	0800d0e4 	.word	0x0800d0e4

08009c44 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8009c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	607b      	str	r3, [r7, #4]
 8009c4e:	e033      	b.n	8009cb8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8009c50:	491e      	ldr	r1, [pc, #120]	; (8009ccc <_cbSendTaskList+0x88>)
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	4613      	mov	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4413      	add	r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	440b      	add	r3, r1
 8009c5e:	6818      	ldr	r0, [r3, #0]
 8009c60:	491a      	ldr	r1, [pc, #104]	; (8009ccc <_cbSendTaskList+0x88>)
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	4613      	mov	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4413      	add	r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	440b      	add	r3, r1
 8009c6e:	3304      	adds	r3, #4
 8009c70:	6819      	ldr	r1, [r3, #0]
 8009c72:	4c16      	ldr	r4, [pc, #88]	; (8009ccc <_cbSendTaskList+0x88>)
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	4613      	mov	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4423      	add	r3, r4
 8009c80:	3308      	adds	r3, #8
 8009c82:	681c      	ldr	r4, [r3, #0]
 8009c84:	4d11      	ldr	r5, [pc, #68]	; (8009ccc <_cbSendTaskList+0x88>)
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	442b      	add	r3, r5
 8009c92:	330c      	adds	r3, #12
 8009c94:	681d      	ldr	r5, [r3, #0]
 8009c96:	4e0d      	ldr	r6, [pc, #52]	; (8009ccc <_cbSendTaskList+0x88>)
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4433      	add	r3, r6
 8009ca4:	3310      	adds	r3, #16
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	462b      	mov	r3, r5
 8009cac:	4622      	mov	r2, r4
 8009cae:	f000 f92d 	bl	8009f0c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	607b      	str	r3, [r7, #4]
 8009cb8:	4b05      	ldr	r3, [pc, #20]	; (8009cd0 <_cbSendTaskList+0x8c>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d3c6      	bcc.n	8009c50 <_cbSendTaskList+0xc>
  }
}
 8009cc2:	bf00      	nop
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ccc:	200040cc 	.word	0x200040cc
 8009cd0:	2000416c 	.word	0x2000416c

08009cd4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8009cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cd8:	b082      	sub	sp, #8
 8009cda:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8009cdc:	f7fe febc 	bl	8008a58 <xTaskGetTickCountFromISR>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	469a      	mov	sl, r3
 8009ce6:	4693      	mov	fp, r2
 8009ce8:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8009cec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	f04f 0a00 	mov.w	sl, #0
 8009cf8:	f04f 0b00 	mov.w	fp, #0
 8009cfc:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8009d00:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8009d04:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8009d08:	4652      	mov	r2, sl
 8009d0a:	465b      	mov	r3, fp
 8009d0c:	1a14      	subs	r4, r2, r0
 8009d0e:	eb63 0501 	sbc.w	r5, r3, r1
 8009d12:	f04f 0200 	mov.w	r2, #0
 8009d16:	f04f 0300 	mov.w	r3, #0
 8009d1a:	00ab      	lsls	r3, r5, #2
 8009d1c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8009d20:	00a2      	lsls	r2, r4, #2
 8009d22:	4614      	mov	r4, r2
 8009d24:	461d      	mov	r5, r3
 8009d26:	eb14 0800 	adds.w	r8, r4, r0
 8009d2a:	eb45 0901 	adc.w	r9, r5, r1
 8009d2e:	f04f 0200 	mov.w	r2, #0
 8009d32:	f04f 0300 	mov.w	r3, #0
 8009d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d42:	4690      	mov	r8, r2
 8009d44:	4699      	mov	r9, r3
 8009d46:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8009d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8009d4e:	4610      	mov	r0, r2
 8009d50:	4619      	mov	r1, r3
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08009d5c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af02      	add	r7, sp, #8
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	607a      	str	r2, [r7, #4]
 8009d68:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8009d6a:	2205      	movs	r2, #5
 8009d6c:	492b      	ldr	r1, [pc, #172]	; (8009e1c <SYSVIEW_AddTask+0xc0>)
 8009d6e:	68b8      	ldr	r0, [r7, #8]
 8009d70:	f002 f846 	bl	800be00 <memcmp>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d04b      	beq.n	8009e12 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8009d7a:	4b29      	ldr	r3, [pc, #164]	; (8009e20 <SYSVIEW_AddTask+0xc4>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b07      	cmp	r3, #7
 8009d80:	d903      	bls.n	8009d8a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8009d82:	4828      	ldr	r0, [pc, #160]	; (8009e24 <SYSVIEW_AddTask+0xc8>)
 8009d84:	f001 fca4 	bl	800b6d0 <SEGGER_SYSVIEW_Warn>
    return;
 8009d88:	e044      	b.n	8009e14 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8009d8a:	4b25      	ldr	r3, [pc, #148]	; (8009e20 <SYSVIEW_AddTask+0xc4>)
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	4926      	ldr	r1, [pc, #152]	; (8009e28 <SYSVIEW_AddTask+0xcc>)
 8009d90:	4613      	mov	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	440b      	add	r3, r1
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8009d9e:	4b20      	ldr	r3, [pc, #128]	; (8009e20 <SYSVIEW_AddTask+0xc4>)
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	4921      	ldr	r1, [pc, #132]	; (8009e28 <SYSVIEW_AddTask+0xcc>)
 8009da4:	4613      	mov	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	440b      	add	r3, r1
 8009dae:	3304      	adds	r3, #4
 8009db0:	68ba      	ldr	r2, [r7, #8]
 8009db2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8009db4:	4b1a      	ldr	r3, [pc, #104]	; (8009e20 <SYSVIEW_AddTask+0xc4>)
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	491b      	ldr	r1, [pc, #108]	; (8009e28 <SYSVIEW_AddTask+0xcc>)
 8009dba:	4613      	mov	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	440b      	add	r3, r1
 8009dc4:	3308      	adds	r3, #8
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8009dca:	4b15      	ldr	r3, [pc, #84]	; (8009e20 <SYSVIEW_AddTask+0xc4>)
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	4916      	ldr	r1, [pc, #88]	; (8009e28 <SYSVIEW_AddTask+0xcc>)
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	440b      	add	r3, r1
 8009dda:	330c      	adds	r3, #12
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8009de0:	4b0f      	ldr	r3, [pc, #60]	; (8009e20 <SYSVIEW_AddTask+0xc4>)
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	4910      	ldr	r1, [pc, #64]	; (8009e28 <SYSVIEW_AddTask+0xcc>)
 8009de6:	4613      	mov	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	440b      	add	r3, r1
 8009df0:	3310      	adds	r3, #16
 8009df2:	69ba      	ldr	r2, [r7, #24]
 8009df4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8009df6:	4b0a      	ldr	r3, [pc, #40]	; (8009e20 <SYSVIEW_AddTask+0xc4>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	4a08      	ldr	r2, [pc, #32]	; (8009e20 <SYSVIEW_AddTask+0xc4>)
 8009dfe:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	68b9      	ldr	r1, [r7, #8]
 8009e0a:	68f8      	ldr	r0, [r7, #12]
 8009e0c:	f000 f87e 	bl	8009f0c <SYSVIEW_SendTaskInfo>
 8009e10:	e000      	b.n	8009e14 <SYSVIEW_AddTask+0xb8>
    return;
 8009e12:	bf00      	nop

}
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	0800d054 	.word	0x0800d054
 8009e20:	2000416c 	.word	0x2000416c
 8009e24:	0800d05c 	.word	0x0800d05c
 8009e28:	200040cc 	.word	0x200040cc

08009e2c <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b088      	sub	sp, #32
 8009e30:	af02      	add	r7, sp, #8
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
 8009e38:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8009e3a:	2205      	movs	r2, #5
 8009e3c:	4930      	ldr	r1, [pc, #192]	; (8009f00 <SYSVIEW_UpdateTask+0xd4>)
 8009e3e:	68b8      	ldr	r0, [r7, #8]
 8009e40:	f001 ffde 	bl	800be00 <memcmp>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d056      	beq.n	8009ef8 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	617b      	str	r3, [r7, #20]
 8009e4e:	e00d      	b.n	8009e6c <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8009e50:	492c      	ldr	r1, [pc, #176]	; (8009f04 <SYSVIEW_UpdateTask+0xd8>)
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	4613      	mov	r3, r2
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4413      	add	r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	440b      	add	r3, r1
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d008      	beq.n	8009e78 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	617b      	str	r3, [r7, #20]
 8009e6c:	4b26      	ldr	r3, [pc, #152]	; (8009f08 <SYSVIEW_UpdateTask+0xdc>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	697a      	ldr	r2, [r7, #20]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d3ec      	bcc.n	8009e50 <SYSVIEW_UpdateTask+0x24>
 8009e76:	e000      	b.n	8009e7a <SYSVIEW_UpdateTask+0x4e>
      break;
 8009e78:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8009e7a:	4b23      	ldr	r3, [pc, #140]	; (8009f08 <SYSVIEW_UpdateTask+0xdc>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	697a      	ldr	r2, [r7, #20]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d230      	bcs.n	8009ee6 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8009e84:	491f      	ldr	r1, [pc, #124]	; (8009f04 <SYSVIEW_UpdateTask+0xd8>)
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	4613      	mov	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	440b      	add	r3, r1
 8009e92:	3304      	adds	r3, #4
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8009e98:	491a      	ldr	r1, [pc, #104]	; (8009f04 <SYSVIEW_UpdateTask+0xd8>)
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4413      	add	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	440b      	add	r3, r1
 8009ea6:	3308      	adds	r3, #8
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8009eac:	4915      	ldr	r1, [pc, #84]	; (8009f04 <SYSVIEW_UpdateTask+0xd8>)
 8009eae:	697a      	ldr	r2, [r7, #20]
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	4413      	add	r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	440b      	add	r3, r1
 8009eba:	330c      	adds	r3, #12
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8009ec0:	4910      	ldr	r1, [pc, #64]	; (8009f04 <SYSVIEW_UpdateTask+0xd8>)
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	440b      	add	r3, r1
 8009ece:	3310      	adds	r3, #16
 8009ed0:	6a3a      	ldr	r2, [r7, #32]
 8009ed2:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	68b9      	ldr	r1, [r7, #8]
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f000 f814 	bl	8009f0c <SYSVIEW_SendTaskInfo>
 8009ee4:	e009      	b.n	8009efa <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8009ee6:	6a3b      	ldr	r3, [r7, #32]
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	68b9      	ldr	r1, [r7, #8]
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f7ff ff33 	bl	8009d5c <SYSVIEW_AddTask>
 8009ef6:	e000      	b.n	8009efa <SYSVIEW_UpdateTask+0xce>
    return;
 8009ef8:	bf00      	nop
  }
}
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	0800d054 	.word	0x0800d054
 8009f04:	200040cc 	.word	0x200040cc
 8009f08:	2000416c 	.word	0x2000416c

08009f0c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b08a      	sub	sp, #40	; 0x28
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
 8009f18:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8009f1a:	f107 0314 	add.w	r3, r7, #20
 8009f1e:	2214      	movs	r2, #20
 8009f20:	2100      	movs	r1, #0
 8009f22:	4618      	mov	r0, r3
 8009f24:	f001 ff8a 	bl	800be3c <memset>
  TaskInfo.TaskID     = TaskID;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8009f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8009f3c:	f107 0314 	add.w	r3, r7, #20
 8009f40:	4618      	mov	r0, r3
 8009f42:	f000 ffc5 	bl	800aed0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8009f46:	bf00      	nop
 8009f48:	3728      	adds	r7, #40	; 0x28
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
	...

08009f50 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8009f56:	4b21      	ldr	r3, [pc, #132]	; (8009fdc <_DoInit+0x8c>)
 8009f58:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2203      	movs	r2, #3
 8009f5e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2203      	movs	r2, #3
 8009f64:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	4a1d      	ldr	r2, [pc, #116]	; (8009fe0 <_DoInit+0x90>)
 8009f6a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a1d      	ldr	r2, [pc, #116]	; (8009fe4 <_DoInit+0x94>)
 8009f70:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f78:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a14      	ldr	r2, [pc, #80]	; (8009fe0 <_DoInit+0x90>)
 8009f90:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a14      	ldr	r2, [pc, #80]	; (8009fe8 <_DoInit+0x98>)
 8009f96:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2210      	movs	r2, #16
 8009f9c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3307      	adds	r3, #7
 8009fb4:	4a0d      	ldr	r2, [pc, #52]	; (8009fec <_DoInit+0x9c>)
 8009fb6:	6810      	ldr	r0, [r2, #0]
 8009fb8:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a0c      	ldr	r2, [pc, #48]	; (8009ff0 <_DoInit+0xa0>)
 8009fbe:	6810      	ldr	r0, [r2, #0]
 8009fc0:	6018      	str	r0, [r3, #0]
 8009fc2:	8891      	ldrh	r1, [r2, #4]
 8009fc4:	7992      	ldrb	r2, [r2, #6]
 8009fc6:	8099      	strh	r1, [r3, #4]
 8009fc8:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2220      	movs	r2, #32
 8009fce:	719a      	strb	r2, [r3, #6]
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	20004170 	.word	0x20004170
 8009fe0:	0800d0ac 	.word	0x0800d0ac
 8009fe4:	20004218 	.word	0x20004218
 8009fe8:	20004618 	.word	0x20004618
 8009fec:	0800d0b8 	.word	0x0800d0b8
 8009ff0:	0800d0bc 	.word	0x0800d0bc

08009ff4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b08a      	sub	sp, #40	; 0x28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800a000:	4b3c      	ldr	r3, [pc, #240]	; (800a0f4 <SEGGER_RTT_ReadNoLock+0x100>)
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <SEGGER_RTT_ReadNoLock+0x18>
 800a008:	f7ff ffa2 	bl	8009f50 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	4613      	mov	r3, r2
 800a010:	005b      	lsls	r3, r3, #1
 800a012:	4413      	add	r3, r2
 800a014:	00db      	lsls	r3, r3, #3
 800a016:	3360      	adds	r3, #96	; 0x60
 800a018:	4a36      	ldr	r2, [pc, #216]	; (800a0f4 <SEGGER_RTT_ReadNoLock+0x100>)
 800a01a:	4413      	add	r3, r2
 800a01c:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800a02e:	2300      	movs	r3, #0
 800a030:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800a032:	6a3a      	ldr	r2, [r7, #32]
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	429a      	cmp	r2, r3
 800a038:	d92a      	bls.n	800a090 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	689a      	ldr	r2, [r3, #8]
 800a03e:	6a3b      	ldr	r3, [r7, #32]
 800a040:	1ad3      	subs	r3, r2, r3
 800a042:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4293      	cmp	r3, r2
 800a04a:	bf28      	it	cs
 800a04c:	4613      	movcs	r3, r2
 800a04e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	685a      	ldr	r2, [r3, #4]
 800a054:	6a3b      	ldr	r3, [r7, #32]
 800a056:	4413      	add	r3, r2
 800a058:	693a      	ldr	r2, [r7, #16]
 800a05a:	4619      	mov	r1, r3
 800a05c:	69f8      	ldr	r0, [r7, #28]
 800a05e:	f001 fedf 	bl	800be20 <memcpy>
    NumBytesRead += NumBytesRem;
 800a062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	4413      	add	r3, r2
 800a068:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800a06a:	69fa      	ldr	r2, [r7, #28]
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	4413      	add	r3, r2
 800a070:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800a07a:	6a3a      	ldr	r2, [r7, #32]
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	4413      	add	r3, r2
 800a080:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	6a3a      	ldr	r2, [r7, #32]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d101      	bne.n	800a090 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 800a08c:	2300      	movs	r3, #0
 800a08e:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800a090:	697a      	ldr	r2, [r7, #20]
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4293      	cmp	r3, r2
 800a09e:	bf28      	it	cs
 800a0a0:	4613      	movcs	r3, r2
 800a0a2:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d018      	beq.n	800a0dc <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	685a      	ldr	r2, [r3, #4]
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	693a      	ldr	r2, [r7, #16]
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	69f8      	ldr	r0, [r7, #28]
 800a0b8:	f001 feb2 	bl	800be20 <memcpy>
    NumBytesRead += NumBytesRem;
 800a0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800a0c4:	69fa      	ldr	r2, [r7, #28]
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800a0d4:	6a3a      	ldr	r2, [r7, #32]
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	4413      	add	r3, r2
 800a0da:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d002      	beq.n	800a0e8 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	6a3a      	ldr	r2, [r7, #32]
 800a0e6:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3728      	adds	r7, #40	; 0x28
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20004170 	.word	0x20004170

0800a0f8 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b08a      	sub	sp, #40	; 0x28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	1c5a      	adds	r2, r3, #1
 800a10c:	4613      	mov	r3, r2
 800a10e:	005b      	lsls	r3, r3, #1
 800a110:	4413      	add	r3, r2
 800a112:	00db      	lsls	r3, r3, #3
 800a114:	4a3f      	ldr	r2, [pc, #252]	; (800a214 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 800a116:	4413      	add	r3, r2
 800a118:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 800a11a:	6a3b      	ldr	r3, [r7, #32]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 800a120:	6a3b      	ldr	r3, [r7, #32]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 800a126:	69fa      	ldr	r2, [r7, #28]
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d854      	bhi.n	800a1d8 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 800a12e:	6a3b      	ldr	r3, [r7, #32]
 800a130:	689a      	ldr	r2, [r3, #8]
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	3b01      	subs	r3, #1
 800a138:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800a13a:	697a      	ldr	r2, [r7, #20]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d30f      	bcc.n	800a162 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800a142:	6a3b      	ldr	r3, [r7, #32]
 800a144:	685a      	ldr	r2, [r3, #4]
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	4413      	add	r3, r2
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a14e:	4618      	mov	r0, r3
 800a150:	f001 fe66 	bl	800be20 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 800a154:	69ba      	ldr	r2, [r7, #24]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	441a      	add	r2, r3
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800a15e:	2301      	movs	r3, #1
 800a160:	e054      	b.n	800a20c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	4413      	add	r3, r2
 800a168:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d34b      	bcc.n	800a20a <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	689a      	ldr	r2, [r3, #8]
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	429a      	cmp	r2, r3
 800a182:	d90e      	bls.n	800a1a2 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800a184:	6a3b      	ldr	r3, [r7, #32]
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	4413      	add	r3, r2
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a190:	4618      	mov	r0, r3
 800a192:	f001 fe45 	bl	800be20 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 800a196:	69ba      	ldr	r2, [r7, #24]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	441a      	add	r2, r3
 800a19c:	6a3b      	ldr	r3, [r7, #32]
 800a19e:	60da      	str	r2, [r3, #12]
 800a1a0:	e018      	b.n	800a1d4 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	693a      	ldr	r2, [r7, #16]
 800a1ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f001 fe36 	bl	800be20 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	6858      	ldr	r0, [r3, #4]
 800a1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	18d1      	adds	r1, r2, r3
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	f001 fe2b 	bl	800be20 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	1ad2      	subs	r2, r2, r3
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e019      	b.n	800a20c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 800a1d8:	69fa      	ldr	r2, [r7, #28]
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	1ad3      	subs	r3, r2, r3
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800a1e2:	697a      	ldr	r2, [r7, #20]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d30f      	bcc.n	800a20a <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	685a      	ldr	r2, [r3, #4]
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f001 fe12 	bl	800be20 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 800a1fc:	69ba      	ldr	r2, [r7, #24]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	441a      	add	r2, r3
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800a206:	2301      	movs	r3, #1
 800a208:	e000      	b.n	800a20c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3728      	adds	r7, #40	; 0x28
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	20004170 	.word	0x20004170

0800a218 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
 800a224:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800a226:	4b30      	ldr	r3, [pc, #192]	; (800a2e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d101      	bne.n	800a232 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800a22e:	f7ff fe8f 	bl	8009f50 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800a232:	4b2d      	ldr	r3, [pc, #180]	; (800a2e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	461a      	mov	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d24c      	bcs.n	800a2d8 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800a23e:	f3ef 8311 	mrs	r3, BASEPRI
 800a242:	f04f 0120 	mov.w	r1, #32
 800a246:	f381 8811 	msr	BASEPRI, r1
 800a24a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d032      	beq.n	800a2b8 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800a252:	4925      	ldr	r1, [pc, #148]	; (800a2e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	1c5a      	adds	r2, r3, #1
 800a258:	4613      	mov	r3, r2
 800a25a:	005b      	lsls	r3, r3, #1
 800a25c:	4413      	add	r3, r2
 800a25e:	00db      	lsls	r3, r3, #3
 800a260:	440b      	add	r3, r1
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800a266:	4920      	ldr	r1, [pc, #128]	; (800a2e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	1c5a      	adds	r2, r3, #1
 800a26c:	4613      	mov	r3, r2
 800a26e:	005b      	lsls	r3, r3, #1
 800a270:	4413      	add	r3, r2
 800a272:	00db      	lsls	r3, r3, #3
 800a274:	440b      	add	r3, r1
 800a276:	3304      	adds	r3, #4
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800a27c:	491a      	ldr	r1, [pc, #104]	; (800a2e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	4613      	mov	r3, r2
 800a282:	005b      	lsls	r3, r3, #1
 800a284:	4413      	add	r3, r2
 800a286:	00db      	lsls	r3, r3, #3
 800a288:	440b      	add	r3, r1
 800a28a:	3320      	adds	r3, #32
 800a28c:	683a      	ldr	r2, [r7, #0]
 800a28e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800a290:	4915      	ldr	r1, [pc, #84]	; (800a2e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800a292:	68fa      	ldr	r2, [r7, #12]
 800a294:	4613      	mov	r3, r2
 800a296:	005b      	lsls	r3, r3, #1
 800a298:	4413      	add	r3, r2
 800a29a:	00db      	lsls	r3, r3, #3
 800a29c:	440b      	add	r3, r1
 800a29e:	3328      	adds	r3, #40	; 0x28
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 800a2a4:	4910      	ldr	r1, [pc, #64]	; (800a2e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	4413      	add	r3, r2
 800a2ae:	00db      	lsls	r3, r3, #3
 800a2b0:	440b      	add	r3, r1
 800a2b2:	3324      	adds	r3, #36	; 0x24
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800a2b8:	490b      	ldr	r1, [pc, #44]	; (800a2e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	005b      	lsls	r3, r3, #1
 800a2c0:	4413      	add	r3, r2
 800a2c2:	00db      	lsls	r3, r3, #3
 800a2c4:	440b      	add	r3, r1
 800a2c6:	332c      	adds	r3, #44	; 0x2c
 800a2c8:	6a3a      	ldr	r2, [r7, #32]
 800a2ca:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	617b      	str	r3, [r7, #20]
 800a2d6:	e002      	b.n	800a2de <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800a2d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2dc:	617b      	str	r3, [r7, #20]
  }
  return r;
 800a2de:	697b      	ldr	r3, [r7, #20]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3718      	adds	r7, #24
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	20004170 	.word	0x20004170

0800a2ec <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
 800a2f8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800a2fa:	4b30      	ldr	r3, [pc, #192]	; (800a3bc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d101      	bne.n	800a306 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800a302:	f7ff fe25 	bl	8009f50 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800a306:	4b2d      	ldr	r3, [pc, #180]	; (800a3bc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	461a      	mov	r2, r3
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4293      	cmp	r3, r2
 800a310:	d24b      	bcs.n	800a3aa <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800a312:	f3ef 8311 	mrs	r3, BASEPRI
 800a316:	f04f 0120 	mov.w	r1, #32
 800a31a:	f381 8811 	msr	BASEPRI, r1
 800a31e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d031      	beq.n	800a38a <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800a326:	4925      	ldr	r1, [pc, #148]	; (800a3bc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	4613      	mov	r3, r2
 800a32c:	005b      	lsls	r3, r3, #1
 800a32e:	4413      	add	r3, r2
 800a330:	00db      	lsls	r3, r3, #3
 800a332:	440b      	add	r3, r1
 800a334:	3360      	adds	r3, #96	; 0x60
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800a33a:	4920      	ldr	r1, [pc, #128]	; (800a3bc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	4613      	mov	r3, r2
 800a340:	005b      	lsls	r3, r3, #1
 800a342:	4413      	add	r3, r2
 800a344:	00db      	lsls	r3, r3, #3
 800a346:	440b      	add	r3, r1
 800a348:	3364      	adds	r3, #100	; 0x64
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800a34e:	491b      	ldr	r1, [pc, #108]	; (800a3bc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	4613      	mov	r3, r2
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	4413      	add	r3, r2
 800a358:	00db      	lsls	r3, r3, #3
 800a35a:	440b      	add	r3, r1
 800a35c:	3368      	adds	r3, #104	; 0x68
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800a362:	4916      	ldr	r1, [pc, #88]	; (800a3bc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	4613      	mov	r3, r2
 800a368:	005b      	lsls	r3, r3, #1
 800a36a:	4413      	add	r3, r2
 800a36c:	00db      	lsls	r3, r3, #3
 800a36e:	440b      	add	r3, r1
 800a370:	3370      	adds	r3, #112	; 0x70
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800a376:	4911      	ldr	r1, [pc, #68]	; (800a3bc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	4613      	mov	r3, r2
 800a37c:	005b      	lsls	r3, r3, #1
 800a37e:	4413      	add	r3, r2
 800a380:	00db      	lsls	r3, r3, #3
 800a382:	440b      	add	r3, r1
 800a384:	336c      	adds	r3, #108	; 0x6c
 800a386:	2200      	movs	r2, #0
 800a388:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800a38a:	490c      	ldr	r1, [pc, #48]	; (800a3bc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	4613      	mov	r3, r2
 800a390:	005b      	lsls	r3, r3, #1
 800a392:	4413      	add	r3, r2
 800a394:	00db      	lsls	r3, r3, #3
 800a396:	440b      	add	r3, r1
 800a398:	3374      	adds	r3, #116	; 0x74
 800a39a:	6a3a      	ldr	r2, [r7, #32]
 800a39c:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	617b      	str	r3, [r7, #20]
 800a3a8:	e002      	b.n	800a3b0 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800a3aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ae:	617b      	str	r3, [r7, #20]
  }
  return r;
 800a3b0:	697b      	ldr	r3, [r7, #20]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3718      	adds	r7, #24
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20004170 	.word	0x20004170

0800a3c0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800a3c0:	b480      	push	{r7}
 800a3c2:	b087      	sub	sp, #28
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800a3d0:	e002      	b.n	800a3d8 <_EncodeStr+0x18>
    Len++;
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	4413      	add	r3, r2
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1f6      	bne.n	800a3d2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d901      	bls.n	800a3f0 <_EncodeStr+0x30>
    Len = Limit;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	2bfe      	cmp	r3, #254	; 0xfe
 800a3f4:	d806      	bhi.n	800a404 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	1c5a      	adds	r2, r3, #1
 800a3fa:	60fa      	str	r2, [r7, #12]
 800a3fc:	693a      	ldr	r2, [r7, #16]
 800a3fe:	b2d2      	uxtb	r2, r2
 800a400:	701a      	strb	r2, [r3, #0]
 800a402:	e011      	b.n	800a428 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	1c5a      	adds	r2, r3, #1
 800a408:	60fa      	str	r2, [r7, #12]
 800a40a:	22ff      	movs	r2, #255	; 0xff
 800a40c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	1c5a      	adds	r2, r3, #1
 800a412:	60fa      	str	r2, [r7, #12]
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	b2d2      	uxtb	r2, r2
 800a418:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	0a19      	lsrs	r1, r3, #8
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	1c5a      	adds	r2, r3, #1
 800a422:	60fa      	str	r2, [r7, #12]
 800a424:	b2ca      	uxtb	r2, r1
 800a426:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800a428:	2300      	movs	r3, #0
 800a42a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800a42c:	e00a      	b.n	800a444 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	1c53      	adds	r3, r2, #1
 800a432:	60bb      	str	r3, [r7, #8]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	1c59      	adds	r1, r3, #1
 800a438:	60f9      	str	r1, [r7, #12]
 800a43a:	7812      	ldrb	r2, [r2, #0]
 800a43c:	701a      	strb	r2, [r3, #0]
    n++;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	3301      	adds	r3, #1
 800a442:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d3f0      	bcc.n	800a42e <_EncodeStr+0x6e>
  }
  return pPayload;
 800a44c:	68fb      	ldr	r3, [r7, #12]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	371c      	adds	r7, #28
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800a45a:	b480      	push	{r7}
 800a45c:	b083      	sub	sp, #12
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	3304      	adds	r3, #4
}
 800a466:	4618      	mov	r0, r3
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
	...

0800a474 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800a47a:	1cfb      	adds	r3, r7, #3
 800a47c:	2201      	movs	r2, #1
 800a47e:	4619      	mov	r1, r3
 800a480:	2001      	movs	r0, #1
 800a482:	f7ff fdb7 	bl	8009ff4 <SEGGER_RTT_ReadNoLock>
 800a486:	4603      	mov	r3, r0
 800a488:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	dd4c      	ble.n	800a52a <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 800a490:	78fb      	ldrb	r3, [r7, #3]
 800a492:	2b07      	cmp	r3, #7
 800a494:	dc16      	bgt.n	800a4c4 <_HandleIncomingPacket+0x50>
 800a496:	2b00      	cmp	r3, #0
 800a498:	dd3c      	ble.n	800a514 <_HandleIncomingPacket+0xa0>
 800a49a:	3b01      	subs	r3, #1
 800a49c:	2b06      	cmp	r3, #6
 800a49e:	d839      	bhi.n	800a514 <_HandleIncomingPacket+0xa0>
 800a4a0:	a201      	add	r2, pc, #4	; (adr r2, 800a4a8 <_HandleIncomingPacket+0x34>)
 800a4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a6:	bf00      	nop
 800a4a8:	0800a4cb 	.word	0x0800a4cb
 800a4ac:	0800a4d1 	.word	0x0800a4d1
 800a4b0:	0800a4d7 	.word	0x0800a4d7
 800a4b4:	0800a4dd 	.word	0x0800a4dd
 800a4b8:	0800a4e3 	.word	0x0800a4e3
 800a4bc:	0800a4e9 	.word	0x0800a4e9
 800a4c0:	0800a4ef 	.word	0x0800a4ef
 800a4c4:	2b80      	cmp	r3, #128	; 0x80
 800a4c6:	d015      	beq.n	800a4f4 <_HandleIncomingPacket+0x80>
 800a4c8:	e024      	b.n	800a514 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800a4ca:	f000 fb85 	bl	800abd8 <SEGGER_SYSVIEW_Start>
      break;
 800a4ce:	e031      	b.n	800a534 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800a4d0:	f000 fc3e 	bl	800ad50 <SEGGER_SYSVIEW_Stop>
      break;
 800a4d4:	e02e      	b.n	800a534 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800a4d6:	f000 fe19 	bl	800b10c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800a4da:	e02b      	b.n	800a534 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800a4dc:	f000 fdde 	bl	800b09c <SEGGER_SYSVIEW_SendTaskList>
      break;
 800a4e0:	e028      	b.n	800a534 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800a4e2:	f000 fc5b 	bl	800ad9c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800a4e6:	e025      	b.n	800a534 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800a4e8:	f001 f8b4 	bl	800b654 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800a4ec:	e022      	b.n	800a534 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800a4ee:	f001 f893 	bl	800b618 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800a4f2:	e01f      	b.n	800a534 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800a4f4:	1cfb      	adds	r3, r7, #3
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	2001      	movs	r0, #1
 800a4fc:	f7ff fd7a 	bl	8009ff4 <SEGGER_RTT_ReadNoLock>
 800a500:	4603      	mov	r3, r0
 800a502:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	dd11      	ble.n	800a52e <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800a50a:	78fb      	ldrb	r3, [r7, #3]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f001 f803 	bl	800b518 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800a512:	e00c      	b.n	800a52e <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	b25b      	sxtb	r3, r3
 800a518:	2b00      	cmp	r3, #0
 800a51a:	da0a      	bge.n	800a532 <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800a51c:	1cfb      	adds	r3, r7, #3
 800a51e:	2201      	movs	r2, #1
 800a520:	4619      	mov	r1, r3
 800a522:	2001      	movs	r0, #1
 800a524:	f7ff fd66 	bl	8009ff4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800a528:	e003      	b.n	800a532 <_HandleIncomingPacket+0xbe>
    }
  }
 800a52a:	bf00      	nop
 800a52c:	e002      	b.n	800a534 <_HandleIncomingPacket+0xc0>
      break;
 800a52e:	bf00      	nop
 800a530:	e000      	b.n	800a534 <_HandleIncomingPacket+0xc0>
      break;
 800a532:	bf00      	nop
}
 800a534:	bf00      	nop
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b08c      	sub	sp, #48	; 0x30
 800a540:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800a542:	2301      	movs	r3, #1
 800a544:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800a546:	1d3b      	adds	r3, r7, #4
 800a548:	3301      	adds	r3, #1
 800a54a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a550:	4b30      	ldr	r3, [pc, #192]	; (800a614 <_TrySendOverflowPacket+0xd8>)
 800a552:	695b      	ldr	r3, [r3, #20]
 800a554:	62bb      	str	r3, [r7, #40]	; 0x28
 800a556:	e00b      	b.n	800a570 <_TrySendOverflowPacket+0x34>
 800a558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55a:	b2da      	uxtb	r2, r3
 800a55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55e:	1c59      	adds	r1, r3, #1
 800a560:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a562:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a566:	b2d2      	uxtb	r2, r2
 800a568:	701a      	strb	r2, [r3, #0]
 800a56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56c:	09db      	lsrs	r3, r3, #7
 800a56e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a572:	2b7f      	cmp	r3, #127	; 0x7f
 800a574:	d8f0      	bhi.n	800a558 <_TrySendOverflowPacket+0x1c>
 800a576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a578:	1c5a      	adds	r2, r3, #1
 800a57a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a57c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a57e:	b2d2      	uxtb	r2, r2
 800a580:	701a      	strb	r2, [r3, #0]
 800a582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a584:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800a586:	4b24      	ldr	r3, [pc, #144]	; (800a618 <_TrySendOverflowPacket+0xdc>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800a58c:	4b21      	ldr	r3, [pc, #132]	; (800a614 <_TrySendOverflowPacket+0xd8>)
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	69ba      	ldr	r2, [r7, #24]
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	627b      	str	r3, [r7, #36]	; 0x24
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	623b      	str	r3, [r7, #32]
 800a59e:	e00b      	b.n	800a5b8 <_TrySendOverflowPacket+0x7c>
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	b2da      	uxtb	r2, r3
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a6:	1c59      	adds	r1, r3, #1
 800a5a8:	6279      	str	r1, [r7, #36]	; 0x24
 800a5aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a5ae:	b2d2      	uxtb	r2, r2
 800a5b0:	701a      	strb	r2, [r3, #0]
 800a5b2:	6a3b      	ldr	r3, [r7, #32]
 800a5b4:	09db      	lsrs	r3, r3, #7
 800a5b6:	623b      	str	r3, [r7, #32]
 800a5b8:	6a3b      	ldr	r3, [r7, #32]
 800a5ba:	2b7f      	cmp	r3, #127	; 0x7f
 800a5bc:	d8f0      	bhi.n	800a5a0 <_TrySendOverflowPacket+0x64>
 800a5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c0:	1c5a      	adds	r2, r3, #1
 800a5c2:	627a      	str	r2, [r7, #36]	; 0x24
 800a5c4:	6a3a      	ldr	r2, [r7, #32]
 800a5c6:	b2d2      	uxtb	r2, r2
 800a5c8:	701a      	strb	r2, [r3, #0]
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800a5ce:	1d3b      	adds	r3, r7, #4
 800a5d0:	69fa      	ldr	r2, [r7, #28]
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	1d3b      	adds	r3, r7, #4
 800a5d8:	4619      	mov	r1, r3
 800a5da:	2001      	movs	r0, #1
 800a5dc:	f7ff fd8c 	bl	800a0f8 <SEGGER_RTT_WriteSkipNoLock>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	613b      	str	r3, [r7, #16]
  if (Status) {
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d009      	beq.n	800a5fe <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800a5ea:	4a0a      	ldr	r2, [pc, #40]	; (800a614 <_TrySendOverflowPacket+0xd8>)
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800a5f0:	4b08      	ldr	r3, [pc, #32]	; (800a614 <_TrySendOverflowPacket+0xd8>)
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	4b06      	ldr	r3, [pc, #24]	; (800a614 <_TrySendOverflowPacket+0xd8>)
 800a5fa:	701a      	strb	r2, [r3, #0]
 800a5fc:	e004      	b.n	800a608 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800a5fe:	4b05      	ldr	r3, [pc, #20]	; (800a614 <_TrySendOverflowPacket+0xd8>)
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	3301      	adds	r3, #1
 800a604:	4a03      	ldr	r2, [pc, #12]	; (800a614 <_TrySendOverflowPacket+0xd8>)
 800a606:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800a608:	693b      	ldr	r3, [r7, #16]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3730      	adds	r7, #48	; 0x30
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	20006630 	.word	0x20006630
 800a618:	e0001004 	.word	0xe0001004

0800a61c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b08a      	sub	sp, #40	; 0x28
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800a628:	4b63      	ldr	r3, [pc, #396]	; (800a7b8 <_SendPacket+0x19c>)
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d010      	beq.n	800a652 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800a630:	4b61      	ldr	r3, [pc, #388]	; (800a7b8 <_SendPacket+0x19c>)
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 80a1 	beq.w	800a77c <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800a63a:	4b5f      	ldr	r3, [pc, #380]	; (800a7b8 <_SendPacket+0x19c>)
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	2b02      	cmp	r3, #2
 800a640:	d109      	bne.n	800a656 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800a642:	f7ff ff7b 	bl	800a53c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800a646:	4b5c      	ldr	r3, [pc, #368]	; (800a7b8 <_SendPacket+0x19c>)
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	f040 8098 	bne.w	800a780 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 800a650:	e001      	b.n	800a656 <_SendPacket+0x3a>
    goto Send;
 800a652:	bf00      	nop
 800a654:	e000      	b.n	800a658 <_SendPacket+0x3c>
Send:
 800a656:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b1f      	cmp	r3, #31
 800a65c:	d809      	bhi.n	800a672 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800a65e:	4b56      	ldr	r3, [pc, #344]	; (800a7b8 <_SendPacket+0x19c>)
 800a660:	69da      	ldr	r2, [r3, #28]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	fa22 f303 	lsr.w	r3, r2, r3
 800a668:	f003 0301 	and.w	r3, r3, #1
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f040 8089 	bne.w	800a784 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b17      	cmp	r3, #23
 800a676:	d807      	bhi.n	800a688 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	3b01      	subs	r3, #1
 800a67c:	60fb      	str	r3, [r7, #12]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	b2da      	uxtb	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	701a      	strb	r2, [r3, #0]
 800a686:	e03d      	b.n	800a704 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	1ad3      	subs	r3, r2, r3
 800a68e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	2b7f      	cmp	r3, #127	; 0x7f
 800a694:	d912      	bls.n	800a6bc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	09da      	lsrs	r2, r3, #7
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	3b01      	subs	r3, #1
 800a69e:	60fb      	str	r3, [r7, #12]
 800a6a0:	b2d2      	uxtb	r2, r2
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	68fa      	ldr	r2, [r7, #12]
 800a6ac:	3a01      	subs	r2, #1
 800a6ae:	60fa      	str	r2, [r7, #12]
 800a6b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a6b4:	b2da      	uxtb	r2, r3
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	701a      	strb	r2, [r3, #0]
 800a6ba:	e006      	b.n	800a6ca <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	60fb      	str	r3, [r7, #12]
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	b2da      	uxtb	r2, r3
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b7f      	cmp	r3, #127	; 0x7f
 800a6ce:	d912      	bls.n	800a6f6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	09da      	lsrs	r2, r3, #7
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	60fb      	str	r3, [r7, #12]
 800a6da:	b2d2      	uxtb	r2, r2
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	3a01      	subs	r2, #1
 800a6e8:	60fa      	str	r2, [r7, #12]
 800a6ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a6ee:	b2da      	uxtb	r2, r3
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	701a      	strb	r2, [r3, #0]
 800a6f4:	e006      	b.n	800a704 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	60fb      	str	r3, [r7, #12]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	b2da      	uxtb	r2, r3
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800a704:	4b2d      	ldr	r3, [pc, #180]	; (800a7bc <_SendPacket+0x1a0>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800a70a:	4b2b      	ldr	r3, [pc, #172]	; (800a7b8 <_SendPacket+0x19c>)
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	69ba      	ldr	r2, [r7, #24]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	627b      	str	r3, [r7, #36]	; 0x24
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	623b      	str	r3, [r7, #32]
 800a71c:	e00b      	b.n	800a736 <_SendPacket+0x11a>
 800a71e:	6a3b      	ldr	r3, [r7, #32]
 800a720:	b2da      	uxtb	r2, r3
 800a722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a724:	1c59      	adds	r1, r3, #1
 800a726:	6279      	str	r1, [r7, #36]	; 0x24
 800a728:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a72c:	b2d2      	uxtb	r2, r2
 800a72e:	701a      	strb	r2, [r3, #0]
 800a730:	6a3b      	ldr	r3, [r7, #32]
 800a732:	09db      	lsrs	r3, r3, #7
 800a734:	623b      	str	r3, [r7, #32]
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	2b7f      	cmp	r3, #127	; 0x7f
 800a73a:	d8f0      	bhi.n	800a71e <_SendPacket+0x102>
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	1c5a      	adds	r2, r3, #1
 800a740:	627a      	str	r2, [r7, #36]	; 0x24
 800a742:	6a3a      	ldr	r2, [r7, #32]
 800a744:	b2d2      	uxtb	r2, r2
 800a746:	701a      	strb	r2, [r3, #0]
 800a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	461a      	mov	r2, r3
 800a754:	68f9      	ldr	r1, [r7, #12]
 800a756:	2001      	movs	r0, #1
 800a758:	f7ff fcce 	bl	800a0f8 <SEGGER_RTT_WriteSkipNoLock>
 800a75c:	4603      	mov	r3, r0
 800a75e:	613b      	str	r3, [r7, #16]
  if (Status) {
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d003      	beq.n	800a76e <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800a766:	4a14      	ldr	r2, [pc, #80]	; (800a7b8 <_SendPacket+0x19c>)
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	60d3      	str	r3, [r2, #12]
 800a76c:	e00b      	b.n	800a786 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800a76e:	4b12      	ldr	r3, [pc, #72]	; (800a7b8 <_SendPacket+0x19c>)
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	3301      	adds	r3, #1
 800a774:	b2da      	uxtb	r2, r3
 800a776:	4b10      	ldr	r3, [pc, #64]	; (800a7b8 <_SendPacket+0x19c>)
 800a778:	701a      	strb	r2, [r3, #0]
 800a77a:	e004      	b.n	800a786 <_SendPacket+0x16a>
    goto SendDone;
 800a77c:	bf00      	nop
 800a77e:	e002      	b.n	800a786 <_SendPacket+0x16a>
      goto SendDone;
 800a780:	bf00      	nop
 800a782:	e000      	b.n	800a786 <_SendPacket+0x16a>
      goto SendDone;
 800a784:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800a786:	4b0e      	ldr	r3, [pc, #56]	; (800a7c0 <_SendPacket+0x1a4>)
 800a788:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a78c:	4b0c      	ldr	r3, [pc, #48]	; (800a7c0 <_SendPacket+0x1a4>)
 800a78e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a792:	429a      	cmp	r2, r3
 800a794:	d00b      	beq.n	800a7ae <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800a796:	4b08      	ldr	r3, [pc, #32]	; (800a7b8 <_SendPacket+0x19c>)
 800a798:	789b      	ldrb	r3, [r3, #2]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d107      	bne.n	800a7ae <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800a79e:	4b06      	ldr	r3, [pc, #24]	; (800a7b8 <_SendPacket+0x19c>)
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800a7a4:	f7ff fe66 	bl	800a474 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800a7a8:	4b03      	ldr	r3, [pc, #12]	; (800a7b8 <_SendPacket+0x19c>)
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800a7ae:	bf00      	nop
 800a7b0:	3728      	adds	r7, #40	; 0x28
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	20006630 	.word	0x20006630
 800a7bc:	e0001004 	.word	0xe0001004
 800a7c0:	20004170 	.word	0x20004170

0800a7c4 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af02      	add	r7, sp, #8
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]
 800a7d0:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	9300      	str	r3, [sp, #0]
 800a7d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a7da:	4a14      	ldr	r2, [pc, #80]	; (800a82c <SEGGER_SYSVIEW_Init+0x68>)
 800a7dc:	4914      	ldr	r1, [pc, #80]	; (800a830 <SEGGER_SYSVIEW_Init+0x6c>)
 800a7de:	2001      	movs	r0, #1
 800a7e0:	f7ff fd1a 	bl	800a218 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	2308      	movs	r3, #8
 800a7ea:	4a12      	ldr	r2, [pc, #72]	; (800a834 <SEGGER_SYSVIEW_Init+0x70>)
 800a7ec:	4910      	ldr	r1, [pc, #64]	; (800a830 <SEGGER_SYSVIEW_Init+0x6c>)
 800a7ee:	2001      	movs	r0, #1
 800a7f0:	f7ff fd7c 	bl	800a2ec <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800a7f4:	4b10      	ldr	r3, [pc, #64]	; (800a838 <SEGGER_SYSVIEW_Init+0x74>)
 800a7f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7fa:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800a7fc:	4b0f      	ldr	r3, [pc, #60]	; (800a83c <SEGGER_SYSVIEW_Init+0x78>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a0d      	ldr	r2, [pc, #52]	; (800a838 <SEGGER_SYSVIEW_Init+0x74>)
 800a802:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800a804:	4a0c      	ldr	r2, [pc, #48]	; (800a838 <SEGGER_SYSVIEW_Init+0x74>)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800a80a:	4a0b      	ldr	r2, [pc, #44]	; (800a838 <SEGGER_SYSVIEW_Init+0x74>)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800a810:	4a09      	ldr	r2, [pc, #36]	; (800a838 <SEGGER_SYSVIEW_Init+0x74>)
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800a816:	4a08      	ldr	r2, [pc, #32]	; (800a838 <SEGGER_SYSVIEW_Init+0x74>)
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800a81c:	4b06      	ldr	r3, [pc, #24]	; (800a838 <SEGGER_SYSVIEW_Init+0x74>)
 800a81e:	2200      	movs	r2, #0
 800a820:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800a822:	bf00      	nop
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	20004628 	.word	0x20004628
 800a830:	0800d0c4 	.word	0x0800d0c4
 800a834:	20006628 	.word	0x20006628
 800a838:	20006630 	.word	0x20006630
 800a83c:	e0001004 	.word	0xe0001004

0800a840 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800a848:	4a04      	ldr	r2, [pc, #16]	; (800a85c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6113      	str	r3, [r2, #16]
}
 800a84e:	bf00      	nop
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	20006630 	.word	0x20006630

0800a860 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a868:	f3ef 8311 	mrs	r3, BASEPRI
 800a86c:	f04f 0120 	mov.w	r1, #32
 800a870:	f381 8811 	msr	BASEPRI, r1
 800a874:	60fb      	str	r3, [r7, #12]
 800a876:	4808      	ldr	r0, [pc, #32]	; (800a898 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800a878:	f7ff fdef 	bl	800a45a <_PreparePacket>
 800a87c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	68b9      	ldr	r1, [r7, #8]
 800a882:	68b8      	ldr	r0, [r7, #8]
 800a884:	f7ff feca 	bl	800a61c <_SendPacket>
  RECORD_END();
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f383 8811 	msr	BASEPRI, r3
}
 800a88e:	bf00      	nop
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	20006660 	.word	0x20006660

0800a89c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b088      	sub	sp, #32
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a8a6:	f3ef 8311 	mrs	r3, BASEPRI
 800a8aa:	f04f 0120 	mov.w	r1, #32
 800a8ae:	f381 8811 	msr	BASEPRI, r1
 800a8b2:	617b      	str	r3, [r7, #20]
 800a8b4:	4816      	ldr	r0, [pc, #88]	; (800a910 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800a8b6:	f7ff fdd0 	bl	800a45a <_PreparePacket>
 800a8ba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	61fb      	str	r3, [r7, #28]
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	61bb      	str	r3, [r7, #24]
 800a8c8:	e00b      	b.n	800a8e2 <SEGGER_SYSVIEW_RecordU32+0x46>
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	b2da      	uxtb	r2, r3
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	1c59      	adds	r1, r3, #1
 800a8d2:	61f9      	str	r1, [r7, #28]
 800a8d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a8d8:	b2d2      	uxtb	r2, r2
 800a8da:	701a      	strb	r2, [r3, #0]
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	09db      	lsrs	r3, r3, #7
 800a8e0:	61bb      	str	r3, [r7, #24]
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	2b7f      	cmp	r3, #127	; 0x7f
 800a8e6:	d8f0      	bhi.n	800a8ca <SEGGER_SYSVIEW_RecordU32+0x2e>
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	1c5a      	adds	r2, r3, #1
 800a8ec:	61fa      	str	r2, [r7, #28]
 800a8ee:	69ba      	ldr	r2, [r7, #24]
 800a8f0:	b2d2      	uxtb	r2, r2
 800a8f2:	701a      	strb	r2, [r3, #0]
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	68f9      	ldr	r1, [r7, #12]
 800a8fc:	6938      	ldr	r0, [r7, #16]
 800a8fe:	f7ff fe8d 	bl	800a61c <_SendPacket>
  RECORD_END();
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f383 8811 	msr	BASEPRI, r3
}
 800a908:	bf00      	nop
 800a90a:	3720      	adds	r7, #32
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	20006660 	.word	0x20006660

0800a914 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800a914:	b580      	push	{r7, lr}
 800a916:	b08c      	sub	sp, #48	; 0x30
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800a920:	f3ef 8311 	mrs	r3, BASEPRI
 800a924:	f04f 0120 	mov.w	r1, #32
 800a928:	f381 8811 	msr	BASEPRI, r1
 800a92c:	61fb      	str	r3, [r7, #28]
 800a92e:	4825      	ldr	r0, [pc, #148]	; (800a9c4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800a930:	f7ff fd93 	bl	800a45a <_PreparePacket>
 800a934:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	62bb      	str	r3, [r7, #40]	; 0x28
 800a942:	e00b      	b.n	800a95c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800a944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a946:	b2da      	uxtb	r2, r3
 800a948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94a:	1c59      	adds	r1, r3, #1
 800a94c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a94e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a952:	b2d2      	uxtb	r2, r2
 800a954:	701a      	strb	r2, [r3, #0]
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	09db      	lsrs	r3, r3, #7
 800a95a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95e:	2b7f      	cmp	r3, #127	; 0x7f
 800a960:	d8f0      	bhi.n	800a944 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a964:	1c5a      	adds	r2, r3, #1
 800a966:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a96a:	b2d2      	uxtb	r2, r2
 800a96c:	701a      	strb	r2, [r3, #0]
 800a96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a970:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	627b      	str	r3, [r7, #36]	; 0x24
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	623b      	str	r3, [r7, #32]
 800a97a:	e00b      	b.n	800a994 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800a97c:	6a3b      	ldr	r3, [r7, #32]
 800a97e:	b2da      	uxtb	r2, r3
 800a980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a982:	1c59      	adds	r1, r3, #1
 800a984:	6279      	str	r1, [r7, #36]	; 0x24
 800a986:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a98a:	b2d2      	uxtb	r2, r2
 800a98c:	701a      	strb	r2, [r3, #0]
 800a98e:	6a3b      	ldr	r3, [r7, #32]
 800a990:	09db      	lsrs	r3, r3, #7
 800a992:	623b      	str	r3, [r7, #32]
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	2b7f      	cmp	r3, #127	; 0x7f
 800a998:	d8f0      	bhi.n	800a97c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800a99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99c:	1c5a      	adds	r2, r3, #1
 800a99e:	627a      	str	r2, [r7, #36]	; 0x24
 800a9a0:	6a3a      	ldr	r2, [r7, #32]
 800a9a2:	b2d2      	uxtb	r2, r2
 800a9a4:	701a      	strb	r2, [r3, #0]
 800a9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	6979      	ldr	r1, [r7, #20]
 800a9ae:	69b8      	ldr	r0, [r7, #24]
 800a9b0:	f7ff fe34 	bl	800a61c <_SendPacket>
  RECORD_END();
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	f383 8811 	msr	BASEPRI, r3
}
 800a9ba:	bf00      	nop
 800a9bc:	3730      	adds	r7, #48	; 0x30
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	20006660 	.word	0x20006660

0800a9c8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b08e      	sub	sp, #56	; 0x38
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800a9d6:	f3ef 8311 	mrs	r3, BASEPRI
 800a9da:	f04f 0120 	mov.w	r1, #32
 800a9de:	f381 8811 	msr	BASEPRI, r1
 800a9e2:	61fb      	str	r3, [r7, #28]
 800a9e4:	4832      	ldr	r0, [pc, #200]	; (800aab0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800a9e6:	f7ff fd38 	bl	800a45a <_PreparePacket>
 800a9ea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	637b      	str	r3, [r7, #52]	; 0x34
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	633b      	str	r3, [r7, #48]	; 0x30
 800a9f8:	e00b      	b.n	800aa12 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	b2da      	uxtb	r2, r3
 800a9fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa00:	1c59      	adds	r1, r3, #1
 800aa02:	6379      	str	r1, [r7, #52]	; 0x34
 800aa04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800aa08:	b2d2      	uxtb	r2, r2
 800aa0a:	701a      	strb	r2, [r3, #0]
 800aa0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0e:	09db      	lsrs	r3, r3, #7
 800aa10:	633b      	str	r3, [r7, #48]	; 0x30
 800aa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa14:	2b7f      	cmp	r3, #127	; 0x7f
 800aa16:	d8f0      	bhi.n	800a9fa <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800aa18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa1a:	1c5a      	adds	r2, r3, #1
 800aa1c:	637a      	str	r2, [r7, #52]	; 0x34
 800aa1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa20:	b2d2      	uxtb	r2, r2
 800aa22:	701a      	strb	r2, [r3, #0]
 800aa24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa30:	e00b      	b.n	800aa4a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800aa32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa34:	b2da      	uxtb	r2, r3
 800aa36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa38:	1c59      	adds	r1, r3, #1
 800aa3a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800aa3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800aa40:	b2d2      	uxtb	r2, r2
 800aa42:	701a      	strb	r2, [r3, #0]
 800aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa46:	09db      	lsrs	r3, r3, #7
 800aa48:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4c:	2b7f      	cmp	r3, #127	; 0x7f
 800aa4e:	d8f0      	bhi.n	800aa32 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800aa50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa52:	1c5a      	adds	r2, r3, #1
 800aa54:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa58:	b2d2      	uxtb	r2, r2
 800aa5a:	701a      	strb	r2, [r3, #0]
 800aa5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	627b      	str	r3, [r7, #36]	; 0x24
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	623b      	str	r3, [r7, #32]
 800aa68:	e00b      	b.n	800aa82 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	b2da      	uxtb	r2, r3
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa70:	1c59      	adds	r1, r3, #1
 800aa72:	6279      	str	r1, [r7, #36]	; 0x24
 800aa74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800aa78:	b2d2      	uxtb	r2, r2
 800aa7a:	701a      	strb	r2, [r3, #0]
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	09db      	lsrs	r3, r3, #7
 800aa80:	623b      	str	r3, [r7, #32]
 800aa82:	6a3b      	ldr	r3, [r7, #32]
 800aa84:	2b7f      	cmp	r3, #127	; 0x7f
 800aa86:	d8f0      	bhi.n	800aa6a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800aa88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8a:	1c5a      	adds	r2, r3, #1
 800aa8c:	627a      	str	r2, [r7, #36]	; 0x24
 800aa8e:	6a3a      	ldr	r2, [r7, #32]
 800aa90:	b2d2      	uxtb	r2, r2
 800aa92:	701a      	strb	r2, [r3, #0]
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	6979      	ldr	r1, [r7, #20]
 800aa9c:	69b8      	ldr	r0, [r7, #24]
 800aa9e:	f7ff fdbd 	bl	800a61c <_SendPacket>
  RECORD_END();
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	f383 8811 	msr	BASEPRI, r3
}
 800aaa8:	bf00      	nop
 800aaaa:	3738      	adds	r7, #56	; 0x38
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	20006660 	.word	0x20006660

0800aab4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b090      	sub	sp, #64	; 0x40
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]
 800aac0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800aac2:	f3ef 8311 	mrs	r3, BASEPRI
 800aac6:	f04f 0120 	mov.w	r1, #32
 800aaca:	f381 8811 	msr	BASEPRI, r1
 800aace:	61fb      	str	r3, [r7, #28]
 800aad0:	4840      	ldr	r0, [pc, #256]	; (800abd4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800aad2:	f7ff fcc2 	bl	800a45a <_PreparePacket>
 800aad6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	63bb      	str	r3, [r7, #56]	; 0x38
 800aae4:	e00b      	b.n	800aafe <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800aae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaec:	1c59      	adds	r1, r3, #1
 800aaee:	63f9      	str	r1, [r7, #60]	; 0x3c
 800aaf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800aaf4:	b2d2      	uxtb	r2, r2
 800aaf6:	701a      	strb	r2, [r3, #0]
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafa:	09db      	lsrs	r3, r3, #7
 800aafc:	63bb      	str	r3, [r7, #56]	; 0x38
 800aafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab00:	2b7f      	cmp	r3, #127	; 0x7f
 800ab02:	d8f0      	bhi.n	800aae6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800ab04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab06:	1c5a      	adds	r2, r3, #1
 800ab08:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ab0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab0c:	b2d2      	uxtb	r2, r2
 800ab0e:	701a      	strb	r2, [r3, #0]
 800ab10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	637b      	str	r3, [r7, #52]	; 0x34
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	633b      	str	r3, [r7, #48]	; 0x30
 800ab1c:	e00b      	b.n	800ab36 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab20:	b2da      	uxtb	r2, r3
 800ab22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab24:	1c59      	adds	r1, r3, #1
 800ab26:	6379      	str	r1, [r7, #52]	; 0x34
 800ab28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ab2c:	b2d2      	uxtb	r2, r2
 800ab2e:	701a      	strb	r2, [r3, #0]
 800ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab32:	09db      	lsrs	r3, r3, #7
 800ab34:	633b      	str	r3, [r7, #48]	; 0x30
 800ab36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab38:	2b7f      	cmp	r3, #127	; 0x7f
 800ab3a:	d8f0      	bhi.n	800ab1e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800ab3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3e:	1c5a      	adds	r2, r3, #1
 800ab40:	637a      	str	r2, [r7, #52]	; 0x34
 800ab42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab44:	b2d2      	uxtb	r2, r2
 800ab46:	701a      	strb	r2, [r3, #0]
 800ab48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab54:	e00b      	b.n	800ab6e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800ab56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab58:	b2da      	uxtb	r2, r3
 800ab5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5c:	1c59      	adds	r1, r3, #1
 800ab5e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ab60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ab64:	b2d2      	uxtb	r2, r2
 800ab66:	701a      	strb	r2, [r3, #0]
 800ab68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6a:	09db      	lsrs	r3, r3, #7
 800ab6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab70:	2b7f      	cmp	r3, #127	; 0x7f
 800ab72:	d8f0      	bhi.n	800ab56 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800ab74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab76:	1c5a      	adds	r2, r3, #1
 800ab78:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ab7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab7c:	b2d2      	uxtb	r2, r2
 800ab7e:	701a      	strb	r2, [r3, #0]
 800ab80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab82:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	627b      	str	r3, [r7, #36]	; 0x24
 800ab88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab8a:	623b      	str	r3, [r7, #32]
 800ab8c:	e00b      	b.n	800aba6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800ab8e:	6a3b      	ldr	r3, [r7, #32]
 800ab90:	b2da      	uxtb	r2, r3
 800ab92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab94:	1c59      	adds	r1, r3, #1
 800ab96:	6279      	str	r1, [r7, #36]	; 0x24
 800ab98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ab9c:	b2d2      	uxtb	r2, r2
 800ab9e:	701a      	strb	r2, [r3, #0]
 800aba0:	6a3b      	ldr	r3, [r7, #32]
 800aba2:	09db      	lsrs	r3, r3, #7
 800aba4:	623b      	str	r3, [r7, #32]
 800aba6:	6a3b      	ldr	r3, [r7, #32]
 800aba8:	2b7f      	cmp	r3, #127	; 0x7f
 800abaa:	d8f0      	bhi.n	800ab8e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800abac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abae:	1c5a      	adds	r2, r3, #1
 800abb0:	627a      	str	r2, [r7, #36]	; 0x24
 800abb2:	6a3a      	ldr	r2, [r7, #32]
 800abb4:	b2d2      	uxtb	r2, r2
 800abb6:	701a      	strb	r2, [r3, #0]
 800abb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abba:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	6979      	ldr	r1, [r7, #20]
 800abc0:	69b8      	ldr	r0, [r7, #24]
 800abc2:	f7ff fd2b 	bl	800a61c <_SendPacket>
  RECORD_END();
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	f383 8811 	msr	BASEPRI, r3
}
 800abcc:	bf00      	nop
 800abce:	3740      	adds	r7, #64	; 0x40
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	20006660 	.word	0x20006660

0800abd8 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08c      	sub	sp, #48	; 0x30
 800abdc:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 800abde:	4b59      	ldr	r3, [pc, #356]	; (800ad44 <SEGGER_SYSVIEW_Start+0x16c>)
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f040 80aa 	bne.w	800ad3c <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 800abe8:	4b56      	ldr	r3, [pc, #344]	; (800ad44 <SEGGER_SYSVIEW_Start+0x16c>)
 800abea:	2201      	movs	r2, #1
 800abec:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800abee:	f3ef 8311 	mrs	r3, BASEPRI
 800abf2:	f04f 0120 	mov.w	r1, #32
 800abf6:	f381 8811 	msr	BASEPRI, r1
 800abfa:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800abfc:	220a      	movs	r2, #10
 800abfe:	4952      	ldr	r1, [pc, #328]	; (800ad48 <SEGGER_SYSVIEW_Start+0x170>)
 800ac00:	2001      	movs	r0, #1
 800ac02:	f7ff fa79 	bl	800a0f8 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800ac0c:	200a      	movs	r0, #10
 800ac0e:	f7ff fe27 	bl	800a860 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ac12:	f3ef 8311 	mrs	r3, BASEPRI
 800ac16:	f04f 0120 	mov.w	r1, #32
 800ac1a:	f381 8811 	msr	BASEPRI, r1
 800ac1e:	60bb      	str	r3, [r7, #8]
 800ac20:	484a      	ldr	r0, [pc, #296]	; (800ad4c <SEGGER_SYSVIEW_Start+0x174>)
 800ac22:	f7ff fc1a 	bl	800a45a <_PreparePacket>
 800ac26:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac30:	4b44      	ldr	r3, [pc, #272]	; (800ad44 <SEGGER_SYSVIEW_Start+0x16c>)
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac36:	e00b      	b.n	800ac50 <SEGGER_SYSVIEW_Start+0x78>
 800ac38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3e:	1c59      	adds	r1, r3, #1
 800ac40:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ac42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ac46:	b2d2      	uxtb	r2, r2
 800ac48:	701a      	strb	r2, [r3, #0]
 800ac4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4c:	09db      	lsrs	r3, r3, #7
 800ac4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac52:	2b7f      	cmp	r3, #127	; 0x7f
 800ac54:	d8f0      	bhi.n	800ac38 <SEGGER_SYSVIEW_Start+0x60>
 800ac56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac58:	1c5a      	adds	r2, r3, #1
 800ac5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac5e:	b2d2      	uxtb	r2, r2
 800ac60:	701a      	strb	r2, [r3, #0]
 800ac62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac64:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	627b      	str	r3, [r7, #36]	; 0x24
 800ac6a:	4b36      	ldr	r3, [pc, #216]	; (800ad44 <SEGGER_SYSVIEW_Start+0x16c>)
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	623b      	str	r3, [r7, #32]
 800ac70:	e00b      	b.n	800ac8a <SEGGER_SYSVIEW_Start+0xb2>
 800ac72:	6a3b      	ldr	r3, [r7, #32]
 800ac74:	b2da      	uxtb	r2, r3
 800ac76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac78:	1c59      	adds	r1, r3, #1
 800ac7a:	6279      	str	r1, [r7, #36]	; 0x24
 800ac7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ac80:	b2d2      	uxtb	r2, r2
 800ac82:	701a      	strb	r2, [r3, #0]
 800ac84:	6a3b      	ldr	r3, [r7, #32]
 800ac86:	09db      	lsrs	r3, r3, #7
 800ac88:	623b      	str	r3, [r7, #32]
 800ac8a:	6a3b      	ldr	r3, [r7, #32]
 800ac8c:	2b7f      	cmp	r3, #127	; 0x7f
 800ac8e:	d8f0      	bhi.n	800ac72 <SEGGER_SYSVIEW_Start+0x9a>
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	1c5a      	adds	r2, r3, #1
 800ac94:	627a      	str	r2, [r7, #36]	; 0x24
 800ac96:	6a3a      	ldr	r2, [r7, #32]
 800ac98:	b2d2      	uxtb	r2, r2
 800ac9a:	701a      	strb	r2, [r3, #0]
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	61fb      	str	r3, [r7, #28]
 800aca4:	4b27      	ldr	r3, [pc, #156]	; (800ad44 <SEGGER_SYSVIEW_Start+0x16c>)
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	61bb      	str	r3, [r7, #24]
 800acaa:	e00b      	b.n	800acc4 <SEGGER_SYSVIEW_Start+0xec>
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	b2da      	uxtb	r2, r3
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	1c59      	adds	r1, r3, #1
 800acb4:	61f9      	str	r1, [r7, #28]
 800acb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800acba:	b2d2      	uxtb	r2, r2
 800acbc:	701a      	strb	r2, [r3, #0]
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	09db      	lsrs	r3, r3, #7
 800acc2:	61bb      	str	r3, [r7, #24]
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	2b7f      	cmp	r3, #127	; 0x7f
 800acc8:	d8f0      	bhi.n	800acac <SEGGER_SYSVIEW_Start+0xd4>
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	1c5a      	adds	r2, r3, #1
 800acce:	61fa      	str	r2, [r7, #28]
 800acd0:	69ba      	ldr	r2, [r7, #24]
 800acd2:	b2d2      	uxtb	r2, r2
 800acd4:	701a      	strb	r2, [r3, #0]
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	617b      	str	r3, [r7, #20]
 800acde:	2302      	movs	r3, #2
 800ace0:	613b      	str	r3, [r7, #16]
 800ace2:	e00b      	b.n	800acfc <SEGGER_SYSVIEW_Start+0x124>
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	1c59      	adds	r1, r3, #1
 800acec:	6179      	str	r1, [r7, #20]
 800acee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800acf2:	b2d2      	uxtb	r2, r2
 800acf4:	701a      	strb	r2, [r3, #0]
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	09db      	lsrs	r3, r3, #7
 800acfa:	613b      	str	r3, [r7, #16]
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	2b7f      	cmp	r3, #127	; 0x7f
 800ad00:	d8f0      	bhi.n	800ace4 <SEGGER_SYSVIEW_Start+0x10c>
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	1c5a      	adds	r2, r3, #1
 800ad06:	617a      	str	r2, [r7, #20]
 800ad08:	693a      	ldr	r2, [r7, #16]
 800ad0a:	b2d2      	uxtb	r2, r2
 800ad0c:	701a      	strb	r2, [r3, #0]
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800ad12:	2218      	movs	r2, #24
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7ff fc80 	bl	800a61c <_SendPacket>
      RECORD_END();
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800ad22:	4b08      	ldr	r3, [pc, #32]	; (800ad44 <SEGGER_SYSVIEW_Start+0x16c>)
 800ad24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 800ad2a:	4b06      	ldr	r3, [pc, #24]	; (800ad44 <SEGGER_SYSVIEW_Start+0x16c>)
 800ad2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2e:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800ad30:	f000 f9ec 	bl	800b10c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800ad34:	f000 f9b2 	bl	800b09c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800ad38:	f000 fc8c 	bl	800b654 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 800ad3c:	bf00      	nop
 800ad3e:	3730      	adds	r7, #48	; 0x30
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	20006630 	.word	0x20006630
 800ad48:	0800d0ec 	.word	0x0800d0ec
 800ad4c:	20006660 	.word	0x20006660

0800ad50 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ad56:	f3ef 8311 	mrs	r3, BASEPRI
 800ad5a:	f04f 0120 	mov.w	r1, #32
 800ad5e:	f381 8811 	msr	BASEPRI, r1
 800ad62:	607b      	str	r3, [r7, #4]
 800ad64:	480b      	ldr	r0, [pc, #44]	; (800ad94 <SEGGER_SYSVIEW_Stop+0x44>)
 800ad66:	f7ff fb78 	bl	800a45a <_PreparePacket>
 800ad6a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800ad6c:	4b0a      	ldr	r3, [pc, #40]	; (800ad98 <SEGGER_SYSVIEW_Stop+0x48>)
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d007      	beq.n	800ad84 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800ad74:	220b      	movs	r2, #11
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6838      	ldr	r0, [r7, #0]
 800ad7a:	f7ff fc4f 	bl	800a61c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800ad7e:	4b06      	ldr	r3, [pc, #24]	; (800ad98 <SEGGER_SYSVIEW_Stop+0x48>)
 800ad80:	2200      	movs	r2, #0
 800ad82:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f383 8811 	msr	BASEPRI, r3
}
 800ad8a:	bf00      	nop
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	20006660 	.word	0x20006660
 800ad98:	20006630 	.word	0x20006630

0800ad9c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08c      	sub	sp, #48	; 0x30
 800ada0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ada2:	f3ef 8311 	mrs	r3, BASEPRI
 800ada6:	f04f 0120 	mov.w	r1, #32
 800adaa:	f381 8811 	msr	BASEPRI, r1
 800adae:	60fb      	str	r3, [r7, #12]
 800adb0:	4845      	ldr	r0, [pc, #276]	; (800aec8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800adb2:	f7ff fb52 	bl	800a45a <_PreparePacket>
 800adb6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adc0:	4b42      	ldr	r3, [pc, #264]	; (800aecc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	62bb      	str	r3, [r7, #40]	; 0x28
 800adc6:	e00b      	b.n	800ade0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800adc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adca:	b2da      	uxtb	r2, r3
 800adcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adce:	1c59      	adds	r1, r3, #1
 800add0:	62f9      	str	r1, [r7, #44]	; 0x2c
 800add2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800add6:	b2d2      	uxtb	r2, r2
 800add8:	701a      	strb	r2, [r3, #0]
 800adda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800addc:	09db      	lsrs	r3, r3, #7
 800adde:	62bb      	str	r3, [r7, #40]	; 0x28
 800ade0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade2:	2b7f      	cmp	r3, #127	; 0x7f
 800ade4:	d8f0      	bhi.n	800adc8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800ade6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade8:	1c5a      	adds	r2, r3, #1
 800adea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800adec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adee:	b2d2      	uxtb	r2, r2
 800adf0:	701a      	strb	r2, [r3, #0]
 800adf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	627b      	str	r3, [r7, #36]	; 0x24
 800adfa:	4b34      	ldr	r3, [pc, #208]	; (800aecc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	623b      	str	r3, [r7, #32]
 800ae00:	e00b      	b.n	800ae1a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800ae02:	6a3b      	ldr	r3, [r7, #32]
 800ae04:	b2da      	uxtb	r2, r3
 800ae06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae08:	1c59      	adds	r1, r3, #1
 800ae0a:	6279      	str	r1, [r7, #36]	; 0x24
 800ae0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ae10:	b2d2      	uxtb	r2, r2
 800ae12:	701a      	strb	r2, [r3, #0]
 800ae14:	6a3b      	ldr	r3, [r7, #32]
 800ae16:	09db      	lsrs	r3, r3, #7
 800ae18:	623b      	str	r3, [r7, #32]
 800ae1a:	6a3b      	ldr	r3, [r7, #32]
 800ae1c:	2b7f      	cmp	r3, #127	; 0x7f
 800ae1e:	d8f0      	bhi.n	800ae02 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800ae20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae22:	1c5a      	adds	r2, r3, #1
 800ae24:	627a      	str	r2, [r7, #36]	; 0x24
 800ae26:	6a3a      	ldr	r2, [r7, #32]
 800ae28:	b2d2      	uxtb	r2, r2
 800ae2a:	701a      	strb	r2, [r3, #0]
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	61fb      	str	r3, [r7, #28]
 800ae34:	4b25      	ldr	r3, [pc, #148]	; (800aecc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	61bb      	str	r3, [r7, #24]
 800ae3a:	e00b      	b.n	800ae54 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	1c59      	adds	r1, r3, #1
 800ae44:	61f9      	str	r1, [r7, #28]
 800ae46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ae4a:	b2d2      	uxtb	r2, r2
 800ae4c:	701a      	strb	r2, [r3, #0]
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	09db      	lsrs	r3, r3, #7
 800ae52:	61bb      	str	r3, [r7, #24]
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	2b7f      	cmp	r3, #127	; 0x7f
 800ae58:	d8f0      	bhi.n	800ae3c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	1c5a      	adds	r2, r3, #1
 800ae5e:	61fa      	str	r2, [r7, #28]
 800ae60:	69ba      	ldr	r2, [r7, #24]
 800ae62:	b2d2      	uxtb	r2, r2
 800ae64:	701a      	strb	r2, [r3, #0]
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	617b      	str	r3, [r7, #20]
 800ae6e:	2302      	movs	r3, #2
 800ae70:	613b      	str	r3, [r7, #16]
 800ae72:	e00b      	b.n	800ae8c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	b2da      	uxtb	r2, r3
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	1c59      	adds	r1, r3, #1
 800ae7c:	6179      	str	r1, [r7, #20]
 800ae7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ae82:	b2d2      	uxtb	r2, r2
 800ae84:	701a      	strb	r2, [r3, #0]
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	09db      	lsrs	r3, r3, #7
 800ae8a:	613b      	str	r3, [r7, #16]
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	2b7f      	cmp	r3, #127	; 0x7f
 800ae90:	d8f0      	bhi.n	800ae74 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	1c5a      	adds	r2, r3, #1
 800ae96:	617a      	str	r2, [r7, #20]
 800ae98:	693a      	ldr	r2, [r7, #16]
 800ae9a:	b2d2      	uxtb	r2, r2
 800ae9c:	701a      	strb	r2, [r3, #0]
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800aea2:	2218      	movs	r2, #24
 800aea4:	6879      	ldr	r1, [r7, #4]
 800aea6:	68b8      	ldr	r0, [r7, #8]
 800aea8:	f7ff fbb8 	bl	800a61c <_SendPacket>
  RECORD_END();
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800aeb2:	4b06      	ldr	r3, [pc, #24]	; (800aecc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800aeb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d002      	beq.n	800aec0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800aeba:	4b04      	ldr	r3, [pc, #16]	; (800aecc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800aebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebe:	4798      	blx	r3
  }
}
 800aec0:	bf00      	nop
 800aec2:	3730      	adds	r7, #48	; 0x30
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	20006660 	.word	0x20006660
 800aecc:	20006630 	.word	0x20006630

0800aed0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b092      	sub	sp, #72	; 0x48
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800aed8:	f3ef 8311 	mrs	r3, BASEPRI
 800aedc:	f04f 0120 	mov.w	r1, #32
 800aee0:	f381 8811 	msr	BASEPRI, r1
 800aee4:	617b      	str	r3, [r7, #20]
 800aee6:	486b      	ldr	r0, [pc, #428]	; (800b094 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800aee8:	f7ff fab7 	bl	800a45a <_PreparePacket>
 800aeec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	647b      	str	r3, [r7, #68]	; 0x44
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	4b67      	ldr	r3, [pc, #412]	; (800b098 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	1ad3      	subs	r3, r2, r3
 800af00:	089b      	lsrs	r3, r3, #2
 800af02:	643b      	str	r3, [r7, #64]	; 0x40
 800af04:	e00b      	b.n	800af1e <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 800af06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af08:	b2da      	uxtb	r2, r3
 800af0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af0c:	1c59      	adds	r1, r3, #1
 800af0e:	6479      	str	r1, [r7, #68]	; 0x44
 800af10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800af14:	b2d2      	uxtb	r2, r2
 800af16:	701a      	strb	r2, [r3, #0]
 800af18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af1a:	09db      	lsrs	r3, r3, #7
 800af1c:	643b      	str	r3, [r7, #64]	; 0x40
 800af1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af20:	2b7f      	cmp	r3, #127	; 0x7f
 800af22:	d8f0      	bhi.n	800af06 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 800af24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af26:	1c5a      	adds	r2, r3, #1
 800af28:	647a      	str	r2, [r7, #68]	; 0x44
 800af2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af2c:	b2d2      	uxtb	r2, r2
 800af2e:	701a      	strb	r2, [r3, #0]
 800af30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af32:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800af3e:	e00b      	b.n	800af58 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 800af40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af42:	b2da      	uxtb	r2, r3
 800af44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af46:	1c59      	adds	r1, r3, #1
 800af48:	63f9      	str	r1, [r7, #60]	; 0x3c
 800af4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800af4e:	b2d2      	uxtb	r2, r2
 800af50:	701a      	strb	r2, [r3, #0]
 800af52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af54:	09db      	lsrs	r3, r3, #7
 800af56:	63bb      	str	r3, [r7, #56]	; 0x38
 800af58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5a:	2b7f      	cmp	r3, #127	; 0x7f
 800af5c:	d8f0      	bhi.n	800af40 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800af5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af60:	1c5a      	adds	r2, r3, #1
 800af62:	63fa      	str	r2, [r7, #60]	; 0x3c
 800af64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af66:	b2d2      	uxtb	r2, r2
 800af68:	701a      	strb	r2, [r3, #0]
 800af6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af6c:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	2220      	movs	r2, #32
 800af74:	4619      	mov	r1, r3
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	f7ff fa22 	bl	800a3c0 <_EncodeStr>
 800af7c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800af7e:	2209      	movs	r2, #9
 800af80:	68f9      	ldr	r1, [r7, #12]
 800af82:	6938      	ldr	r0, [r7, #16]
 800af84:	f7ff fb4a 	bl	800a61c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	637b      	str	r3, [r7, #52]	; 0x34
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	4b40      	ldr	r3, [pc, #256]	; (800b098 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	089b      	lsrs	r3, r3, #2
 800af9c:	633b      	str	r3, [r7, #48]	; 0x30
 800af9e:	e00b      	b.n	800afb8 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 800afa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa2:	b2da      	uxtb	r2, r3
 800afa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afa6:	1c59      	adds	r1, r3, #1
 800afa8:	6379      	str	r1, [r7, #52]	; 0x34
 800afaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800afae:	b2d2      	uxtb	r2, r2
 800afb0:	701a      	strb	r2, [r3, #0]
 800afb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb4:	09db      	lsrs	r3, r3, #7
 800afb6:	633b      	str	r3, [r7, #48]	; 0x30
 800afb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afba:	2b7f      	cmp	r3, #127	; 0x7f
 800afbc:	d8f0      	bhi.n	800afa0 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 800afbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc0:	1c5a      	adds	r2, r3, #1
 800afc2:	637a      	str	r2, [r7, #52]	; 0x34
 800afc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afc6:	b2d2      	uxtb	r2, r2
 800afc8:	701a      	strb	r2, [r3, #0]
 800afca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	62bb      	str	r3, [r7, #40]	; 0x28
 800afd8:	e00b      	b.n	800aff2 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 800afda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afdc:	b2da      	uxtb	r2, r3
 800afde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe0:	1c59      	adds	r1, r3, #1
 800afe2:	62f9      	str	r1, [r7, #44]	; 0x2c
 800afe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800afe8:	b2d2      	uxtb	r2, r2
 800afea:	701a      	strb	r2, [r3, #0]
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	09db      	lsrs	r3, r3, #7
 800aff0:	62bb      	str	r3, [r7, #40]	; 0x28
 800aff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff4:	2b7f      	cmp	r3, #127	; 0x7f
 800aff6:	d8f0      	bhi.n	800afda <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 800aff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affa:	1c5a      	adds	r2, r3, #1
 800affc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800affe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b000:	b2d2      	uxtb	r2, r2
 800b002:	701a      	strb	r2, [r3, #0]
 800b004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b006:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	627b      	str	r3, [r7, #36]	; 0x24
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	623b      	str	r3, [r7, #32]
 800b012:	e00b      	b.n	800b02c <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 800b014:	6a3b      	ldr	r3, [r7, #32]
 800b016:	b2da      	uxtb	r2, r3
 800b018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01a:	1c59      	adds	r1, r3, #1
 800b01c:	6279      	str	r1, [r7, #36]	; 0x24
 800b01e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b022:	b2d2      	uxtb	r2, r2
 800b024:	701a      	strb	r2, [r3, #0]
 800b026:	6a3b      	ldr	r3, [r7, #32]
 800b028:	09db      	lsrs	r3, r3, #7
 800b02a:	623b      	str	r3, [r7, #32]
 800b02c:	6a3b      	ldr	r3, [r7, #32]
 800b02e:	2b7f      	cmp	r3, #127	; 0x7f
 800b030:	d8f0      	bhi.n	800b014 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	1c5a      	adds	r2, r3, #1
 800b036:	627a      	str	r2, [r7, #36]	; 0x24
 800b038:	6a3a      	ldr	r2, [r7, #32]
 800b03a:	b2d2      	uxtb	r2, r2
 800b03c:	701a      	strb	r2, [r3, #0]
 800b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b040:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	61fb      	str	r3, [r7, #28]
 800b046:	2300      	movs	r3, #0
 800b048:	61bb      	str	r3, [r7, #24]
 800b04a:	e00b      	b.n	800b064 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	1c59      	adds	r1, r3, #1
 800b054:	61f9      	str	r1, [r7, #28]
 800b056:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b05a:	b2d2      	uxtb	r2, r2
 800b05c:	701a      	strb	r2, [r3, #0]
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	09db      	lsrs	r3, r3, #7
 800b062:	61bb      	str	r3, [r7, #24]
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	2b7f      	cmp	r3, #127	; 0x7f
 800b068:	d8f0      	bhi.n	800b04c <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	1c5a      	adds	r2, r3, #1
 800b06e:	61fa      	str	r2, [r7, #28]
 800b070:	69ba      	ldr	r2, [r7, #24]
 800b072:	b2d2      	uxtb	r2, r2
 800b074:	701a      	strb	r2, [r3, #0]
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800b07a:	2215      	movs	r2, #21
 800b07c:	68f9      	ldr	r1, [r7, #12]
 800b07e:	6938      	ldr	r0, [r7, #16]
 800b080:	f7ff facc 	bl	800a61c <_SendPacket>
  RECORD_END();
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	f383 8811 	msr	BASEPRI, r3
}
 800b08a:	bf00      	nop
 800b08c:	3748      	adds	r7, #72	; 0x48
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	20006660 	.word	0x20006660
 800b098:	20006630 	.word	0x20006630

0800b09c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800b09c:	b580      	push	{r7, lr}
 800b09e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800b0a0:	4b07      	ldr	r3, [pc, #28]	; (800b0c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b0a2:	6a1b      	ldr	r3, [r3, #32]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d008      	beq.n	800b0ba <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800b0a8:	4b05      	ldr	r3, [pc, #20]	; (800b0c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b0aa:	6a1b      	ldr	r3, [r3, #32]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d003      	beq.n	800b0ba <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800b0b2:	4b03      	ldr	r3, [pc, #12]	; (800b0c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b0b4:	6a1b      	ldr	r3, [r3, #32]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	4798      	blx	r3
  }
}
 800b0ba:	bf00      	nop
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20006630 	.word	0x20006630

0800b0c4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b0cc:	f3ef 8311 	mrs	r3, BASEPRI
 800b0d0:	f04f 0120 	mov.w	r1, #32
 800b0d4:	f381 8811 	msr	BASEPRI, r1
 800b0d8:	617b      	str	r3, [r7, #20]
 800b0da:	480b      	ldr	r0, [pc, #44]	; (800b108 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800b0dc:	f7ff f9bd 	bl	800a45a <_PreparePacket>
 800b0e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b0e2:	2280      	movs	r2, #128	; 0x80
 800b0e4:	6879      	ldr	r1, [r7, #4]
 800b0e6:	6938      	ldr	r0, [r7, #16]
 800b0e8:	f7ff f96a 	bl	800a3c0 <_EncodeStr>
 800b0ec:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800b0ee:	220e      	movs	r2, #14
 800b0f0:	68f9      	ldr	r1, [r7, #12]
 800b0f2:	6938      	ldr	r0, [r7, #16]
 800b0f4:	f7ff fa92 	bl	800a61c <_SendPacket>
  RECORD_END();
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	f383 8811 	msr	BASEPRI, r3
}
 800b0fe:	bf00      	nop
 800b100:	3718      	adds	r7, #24
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	20006660 	.word	0x20006660

0800b10c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800b10c:	b590      	push	{r4, r7, lr}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800b112:	4b15      	ldr	r3, [pc, #84]	; (800b168 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b114:	6a1b      	ldr	r3, [r3, #32]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d01a      	beq.n	800b150 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800b11a:	4b13      	ldr	r3, [pc, #76]	; (800b168 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b11c:	6a1b      	ldr	r3, [r3, #32]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d015      	beq.n	800b150 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800b124:	4b10      	ldr	r3, [pc, #64]	; (800b168 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b126:	6a1b      	ldr	r3, [r3, #32]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4798      	blx	r3
 800b12c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800b130:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800b132:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b136:	f04f 0200 	mov.w	r2, #0
 800b13a:	f04f 0300 	mov.w	r3, #0
 800b13e:	000a      	movs	r2, r1
 800b140:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800b142:	4613      	mov	r3, r2
 800b144:	461a      	mov	r2, r3
 800b146:	4621      	mov	r1, r4
 800b148:	200d      	movs	r0, #13
 800b14a:	f7ff fbe3 	bl	800a914 <SEGGER_SYSVIEW_RecordU32x2>
 800b14e:	e006      	b.n	800b15e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800b150:	4b06      	ldr	r3, [pc, #24]	; (800b16c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4619      	mov	r1, r3
 800b156:	200c      	movs	r0, #12
 800b158:	f7ff fba0 	bl	800a89c <SEGGER_SYSVIEW_RecordU32>
  }
}
 800b15c:	bf00      	nop
 800b15e:	bf00      	nop
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	bd90      	pop	{r4, r7, pc}
 800b166:	bf00      	nop
 800b168:	20006630 	.word	0x20006630
 800b16c:	e0001004 	.word	0xe0001004

0800b170 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b176:	f3ef 8311 	mrs	r3, BASEPRI
 800b17a:	f04f 0120 	mov.w	r1, #32
 800b17e:	f381 8811 	msr	BASEPRI, r1
 800b182:	60fb      	str	r3, [r7, #12]
 800b184:	4819      	ldr	r0, [pc, #100]	; (800b1ec <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800b186:	f7ff f968 	bl	800a45a <_PreparePacket>
 800b18a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800b190:	4b17      	ldr	r3, [pc, #92]	; (800b1f0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b198:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	617b      	str	r3, [r7, #20]
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	613b      	str	r3, [r7, #16]
 800b1a2:	e00b      	b.n	800b1bc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	b2da      	uxtb	r2, r3
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	1c59      	adds	r1, r3, #1
 800b1ac:	6179      	str	r1, [r7, #20]
 800b1ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b1b2:	b2d2      	uxtb	r2, r2
 800b1b4:	701a      	strb	r2, [r3, #0]
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	09db      	lsrs	r3, r3, #7
 800b1ba:	613b      	str	r3, [r7, #16]
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	2b7f      	cmp	r3, #127	; 0x7f
 800b1c0:	d8f0      	bhi.n	800b1a4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	1c5a      	adds	r2, r3, #1
 800b1c6:	617a      	str	r2, [r7, #20]
 800b1c8:	693a      	ldr	r2, [r7, #16]
 800b1ca:	b2d2      	uxtb	r2, r2
 800b1cc:	701a      	strb	r2, [r3, #0]
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800b1d2:	2202      	movs	r2, #2
 800b1d4:	6879      	ldr	r1, [r7, #4]
 800b1d6:	68b8      	ldr	r0, [r7, #8]
 800b1d8:	f7ff fa20 	bl	800a61c <_SendPacket>
  RECORD_END();
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f383 8811 	msr	BASEPRI, r3
}
 800b1e2:	bf00      	nop
 800b1e4:	3718      	adds	r7, #24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	20006660 	.word	0x20006660
 800b1f0:	e000ed04 	.word	0xe000ed04

0800b1f4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b1fa:	f3ef 8311 	mrs	r3, BASEPRI
 800b1fe:	f04f 0120 	mov.w	r1, #32
 800b202:	f381 8811 	msr	BASEPRI, r1
 800b206:	607b      	str	r3, [r7, #4]
 800b208:	4807      	ldr	r0, [pc, #28]	; (800b228 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800b20a:	f7ff f926 	bl	800a45a <_PreparePacket>
 800b20e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800b210:	2203      	movs	r2, #3
 800b212:	6839      	ldr	r1, [r7, #0]
 800b214:	6838      	ldr	r0, [r7, #0]
 800b216:	f7ff fa01 	bl	800a61c <_SendPacket>
  RECORD_END();
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f383 8811 	msr	BASEPRI, r3
}
 800b220:	bf00      	nop
 800b222:	3708      	adds	r7, #8
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	20006660 	.word	0x20006660

0800b22c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b232:	f3ef 8311 	mrs	r3, BASEPRI
 800b236:	f04f 0120 	mov.w	r1, #32
 800b23a:	f381 8811 	msr	BASEPRI, r1
 800b23e:	607b      	str	r3, [r7, #4]
 800b240:	4807      	ldr	r0, [pc, #28]	; (800b260 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800b242:	f7ff f90a 	bl	800a45a <_PreparePacket>
 800b246:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800b248:	2212      	movs	r2, #18
 800b24a:	6839      	ldr	r1, [r7, #0]
 800b24c:	6838      	ldr	r0, [r7, #0]
 800b24e:	f7ff f9e5 	bl	800a61c <_SendPacket>
  RECORD_END();
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f383 8811 	msr	BASEPRI, r3
}
 800b258:	bf00      	nop
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	20006660 	.word	0x20006660

0800b264 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b26a:	f3ef 8311 	mrs	r3, BASEPRI
 800b26e:	f04f 0120 	mov.w	r1, #32
 800b272:	f381 8811 	msr	BASEPRI, r1
 800b276:	607b      	str	r3, [r7, #4]
 800b278:	4807      	ldr	r0, [pc, #28]	; (800b298 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800b27a:	f7ff f8ee 	bl	800a45a <_PreparePacket>
 800b27e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800b280:	2211      	movs	r2, #17
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	6838      	ldr	r0, [r7, #0]
 800b286:	f7ff f9c9 	bl	800a61c <_SendPacket>
  RECORD_END();
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f383 8811 	msr	BASEPRI, r3
}
 800b290:	bf00      	nop
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	20006660 	.word	0x20006660

0800b29c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b088      	sub	sp, #32
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b2a4:	f3ef 8311 	mrs	r3, BASEPRI
 800b2a8:	f04f 0120 	mov.w	r1, #32
 800b2ac:	f381 8811 	msr	BASEPRI, r1
 800b2b0:	617b      	str	r3, [r7, #20]
 800b2b2:	481a      	ldr	r0, [pc, #104]	; (800b31c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800b2b4:	f7ff f8d1 	bl	800a45a <_PreparePacket>
 800b2b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800b2be:	4b18      	ldr	r3, [pc, #96]	; (800b320 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	1ad3      	subs	r3, r2, r3
 800b2c6:	089b      	lsrs	r3, r3, #2
 800b2c8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	61fb      	str	r3, [r7, #28]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	61bb      	str	r3, [r7, #24]
 800b2d2:	e00b      	b.n	800b2ec <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	b2da      	uxtb	r2, r3
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	1c59      	adds	r1, r3, #1
 800b2dc:	61f9      	str	r1, [r7, #28]
 800b2de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b2e2:	b2d2      	uxtb	r2, r2
 800b2e4:	701a      	strb	r2, [r3, #0]
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	09db      	lsrs	r3, r3, #7
 800b2ea:	61bb      	str	r3, [r7, #24]
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	2b7f      	cmp	r3, #127	; 0x7f
 800b2f0:	d8f0      	bhi.n	800b2d4 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	1c5a      	adds	r2, r3, #1
 800b2f6:	61fa      	str	r2, [r7, #28]
 800b2f8:	69ba      	ldr	r2, [r7, #24]
 800b2fa:	b2d2      	uxtb	r2, r2
 800b2fc:	701a      	strb	r2, [r3, #0]
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800b302:	2208      	movs	r2, #8
 800b304:	68f9      	ldr	r1, [r7, #12]
 800b306:	6938      	ldr	r0, [r7, #16]
 800b308:	f7ff f988 	bl	800a61c <_SendPacket>
  RECORD_END();
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	f383 8811 	msr	BASEPRI, r3
}
 800b312:	bf00      	nop
 800b314:	3720      	adds	r7, #32
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	20006660 	.word	0x20006660
 800b320:	20006630 	.word	0x20006630

0800b324 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800b324:	b580      	push	{r7, lr}
 800b326:	b088      	sub	sp, #32
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b32c:	f3ef 8311 	mrs	r3, BASEPRI
 800b330:	f04f 0120 	mov.w	r1, #32
 800b334:	f381 8811 	msr	BASEPRI, r1
 800b338:	617b      	str	r3, [r7, #20]
 800b33a:	481a      	ldr	r0, [pc, #104]	; (800b3a4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800b33c:	f7ff f88d 	bl	800a45a <_PreparePacket>
 800b340:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800b346:	4b18      	ldr	r3, [pc, #96]	; (800b3a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	1ad3      	subs	r3, r2, r3
 800b34e:	089b      	lsrs	r3, r3, #2
 800b350:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	61fb      	str	r3, [r7, #28]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	61bb      	str	r3, [r7, #24]
 800b35a:	e00b      	b.n	800b374 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	b2da      	uxtb	r2, r3
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	1c59      	adds	r1, r3, #1
 800b364:	61f9      	str	r1, [r7, #28]
 800b366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b36a:	b2d2      	uxtb	r2, r2
 800b36c:	701a      	strb	r2, [r3, #0]
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	09db      	lsrs	r3, r3, #7
 800b372:	61bb      	str	r3, [r7, #24]
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	2b7f      	cmp	r3, #127	; 0x7f
 800b378:	d8f0      	bhi.n	800b35c <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	1c5a      	adds	r2, r3, #1
 800b37e:	61fa      	str	r2, [r7, #28]
 800b380:	69ba      	ldr	r2, [r7, #24]
 800b382:	b2d2      	uxtb	r2, r2
 800b384:	701a      	strb	r2, [r3, #0]
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800b38a:	2204      	movs	r2, #4
 800b38c:	68f9      	ldr	r1, [r7, #12]
 800b38e:	6938      	ldr	r0, [r7, #16]
 800b390:	f7ff f944 	bl	800a61c <_SendPacket>
  RECORD_END();
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	f383 8811 	msr	BASEPRI, r3
}
 800b39a:	bf00      	nop
 800b39c:	3720      	adds	r7, #32
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	20006660 	.word	0x20006660
 800b3a8:	20006630 	.word	0x20006630

0800b3ac <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b088      	sub	sp, #32
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b3b4:	f3ef 8311 	mrs	r3, BASEPRI
 800b3b8:	f04f 0120 	mov.w	r1, #32
 800b3bc:	f381 8811 	msr	BASEPRI, r1
 800b3c0:	617b      	str	r3, [r7, #20]
 800b3c2:	481a      	ldr	r0, [pc, #104]	; (800b42c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800b3c4:	f7ff f849 	bl	800a45a <_PreparePacket>
 800b3c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800b3ce:	4b18      	ldr	r3, [pc, #96]	; (800b430 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	089b      	lsrs	r3, r3, #2
 800b3d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	61fb      	str	r3, [r7, #28]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	61bb      	str	r3, [r7, #24]
 800b3e2:	e00b      	b.n	800b3fc <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	b2da      	uxtb	r2, r3
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	1c59      	adds	r1, r3, #1
 800b3ec:	61f9      	str	r1, [r7, #28]
 800b3ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b3f2:	b2d2      	uxtb	r2, r2
 800b3f4:	701a      	strb	r2, [r3, #0]
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	09db      	lsrs	r3, r3, #7
 800b3fa:	61bb      	str	r3, [r7, #24]
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	2b7f      	cmp	r3, #127	; 0x7f
 800b400:	d8f0      	bhi.n	800b3e4 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	1c5a      	adds	r2, r3, #1
 800b406:	61fa      	str	r2, [r7, #28]
 800b408:	69ba      	ldr	r2, [r7, #24]
 800b40a:	b2d2      	uxtb	r2, r2
 800b40c:	701a      	strb	r2, [r3, #0]
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800b412:	2206      	movs	r2, #6
 800b414:	68f9      	ldr	r1, [r7, #12]
 800b416:	6938      	ldr	r0, [r7, #16]
 800b418:	f7ff f900 	bl	800a61c <_SendPacket>
  RECORD_END();
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	f383 8811 	msr	BASEPRI, r3
}
 800b422:	bf00      	nop
 800b424:	3720      	adds	r7, #32
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	20006660 	.word	0x20006660
 800b430:	20006630 	.word	0x20006630

0800b434 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800b434:	b580      	push	{r7, lr}
 800b436:	b08a      	sub	sp, #40	; 0x28
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800b43e:	f3ef 8311 	mrs	r3, BASEPRI
 800b442:	f04f 0120 	mov.w	r1, #32
 800b446:	f381 8811 	msr	BASEPRI, r1
 800b44a:	617b      	str	r3, [r7, #20]
 800b44c:	4827      	ldr	r0, [pc, #156]	; (800b4ec <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800b44e:	f7ff f804 	bl	800a45a <_PreparePacket>
 800b452:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800b458:	4b25      	ldr	r3, [pc, #148]	; (800b4f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	1ad3      	subs	r3, r2, r3
 800b460:	089b      	lsrs	r3, r3, #2
 800b462:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	627b      	str	r3, [r7, #36]	; 0x24
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	623b      	str	r3, [r7, #32]
 800b46c:	e00b      	b.n	800b486 <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 800b46e:	6a3b      	ldr	r3, [r7, #32]
 800b470:	b2da      	uxtb	r2, r3
 800b472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b474:	1c59      	adds	r1, r3, #1
 800b476:	6279      	str	r1, [r7, #36]	; 0x24
 800b478:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b47c:	b2d2      	uxtb	r2, r2
 800b47e:	701a      	strb	r2, [r3, #0]
 800b480:	6a3b      	ldr	r3, [r7, #32]
 800b482:	09db      	lsrs	r3, r3, #7
 800b484:	623b      	str	r3, [r7, #32]
 800b486:	6a3b      	ldr	r3, [r7, #32]
 800b488:	2b7f      	cmp	r3, #127	; 0x7f
 800b48a:	d8f0      	bhi.n	800b46e <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 800b48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48e:	1c5a      	adds	r2, r3, #1
 800b490:	627a      	str	r2, [r7, #36]	; 0x24
 800b492:	6a3a      	ldr	r2, [r7, #32]
 800b494:	b2d2      	uxtb	r2, r2
 800b496:	701a      	strb	r2, [r3, #0]
 800b498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	61fb      	str	r3, [r7, #28]
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	61bb      	str	r3, [r7, #24]
 800b4a4:	e00b      	b.n	800b4be <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	b2da      	uxtb	r2, r3
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	1c59      	adds	r1, r3, #1
 800b4ae:	61f9      	str	r1, [r7, #28]
 800b4b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b4b4:	b2d2      	uxtb	r2, r2
 800b4b6:	701a      	strb	r2, [r3, #0]
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	09db      	lsrs	r3, r3, #7
 800b4bc:	61bb      	str	r3, [r7, #24]
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	2b7f      	cmp	r3, #127	; 0x7f
 800b4c2:	d8f0      	bhi.n	800b4a6 <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	1c5a      	adds	r2, r3, #1
 800b4c8:	61fa      	str	r2, [r7, #28]
 800b4ca:	69ba      	ldr	r2, [r7, #24]
 800b4cc:	b2d2      	uxtb	r2, r2
 800b4ce:	701a      	strb	r2, [r3, #0]
 800b4d0:	69fb      	ldr	r3, [r7, #28]
 800b4d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800b4d4:	2207      	movs	r2, #7
 800b4d6:	68f9      	ldr	r1, [r7, #12]
 800b4d8:	6938      	ldr	r0, [r7, #16]
 800b4da:	f7ff f89f 	bl	800a61c <_SendPacket>
  RECORD_END();
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f383 8811 	msr	BASEPRI, r3
}
 800b4e4:	bf00      	nop
 800b4e6:	3728      	adds	r7, #40	; 0x28
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	20006660 	.word	0x20006660
 800b4f0:	20006630 	.word	0x20006630

0800b4f4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800b4fc:	4b05      	ldr	r3, [pc, #20]	; (800b514 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	089b      	lsrs	r3, r3, #2
}
 800b506:	4618      	mov	r0, r3
 800b508:	370c      	adds	r7, #12
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	20006630 	.word	0x20006630

0800b518 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800b518:	b580      	push	{r7, lr}
 800b51a:	b08c      	sub	sp, #48	; 0x30
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	4603      	mov	r3, r0
 800b520:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800b522:	4b3b      	ldr	r3, [pc, #236]	; (800b610 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d06d      	beq.n	800b606 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800b52a:	4b39      	ldr	r3, [pc, #228]	; (800b610 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800b530:	2300      	movs	r3, #0
 800b532:	62bb      	str	r3, [r7, #40]	; 0x28
 800b534:	e008      	b.n	800b548 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800b536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b538:	691b      	ldr	r3, [r3, #16]
 800b53a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800b53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d007      	beq.n	800b552 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800b542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b544:	3301      	adds	r3, #1
 800b546:	62bb      	str	r3, [r7, #40]	; 0x28
 800b548:	79fb      	ldrb	r3, [r7, #7]
 800b54a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d3f2      	bcc.n	800b536 <SEGGER_SYSVIEW_SendModule+0x1e>
 800b550:	e000      	b.n	800b554 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800b552:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800b554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b556:	2b00      	cmp	r3, #0
 800b558:	d055      	beq.n	800b606 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b55a:	f3ef 8311 	mrs	r3, BASEPRI
 800b55e:	f04f 0120 	mov.w	r1, #32
 800b562:	f381 8811 	msr	BASEPRI, r1
 800b566:	617b      	str	r3, [r7, #20]
 800b568:	482a      	ldr	r0, [pc, #168]	; (800b614 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800b56a:	f7fe ff76 	bl	800a45a <_PreparePacket>
 800b56e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	627b      	str	r3, [r7, #36]	; 0x24
 800b578:	79fb      	ldrb	r3, [r7, #7]
 800b57a:	623b      	str	r3, [r7, #32]
 800b57c:	e00b      	b.n	800b596 <SEGGER_SYSVIEW_SendModule+0x7e>
 800b57e:	6a3b      	ldr	r3, [r7, #32]
 800b580:	b2da      	uxtb	r2, r3
 800b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b584:	1c59      	adds	r1, r3, #1
 800b586:	6279      	str	r1, [r7, #36]	; 0x24
 800b588:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b58c:	b2d2      	uxtb	r2, r2
 800b58e:	701a      	strb	r2, [r3, #0]
 800b590:	6a3b      	ldr	r3, [r7, #32]
 800b592:	09db      	lsrs	r3, r3, #7
 800b594:	623b      	str	r3, [r7, #32]
 800b596:	6a3b      	ldr	r3, [r7, #32]
 800b598:	2b7f      	cmp	r3, #127	; 0x7f
 800b59a:	d8f0      	bhi.n	800b57e <SEGGER_SYSVIEW_SendModule+0x66>
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	1c5a      	adds	r2, r3, #1
 800b5a0:	627a      	str	r2, [r7, #36]	; 0x24
 800b5a2:	6a3a      	ldr	r2, [r7, #32]
 800b5a4:	b2d2      	uxtb	r2, r2
 800b5a6:	701a      	strb	r2, [r3, #0]
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	61fb      	str	r3, [r7, #28]
 800b5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	61bb      	str	r3, [r7, #24]
 800b5b6:	e00b      	b.n	800b5d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	b2da      	uxtb	r2, r3
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	1c59      	adds	r1, r3, #1
 800b5c0:	61f9      	str	r1, [r7, #28]
 800b5c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b5c6:	b2d2      	uxtb	r2, r2
 800b5c8:	701a      	strb	r2, [r3, #0]
 800b5ca:	69bb      	ldr	r3, [r7, #24]
 800b5cc:	09db      	lsrs	r3, r3, #7
 800b5ce:	61bb      	str	r3, [r7, #24]
 800b5d0:	69bb      	ldr	r3, [r7, #24]
 800b5d2:	2b7f      	cmp	r3, #127	; 0x7f
 800b5d4:	d8f0      	bhi.n	800b5b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	1c5a      	adds	r2, r3, #1
 800b5da:	61fa      	str	r2, [r7, #28]
 800b5dc:	69ba      	ldr	r2, [r7, #24]
 800b5de:	b2d2      	uxtb	r2, r2
 800b5e0:	701a      	strb	r2, [r3, #0]
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2280      	movs	r2, #128	; 0x80
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f7fe fee6 	bl	800a3c0 <_EncodeStr>
 800b5f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800b5f6:	2216      	movs	r2, #22
 800b5f8:	68f9      	ldr	r1, [r7, #12]
 800b5fa:	6938      	ldr	r0, [r7, #16]
 800b5fc:	f7ff f80e 	bl	800a61c <_SendPacket>
      RECORD_END();
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800b606:	bf00      	nop
 800b608:	3730      	adds	r7, #48	; 0x30
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	20006658 	.word	0x20006658
 800b614:	20006660 	.word	0x20006660

0800b618 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800b61e:	4b0c      	ldr	r3, [pc, #48]	; (800b650 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00f      	beq.n	800b646 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800b626:	4b0a      	ldr	r3, [pc, #40]	; (800b650 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	691b      	ldr	r3, [r3, #16]
 800b63e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1f2      	bne.n	800b62c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800b646:	bf00      	nop
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	20006658 	.word	0x20006658

0800b654 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800b654:	b580      	push	{r7, lr}
 800b656:	b086      	sub	sp, #24
 800b658:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800b65a:	f3ef 8311 	mrs	r3, BASEPRI
 800b65e:	f04f 0120 	mov.w	r1, #32
 800b662:	f381 8811 	msr	BASEPRI, r1
 800b666:	60fb      	str	r3, [r7, #12]
 800b668:	4817      	ldr	r0, [pc, #92]	; (800b6c8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800b66a:	f7fe fef6 	bl	800a45a <_PreparePacket>
 800b66e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	617b      	str	r3, [r7, #20]
 800b678:	4b14      	ldr	r3, [pc, #80]	; (800b6cc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	613b      	str	r3, [r7, #16]
 800b67e:	e00b      	b.n	800b698 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	b2da      	uxtb	r2, r3
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	1c59      	adds	r1, r3, #1
 800b688:	6179      	str	r1, [r7, #20]
 800b68a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b68e:	b2d2      	uxtb	r2, r2
 800b690:	701a      	strb	r2, [r3, #0]
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	09db      	lsrs	r3, r3, #7
 800b696:	613b      	str	r3, [r7, #16]
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	2b7f      	cmp	r3, #127	; 0x7f
 800b69c:	d8f0      	bhi.n	800b680 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	1c5a      	adds	r2, r3, #1
 800b6a2:	617a      	str	r2, [r7, #20]
 800b6a4:	693a      	ldr	r2, [r7, #16]
 800b6a6:	b2d2      	uxtb	r2, r2
 800b6a8:	701a      	strb	r2, [r3, #0]
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800b6ae:	221b      	movs	r2, #27
 800b6b0:	6879      	ldr	r1, [r7, #4]
 800b6b2:	68b8      	ldr	r0, [r7, #8]
 800b6b4:	f7fe ffb2 	bl	800a61c <_SendPacket>
  RECORD_END();
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f383 8811 	msr	BASEPRI, r3
}
 800b6be:	bf00      	nop
 800b6c0:	3718      	adds	r7, #24
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	20006660 	.word	0x20006660
 800b6cc:	2000665c 	.word	0x2000665c

0800b6d0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b08a      	sub	sp, #40	; 0x28
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b6d8:	f3ef 8311 	mrs	r3, BASEPRI
 800b6dc:	f04f 0120 	mov.w	r1, #32
 800b6e0:	f381 8811 	msr	BASEPRI, r1
 800b6e4:	617b      	str	r3, [r7, #20]
 800b6e6:	4827      	ldr	r0, [pc, #156]	; (800b784 <SEGGER_SYSVIEW_Warn+0xb4>)
 800b6e8:	f7fe feb7 	bl	800a45a <_PreparePacket>
 800b6ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b6ee:	2280      	movs	r2, #128	; 0x80
 800b6f0:	6879      	ldr	r1, [r7, #4]
 800b6f2:	6938      	ldr	r0, [r7, #16]
 800b6f4:	f7fe fe64 	bl	800a3c0 <_EncodeStr>
 800b6f8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b6fe:	2301      	movs	r3, #1
 800b700:	623b      	str	r3, [r7, #32]
 800b702:	e00b      	b.n	800b71c <SEGGER_SYSVIEW_Warn+0x4c>
 800b704:	6a3b      	ldr	r3, [r7, #32]
 800b706:	b2da      	uxtb	r2, r3
 800b708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70a:	1c59      	adds	r1, r3, #1
 800b70c:	6279      	str	r1, [r7, #36]	; 0x24
 800b70e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b712:	b2d2      	uxtb	r2, r2
 800b714:	701a      	strb	r2, [r3, #0]
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	09db      	lsrs	r3, r3, #7
 800b71a:	623b      	str	r3, [r7, #32]
 800b71c:	6a3b      	ldr	r3, [r7, #32]
 800b71e:	2b7f      	cmp	r3, #127	; 0x7f
 800b720:	d8f0      	bhi.n	800b704 <SEGGER_SYSVIEW_Warn+0x34>
 800b722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b724:	1c5a      	adds	r2, r3, #1
 800b726:	627a      	str	r2, [r7, #36]	; 0x24
 800b728:	6a3a      	ldr	r2, [r7, #32]
 800b72a:	b2d2      	uxtb	r2, r2
 800b72c:	701a      	strb	r2, [r3, #0]
 800b72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b730:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	61fb      	str	r3, [r7, #28]
 800b736:	2300      	movs	r3, #0
 800b738:	61bb      	str	r3, [r7, #24]
 800b73a:	e00b      	b.n	800b754 <SEGGER_SYSVIEW_Warn+0x84>
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	b2da      	uxtb	r2, r3
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	1c59      	adds	r1, r3, #1
 800b744:	61f9      	str	r1, [r7, #28]
 800b746:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b74a:	b2d2      	uxtb	r2, r2
 800b74c:	701a      	strb	r2, [r3, #0]
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	09db      	lsrs	r3, r3, #7
 800b752:	61bb      	str	r3, [r7, #24]
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	2b7f      	cmp	r3, #127	; 0x7f
 800b758:	d8f0      	bhi.n	800b73c <SEGGER_SYSVIEW_Warn+0x6c>
 800b75a:	69fb      	ldr	r3, [r7, #28]
 800b75c:	1c5a      	adds	r2, r3, #1
 800b75e:	61fa      	str	r2, [r7, #28]
 800b760:	69ba      	ldr	r2, [r7, #24]
 800b762:	b2d2      	uxtb	r2, r2
 800b764:	701a      	strb	r2, [r3, #0]
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800b76a:	221a      	movs	r2, #26
 800b76c:	68f9      	ldr	r1, [r7, #12]
 800b76e:	6938      	ldr	r0, [r7, #16]
 800b770:	f7fe ff54 	bl	800a61c <_SendPacket>
  RECORD_END();
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	f383 8811 	msr	BASEPRI, r3
}
 800b77a:	bf00      	nop
 800b77c:	3728      	adds	r7, #40	; 0x28
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	20006660 	.word	0x20006660

0800b788 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b78c:	2201      	movs	r2, #1
 800b78e:	490e      	ldr	r1, [pc, #56]	; (800b7c8 <MX_USB_HOST_Init+0x40>)
 800b790:	480e      	ldr	r0, [pc, #56]	; (800b7cc <MX_USB_HOST_Init+0x44>)
 800b792:	f7f9 ff05 	bl	80055a0 <USBH_Init>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d001      	beq.n	800b7a0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b79c:	f7f5 f9da 	bl	8000b54 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b7a0:	490b      	ldr	r1, [pc, #44]	; (800b7d0 <MX_USB_HOST_Init+0x48>)
 800b7a2:	480a      	ldr	r0, [pc, #40]	; (800b7cc <MX_USB_HOST_Init+0x44>)
 800b7a4:	f7f9 ffb2 	bl	800570c <USBH_RegisterClass>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d001      	beq.n	800b7b2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b7ae:	f7f5 f9d1 	bl	8000b54 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b7b2:	4806      	ldr	r0, [pc, #24]	; (800b7cc <MX_USB_HOST_Init+0x44>)
 800b7b4:	f7fa f836 	bl	8005824 <USBH_Start>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d001      	beq.n	800b7c2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b7be:	f7f5 f9c9 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b7c2:	bf00      	nop
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	0800b7d5 	.word	0x0800b7d5
 800b7cc:	20006744 	.word	0x20006744
 800b7d0:	2000000c 	.word	0x2000000c

0800b7d4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	460b      	mov	r3, r1
 800b7de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b7e0:	78fb      	ldrb	r3, [r7, #3]
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	2b04      	cmp	r3, #4
 800b7e6:	d819      	bhi.n	800b81c <USBH_UserProcess+0x48>
 800b7e8:	a201      	add	r2, pc, #4	; (adr r2, 800b7f0 <USBH_UserProcess+0x1c>)
 800b7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ee:	bf00      	nop
 800b7f0:	0800b81d 	.word	0x0800b81d
 800b7f4:	0800b80d 	.word	0x0800b80d
 800b7f8:	0800b81d 	.word	0x0800b81d
 800b7fc:	0800b815 	.word	0x0800b815
 800b800:	0800b805 	.word	0x0800b805
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b804:	4b09      	ldr	r3, [pc, #36]	; (800b82c <USBH_UserProcess+0x58>)
 800b806:	2203      	movs	r2, #3
 800b808:	701a      	strb	r2, [r3, #0]
  break;
 800b80a:	e008      	b.n	800b81e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b80c:	4b07      	ldr	r3, [pc, #28]	; (800b82c <USBH_UserProcess+0x58>)
 800b80e:	2202      	movs	r2, #2
 800b810:	701a      	strb	r2, [r3, #0]
  break;
 800b812:	e004      	b.n	800b81e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b814:	4b05      	ldr	r3, [pc, #20]	; (800b82c <USBH_UserProcess+0x58>)
 800b816:	2201      	movs	r2, #1
 800b818:	701a      	strb	r2, [r3, #0]
  break;
 800b81a:	e000      	b.n	800b81e <USBH_UserProcess+0x4a>

  default:
  break;
 800b81c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b81e:	bf00      	nop
 800b820:	370c      	adds	r7, #12
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	20006b28 	.word	0x20006b28

0800b830 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b08a      	sub	sp, #40	; 0x28
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b838:	f107 0314 	add.w	r3, r7, #20
 800b83c:	2200      	movs	r2, #0
 800b83e:	601a      	str	r2, [r3, #0]
 800b840:	605a      	str	r2, [r3, #4]
 800b842:	609a      	str	r2, [r3, #8]
 800b844:	60da      	str	r2, [r3, #12]
 800b846:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b850:	d147      	bne.n	800b8e2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b852:	2300      	movs	r3, #0
 800b854:	613b      	str	r3, [r7, #16]
 800b856:	4b25      	ldr	r3, [pc, #148]	; (800b8ec <HAL_HCD_MspInit+0xbc>)
 800b858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b85a:	4a24      	ldr	r2, [pc, #144]	; (800b8ec <HAL_HCD_MspInit+0xbc>)
 800b85c:	f043 0301 	orr.w	r3, r3, #1
 800b860:	6313      	str	r3, [r2, #48]	; 0x30
 800b862:	4b22      	ldr	r3, [pc, #136]	; (800b8ec <HAL_HCD_MspInit+0xbc>)
 800b864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b866:	f003 0301 	and.w	r3, r3, #1
 800b86a:	613b      	str	r3, [r7, #16]
 800b86c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b86e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b874:	2300      	movs	r3, #0
 800b876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b878:	2300      	movs	r3, #0
 800b87a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b87c:	f107 0314 	add.w	r3, r7, #20
 800b880:	4619      	mov	r1, r3
 800b882:	481b      	ldr	r0, [pc, #108]	; (800b8f0 <HAL_HCD_MspInit+0xc0>)
 800b884:	f7f5 fca2 	bl	80011cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b888:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b88c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b88e:	2302      	movs	r3, #2
 800b890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b892:	2300      	movs	r3, #0
 800b894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b896:	2300      	movs	r3, #0
 800b898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b89a:	230a      	movs	r3, #10
 800b89c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b89e:	f107 0314 	add.w	r3, r7, #20
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	4812      	ldr	r0, [pc, #72]	; (800b8f0 <HAL_HCD_MspInit+0xc0>)
 800b8a6:	f7f5 fc91 	bl	80011cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b8aa:	4b10      	ldr	r3, [pc, #64]	; (800b8ec <HAL_HCD_MspInit+0xbc>)
 800b8ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ae:	4a0f      	ldr	r2, [pc, #60]	; (800b8ec <HAL_HCD_MspInit+0xbc>)
 800b8b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8b4:	6353      	str	r3, [r2, #52]	; 0x34
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	60fb      	str	r3, [r7, #12]
 800b8ba:	4b0c      	ldr	r3, [pc, #48]	; (800b8ec <HAL_HCD_MspInit+0xbc>)
 800b8bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8be:	4a0b      	ldr	r2, [pc, #44]	; (800b8ec <HAL_HCD_MspInit+0xbc>)
 800b8c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b8c4:	6453      	str	r3, [r2, #68]	; 0x44
 800b8c6:	4b09      	ldr	r3, [pc, #36]	; (800b8ec <HAL_HCD_MspInit+0xbc>)
 800b8c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8ce:	60fb      	str	r3, [r7, #12]
 800b8d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	2105      	movs	r1, #5
 800b8d6:	2043      	movs	r0, #67	; 0x43
 800b8d8:	f7f5 fc41 	bl	800115e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b8dc:	2043      	movs	r0, #67	; 0x43
 800b8de:	f7f5 fc5a 	bl	8001196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b8e2:	bf00      	nop
 800b8e4:	3728      	adds	r7, #40	; 0x28
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	40023800 	.word	0x40023800
 800b8f0:	40020000 	.word	0x40020000

0800b8f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b902:	4618      	mov	r0, r3
 800b904:	f7fa fc45 	bl	8006192 <USBH_LL_IncTimer>
}
 800b908:	bf00      	nop
 800b90a:	3708      	adds	r7, #8
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fa fc89 	bl	8006236 <USBH_LL_Connect>
}
 800b924:	bf00      	nop
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fa fc9e 	bl	800627c <USBH_LL_Disconnect>
}
 800b940:	bf00      	nop
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	460b      	mov	r3, r1
 800b952:	70fb      	strb	r3, [r7, #3]
 800b954:	4613      	mov	r3, r2
 800b956:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fa fcd3 	bl	800630a <USBH_LL_NotifyURBChange>
#endif
}
 800b964:	bf00      	nop
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7fa fc33 	bl	80061e6 <USBH_LL_PortEnabled>
}
 800b980:	bf00      	nop
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b996:	4618      	mov	r0, r3
 800b998:	f7fa fc3f 	bl	800621a <USBH_LL_PortDisabled>
}
 800b99c:	bf00      	nop
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d12a      	bne.n	800ba0c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b9b6:	4a18      	ldr	r2, [pc, #96]	; (800ba18 <USBH_LL_Init+0x74>)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4a15      	ldr	r2, [pc, #84]	; (800ba18 <USBH_LL_Init+0x74>)
 800b9c2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b9c6:	4b14      	ldr	r3, [pc, #80]	; (800ba18 <USBH_LL_Init+0x74>)
 800b9c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b9cc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b9ce:	4b12      	ldr	r3, [pc, #72]	; (800ba18 <USBH_LL_Init+0x74>)
 800b9d0:	2208      	movs	r2, #8
 800b9d2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b9d4:	4b10      	ldr	r3, [pc, #64]	; (800ba18 <USBH_LL_Init+0x74>)
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b9da:	4b0f      	ldr	r3, [pc, #60]	; (800ba18 <USBH_LL_Init+0x74>)
 800b9dc:	2200      	movs	r2, #0
 800b9de:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b9e0:	4b0d      	ldr	r3, [pc, #52]	; (800ba18 <USBH_LL_Init+0x74>)
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b9e6:	4b0c      	ldr	r3, [pc, #48]	; (800ba18 <USBH_LL_Init+0x74>)
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b9ec:	480a      	ldr	r0, [pc, #40]	; (800ba18 <USBH_LL_Init+0x74>)
 800b9ee:	f7f5 fdc6 	bl	800157e <HAL_HCD_Init>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d001      	beq.n	800b9fc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b9f8:	f7f5 f8ac 	bl	8000b54 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b9fc:	4806      	ldr	r0, [pc, #24]	; (800ba18 <USBH_LL_Init+0x74>)
 800b9fe:	f7f6 f9aa 	bl	8001d56 <HAL_HCD_GetCurrentFrame>
 800ba02:	4603      	mov	r3, r0
 800ba04:	4619      	mov	r1, r3
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7fa fbb4 	bl	8006174 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ba0c:	2300      	movs	r3, #0
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3708      	adds	r7, #8
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	20006b2c 	.word	0x20006b2c

0800ba1c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba24:	2300      	movs	r3, #0
 800ba26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7f6 f919 	bl	8001c6a <HAL_HCD_Start>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba3c:	7bfb      	ldrb	r3, [r7, #15]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 f95c 	bl	800bcfc <USBH_Get_USB_Status>
 800ba44:	4603      	mov	r3, r0
 800ba46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b084      	sub	sp, #16
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7f6 f921 	bl	8001cb0 <HAL_HCD_Stop>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba72:	7bfb      	ldrb	r3, [r7, #15]
 800ba74:	4618      	mov	r0, r3
 800ba76:	f000 f941 	bl	800bcfc <USBH_Get_USB_Status>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ba90:	2301      	movs	r3, #1
 800ba92:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7f6 f969 	bl	8001d72 <HAL_HCD_GetCurrentSpeed>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b02      	cmp	r3, #2
 800baa4:	d00c      	beq.n	800bac0 <USBH_LL_GetSpeed+0x38>
 800baa6:	2b02      	cmp	r3, #2
 800baa8:	d80d      	bhi.n	800bac6 <USBH_LL_GetSpeed+0x3e>
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d002      	beq.n	800bab4 <USBH_LL_GetSpeed+0x2c>
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d003      	beq.n	800baba <USBH_LL_GetSpeed+0x32>
 800bab2:	e008      	b.n	800bac6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bab4:	2300      	movs	r3, #0
 800bab6:	73fb      	strb	r3, [r7, #15]
    break;
 800bab8:	e008      	b.n	800bacc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800baba:	2301      	movs	r3, #1
 800babc:	73fb      	strb	r3, [r7, #15]
    break;
 800babe:	e005      	b.n	800bacc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bac0:	2302      	movs	r3, #2
 800bac2:	73fb      	strb	r3, [r7, #15]
    break;
 800bac4:	e002      	b.n	800bacc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bac6:	2301      	movs	r3, #1
 800bac8:	73fb      	strb	r3, [r7, #15]
    break;
 800baca:	bf00      	nop
  }
  return  speed;
 800bacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b084      	sub	sp, #16
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bade:	2300      	movs	r3, #0
 800bae0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bae2:	2300      	movs	r3, #0
 800bae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800baec:	4618      	mov	r0, r3
 800baee:	f7f6 f8fc 	bl	8001cea <HAL_HCD_ResetPort>
 800baf2:	4603      	mov	r3, r0
 800baf4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800baf6:	7bfb      	ldrb	r3, [r7, #15]
 800baf8:	4618      	mov	r0, r3
 800bafa:	f000 f8ff 	bl	800bcfc <USBH_Get_USB_Status>
 800bafe:	4603      	mov	r3, r0
 800bb00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb02:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	460b      	mov	r3, r1
 800bb16:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb1e:	78fa      	ldrb	r2, [r7, #3]
 800bb20:	4611      	mov	r1, r2
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7f6 f903 	bl	8001d2e <HAL_HCD_HC_GetXferCount>
 800bb28:	4603      	mov	r3, r0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bb32:	b590      	push	{r4, r7, lr}
 800bb34:	b089      	sub	sp, #36	; 0x24
 800bb36:	af04      	add	r7, sp, #16
 800bb38:	6078      	str	r0, [r7, #4]
 800bb3a:	4608      	mov	r0, r1
 800bb3c:	4611      	mov	r1, r2
 800bb3e:	461a      	mov	r2, r3
 800bb40:	4603      	mov	r3, r0
 800bb42:	70fb      	strb	r3, [r7, #3]
 800bb44:	460b      	mov	r3, r1
 800bb46:	70bb      	strb	r3, [r7, #2]
 800bb48:	4613      	mov	r3, r2
 800bb4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bb5a:	787c      	ldrb	r4, [r7, #1]
 800bb5c:	78ba      	ldrb	r2, [r7, #2]
 800bb5e:	78f9      	ldrb	r1, [r7, #3]
 800bb60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bb62:	9302      	str	r3, [sp, #8]
 800bb64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb68:	9301      	str	r3, [sp, #4]
 800bb6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb6e:	9300      	str	r3, [sp, #0]
 800bb70:	4623      	mov	r3, r4
 800bb72:	f7f5 fd66 	bl	8001642 <HAL_HCD_HC_Init>
 800bb76:	4603      	mov	r3, r0
 800bb78:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb7a:	7bfb      	ldrb	r3, [r7, #15]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f000 f8bd 	bl	800bcfc <USBH_Get_USB_Status>
 800bb82:	4603      	mov	r3, r0
 800bb84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb86:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3714      	adds	r7, #20
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd90      	pop	{r4, r7, pc}

0800bb90 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bba0:	2300      	movs	r3, #0
 800bba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bbaa:	78fa      	ldrb	r2, [r7, #3]
 800bbac:	4611      	mov	r1, r2
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7f5 fdd6 	bl	8001760 <HAL_HCD_HC_Halt>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bbb8:	7bfb      	ldrb	r3, [r7, #15]
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f000 f89e 	bl	800bcfc <USBH_Get_USB_Status>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bbce:	b590      	push	{r4, r7, lr}
 800bbd0:	b089      	sub	sp, #36	; 0x24
 800bbd2:	af04      	add	r7, sp, #16
 800bbd4:	6078      	str	r0, [r7, #4]
 800bbd6:	4608      	mov	r0, r1
 800bbd8:	4611      	mov	r1, r2
 800bbda:	461a      	mov	r2, r3
 800bbdc:	4603      	mov	r3, r0
 800bbde:	70fb      	strb	r3, [r7, #3]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	70bb      	strb	r3, [r7, #2]
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbec:	2300      	movs	r3, #0
 800bbee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bbf6:	787c      	ldrb	r4, [r7, #1]
 800bbf8:	78ba      	ldrb	r2, [r7, #2]
 800bbfa:	78f9      	ldrb	r1, [r7, #3]
 800bbfc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bc00:	9303      	str	r3, [sp, #12]
 800bc02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bc04:	9302      	str	r3, [sp, #8]
 800bc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc08:	9301      	str	r3, [sp, #4]
 800bc0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	4623      	mov	r3, r4
 800bc12:	f7f5 fdc9 	bl	80017a8 <HAL_HCD_HC_SubmitRequest>
 800bc16:	4603      	mov	r3, r0
 800bc18:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bc1a:	7bfb      	ldrb	r3, [r7, #15]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f000 f86d 	bl	800bcfc <USBH_Get_USB_Status>
 800bc22:	4603      	mov	r3, r0
 800bc24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc26:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3714      	adds	r7, #20
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd90      	pop	{r4, r7, pc}

0800bc30 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc42:	78fa      	ldrb	r2, [r7, #3]
 800bc44:	4611      	mov	r1, r2
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7f6 f85d 	bl	8001d06 <HAL_HCD_HC_GetURBState>
 800bc4c:	4603      	mov	r3, r0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bc56:	b580      	push	{r7, lr}
 800bc58:	b082      	sub	sp, #8
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
 800bc5e:	460b      	mov	r3, r1
 800bc60:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d103      	bne.n	800bc74 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bc6c:	78fb      	ldrb	r3, [r7, #3]
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f000 f870 	bl	800bd54 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bc74:	20c8      	movs	r0, #200	; 0xc8
 800bc76:	f7f5 f973 	bl	8000f60 <HAL_Delay>
  return USBH_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	70fb      	strb	r3, [r7, #3]
 800bc90:	4613      	mov	r3, r2
 800bc92:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc9a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bc9c:	78fb      	ldrb	r3, [r7, #3]
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	212c      	movs	r1, #44	; 0x2c
 800bca2:	fb01 f303 	mul.w	r3, r1, r3
 800bca6:	4413      	add	r3, r2
 800bca8:	333b      	adds	r3, #59	; 0x3b
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d009      	beq.n	800bcc4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bcb0:	78fb      	ldrb	r3, [r7, #3]
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	212c      	movs	r1, #44	; 0x2c
 800bcb6:	fb01 f303 	mul.w	r3, r1, r3
 800bcba:	4413      	add	r3, r2
 800bcbc:	3354      	adds	r3, #84	; 0x54
 800bcbe:	78ba      	ldrb	r2, [r7, #2]
 800bcc0:	701a      	strb	r2, [r3, #0]
 800bcc2:	e008      	b.n	800bcd6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bcc4:	78fb      	ldrb	r3, [r7, #3]
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	212c      	movs	r1, #44	; 0x2c
 800bcca:	fb01 f303 	mul.w	r3, r1, r3
 800bcce:	4413      	add	r3, r2
 800bcd0:	3355      	adds	r3, #85	; 0x55
 800bcd2:	78ba      	ldrb	r2, [r7, #2]
 800bcd4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bcd6:	2300      	movs	r3, #0
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3714      	adds	r7, #20
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f7f5 f937 	bl	8000f60 <HAL_Delay>
}
 800bcf2:	bf00      	nop
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
	...

0800bcfc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	4603      	mov	r3, r0
 800bd04:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd06:	2300      	movs	r3, #0
 800bd08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd0a:	79fb      	ldrb	r3, [r7, #7]
 800bd0c:	2b03      	cmp	r3, #3
 800bd0e:	d817      	bhi.n	800bd40 <USBH_Get_USB_Status+0x44>
 800bd10:	a201      	add	r2, pc, #4	; (adr r2, 800bd18 <USBH_Get_USB_Status+0x1c>)
 800bd12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd16:	bf00      	nop
 800bd18:	0800bd29 	.word	0x0800bd29
 800bd1c:	0800bd2f 	.word	0x0800bd2f
 800bd20:	0800bd35 	.word	0x0800bd35
 800bd24:	0800bd3b 	.word	0x0800bd3b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd2c:	e00b      	b.n	800bd46 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bd2e:	2302      	movs	r3, #2
 800bd30:	73fb      	strb	r3, [r7, #15]
    break;
 800bd32:	e008      	b.n	800bd46 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bd34:	2301      	movs	r3, #1
 800bd36:	73fb      	strb	r3, [r7, #15]
    break;
 800bd38:	e005      	b.n	800bd46 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bd3a:	2302      	movs	r3, #2
 800bd3c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd3e:	e002      	b.n	800bd46 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bd40:	2302      	movs	r3, #2
 800bd42:	73fb      	strb	r3, [r7, #15]
    break;
 800bd44:	bf00      	nop
  }
  return usb_status;
 800bd46:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bd5e:	79fb      	ldrb	r3, [r7, #7]
 800bd60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bd62:	79fb      	ldrb	r3, [r7, #7]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d102      	bne.n	800bd6e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	73fb      	strb	r3, [r7, #15]
 800bd6c:	e001      	b.n	800bd72 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bd72:	7bfb      	ldrb	r3, [r7, #15]
 800bd74:	461a      	mov	r2, r3
 800bd76:	2101      	movs	r1, #1
 800bd78:	4803      	ldr	r0, [pc, #12]	; (800bd88 <MX_DriverVbusFS+0x34>)
 800bd7a:	f7f5 fbc3 	bl	8001504 <HAL_GPIO_WritePin>
}
 800bd7e:	bf00      	nop
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	40020800 	.word	0x40020800

0800bd8c <__errno>:
 800bd8c:	4b01      	ldr	r3, [pc, #4]	; (800bd94 <__errno+0x8>)
 800bd8e:	6818      	ldr	r0, [r3, #0]
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	20000030 	.word	0x20000030

0800bd98 <__libc_init_array>:
 800bd98:	b570      	push	{r4, r5, r6, lr}
 800bd9a:	4d0d      	ldr	r5, [pc, #52]	; (800bdd0 <__libc_init_array+0x38>)
 800bd9c:	4c0d      	ldr	r4, [pc, #52]	; (800bdd4 <__libc_init_array+0x3c>)
 800bd9e:	1b64      	subs	r4, r4, r5
 800bda0:	10a4      	asrs	r4, r4, #2
 800bda2:	2600      	movs	r6, #0
 800bda4:	42a6      	cmp	r6, r4
 800bda6:	d109      	bne.n	800bdbc <__libc_init_array+0x24>
 800bda8:	4d0b      	ldr	r5, [pc, #44]	; (800bdd8 <__libc_init_array+0x40>)
 800bdaa:	4c0c      	ldr	r4, [pc, #48]	; (800bddc <__libc_init_array+0x44>)
 800bdac:	f001 f8ae 	bl	800cf0c <_init>
 800bdb0:	1b64      	subs	r4, r4, r5
 800bdb2:	10a4      	asrs	r4, r4, #2
 800bdb4:	2600      	movs	r6, #0
 800bdb6:	42a6      	cmp	r6, r4
 800bdb8:	d105      	bne.n	800bdc6 <__libc_init_array+0x2e>
 800bdba:	bd70      	pop	{r4, r5, r6, pc}
 800bdbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdc0:	4798      	blx	r3
 800bdc2:	3601      	adds	r6, #1
 800bdc4:	e7ee      	b.n	800bda4 <__libc_init_array+0xc>
 800bdc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdca:	4798      	blx	r3
 800bdcc:	3601      	adds	r6, #1
 800bdce:	e7f2      	b.n	800bdb6 <__libc_init_array+0x1e>
 800bdd0:	0800d198 	.word	0x0800d198
 800bdd4:	0800d198 	.word	0x0800d198
 800bdd8:	0800d198 	.word	0x0800d198
 800bddc:	0800d19c 	.word	0x0800d19c

0800bde0 <malloc>:
 800bde0:	4b02      	ldr	r3, [pc, #8]	; (800bdec <malloc+0xc>)
 800bde2:	4601      	mov	r1, r0
 800bde4:	6818      	ldr	r0, [r3, #0]
 800bde6:	f000 b89d 	b.w	800bf24 <_malloc_r>
 800bdea:	bf00      	nop
 800bdec:	20000030 	.word	0x20000030

0800bdf0 <free>:
 800bdf0:	4b02      	ldr	r3, [pc, #8]	; (800bdfc <free+0xc>)
 800bdf2:	4601      	mov	r1, r0
 800bdf4:	6818      	ldr	r0, [r3, #0]
 800bdf6:	f000 b829 	b.w	800be4c <_free_r>
 800bdfa:	bf00      	nop
 800bdfc:	20000030 	.word	0x20000030

0800be00 <memcmp>:
 800be00:	b510      	push	{r4, lr}
 800be02:	3901      	subs	r1, #1
 800be04:	4402      	add	r2, r0
 800be06:	4290      	cmp	r0, r2
 800be08:	d101      	bne.n	800be0e <memcmp+0xe>
 800be0a:	2000      	movs	r0, #0
 800be0c:	e005      	b.n	800be1a <memcmp+0x1a>
 800be0e:	7803      	ldrb	r3, [r0, #0]
 800be10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800be14:	42a3      	cmp	r3, r4
 800be16:	d001      	beq.n	800be1c <memcmp+0x1c>
 800be18:	1b18      	subs	r0, r3, r4
 800be1a:	bd10      	pop	{r4, pc}
 800be1c:	3001      	adds	r0, #1
 800be1e:	e7f2      	b.n	800be06 <memcmp+0x6>

0800be20 <memcpy>:
 800be20:	440a      	add	r2, r1
 800be22:	4291      	cmp	r1, r2
 800be24:	f100 33ff 	add.w	r3, r0, #4294967295
 800be28:	d100      	bne.n	800be2c <memcpy+0xc>
 800be2a:	4770      	bx	lr
 800be2c:	b510      	push	{r4, lr}
 800be2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be36:	4291      	cmp	r1, r2
 800be38:	d1f9      	bne.n	800be2e <memcpy+0xe>
 800be3a:	bd10      	pop	{r4, pc}

0800be3c <memset>:
 800be3c:	4402      	add	r2, r0
 800be3e:	4603      	mov	r3, r0
 800be40:	4293      	cmp	r3, r2
 800be42:	d100      	bne.n	800be46 <memset+0xa>
 800be44:	4770      	bx	lr
 800be46:	f803 1b01 	strb.w	r1, [r3], #1
 800be4a:	e7f9      	b.n	800be40 <memset+0x4>

0800be4c <_free_r>:
 800be4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be4e:	2900      	cmp	r1, #0
 800be50:	d044      	beq.n	800bedc <_free_r+0x90>
 800be52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be56:	9001      	str	r0, [sp, #4]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f1a1 0404 	sub.w	r4, r1, #4
 800be5e:	bfb8      	it	lt
 800be60:	18e4      	addlt	r4, r4, r3
 800be62:	f000 fc59 	bl	800c718 <__malloc_lock>
 800be66:	4a1e      	ldr	r2, [pc, #120]	; (800bee0 <_free_r+0x94>)
 800be68:	9801      	ldr	r0, [sp, #4]
 800be6a:	6813      	ldr	r3, [r2, #0]
 800be6c:	b933      	cbnz	r3, 800be7c <_free_r+0x30>
 800be6e:	6063      	str	r3, [r4, #4]
 800be70:	6014      	str	r4, [r2, #0]
 800be72:	b003      	add	sp, #12
 800be74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be78:	f000 bc54 	b.w	800c724 <__malloc_unlock>
 800be7c:	42a3      	cmp	r3, r4
 800be7e:	d908      	bls.n	800be92 <_free_r+0x46>
 800be80:	6825      	ldr	r5, [r4, #0]
 800be82:	1961      	adds	r1, r4, r5
 800be84:	428b      	cmp	r3, r1
 800be86:	bf01      	itttt	eq
 800be88:	6819      	ldreq	r1, [r3, #0]
 800be8a:	685b      	ldreq	r3, [r3, #4]
 800be8c:	1949      	addeq	r1, r1, r5
 800be8e:	6021      	streq	r1, [r4, #0]
 800be90:	e7ed      	b.n	800be6e <_free_r+0x22>
 800be92:	461a      	mov	r2, r3
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	b10b      	cbz	r3, 800be9c <_free_r+0x50>
 800be98:	42a3      	cmp	r3, r4
 800be9a:	d9fa      	bls.n	800be92 <_free_r+0x46>
 800be9c:	6811      	ldr	r1, [r2, #0]
 800be9e:	1855      	adds	r5, r2, r1
 800bea0:	42a5      	cmp	r5, r4
 800bea2:	d10b      	bne.n	800bebc <_free_r+0x70>
 800bea4:	6824      	ldr	r4, [r4, #0]
 800bea6:	4421      	add	r1, r4
 800bea8:	1854      	adds	r4, r2, r1
 800beaa:	42a3      	cmp	r3, r4
 800beac:	6011      	str	r1, [r2, #0]
 800beae:	d1e0      	bne.n	800be72 <_free_r+0x26>
 800beb0:	681c      	ldr	r4, [r3, #0]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	6053      	str	r3, [r2, #4]
 800beb6:	4421      	add	r1, r4
 800beb8:	6011      	str	r1, [r2, #0]
 800beba:	e7da      	b.n	800be72 <_free_r+0x26>
 800bebc:	d902      	bls.n	800bec4 <_free_r+0x78>
 800bebe:	230c      	movs	r3, #12
 800bec0:	6003      	str	r3, [r0, #0]
 800bec2:	e7d6      	b.n	800be72 <_free_r+0x26>
 800bec4:	6825      	ldr	r5, [r4, #0]
 800bec6:	1961      	adds	r1, r4, r5
 800bec8:	428b      	cmp	r3, r1
 800beca:	bf04      	itt	eq
 800becc:	6819      	ldreq	r1, [r3, #0]
 800bece:	685b      	ldreq	r3, [r3, #4]
 800bed0:	6063      	str	r3, [r4, #4]
 800bed2:	bf04      	itt	eq
 800bed4:	1949      	addeq	r1, r1, r5
 800bed6:	6021      	streq	r1, [r4, #0]
 800bed8:	6054      	str	r4, [r2, #4]
 800beda:	e7ca      	b.n	800be72 <_free_r+0x26>
 800bedc:	b003      	add	sp, #12
 800bede:	bd30      	pop	{r4, r5, pc}
 800bee0:	20006e30 	.word	0x20006e30

0800bee4 <sbrk_aligned>:
 800bee4:	b570      	push	{r4, r5, r6, lr}
 800bee6:	4e0e      	ldr	r6, [pc, #56]	; (800bf20 <sbrk_aligned+0x3c>)
 800bee8:	460c      	mov	r4, r1
 800beea:	6831      	ldr	r1, [r6, #0]
 800beec:	4605      	mov	r5, r0
 800beee:	b911      	cbnz	r1, 800bef6 <sbrk_aligned+0x12>
 800bef0:	f000 f902 	bl	800c0f8 <_sbrk_r>
 800bef4:	6030      	str	r0, [r6, #0]
 800bef6:	4621      	mov	r1, r4
 800bef8:	4628      	mov	r0, r5
 800befa:	f000 f8fd 	bl	800c0f8 <_sbrk_r>
 800befe:	1c43      	adds	r3, r0, #1
 800bf00:	d00a      	beq.n	800bf18 <sbrk_aligned+0x34>
 800bf02:	1cc4      	adds	r4, r0, #3
 800bf04:	f024 0403 	bic.w	r4, r4, #3
 800bf08:	42a0      	cmp	r0, r4
 800bf0a:	d007      	beq.n	800bf1c <sbrk_aligned+0x38>
 800bf0c:	1a21      	subs	r1, r4, r0
 800bf0e:	4628      	mov	r0, r5
 800bf10:	f000 f8f2 	bl	800c0f8 <_sbrk_r>
 800bf14:	3001      	adds	r0, #1
 800bf16:	d101      	bne.n	800bf1c <sbrk_aligned+0x38>
 800bf18:	f04f 34ff 	mov.w	r4, #4294967295
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	bd70      	pop	{r4, r5, r6, pc}
 800bf20:	20006e34 	.word	0x20006e34

0800bf24 <_malloc_r>:
 800bf24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf28:	1ccd      	adds	r5, r1, #3
 800bf2a:	f025 0503 	bic.w	r5, r5, #3
 800bf2e:	3508      	adds	r5, #8
 800bf30:	2d0c      	cmp	r5, #12
 800bf32:	bf38      	it	cc
 800bf34:	250c      	movcc	r5, #12
 800bf36:	2d00      	cmp	r5, #0
 800bf38:	4607      	mov	r7, r0
 800bf3a:	db01      	blt.n	800bf40 <_malloc_r+0x1c>
 800bf3c:	42a9      	cmp	r1, r5
 800bf3e:	d905      	bls.n	800bf4c <_malloc_r+0x28>
 800bf40:	230c      	movs	r3, #12
 800bf42:	603b      	str	r3, [r7, #0]
 800bf44:	2600      	movs	r6, #0
 800bf46:	4630      	mov	r0, r6
 800bf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf4c:	4e2e      	ldr	r6, [pc, #184]	; (800c008 <_malloc_r+0xe4>)
 800bf4e:	f000 fbe3 	bl	800c718 <__malloc_lock>
 800bf52:	6833      	ldr	r3, [r6, #0]
 800bf54:	461c      	mov	r4, r3
 800bf56:	bb34      	cbnz	r4, 800bfa6 <_malloc_r+0x82>
 800bf58:	4629      	mov	r1, r5
 800bf5a:	4638      	mov	r0, r7
 800bf5c:	f7ff ffc2 	bl	800bee4 <sbrk_aligned>
 800bf60:	1c43      	adds	r3, r0, #1
 800bf62:	4604      	mov	r4, r0
 800bf64:	d14d      	bne.n	800c002 <_malloc_r+0xde>
 800bf66:	6834      	ldr	r4, [r6, #0]
 800bf68:	4626      	mov	r6, r4
 800bf6a:	2e00      	cmp	r6, #0
 800bf6c:	d140      	bne.n	800bff0 <_malloc_r+0xcc>
 800bf6e:	6823      	ldr	r3, [r4, #0]
 800bf70:	4631      	mov	r1, r6
 800bf72:	4638      	mov	r0, r7
 800bf74:	eb04 0803 	add.w	r8, r4, r3
 800bf78:	f000 f8be 	bl	800c0f8 <_sbrk_r>
 800bf7c:	4580      	cmp	r8, r0
 800bf7e:	d13a      	bne.n	800bff6 <_malloc_r+0xd2>
 800bf80:	6821      	ldr	r1, [r4, #0]
 800bf82:	3503      	adds	r5, #3
 800bf84:	1a6d      	subs	r5, r5, r1
 800bf86:	f025 0503 	bic.w	r5, r5, #3
 800bf8a:	3508      	adds	r5, #8
 800bf8c:	2d0c      	cmp	r5, #12
 800bf8e:	bf38      	it	cc
 800bf90:	250c      	movcc	r5, #12
 800bf92:	4629      	mov	r1, r5
 800bf94:	4638      	mov	r0, r7
 800bf96:	f7ff ffa5 	bl	800bee4 <sbrk_aligned>
 800bf9a:	3001      	adds	r0, #1
 800bf9c:	d02b      	beq.n	800bff6 <_malloc_r+0xd2>
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	442b      	add	r3, r5
 800bfa2:	6023      	str	r3, [r4, #0]
 800bfa4:	e00e      	b.n	800bfc4 <_malloc_r+0xa0>
 800bfa6:	6822      	ldr	r2, [r4, #0]
 800bfa8:	1b52      	subs	r2, r2, r5
 800bfaa:	d41e      	bmi.n	800bfea <_malloc_r+0xc6>
 800bfac:	2a0b      	cmp	r2, #11
 800bfae:	d916      	bls.n	800bfde <_malloc_r+0xba>
 800bfb0:	1961      	adds	r1, r4, r5
 800bfb2:	42a3      	cmp	r3, r4
 800bfb4:	6025      	str	r5, [r4, #0]
 800bfb6:	bf18      	it	ne
 800bfb8:	6059      	strne	r1, [r3, #4]
 800bfba:	6863      	ldr	r3, [r4, #4]
 800bfbc:	bf08      	it	eq
 800bfbe:	6031      	streq	r1, [r6, #0]
 800bfc0:	5162      	str	r2, [r4, r5]
 800bfc2:	604b      	str	r3, [r1, #4]
 800bfc4:	4638      	mov	r0, r7
 800bfc6:	f104 060b 	add.w	r6, r4, #11
 800bfca:	f000 fbab 	bl	800c724 <__malloc_unlock>
 800bfce:	f026 0607 	bic.w	r6, r6, #7
 800bfd2:	1d23      	adds	r3, r4, #4
 800bfd4:	1af2      	subs	r2, r6, r3
 800bfd6:	d0b6      	beq.n	800bf46 <_malloc_r+0x22>
 800bfd8:	1b9b      	subs	r3, r3, r6
 800bfda:	50a3      	str	r3, [r4, r2]
 800bfdc:	e7b3      	b.n	800bf46 <_malloc_r+0x22>
 800bfde:	6862      	ldr	r2, [r4, #4]
 800bfe0:	42a3      	cmp	r3, r4
 800bfe2:	bf0c      	ite	eq
 800bfe4:	6032      	streq	r2, [r6, #0]
 800bfe6:	605a      	strne	r2, [r3, #4]
 800bfe8:	e7ec      	b.n	800bfc4 <_malloc_r+0xa0>
 800bfea:	4623      	mov	r3, r4
 800bfec:	6864      	ldr	r4, [r4, #4]
 800bfee:	e7b2      	b.n	800bf56 <_malloc_r+0x32>
 800bff0:	4634      	mov	r4, r6
 800bff2:	6876      	ldr	r6, [r6, #4]
 800bff4:	e7b9      	b.n	800bf6a <_malloc_r+0x46>
 800bff6:	230c      	movs	r3, #12
 800bff8:	603b      	str	r3, [r7, #0]
 800bffa:	4638      	mov	r0, r7
 800bffc:	f000 fb92 	bl	800c724 <__malloc_unlock>
 800c000:	e7a1      	b.n	800bf46 <_malloc_r+0x22>
 800c002:	6025      	str	r5, [r4, #0]
 800c004:	e7de      	b.n	800bfc4 <_malloc_r+0xa0>
 800c006:	bf00      	nop
 800c008:	20006e30 	.word	0x20006e30

0800c00c <_puts_r>:
 800c00c:	b570      	push	{r4, r5, r6, lr}
 800c00e:	460e      	mov	r6, r1
 800c010:	4605      	mov	r5, r0
 800c012:	b118      	cbz	r0, 800c01c <_puts_r+0x10>
 800c014:	6983      	ldr	r3, [r0, #24]
 800c016:	b90b      	cbnz	r3, 800c01c <_puts_r+0x10>
 800c018:	f000 fa78 	bl	800c50c <__sinit>
 800c01c:	69ab      	ldr	r3, [r5, #24]
 800c01e:	68ac      	ldr	r4, [r5, #8]
 800c020:	b913      	cbnz	r3, 800c028 <_puts_r+0x1c>
 800c022:	4628      	mov	r0, r5
 800c024:	f000 fa72 	bl	800c50c <__sinit>
 800c028:	4b2c      	ldr	r3, [pc, #176]	; (800c0dc <_puts_r+0xd0>)
 800c02a:	429c      	cmp	r4, r3
 800c02c:	d120      	bne.n	800c070 <_puts_r+0x64>
 800c02e:	686c      	ldr	r4, [r5, #4]
 800c030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c032:	07db      	lsls	r3, r3, #31
 800c034:	d405      	bmi.n	800c042 <_puts_r+0x36>
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	0598      	lsls	r0, r3, #22
 800c03a:	d402      	bmi.n	800c042 <_puts_r+0x36>
 800c03c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c03e:	f000 fb03 	bl	800c648 <__retarget_lock_acquire_recursive>
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	0719      	lsls	r1, r3, #28
 800c046:	d51d      	bpl.n	800c084 <_puts_r+0x78>
 800c048:	6923      	ldr	r3, [r4, #16]
 800c04a:	b1db      	cbz	r3, 800c084 <_puts_r+0x78>
 800c04c:	3e01      	subs	r6, #1
 800c04e:	68a3      	ldr	r3, [r4, #8]
 800c050:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c054:	3b01      	subs	r3, #1
 800c056:	60a3      	str	r3, [r4, #8]
 800c058:	bb39      	cbnz	r1, 800c0aa <_puts_r+0x9e>
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	da38      	bge.n	800c0d0 <_puts_r+0xc4>
 800c05e:	4622      	mov	r2, r4
 800c060:	210a      	movs	r1, #10
 800c062:	4628      	mov	r0, r5
 800c064:	f000 f878 	bl	800c158 <__swbuf_r>
 800c068:	3001      	adds	r0, #1
 800c06a:	d011      	beq.n	800c090 <_puts_r+0x84>
 800c06c:	250a      	movs	r5, #10
 800c06e:	e011      	b.n	800c094 <_puts_r+0x88>
 800c070:	4b1b      	ldr	r3, [pc, #108]	; (800c0e0 <_puts_r+0xd4>)
 800c072:	429c      	cmp	r4, r3
 800c074:	d101      	bne.n	800c07a <_puts_r+0x6e>
 800c076:	68ac      	ldr	r4, [r5, #8]
 800c078:	e7da      	b.n	800c030 <_puts_r+0x24>
 800c07a:	4b1a      	ldr	r3, [pc, #104]	; (800c0e4 <_puts_r+0xd8>)
 800c07c:	429c      	cmp	r4, r3
 800c07e:	bf08      	it	eq
 800c080:	68ec      	ldreq	r4, [r5, #12]
 800c082:	e7d5      	b.n	800c030 <_puts_r+0x24>
 800c084:	4621      	mov	r1, r4
 800c086:	4628      	mov	r0, r5
 800c088:	f000 f8b8 	bl	800c1fc <__swsetup_r>
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d0dd      	beq.n	800c04c <_puts_r+0x40>
 800c090:	f04f 35ff 	mov.w	r5, #4294967295
 800c094:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c096:	07da      	lsls	r2, r3, #31
 800c098:	d405      	bmi.n	800c0a6 <_puts_r+0x9a>
 800c09a:	89a3      	ldrh	r3, [r4, #12]
 800c09c:	059b      	lsls	r3, r3, #22
 800c09e:	d402      	bmi.n	800c0a6 <_puts_r+0x9a>
 800c0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0a2:	f000 fad2 	bl	800c64a <__retarget_lock_release_recursive>
 800c0a6:	4628      	mov	r0, r5
 800c0a8:	bd70      	pop	{r4, r5, r6, pc}
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	da04      	bge.n	800c0b8 <_puts_r+0xac>
 800c0ae:	69a2      	ldr	r2, [r4, #24]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	dc06      	bgt.n	800c0c2 <_puts_r+0xb6>
 800c0b4:	290a      	cmp	r1, #10
 800c0b6:	d004      	beq.n	800c0c2 <_puts_r+0xb6>
 800c0b8:	6823      	ldr	r3, [r4, #0]
 800c0ba:	1c5a      	adds	r2, r3, #1
 800c0bc:	6022      	str	r2, [r4, #0]
 800c0be:	7019      	strb	r1, [r3, #0]
 800c0c0:	e7c5      	b.n	800c04e <_puts_r+0x42>
 800c0c2:	4622      	mov	r2, r4
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	f000 f847 	bl	800c158 <__swbuf_r>
 800c0ca:	3001      	adds	r0, #1
 800c0cc:	d1bf      	bne.n	800c04e <_puts_r+0x42>
 800c0ce:	e7df      	b.n	800c090 <_puts_r+0x84>
 800c0d0:	6823      	ldr	r3, [r4, #0]
 800c0d2:	250a      	movs	r5, #10
 800c0d4:	1c5a      	adds	r2, r3, #1
 800c0d6:	6022      	str	r2, [r4, #0]
 800c0d8:	701d      	strb	r5, [r3, #0]
 800c0da:	e7db      	b.n	800c094 <_puts_r+0x88>
 800c0dc:	0800d11c 	.word	0x0800d11c
 800c0e0:	0800d13c 	.word	0x0800d13c
 800c0e4:	0800d0fc 	.word	0x0800d0fc

0800c0e8 <puts>:
 800c0e8:	4b02      	ldr	r3, [pc, #8]	; (800c0f4 <puts+0xc>)
 800c0ea:	4601      	mov	r1, r0
 800c0ec:	6818      	ldr	r0, [r3, #0]
 800c0ee:	f7ff bf8d 	b.w	800c00c <_puts_r>
 800c0f2:	bf00      	nop
 800c0f4:	20000030 	.word	0x20000030

0800c0f8 <_sbrk_r>:
 800c0f8:	b538      	push	{r3, r4, r5, lr}
 800c0fa:	4d06      	ldr	r5, [pc, #24]	; (800c114 <_sbrk_r+0x1c>)
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	4604      	mov	r4, r0
 800c100:	4608      	mov	r0, r1
 800c102:	602b      	str	r3, [r5, #0]
 800c104:	f7f4 fe48 	bl	8000d98 <_sbrk>
 800c108:	1c43      	adds	r3, r0, #1
 800c10a:	d102      	bne.n	800c112 <_sbrk_r+0x1a>
 800c10c:	682b      	ldr	r3, [r5, #0]
 800c10e:	b103      	cbz	r3, 800c112 <_sbrk_r+0x1a>
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	bd38      	pop	{r3, r4, r5, pc}
 800c114:	20006e3c 	.word	0x20006e3c

0800c118 <siprintf>:
 800c118:	b40e      	push	{r1, r2, r3}
 800c11a:	b500      	push	{lr}
 800c11c:	b09c      	sub	sp, #112	; 0x70
 800c11e:	ab1d      	add	r3, sp, #116	; 0x74
 800c120:	9002      	str	r0, [sp, #8]
 800c122:	9006      	str	r0, [sp, #24]
 800c124:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c128:	4809      	ldr	r0, [pc, #36]	; (800c150 <siprintf+0x38>)
 800c12a:	9107      	str	r1, [sp, #28]
 800c12c:	9104      	str	r1, [sp, #16]
 800c12e:	4909      	ldr	r1, [pc, #36]	; (800c154 <siprintf+0x3c>)
 800c130:	f853 2b04 	ldr.w	r2, [r3], #4
 800c134:	9105      	str	r1, [sp, #20]
 800c136:	6800      	ldr	r0, [r0, #0]
 800c138:	9301      	str	r3, [sp, #4]
 800c13a:	a902      	add	r1, sp, #8
 800c13c:	f000 fb54 	bl	800c7e8 <_svfiprintf_r>
 800c140:	9b02      	ldr	r3, [sp, #8]
 800c142:	2200      	movs	r2, #0
 800c144:	701a      	strb	r2, [r3, #0]
 800c146:	b01c      	add	sp, #112	; 0x70
 800c148:	f85d eb04 	ldr.w	lr, [sp], #4
 800c14c:	b003      	add	sp, #12
 800c14e:	4770      	bx	lr
 800c150:	20000030 	.word	0x20000030
 800c154:	ffff0208 	.word	0xffff0208

0800c158 <__swbuf_r>:
 800c158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c15a:	460e      	mov	r6, r1
 800c15c:	4614      	mov	r4, r2
 800c15e:	4605      	mov	r5, r0
 800c160:	b118      	cbz	r0, 800c16a <__swbuf_r+0x12>
 800c162:	6983      	ldr	r3, [r0, #24]
 800c164:	b90b      	cbnz	r3, 800c16a <__swbuf_r+0x12>
 800c166:	f000 f9d1 	bl	800c50c <__sinit>
 800c16a:	4b21      	ldr	r3, [pc, #132]	; (800c1f0 <__swbuf_r+0x98>)
 800c16c:	429c      	cmp	r4, r3
 800c16e:	d12b      	bne.n	800c1c8 <__swbuf_r+0x70>
 800c170:	686c      	ldr	r4, [r5, #4]
 800c172:	69a3      	ldr	r3, [r4, #24]
 800c174:	60a3      	str	r3, [r4, #8]
 800c176:	89a3      	ldrh	r3, [r4, #12]
 800c178:	071a      	lsls	r2, r3, #28
 800c17a:	d52f      	bpl.n	800c1dc <__swbuf_r+0x84>
 800c17c:	6923      	ldr	r3, [r4, #16]
 800c17e:	b36b      	cbz	r3, 800c1dc <__swbuf_r+0x84>
 800c180:	6923      	ldr	r3, [r4, #16]
 800c182:	6820      	ldr	r0, [r4, #0]
 800c184:	1ac0      	subs	r0, r0, r3
 800c186:	6963      	ldr	r3, [r4, #20]
 800c188:	b2f6      	uxtb	r6, r6
 800c18a:	4283      	cmp	r3, r0
 800c18c:	4637      	mov	r7, r6
 800c18e:	dc04      	bgt.n	800c19a <__swbuf_r+0x42>
 800c190:	4621      	mov	r1, r4
 800c192:	4628      	mov	r0, r5
 800c194:	f000 f926 	bl	800c3e4 <_fflush_r>
 800c198:	bb30      	cbnz	r0, 800c1e8 <__swbuf_r+0x90>
 800c19a:	68a3      	ldr	r3, [r4, #8]
 800c19c:	3b01      	subs	r3, #1
 800c19e:	60a3      	str	r3, [r4, #8]
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	1c5a      	adds	r2, r3, #1
 800c1a4:	6022      	str	r2, [r4, #0]
 800c1a6:	701e      	strb	r6, [r3, #0]
 800c1a8:	6963      	ldr	r3, [r4, #20]
 800c1aa:	3001      	adds	r0, #1
 800c1ac:	4283      	cmp	r3, r0
 800c1ae:	d004      	beq.n	800c1ba <__swbuf_r+0x62>
 800c1b0:	89a3      	ldrh	r3, [r4, #12]
 800c1b2:	07db      	lsls	r3, r3, #31
 800c1b4:	d506      	bpl.n	800c1c4 <__swbuf_r+0x6c>
 800c1b6:	2e0a      	cmp	r6, #10
 800c1b8:	d104      	bne.n	800c1c4 <__swbuf_r+0x6c>
 800c1ba:	4621      	mov	r1, r4
 800c1bc:	4628      	mov	r0, r5
 800c1be:	f000 f911 	bl	800c3e4 <_fflush_r>
 800c1c2:	b988      	cbnz	r0, 800c1e8 <__swbuf_r+0x90>
 800c1c4:	4638      	mov	r0, r7
 800c1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1c8:	4b0a      	ldr	r3, [pc, #40]	; (800c1f4 <__swbuf_r+0x9c>)
 800c1ca:	429c      	cmp	r4, r3
 800c1cc:	d101      	bne.n	800c1d2 <__swbuf_r+0x7a>
 800c1ce:	68ac      	ldr	r4, [r5, #8]
 800c1d0:	e7cf      	b.n	800c172 <__swbuf_r+0x1a>
 800c1d2:	4b09      	ldr	r3, [pc, #36]	; (800c1f8 <__swbuf_r+0xa0>)
 800c1d4:	429c      	cmp	r4, r3
 800c1d6:	bf08      	it	eq
 800c1d8:	68ec      	ldreq	r4, [r5, #12]
 800c1da:	e7ca      	b.n	800c172 <__swbuf_r+0x1a>
 800c1dc:	4621      	mov	r1, r4
 800c1de:	4628      	mov	r0, r5
 800c1e0:	f000 f80c 	bl	800c1fc <__swsetup_r>
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	d0cb      	beq.n	800c180 <__swbuf_r+0x28>
 800c1e8:	f04f 37ff 	mov.w	r7, #4294967295
 800c1ec:	e7ea      	b.n	800c1c4 <__swbuf_r+0x6c>
 800c1ee:	bf00      	nop
 800c1f0:	0800d11c 	.word	0x0800d11c
 800c1f4:	0800d13c 	.word	0x0800d13c
 800c1f8:	0800d0fc 	.word	0x0800d0fc

0800c1fc <__swsetup_r>:
 800c1fc:	4b32      	ldr	r3, [pc, #200]	; (800c2c8 <__swsetup_r+0xcc>)
 800c1fe:	b570      	push	{r4, r5, r6, lr}
 800c200:	681d      	ldr	r5, [r3, #0]
 800c202:	4606      	mov	r6, r0
 800c204:	460c      	mov	r4, r1
 800c206:	b125      	cbz	r5, 800c212 <__swsetup_r+0x16>
 800c208:	69ab      	ldr	r3, [r5, #24]
 800c20a:	b913      	cbnz	r3, 800c212 <__swsetup_r+0x16>
 800c20c:	4628      	mov	r0, r5
 800c20e:	f000 f97d 	bl	800c50c <__sinit>
 800c212:	4b2e      	ldr	r3, [pc, #184]	; (800c2cc <__swsetup_r+0xd0>)
 800c214:	429c      	cmp	r4, r3
 800c216:	d10f      	bne.n	800c238 <__swsetup_r+0x3c>
 800c218:	686c      	ldr	r4, [r5, #4]
 800c21a:	89a3      	ldrh	r3, [r4, #12]
 800c21c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c220:	0719      	lsls	r1, r3, #28
 800c222:	d42c      	bmi.n	800c27e <__swsetup_r+0x82>
 800c224:	06dd      	lsls	r5, r3, #27
 800c226:	d411      	bmi.n	800c24c <__swsetup_r+0x50>
 800c228:	2309      	movs	r3, #9
 800c22a:	6033      	str	r3, [r6, #0]
 800c22c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c230:	81a3      	strh	r3, [r4, #12]
 800c232:	f04f 30ff 	mov.w	r0, #4294967295
 800c236:	e03e      	b.n	800c2b6 <__swsetup_r+0xba>
 800c238:	4b25      	ldr	r3, [pc, #148]	; (800c2d0 <__swsetup_r+0xd4>)
 800c23a:	429c      	cmp	r4, r3
 800c23c:	d101      	bne.n	800c242 <__swsetup_r+0x46>
 800c23e:	68ac      	ldr	r4, [r5, #8]
 800c240:	e7eb      	b.n	800c21a <__swsetup_r+0x1e>
 800c242:	4b24      	ldr	r3, [pc, #144]	; (800c2d4 <__swsetup_r+0xd8>)
 800c244:	429c      	cmp	r4, r3
 800c246:	bf08      	it	eq
 800c248:	68ec      	ldreq	r4, [r5, #12]
 800c24a:	e7e6      	b.n	800c21a <__swsetup_r+0x1e>
 800c24c:	0758      	lsls	r0, r3, #29
 800c24e:	d512      	bpl.n	800c276 <__swsetup_r+0x7a>
 800c250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c252:	b141      	cbz	r1, 800c266 <__swsetup_r+0x6a>
 800c254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c258:	4299      	cmp	r1, r3
 800c25a:	d002      	beq.n	800c262 <__swsetup_r+0x66>
 800c25c:	4630      	mov	r0, r6
 800c25e:	f7ff fdf5 	bl	800be4c <_free_r>
 800c262:	2300      	movs	r3, #0
 800c264:	6363      	str	r3, [r4, #52]	; 0x34
 800c266:	89a3      	ldrh	r3, [r4, #12]
 800c268:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c26c:	81a3      	strh	r3, [r4, #12]
 800c26e:	2300      	movs	r3, #0
 800c270:	6063      	str	r3, [r4, #4]
 800c272:	6923      	ldr	r3, [r4, #16]
 800c274:	6023      	str	r3, [r4, #0]
 800c276:	89a3      	ldrh	r3, [r4, #12]
 800c278:	f043 0308 	orr.w	r3, r3, #8
 800c27c:	81a3      	strh	r3, [r4, #12]
 800c27e:	6923      	ldr	r3, [r4, #16]
 800c280:	b94b      	cbnz	r3, 800c296 <__swsetup_r+0x9a>
 800c282:	89a3      	ldrh	r3, [r4, #12]
 800c284:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c28c:	d003      	beq.n	800c296 <__swsetup_r+0x9a>
 800c28e:	4621      	mov	r1, r4
 800c290:	4630      	mov	r0, r6
 800c292:	f000 fa01 	bl	800c698 <__smakebuf_r>
 800c296:	89a0      	ldrh	r0, [r4, #12]
 800c298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c29c:	f010 0301 	ands.w	r3, r0, #1
 800c2a0:	d00a      	beq.n	800c2b8 <__swsetup_r+0xbc>
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	60a3      	str	r3, [r4, #8]
 800c2a6:	6963      	ldr	r3, [r4, #20]
 800c2a8:	425b      	negs	r3, r3
 800c2aa:	61a3      	str	r3, [r4, #24]
 800c2ac:	6923      	ldr	r3, [r4, #16]
 800c2ae:	b943      	cbnz	r3, 800c2c2 <__swsetup_r+0xc6>
 800c2b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c2b4:	d1ba      	bne.n	800c22c <__swsetup_r+0x30>
 800c2b6:	bd70      	pop	{r4, r5, r6, pc}
 800c2b8:	0781      	lsls	r1, r0, #30
 800c2ba:	bf58      	it	pl
 800c2bc:	6963      	ldrpl	r3, [r4, #20]
 800c2be:	60a3      	str	r3, [r4, #8]
 800c2c0:	e7f4      	b.n	800c2ac <__swsetup_r+0xb0>
 800c2c2:	2000      	movs	r0, #0
 800c2c4:	e7f7      	b.n	800c2b6 <__swsetup_r+0xba>
 800c2c6:	bf00      	nop
 800c2c8:	20000030 	.word	0x20000030
 800c2cc:	0800d11c 	.word	0x0800d11c
 800c2d0:	0800d13c 	.word	0x0800d13c
 800c2d4:	0800d0fc 	.word	0x0800d0fc

0800c2d8 <__sflush_r>:
 800c2d8:	898a      	ldrh	r2, [r1, #12]
 800c2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2de:	4605      	mov	r5, r0
 800c2e0:	0710      	lsls	r0, r2, #28
 800c2e2:	460c      	mov	r4, r1
 800c2e4:	d458      	bmi.n	800c398 <__sflush_r+0xc0>
 800c2e6:	684b      	ldr	r3, [r1, #4]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	dc05      	bgt.n	800c2f8 <__sflush_r+0x20>
 800c2ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	dc02      	bgt.n	800c2f8 <__sflush_r+0x20>
 800c2f2:	2000      	movs	r0, #0
 800c2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2fa:	2e00      	cmp	r6, #0
 800c2fc:	d0f9      	beq.n	800c2f2 <__sflush_r+0x1a>
 800c2fe:	2300      	movs	r3, #0
 800c300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c304:	682f      	ldr	r7, [r5, #0]
 800c306:	602b      	str	r3, [r5, #0]
 800c308:	d032      	beq.n	800c370 <__sflush_r+0x98>
 800c30a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c30c:	89a3      	ldrh	r3, [r4, #12]
 800c30e:	075a      	lsls	r2, r3, #29
 800c310:	d505      	bpl.n	800c31e <__sflush_r+0x46>
 800c312:	6863      	ldr	r3, [r4, #4]
 800c314:	1ac0      	subs	r0, r0, r3
 800c316:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c318:	b10b      	cbz	r3, 800c31e <__sflush_r+0x46>
 800c31a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c31c:	1ac0      	subs	r0, r0, r3
 800c31e:	2300      	movs	r3, #0
 800c320:	4602      	mov	r2, r0
 800c322:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c324:	6a21      	ldr	r1, [r4, #32]
 800c326:	4628      	mov	r0, r5
 800c328:	47b0      	blx	r6
 800c32a:	1c43      	adds	r3, r0, #1
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	d106      	bne.n	800c33e <__sflush_r+0x66>
 800c330:	6829      	ldr	r1, [r5, #0]
 800c332:	291d      	cmp	r1, #29
 800c334:	d82c      	bhi.n	800c390 <__sflush_r+0xb8>
 800c336:	4a2a      	ldr	r2, [pc, #168]	; (800c3e0 <__sflush_r+0x108>)
 800c338:	40ca      	lsrs	r2, r1
 800c33a:	07d6      	lsls	r6, r2, #31
 800c33c:	d528      	bpl.n	800c390 <__sflush_r+0xb8>
 800c33e:	2200      	movs	r2, #0
 800c340:	6062      	str	r2, [r4, #4]
 800c342:	04d9      	lsls	r1, r3, #19
 800c344:	6922      	ldr	r2, [r4, #16]
 800c346:	6022      	str	r2, [r4, #0]
 800c348:	d504      	bpl.n	800c354 <__sflush_r+0x7c>
 800c34a:	1c42      	adds	r2, r0, #1
 800c34c:	d101      	bne.n	800c352 <__sflush_r+0x7a>
 800c34e:	682b      	ldr	r3, [r5, #0]
 800c350:	b903      	cbnz	r3, 800c354 <__sflush_r+0x7c>
 800c352:	6560      	str	r0, [r4, #84]	; 0x54
 800c354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c356:	602f      	str	r7, [r5, #0]
 800c358:	2900      	cmp	r1, #0
 800c35a:	d0ca      	beq.n	800c2f2 <__sflush_r+0x1a>
 800c35c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c360:	4299      	cmp	r1, r3
 800c362:	d002      	beq.n	800c36a <__sflush_r+0x92>
 800c364:	4628      	mov	r0, r5
 800c366:	f7ff fd71 	bl	800be4c <_free_r>
 800c36a:	2000      	movs	r0, #0
 800c36c:	6360      	str	r0, [r4, #52]	; 0x34
 800c36e:	e7c1      	b.n	800c2f4 <__sflush_r+0x1c>
 800c370:	6a21      	ldr	r1, [r4, #32]
 800c372:	2301      	movs	r3, #1
 800c374:	4628      	mov	r0, r5
 800c376:	47b0      	blx	r6
 800c378:	1c41      	adds	r1, r0, #1
 800c37a:	d1c7      	bne.n	800c30c <__sflush_r+0x34>
 800c37c:	682b      	ldr	r3, [r5, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d0c4      	beq.n	800c30c <__sflush_r+0x34>
 800c382:	2b1d      	cmp	r3, #29
 800c384:	d001      	beq.n	800c38a <__sflush_r+0xb2>
 800c386:	2b16      	cmp	r3, #22
 800c388:	d101      	bne.n	800c38e <__sflush_r+0xb6>
 800c38a:	602f      	str	r7, [r5, #0]
 800c38c:	e7b1      	b.n	800c2f2 <__sflush_r+0x1a>
 800c38e:	89a3      	ldrh	r3, [r4, #12]
 800c390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c394:	81a3      	strh	r3, [r4, #12]
 800c396:	e7ad      	b.n	800c2f4 <__sflush_r+0x1c>
 800c398:	690f      	ldr	r7, [r1, #16]
 800c39a:	2f00      	cmp	r7, #0
 800c39c:	d0a9      	beq.n	800c2f2 <__sflush_r+0x1a>
 800c39e:	0793      	lsls	r3, r2, #30
 800c3a0:	680e      	ldr	r6, [r1, #0]
 800c3a2:	bf08      	it	eq
 800c3a4:	694b      	ldreq	r3, [r1, #20]
 800c3a6:	600f      	str	r7, [r1, #0]
 800c3a8:	bf18      	it	ne
 800c3aa:	2300      	movne	r3, #0
 800c3ac:	eba6 0807 	sub.w	r8, r6, r7
 800c3b0:	608b      	str	r3, [r1, #8]
 800c3b2:	f1b8 0f00 	cmp.w	r8, #0
 800c3b6:	dd9c      	ble.n	800c2f2 <__sflush_r+0x1a>
 800c3b8:	6a21      	ldr	r1, [r4, #32]
 800c3ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3bc:	4643      	mov	r3, r8
 800c3be:	463a      	mov	r2, r7
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	47b0      	blx	r6
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	dc06      	bgt.n	800c3d6 <__sflush_r+0xfe>
 800c3c8:	89a3      	ldrh	r3, [r4, #12]
 800c3ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ce:	81a3      	strh	r3, [r4, #12]
 800c3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d4:	e78e      	b.n	800c2f4 <__sflush_r+0x1c>
 800c3d6:	4407      	add	r7, r0
 800c3d8:	eba8 0800 	sub.w	r8, r8, r0
 800c3dc:	e7e9      	b.n	800c3b2 <__sflush_r+0xda>
 800c3de:	bf00      	nop
 800c3e0:	20400001 	.word	0x20400001

0800c3e4 <_fflush_r>:
 800c3e4:	b538      	push	{r3, r4, r5, lr}
 800c3e6:	690b      	ldr	r3, [r1, #16]
 800c3e8:	4605      	mov	r5, r0
 800c3ea:	460c      	mov	r4, r1
 800c3ec:	b913      	cbnz	r3, 800c3f4 <_fflush_r+0x10>
 800c3ee:	2500      	movs	r5, #0
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	bd38      	pop	{r3, r4, r5, pc}
 800c3f4:	b118      	cbz	r0, 800c3fe <_fflush_r+0x1a>
 800c3f6:	6983      	ldr	r3, [r0, #24]
 800c3f8:	b90b      	cbnz	r3, 800c3fe <_fflush_r+0x1a>
 800c3fa:	f000 f887 	bl	800c50c <__sinit>
 800c3fe:	4b14      	ldr	r3, [pc, #80]	; (800c450 <_fflush_r+0x6c>)
 800c400:	429c      	cmp	r4, r3
 800c402:	d11b      	bne.n	800c43c <_fflush_r+0x58>
 800c404:	686c      	ldr	r4, [r5, #4]
 800c406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d0ef      	beq.n	800c3ee <_fflush_r+0xa>
 800c40e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c410:	07d0      	lsls	r0, r2, #31
 800c412:	d404      	bmi.n	800c41e <_fflush_r+0x3a>
 800c414:	0599      	lsls	r1, r3, #22
 800c416:	d402      	bmi.n	800c41e <_fflush_r+0x3a>
 800c418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c41a:	f000 f915 	bl	800c648 <__retarget_lock_acquire_recursive>
 800c41e:	4628      	mov	r0, r5
 800c420:	4621      	mov	r1, r4
 800c422:	f7ff ff59 	bl	800c2d8 <__sflush_r>
 800c426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c428:	07da      	lsls	r2, r3, #31
 800c42a:	4605      	mov	r5, r0
 800c42c:	d4e0      	bmi.n	800c3f0 <_fflush_r+0xc>
 800c42e:	89a3      	ldrh	r3, [r4, #12]
 800c430:	059b      	lsls	r3, r3, #22
 800c432:	d4dd      	bmi.n	800c3f0 <_fflush_r+0xc>
 800c434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c436:	f000 f908 	bl	800c64a <__retarget_lock_release_recursive>
 800c43a:	e7d9      	b.n	800c3f0 <_fflush_r+0xc>
 800c43c:	4b05      	ldr	r3, [pc, #20]	; (800c454 <_fflush_r+0x70>)
 800c43e:	429c      	cmp	r4, r3
 800c440:	d101      	bne.n	800c446 <_fflush_r+0x62>
 800c442:	68ac      	ldr	r4, [r5, #8]
 800c444:	e7df      	b.n	800c406 <_fflush_r+0x22>
 800c446:	4b04      	ldr	r3, [pc, #16]	; (800c458 <_fflush_r+0x74>)
 800c448:	429c      	cmp	r4, r3
 800c44a:	bf08      	it	eq
 800c44c:	68ec      	ldreq	r4, [r5, #12]
 800c44e:	e7da      	b.n	800c406 <_fflush_r+0x22>
 800c450:	0800d11c 	.word	0x0800d11c
 800c454:	0800d13c 	.word	0x0800d13c
 800c458:	0800d0fc 	.word	0x0800d0fc

0800c45c <std>:
 800c45c:	2300      	movs	r3, #0
 800c45e:	b510      	push	{r4, lr}
 800c460:	4604      	mov	r4, r0
 800c462:	e9c0 3300 	strd	r3, r3, [r0]
 800c466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c46a:	6083      	str	r3, [r0, #8]
 800c46c:	8181      	strh	r1, [r0, #12]
 800c46e:	6643      	str	r3, [r0, #100]	; 0x64
 800c470:	81c2      	strh	r2, [r0, #14]
 800c472:	6183      	str	r3, [r0, #24]
 800c474:	4619      	mov	r1, r3
 800c476:	2208      	movs	r2, #8
 800c478:	305c      	adds	r0, #92	; 0x5c
 800c47a:	f7ff fcdf 	bl	800be3c <memset>
 800c47e:	4b05      	ldr	r3, [pc, #20]	; (800c494 <std+0x38>)
 800c480:	6263      	str	r3, [r4, #36]	; 0x24
 800c482:	4b05      	ldr	r3, [pc, #20]	; (800c498 <std+0x3c>)
 800c484:	62a3      	str	r3, [r4, #40]	; 0x28
 800c486:	4b05      	ldr	r3, [pc, #20]	; (800c49c <std+0x40>)
 800c488:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c48a:	4b05      	ldr	r3, [pc, #20]	; (800c4a0 <std+0x44>)
 800c48c:	6224      	str	r4, [r4, #32]
 800c48e:	6323      	str	r3, [r4, #48]	; 0x30
 800c490:	bd10      	pop	{r4, pc}
 800c492:	bf00      	nop
 800c494:	0800cd11 	.word	0x0800cd11
 800c498:	0800cd33 	.word	0x0800cd33
 800c49c:	0800cd6b 	.word	0x0800cd6b
 800c4a0:	0800cd8f 	.word	0x0800cd8f

0800c4a4 <_cleanup_r>:
 800c4a4:	4901      	ldr	r1, [pc, #4]	; (800c4ac <_cleanup_r+0x8>)
 800c4a6:	f000 b8af 	b.w	800c608 <_fwalk_reent>
 800c4aa:	bf00      	nop
 800c4ac:	0800c3e5 	.word	0x0800c3e5

0800c4b0 <__sfmoreglue>:
 800c4b0:	b570      	push	{r4, r5, r6, lr}
 800c4b2:	2268      	movs	r2, #104	; 0x68
 800c4b4:	1e4d      	subs	r5, r1, #1
 800c4b6:	4355      	muls	r5, r2
 800c4b8:	460e      	mov	r6, r1
 800c4ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c4be:	f7ff fd31 	bl	800bf24 <_malloc_r>
 800c4c2:	4604      	mov	r4, r0
 800c4c4:	b140      	cbz	r0, 800c4d8 <__sfmoreglue+0x28>
 800c4c6:	2100      	movs	r1, #0
 800c4c8:	e9c0 1600 	strd	r1, r6, [r0]
 800c4cc:	300c      	adds	r0, #12
 800c4ce:	60a0      	str	r0, [r4, #8]
 800c4d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c4d4:	f7ff fcb2 	bl	800be3c <memset>
 800c4d8:	4620      	mov	r0, r4
 800c4da:	bd70      	pop	{r4, r5, r6, pc}

0800c4dc <__sfp_lock_acquire>:
 800c4dc:	4801      	ldr	r0, [pc, #4]	; (800c4e4 <__sfp_lock_acquire+0x8>)
 800c4de:	f000 b8b3 	b.w	800c648 <__retarget_lock_acquire_recursive>
 800c4e2:	bf00      	nop
 800c4e4:	20006e39 	.word	0x20006e39

0800c4e8 <__sfp_lock_release>:
 800c4e8:	4801      	ldr	r0, [pc, #4]	; (800c4f0 <__sfp_lock_release+0x8>)
 800c4ea:	f000 b8ae 	b.w	800c64a <__retarget_lock_release_recursive>
 800c4ee:	bf00      	nop
 800c4f0:	20006e39 	.word	0x20006e39

0800c4f4 <__sinit_lock_acquire>:
 800c4f4:	4801      	ldr	r0, [pc, #4]	; (800c4fc <__sinit_lock_acquire+0x8>)
 800c4f6:	f000 b8a7 	b.w	800c648 <__retarget_lock_acquire_recursive>
 800c4fa:	bf00      	nop
 800c4fc:	20006e3a 	.word	0x20006e3a

0800c500 <__sinit_lock_release>:
 800c500:	4801      	ldr	r0, [pc, #4]	; (800c508 <__sinit_lock_release+0x8>)
 800c502:	f000 b8a2 	b.w	800c64a <__retarget_lock_release_recursive>
 800c506:	bf00      	nop
 800c508:	20006e3a 	.word	0x20006e3a

0800c50c <__sinit>:
 800c50c:	b510      	push	{r4, lr}
 800c50e:	4604      	mov	r4, r0
 800c510:	f7ff fff0 	bl	800c4f4 <__sinit_lock_acquire>
 800c514:	69a3      	ldr	r3, [r4, #24]
 800c516:	b11b      	cbz	r3, 800c520 <__sinit+0x14>
 800c518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c51c:	f7ff bff0 	b.w	800c500 <__sinit_lock_release>
 800c520:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c524:	6523      	str	r3, [r4, #80]	; 0x50
 800c526:	4b13      	ldr	r3, [pc, #76]	; (800c574 <__sinit+0x68>)
 800c528:	4a13      	ldr	r2, [pc, #76]	; (800c578 <__sinit+0x6c>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c52e:	42a3      	cmp	r3, r4
 800c530:	bf04      	itt	eq
 800c532:	2301      	moveq	r3, #1
 800c534:	61a3      	streq	r3, [r4, #24]
 800c536:	4620      	mov	r0, r4
 800c538:	f000 f820 	bl	800c57c <__sfp>
 800c53c:	6060      	str	r0, [r4, #4]
 800c53e:	4620      	mov	r0, r4
 800c540:	f000 f81c 	bl	800c57c <__sfp>
 800c544:	60a0      	str	r0, [r4, #8]
 800c546:	4620      	mov	r0, r4
 800c548:	f000 f818 	bl	800c57c <__sfp>
 800c54c:	2200      	movs	r2, #0
 800c54e:	60e0      	str	r0, [r4, #12]
 800c550:	2104      	movs	r1, #4
 800c552:	6860      	ldr	r0, [r4, #4]
 800c554:	f7ff ff82 	bl	800c45c <std>
 800c558:	68a0      	ldr	r0, [r4, #8]
 800c55a:	2201      	movs	r2, #1
 800c55c:	2109      	movs	r1, #9
 800c55e:	f7ff ff7d 	bl	800c45c <std>
 800c562:	68e0      	ldr	r0, [r4, #12]
 800c564:	2202      	movs	r2, #2
 800c566:	2112      	movs	r1, #18
 800c568:	f7ff ff78 	bl	800c45c <std>
 800c56c:	2301      	movs	r3, #1
 800c56e:	61a3      	str	r3, [r4, #24]
 800c570:	e7d2      	b.n	800c518 <__sinit+0xc>
 800c572:	bf00      	nop
 800c574:	0800d0f8 	.word	0x0800d0f8
 800c578:	0800c4a5 	.word	0x0800c4a5

0800c57c <__sfp>:
 800c57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c57e:	4607      	mov	r7, r0
 800c580:	f7ff ffac 	bl	800c4dc <__sfp_lock_acquire>
 800c584:	4b1e      	ldr	r3, [pc, #120]	; (800c600 <__sfp+0x84>)
 800c586:	681e      	ldr	r6, [r3, #0]
 800c588:	69b3      	ldr	r3, [r6, #24]
 800c58a:	b913      	cbnz	r3, 800c592 <__sfp+0x16>
 800c58c:	4630      	mov	r0, r6
 800c58e:	f7ff ffbd 	bl	800c50c <__sinit>
 800c592:	3648      	adds	r6, #72	; 0x48
 800c594:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c598:	3b01      	subs	r3, #1
 800c59a:	d503      	bpl.n	800c5a4 <__sfp+0x28>
 800c59c:	6833      	ldr	r3, [r6, #0]
 800c59e:	b30b      	cbz	r3, 800c5e4 <__sfp+0x68>
 800c5a0:	6836      	ldr	r6, [r6, #0]
 800c5a2:	e7f7      	b.n	800c594 <__sfp+0x18>
 800c5a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c5a8:	b9d5      	cbnz	r5, 800c5e0 <__sfp+0x64>
 800c5aa:	4b16      	ldr	r3, [pc, #88]	; (800c604 <__sfp+0x88>)
 800c5ac:	60e3      	str	r3, [r4, #12]
 800c5ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5b2:	6665      	str	r5, [r4, #100]	; 0x64
 800c5b4:	f000 f847 	bl	800c646 <__retarget_lock_init_recursive>
 800c5b8:	f7ff ff96 	bl	800c4e8 <__sfp_lock_release>
 800c5bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c5c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c5c4:	6025      	str	r5, [r4, #0]
 800c5c6:	61a5      	str	r5, [r4, #24]
 800c5c8:	2208      	movs	r2, #8
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c5d0:	f7ff fc34 	bl	800be3c <memset>
 800c5d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c5d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5dc:	4620      	mov	r0, r4
 800c5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5e0:	3468      	adds	r4, #104	; 0x68
 800c5e2:	e7d9      	b.n	800c598 <__sfp+0x1c>
 800c5e4:	2104      	movs	r1, #4
 800c5e6:	4638      	mov	r0, r7
 800c5e8:	f7ff ff62 	bl	800c4b0 <__sfmoreglue>
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	6030      	str	r0, [r6, #0]
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	d1d5      	bne.n	800c5a0 <__sfp+0x24>
 800c5f4:	f7ff ff78 	bl	800c4e8 <__sfp_lock_release>
 800c5f8:	230c      	movs	r3, #12
 800c5fa:	603b      	str	r3, [r7, #0]
 800c5fc:	e7ee      	b.n	800c5dc <__sfp+0x60>
 800c5fe:	bf00      	nop
 800c600:	0800d0f8 	.word	0x0800d0f8
 800c604:	ffff0001 	.word	0xffff0001

0800c608 <_fwalk_reent>:
 800c608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c60c:	4606      	mov	r6, r0
 800c60e:	4688      	mov	r8, r1
 800c610:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c614:	2700      	movs	r7, #0
 800c616:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c61a:	f1b9 0901 	subs.w	r9, r9, #1
 800c61e:	d505      	bpl.n	800c62c <_fwalk_reent+0x24>
 800c620:	6824      	ldr	r4, [r4, #0]
 800c622:	2c00      	cmp	r4, #0
 800c624:	d1f7      	bne.n	800c616 <_fwalk_reent+0xe>
 800c626:	4638      	mov	r0, r7
 800c628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c62c:	89ab      	ldrh	r3, [r5, #12]
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d907      	bls.n	800c642 <_fwalk_reent+0x3a>
 800c632:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c636:	3301      	adds	r3, #1
 800c638:	d003      	beq.n	800c642 <_fwalk_reent+0x3a>
 800c63a:	4629      	mov	r1, r5
 800c63c:	4630      	mov	r0, r6
 800c63e:	47c0      	blx	r8
 800c640:	4307      	orrs	r7, r0
 800c642:	3568      	adds	r5, #104	; 0x68
 800c644:	e7e9      	b.n	800c61a <_fwalk_reent+0x12>

0800c646 <__retarget_lock_init_recursive>:
 800c646:	4770      	bx	lr

0800c648 <__retarget_lock_acquire_recursive>:
 800c648:	4770      	bx	lr

0800c64a <__retarget_lock_release_recursive>:
 800c64a:	4770      	bx	lr

0800c64c <__swhatbuf_r>:
 800c64c:	b570      	push	{r4, r5, r6, lr}
 800c64e:	460e      	mov	r6, r1
 800c650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c654:	2900      	cmp	r1, #0
 800c656:	b096      	sub	sp, #88	; 0x58
 800c658:	4614      	mov	r4, r2
 800c65a:	461d      	mov	r5, r3
 800c65c:	da08      	bge.n	800c670 <__swhatbuf_r+0x24>
 800c65e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c662:	2200      	movs	r2, #0
 800c664:	602a      	str	r2, [r5, #0]
 800c666:	061a      	lsls	r2, r3, #24
 800c668:	d410      	bmi.n	800c68c <__swhatbuf_r+0x40>
 800c66a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c66e:	e00e      	b.n	800c68e <__swhatbuf_r+0x42>
 800c670:	466a      	mov	r2, sp
 800c672:	f000 fbb3 	bl	800cddc <_fstat_r>
 800c676:	2800      	cmp	r0, #0
 800c678:	dbf1      	blt.n	800c65e <__swhatbuf_r+0x12>
 800c67a:	9a01      	ldr	r2, [sp, #4]
 800c67c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c680:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c684:	425a      	negs	r2, r3
 800c686:	415a      	adcs	r2, r3
 800c688:	602a      	str	r2, [r5, #0]
 800c68a:	e7ee      	b.n	800c66a <__swhatbuf_r+0x1e>
 800c68c:	2340      	movs	r3, #64	; 0x40
 800c68e:	2000      	movs	r0, #0
 800c690:	6023      	str	r3, [r4, #0]
 800c692:	b016      	add	sp, #88	; 0x58
 800c694:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c698 <__smakebuf_r>:
 800c698:	898b      	ldrh	r3, [r1, #12]
 800c69a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c69c:	079d      	lsls	r5, r3, #30
 800c69e:	4606      	mov	r6, r0
 800c6a0:	460c      	mov	r4, r1
 800c6a2:	d507      	bpl.n	800c6b4 <__smakebuf_r+0x1c>
 800c6a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6a8:	6023      	str	r3, [r4, #0]
 800c6aa:	6123      	str	r3, [r4, #16]
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	6163      	str	r3, [r4, #20]
 800c6b0:	b002      	add	sp, #8
 800c6b2:	bd70      	pop	{r4, r5, r6, pc}
 800c6b4:	ab01      	add	r3, sp, #4
 800c6b6:	466a      	mov	r2, sp
 800c6b8:	f7ff ffc8 	bl	800c64c <__swhatbuf_r>
 800c6bc:	9900      	ldr	r1, [sp, #0]
 800c6be:	4605      	mov	r5, r0
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	f7ff fc2f 	bl	800bf24 <_malloc_r>
 800c6c6:	b948      	cbnz	r0, 800c6dc <__smakebuf_r+0x44>
 800c6c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6cc:	059a      	lsls	r2, r3, #22
 800c6ce:	d4ef      	bmi.n	800c6b0 <__smakebuf_r+0x18>
 800c6d0:	f023 0303 	bic.w	r3, r3, #3
 800c6d4:	f043 0302 	orr.w	r3, r3, #2
 800c6d8:	81a3      	strh	r3, [r4, #12]
 800c6da:	e7e3      	b.n	800c6a4 <__smakebuf_r+0xc>
 800c6dc:	4b0d      	ldr	r3, [pc, #52]	; (800c714 <__smakebuf_r+0x7c>)
 800c6de:	62b3      	str	r3, [r6, #40]	; 0x28
 800c6e0:	89a3      	ldrh	r3, [r4, #12]
 800c6e2:	6020      	str	r0, [r4, #0]
 800c6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6e8:	81a3      	strh	r3, [r4, #12]
 800c6ea:	9b00      	ldr	r3, [sp, #0]
 800c6ec:	6163      	str	r3, [r4, #20]
 800c6ee:	9b01      	ldr	r3, [sp, #4]
 800c6f0:	6120      	str	r0, [r4, #16]
 800c6f2:	b15b      	cbz	r3, 800c70c <__smakebuf_r+0x74>
 800c6f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6f8:	4630      	mov	r0, r6
 800c6fa:	f000 fb81 	bl	800ce00 <_isatty_r>
 800c6fe:	b128      	cbz	r0, 800c70c <__smakebuf_r+0x74>
 800c700:	89a3      	ldrh	r3, [r4, #12]
 800c702:	f023 0303 	bic.w	r3, r3, #3
 800c706:	f043 0301 	orr.w	r3, r3, #1
 800c70a:	81a3      	strh	r3, [r4, #12]
 800c70c:	89a0      	ldrh	r0, [r4, #12]
 800c70e:	4305      	orrs	r5, r0
 800c710:	81a5      	strh	r5, [r4, #12]
 800c712:	e7cd      	b.n	800c6b0 <__smakebuf_r+0x18>
 800c714:	0800c4a5 	.word	0x0800c4a5

0800c718 <__malloc_lock>:
 800c718:	4801      	ldr	r0, [pc, #4]	; (800c720 <__malloc_lock+0x8>)
 800c71a:	f7ff bf95 	b.w	800c648 <__retarget_lock_acquire_recursive>
 800c71e:	bf00      	nop
 800c720:	20006e38 	.word	0x20006e38

0800c724 <__malloc_unlock>:
 800c724:	4801      	ldr	r0, [pc, #4]	; (800c72c <__malloc_unlock+0x8>)
 800c726:	f7ff bf90 	b.w	800c64a <__retarget_lock_release_recursive>
 800c72a:	bf00      	nop
 800c72c:	20006e38 	.word	0x20006e38

0800c730 <__ssputs_r>:
 800c730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c734:	688e      	ldr	r6, [r1, #8]
 800c736:	429e      	cmp	r6, r3
 800c738:	4682      	mov	sl, r0
 800c73a:	460c      	mov	r4, r1
 800c73c:	4690      	mov	r8, r2
 800c73e:	461f      	mov	r7, r3
 800c740:	d838      	bhi.n	800c7b4 <__ssputs_r+0x84>
 800c742:	898a      	ldrh	r2, [r1, #12]
 800c744:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c748:	d032      	beq.n	800c7b0 <__ssputs_r+0x80>
 800c74a:	6825      	ldr	r5, [r4, #0]
 800c74c:	6909      	ldr	r1, [r1, #16]
 800c74e:	eba5 0901 	sub.w	r9, r5, r1
 800c752:	6965      	ldr	r5, [r4, #20]
 800c754:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c758:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c75c:	3301      	adds	r3, #1
 800c75e:	444b      	add	r3, r9
 800c760:	106d      	asrs	r5, r5, #1
 800c762:	429d      	cmp	r5, r3
 800c764:	bf38      	it	cc
 800c766:	461d      	movcc	r5, r3
 800c768:	0553      	lsls	r3, r2, #21
 800c76a:	d531      	bpl.n	800c7d0 <__ssputs_r+0xa0>
 800c76c:	4629      	mov	r1, r5
 800c76e:	f7ff fbd9 	bl	800bf24 <_malloc_r>
 800c772:	4606      	mov	r6, r0
 800c774:	b950      	cbnz	r0, 800c78c <__ssputs_r+0x5c>
 800c776:	230c      	movs	r3, #12
 800c778:	f8ca 3000 	str.w	r3, [sl]
 800c77c:	89a3      	ldrh	r3, [r4, #12]
 800c77e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c782:	81a3      	strh	r3, [r4, #12]
 800c784:	f04f 30ff 	mov.w	r0, #4294967295
 800c788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c78c:	6921      	ldr	r1, [r4, #16]
 800c78e:	464a      	mov	r2, r9
 800c790:	f7ff fb46 	bl	800be20 <memcpy>
 800c794:	89a3      	ldrh	r3, [r4, #12]
 800c796:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c79a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c79e:	81a3      	strh	r3, [r4, #12]
 800c7a0:	6126      	str	r6, [r4, #16]
 800c7a2:	6165      	str	r5, [r4, #20]
 800c7a4:	444e      	add	r6, r9
 800c7a6:	eba5 0509 	sub.w	r5, r5, r9
 800c7aa:	6026      	str	r6, [r4, #0]
 800c7ac:	60a5      	str	r5, [r4, #8]
 800c7ae:	463e      	mov	r6, r7
 800c7b0:	42be      	cmp	r6, r7
 800c7b2:	d900      	bls.n	800c7b6 <__ssputs_r+0x86>
 800c7b4:	463e      	mov	r6, r7
 800c7b6:	6820      	ldr	r0, [r4, #0]
 800c7b8:	4632      	mov	r2, r6
 800c7ba:	4641      	mov	r1, r8
 800c7bc:	f000 fb42 	bl	800ce44 <memmove>
 800c7c0:	68a3      	ldr	r3, [r4, #8]
 800c7c2:	1b9b      	subs	r3, r3, r6
 800c7c4:	60a3      	str	r3, [r4, #8]
 800c7c6:	6823      	ldr	r3, [r4, #0]
 800c7c8:	4433      	add	r3, r6
 800c7ca:	6023      	str	r3, [r4, #0]
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	e7db      	b.n	800c788 <__ssputs_r+0x58>
 800c7d0:	462a      	mov	r2, r5
 800c7d2:	f000 fb51 	bl	800ce78 <_realloc_r>
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	d1e1      	bne.n	800c7a0 <__ssputs_r+0x70>
 800c7dc:	6921      	ldr	r1, [r4, #16]
 800c7de:	4650      	mov	r0, sl
 800c7e0:	f7ff fb34 	bl	800be4c <_free_r>
 800c7e4:	e7c7      	b.n	800c776 <__ssputs_r+0x46>
	...

0800c7e8 <_svfiprintf_r>:
 800c7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ec:	4698      	mov	r8, r3
 800c7ee:	898b      	ldrh	r3, [r1, #12]
 800c7f0:	061b      	lsls	r3, r3, #24
 800c7f2:	b09d      	sub	sp, #116	; 0x74
 800c7f4:	4607      	mov	r7, r0
 800c7f6:	460d      	mov	r5, r1
 800c7f8:	4614      	mov	r4, r2
 800c7fa:	d50e      	bpl.n	800c81a <_svfiprintf_r+0x32>
 800c7fc:	690b      	ldr	r3, [r1, #16]
 800c7fe:	b963      	cbnz	r3, 800c81a <_svfiprintf_r+0x32>
 800c800:	2140      	movs	r1, #64	; 0x40
 800c802:	f7ff fb8f 	bl	800bf24 <_malloc_r>
 800c806:	6028      	str	r0, [r5, #0]
 800c808:	6128      	str	r0, [r5, #16]
 800c80a:	b920      	cbnz	r0, 800c816 <_svfiprintf_r+0x2e>
 800c80c:	230c      	movs	r3, #12
 800c80e:	603b      	str	r3, [r7, #0]
 800c810:	f04f 30ff 	mov.w	r0, #4294967295
 800c814:	e0d1      	b.n	800c9ba <_svfiprintf_r+0x1d2>
 800c816:	2340      	movs	r3, #64	; 0x40
 800c818:	616b      	str	r3, [r5, #20]
 800c81a:	2300      	movs	r3, #0
 800c81c:	9309      	str	r3, [sp, #36]	; 0x24
 800c81e:	2320      	movs	r3, #32
 800c820:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c824:	f8cd 800c 	str.w	r8, [sp, #12]
 800c828:	2330      	movs	r3, #48	; 0x30
 800c82a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c9d4 <_svfiprintf_r+0x1ec>
 800c82e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c832:	f04f 0901 	mov.w	r9, #1
 800c836:	4623      	mov	r3, r4
 800c838:	469a      	mov	sl, r3
 800c83a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c83e:	b10a      	cbz	r2, 800c844 <_svfiprintf_r+0x5c>
 800c840:	2a25      	cmp	r2, #37	; 0x25
 800c842:	d1f9      	bne.n	800c838 <_svfiprintf_r+0x50>
 800c844:	ebba 0b04 	subs.w	fp, sl, r4
 800c848:	d00b      	beq.n	800c862 <_svfiprintf_r+0x7a>
 800c84a:	465b      	mov	r3, fp
 800c84c:	4622      	mov	r2, r4
 800c84e:	4629      	mov	r1, r5
 800c850:	4638      	mov	r0, r7
 800c852:	f7ff ff6d 	bl	800c730 <__ssputs_r>
 800c856:	3001      	adds	r0, #1
 800c858:	f000 80aa 	beq.w	800c9b0 <_svfiprintf_r+0x1c8>
 800c85c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c85e:	445a      	add	r2, fp
 800c860:	9209      	str	r2, [sp, #36]	; 0x24
 800c862:	f89a 3000 	ldrb.w	r3, [sl]
 800c866:	2b00      	cmp	r3, #0
 800c868:	f000 80a2 	beq.w	800c9b0 <_svfiprintf_r+0x1c8>
 800c86c:	2300      	movs	r3, #0
 800c86e:	f04f 32ff 	mov.w	r2, #4294967295
 800c872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c876:	f10a 0a01 	add.w	sl, sl, #1
 800c87a:	9304      	str	r3, [sp, #16]
 800c87c:	9307      	str	r3, [sp, #28]
 800c87e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c882:	931a      	str	r3, [sp, #104]	; 0x68
 800c884:	4654      	mov	r4, sl
 800c886:	2205      	movs	r2, #5
 800c888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c88c:	4851      	ldr	r0, [pc, #324]	; (800c9d4 <_svfiprintf_r+0x1ec>)
 800c88e:	f7f3 fc9f 	bl	80001d0 <memchr>
 800c892:	9a04      	ldr	r2, [sp, #16]
 800c894:	b9d8      	cbnz	r0, 800c8ce <_svfiprintf_r+0xe6>
 800c896:	06d0      	lsls	r0, r2, #27
 800c898:	bf44      	itt	mi
 800c89a:	2320      	movmi	r3, #32
 800c89c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8a0:	0711      	lsls	r1, r2, #28
 800c8a2:	bf44      	itt	mi
 800c8a4:	232b      	movmi	r3, #43	; 0x2b
 800c8a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c8ae:	2b2a      	cmp	r3, #42	; 0x2a
 800c8b0:	d015      	beq.n	800c8de <_svfiprintf_r+0xf6>
 800c8b2:	9a07      	ldr	r2, [sp, #28]
 800c8b4:	4654      	mov	r4, sl
 800c8b6:	2000      	movs	r0, #0
 800c8b8:	f04f 0c0a 	mov.w	ip, #10
 800c8bc:	4621      	mov	r1, r4
 800c8be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8c2:	3b30      	subs	r3, #48	; 0x30
 800c8c4:	2b09      	cmp	r3, #9
 800c8c6:	d94e      	bls.n	800c966 <_svfiprintf_r+0x17e>
 800c8c8:	b1b0      	cbz	r0, 800c8f8 <_svfiprintf_r+0x110>
 800c8ca:	9207      	str	r2, [sp, #28]
 800c8cc:	e014      	b.n	800c8f8 <_svfiprintf_r+0x110>
 800c8ce:	eba0 0308 	sub.w	r3, r0, r8
 800c8d2:	fa09 f303 	lsl.w	r3, r9, r3
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	9304      	str	r3, [sp, #16]
 800c8da:	46a2      	mov	sl, r4
 800c8dc:	e7d2      	b.n	800c884 <_svfiprintf_r+0x9c>
 800c8de:	9b03      	ldr	r3, [sp, #12]
 800c8e0:	1d19      	adds	r1, r3, #4
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	9103      	str	r1, [sp, #12]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	bfbb      	ittet	lt
 800c8ea:	425b      	neglt	r3, r3
 800c8ec:	f042 0202 	orrlt.w	r2, r2, #2
 800c8f0:	9307      	strge	r3, [sp, #28]
 800c8f2:	9307      	strlt	r3, [sp, #28]
 800c8f4:	bfb8      	it	lt
 800c8f6:	9204      	strlt	r2, [sp, #16]
 800c8f8:	7823      	ldrb	r3, [r4, #0]
 800c8fa:	2b2e      	cmp	r3, #46	; 0x2e
 800c8fc:	d10c      	bne.n	800c918 <_svfiprintf_r+0x130>
 800c8fe:	7863      	ldrb	r3, [r4, #1]
 800c900:	2b2a      	cmp	r3, #42	; 0x2a
 800c902:	d135      	bne.n	800c970 <_svfiprintf_r+0x188>
 800c904:	9b03      	ldr	r3, [sp, #12]
 800c906:	1d1a      	adds	r2, r3, #4
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	9203      	str	r2, [sp, #12]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	bfb8      	it	lt
 800c910:	f04f 33ff 	movlt.w	r3, #4294967295
 800c914:	3402      	adds	r4, #2
 800c916:	9305      	str	r3, [sp, #20]
 800c918:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c9e4 <_svfiprintf_r+0x1fc>
 800c91c:	7821      	ldrb	r1, [r4, #0]
 800c91e:	2203      	movs	r2, #3
 800c920:	4650      	mov	r0, sl
 800c922:	f7f3 fc55 	bl	80001d0 <memchr>
 800c926:	b140      	cbz	r0, 800c93a <_svfiprintf_r+0x152>
 800c928:	2340      	movs	r3, #64	; 0x40
 800c92a:	eba0 000a 	sub.w	r0, r0, sl
 800c92e:	fa03 f000 	lsl.w	r0, r3, r0
 800c932:	9b04      	ldr	r3, [sp, #16]
 800c934:	4303      	orrs	r3, r0
 800c936:	3401      	adds	r4, #1
 800c938:	9304      	str	r3, [sp, #16]
 800c93a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c93e:	4826      	ldr	r0, [pc, #152]	; (800c9d8 <_svfiprintf_r+0x1f0>)
 800c940:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c944:	2206      	movs	r2, #6
 800c946:	f7f3 fc43 	bl	80001d0 <memchr>
 800c94a:	2800      	cmp	r0, #0
 800c94c:	d038      	beq.n	800c9c0 <_svfiprintf_r+0x1d8>
 800c94e:	4b23      	ldr	r3, [pc, #140]	; (800c9dc <_svfiprintf_r+0x1f4>)
 800c950:	bb1b      	cbnz	r3, 800c99a <_svfiprintf_r+0x1b2>
 800c952:	9b03      	ldr	r3, [sp, #12]
 800c954:	3307      	adds	r3, #7
 800c956:	f023 0307 	bic.w	r3, r3, #7
 800c95a:	3308      	adds	r3, #8
 800c95c:	9303      	str	r3, [sp, #12]
 800c95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c960:	4433      	add	r3, r6
 800c962:	9309      	str	r3, [sp, #36]	; 0x24
 800c964:	e767      	b.n	800c836 <_svfiprintf_r+0x4e>
 800c966:	fb0c 3202 	mla	r2, ip, r2, r3
 800c96a:	460c      	mov	r4, r1
 800c96c:	2001      	movs	r0, #1
 800c96e:	e7a5      	b.n	800c8bc <_svfiprintf_r+0xd4>
 800c970:	2300      	movs	r3, #0
 800c972:	3401      	adds	r4, #1
 800c974:	9305      	str	r3, [sp, #20]
 800c976:	4619      	mov	r1, r3
 800c978:	f04f 0c0a 	mov.w	ip, #10
 800c97c:	4620      	mov	r0, r4
 800c97e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c982:	3a30      	subs	r2, #48	; 0x30
 800c984:	2a09      	cmp	r2, #9
 800c986:	d903      	bls.n	800c990 <_svfiprintf_r+0x1a8>
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d0c5      	beq.n	800c918 <_svfiprintf_r+0x130>
 800c98c:	9105      	str	r1, [sp, #20]
 800c98e:	e7c3      	b.n	800c918 <_svfiprintf_r+0x130>
 800c990:	fb0c 2101 	mla	r1, ip, r1, r2
 800c994:	4604      	mov	r4, r0
 800c996:	2301      	movs	r3, #1
 800c998:	e7f0      	b.n	800c97c <_svfiprintf_r+0x194>
 800c99a:	ab03      	add	r3, sp, #12
 800c99c:	9300      	str	r3, [sp, #0]
 800c99e:	462a      	mov	r2, r5
 800c9a0:	4b0f      	ldr	r3, [pc, #60]	; (800c9e0 <_svfiprintf_r+0x1f8>)
 800c9a2:	a904      	add	r1, sp, #16
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	f3af 8000 	nop.w
 800c9aa:	1c42      	adds	r2, r0, #1
 800c9ac:	4606      	mov	r6, r0
 800c9ae:	d1d6      	bne.n	800c95e <_svfiprintf_r+0x176>
 800c9b0:	89ab      	ldrh	r3, [r5, #12]
 800c9b2:	065b      	lsls	r3, r3, #25
 800c9b4:	f53f af2c 	bmi.w	800c810 <_svfiprintf_r+0x28>
 800c9b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9ba:	b01d      	add	sp, #116	; 0x74
 800c9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c0:	ab03      	add	r3, sp, #12
 800c9c2:	9300      	str	r3, [sp, #0]
 800c9c4:	462a      	mov	r2, r5
 800c9c6:	4b06      	ldr	r3, [pc, #24]	; (800c9e0 <_svfiprintf_r+0x1f8>)
 800c9c8:	a904      	add	r1, sp, #16
 800c9ca:	4638      	mov	r0, r7
 800c9cc:	f000 f87a 	bl	800cac4 <_printf_i>
 800c9d0:	e7eb      	b.n	800c9aa <_svfiprintf_r+0x1c2>
 800c9d2:	bf00      	nop
 800c9d4:	0800d15c 	.word	0x0800d15c
 800c9d8:	0800d166 	.word	0x0800d166
 800c9dc:	00000000 	.word	0x00000000
 800c9e0:	0800c731 	.word	0x0800c731
 800c9e4:	0800d162 	.word	0x0800d162

0800c9e8 <_printf_common>:
 800c9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ec:	4616      	mov	r6, r2
 800c9ee:	4699      	mov	r9, r3
 800c9f0:	688a      	ldr	r2, [r1, #8]
 800c9f2:	690b      	ldr	r3, [r1, #16]
 800c9f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	bfb8      	it	lt
 800c9fc:	4613      	movlt	r3, r2
 800c9fe:	6033      	str	r3, [r6, #0]
 800ca00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca04:	4607      	mov	r7, r0
 800ca06:	460c      	mov	r4, r1
 800ca08:	b10a      	cbz	r2, 800ca0e <_printf_common+0x26>
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	6033      	str	r3, [r6, #0]
 800ca0e:	6823      	ldr	r3, [r4, #0]
 800ca10:	0699      	lsls	r1, r3, #26
 800ca12:	bf42      	ittt	mi
 800ca14:	6833      	ldrmi	r3, [r6, #0]
 800ca16:	3302      	addmi	r3, #2
 800ca18:	6033      	strmi	r3, [r6, #0]
 800ca1a:	6825      	ldr	r5, [r4, #0]
 800ca1c:	f015 0506 	ands.w	r5, r5, #6
 800ca20:	d106      	bne.n	800ca30 <_printf_common+0x48>
 800ca22:	f104 0a19 	add.w	sl, r4, #25
 800ca26:	68e3      	ldr	r3, [r4, #12]
 800ca28:	6832      	ldr	r2, [r6, #0]
 800ca2a:	1a9b      	subs	r3, r3, r2
 800ca2c:	42ab      	cmp	r3, r5
 800ca2e:	dc26      	bgt.n	800ca7e <_printf_common+0x96>
 800ca30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca34:	1e13      	subs	r3, r2, #0
 800ca36:	6822      	ldr	r2, [r4, #0]
 800ca38:	bf18      	it	ne
 800ca3a:	2301      	movne	r3, #1
 800ca3c:	0692      	lsls	r2, r2, #26
 800ca3e:	d42b      	bmi.n	800ca98 <_printf_common+0xb0>
 800ca40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca44:	4649      	mov	r1, r9
 800ca46:	4638      	mov	r0, r7
 800ca48:	47c0      	blx	r8
 800ca4a:	3001      	adds	r0, #1
 800ca4c:	d01e      	beq.n	800ca8c <_printf_common+0xa4>
 800ca4e:	6823      	ldr	r3, [r4, #0]
 800ca50:	68e5      	ldr	r5, [r4, #12]
 800ca52:	6832      	ldr	r2, [r6, #0]
 800ca54:	f003 0306 	and.w	r3, r3, #6
 800ca58:	2b04      	cmp	r3, #4
 800ca5a:	bf08      	it	eq
 800ca5c:	1aad      	subeq	r5, r5, r2
 800ca5e:	68a3      	ldr	r3, [r4, #8]
 800ca60:	6922      	ldr	r2, [r4, #16]
 800ca62:	bf0c      	ite	eq
 800ca64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca68:	2500      	movne	r5, #0
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	bfc4      	itt	gt
 800ca6e:	1a9b      	subgt	r3, r3, r2
 800ca70:	18ed      	addgt	r5, r5, r3
 800ca72:	2600      	movs	r6, #0
 800ca74:	341a      	adds	r4, #26
 800ca76:	42b5      	cmp	r5, r6
 800ca78:	d11a      	bne.n	800cab0 <_printf_common+0xc8>
 800ca7a:	2000      	movs	r0, #0
 800ca7c:	e008      	b.n	800ca90 <_printf_common+0xa8>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	4652      	mov	r2, sl
 800ca82:	4649      	mov	r1, r9
 800ca84:	4638      	mov	r0, r7
 800ca86:	47c0      	blx	r8
 800ca88:	3001      	adds	r0, #1
 800ca8a:	d103      	bne.n	800ca94 <_printf_common+0xac>
 800ca8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca94:	3501      	adds	r5, #1
 800ca96:	e7c6      	b.n	800ca26 <_printf_common+0x3e>
 800ca98:	18e1      	adds	r1, r4, r3
 800ca9a:	1c5a      	adds	r2, r3, #1
 800ca9c:	2030      	movs	r0, #48	; 0x30
 800ca9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800caa2:	4422      	add	r2, r4
 800caa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800caa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800caac:	3302      	adds	r3, #2
 800caae:	e7c7      	b.n	800ca40 <_printf_common+0x58>
 800cab0:	2301      	movs	r3, #1
 800cab2:	4622      	mov	r2, r4
 800cab4:	4649      	mov	r1, r9
 800cab6:	4638      	mov	r0, r7
 800cab8:	47c0      	blx	r8
 800caba:	3001      	adds	r0, #1
 800cabc:	d0e6      	beq.n	800ca8c <_printf_common+0xa4>
 800cabe:	3601      	adds	r6, #1
 800cac0:	e7d9      	b.n	800ca76 <_printf_common+0x8e>
	...

0800cac4 <_printf_i>:
 800cac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cac8:	7e0f      	ldrb	r7, [r1, #24]
 800caca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cacc:	2f78      	cmp	r7, #120	; 0x78
 800cace:	4691      	mov	r9, r2
 800cad0:	4680      	mov	r8, r0
 800cad2:	460c      	mov	r4, r1
 800cad4:	469a      	mov	sl, r3
 800cad6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cada:	d807      	bhi.n	800caec <_printf_i+0x28>
 800cadc:	2f62      	cmp	r7, #98	; 0x62
 800cade:	d80a      	bhi.n	800caf6 <_printf_i+0x32>
 800cae0:	2f00      	cmp	r7, #0
 800cae2:	f000 80d8 	beq.w	800cc96 <_printf_i+0x1d2>
 800cae6:	2f58      	cmp	r7, #88	; 0x58
 800cae8:	f000 80a3 	beq.w	800cc32 <_printf_i+0x16e>
 800caec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800caf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800caf4:	e03a      	b.n	800cb6c <_printf_i+0xa8>
 800caf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cafa:	2b15      	cmp	r3, #21
 800cafc:	d8f6      	bhi.n	800caec <_printf_i+0x28>
 800cafe:	a101      	add	r1, pc, #4	; (adr r1, 800cb04 <_printf_i+0x40>)
 800cb00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb04:	0800cb5d 	.word	0x0800cb5d
 800cb08:	0800cb71 	.word	0x0800cb71
 800cb0c:	0800caed 	.word	0x0800caed
 800cb10:	0800caed 	.word	0x0800caed
 800cb14:	0800caed 	.word	0x0800caed
 800cb18:	0800caed 	.word	0x0800caed
 800cb1c:	0800cb71 	.word	0x0800cb71
 800cb20:	0800caed 	.word	0x0800caed
 800cb24:	0800caed 	.word	0x0800caed
 800cb28:	0800caed 	.word	0x0800caed
 800cb2c:	0800caed 	.word	0x0800caed
 800cb30:	0800cc7d 	.word	0x0800cc7d
 800cb34:	0800cba1 	.word	0x0800cba1
 800cb38:	0800cc5f 	.word	0x0800cc5f
 800cb3c:	0800caed 	.word	0x0800caed
 800cb40:	0800caed 	.word	0x0800caed
 800cb44:	0800cc9f 	.word	0x0800cc9f
 800cb48:	0800caed 	.word	0x0800caed
 800cb4c:	0800cba1 	.word	0x0800cba1
 800cb50:	0800caed 	.word	0x0800caed
 800cb54:	0800caed 	.word	0x0800caed
 800cb58:	0800cc67 	.word	0x0800cc67
 800cb5c:	682b      	ldr	r3, [r5, #0]
 800cb5e:	1d1a      	adds	r2, r3, #4
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	602a      	str	r2, [r5, #0]
 800cb64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	e0a3      	b.n	800ccb8 <_printf_i+0x1f4>
 800cb70:	6820      	ldr	r0, [r4, #0]
 800cb72:	6829      	ldr	r1, [r5, #0]
 800cb74:	0606      	lsls	r6, r0, #24
 800cb76:	f101 0304 	add.w	r3, r1, #4
 800cb7a:	d50a      	bpl.n	800cb92 <_printf_i+0xce>
 800cb7c:	680e      	ldr	r6, [r1, #0]
 800cb7e:	602b      	str	r3, [r5, #0]
 800cb80:	2e00      	cmp	r6, #0
 800cb82:	da03      	bge.n	800cb8c <_printf_i+0xc8>
 800cb84:	232d      	movs	r3, #45	; 0x2d
 800cb86:	4276      	negs	r6, r6
 800cb88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb8c:	485e      	ldr	r0, [pc, #376]	; (800cd08 <_printf_i+0x244>)
 800cb8e:	230a      	movs	r3, #10
 800cb90:	e019      	b.n	800cbc6 <_printf_i+0x102>
 800cb92:	680e      	ldr	r6, [r1, #0]
 800cb94:	602b      	str	r3, [r5, #0]
 800cb96:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb9a:	bf18      	it	ne
 800cb9c:	b236      	sxthne	r6, r6
 800cb9e:	e7ef      	b.n	800cb80 <_printf_i+0xbc>
 800cba0:	682b      	ldr	r3, [r5, #0]
 800cba2:	6820      	ldr	r0, [r4, #0]
 800cba4:	1d19      	adds	r1, r3, #4
 800cba6:	6029      	str	r1, [r5, #0]
 800cba8:	0601      	lsls	r1, r0, #24
 800cbaa:	d501      	bpl.n	800cbb0 <_printf_i+0xec>
 800cbac:	681e      	ldr	r6, [r3, #0]
 800cbae:	e002      	b.n	800cbb6 <_printf_i+0xf2>
 800cbb0:	0646      	lsls	r6, r0, #25
 800cbb2:	d5fb      	bpl.n	800cbac <_printf_i+0xe8>
 800cbb4:	881e      	ldrh	r6, [r3, #0]
 800cbb6:	4854      	ldr	r0, [pc, #336]	; (800cd08 <_printf_i+0x244>)
 800cbb8:	2f6f      	cmp	r7, #111	; 0x6f
 800cbba:	bf0c      	ite	eq
 800cbbc:	2308      	moveq	r3, #8
 800cbbe:	230a      	movne	r3, #10
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbc6:	6865      	ldr	r5, [r4, #4]
 800cbc8:	60a5      	str	r5, [r4, #8]
 800cbca:	2d00      	cmp	r5, #0
 800cbcc:	bfa2      	ittt	ge
 800cbce:	6821      	ldrge	r1, [r4, #0]
 800cbd0:	f021 0104 	bicge.w	r1, r1, #4
 800cbd4:	6021      	strge	r1, [r4, #0]
 800cbd6:	b90e      	cbnz	r6, 800cbdc <_printf_i+0x118>
 800cbd8:	2d00      	cmp	r5, #0
 800cbda:	d04d      	beq.n	800cc78 <_printf_i+0x1b4>
 800cbdc:	4615      	mov	r5, r2
 800cbde:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbe2:	fb03 6711 	mls	r7, r3, r1, r6
 800cbe6:	5dc7      	ldrb	r7, [r0, r7]
 800cbe8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbec:	4637      	mov	r7, r6
 800cbee:	42bb      	cmp	r3, r7
 800cbf0:	460e      	mov	r6, r1
 800cbf2:	d9f4      	bls.n	800cbde <_printf_i+0x11a>
 800cbf4:	2b08      	cmp	r3, #8
 800cbf6:	d10b      	bne.n	800cc10 <_printf_i+0x14c>
 800cbf8:	6823      	ldr	r3, [r4, #0]
 800cbfa:	07de      	lsls	r6, r3, #31
 800cbfc:	d508      	bpl.n	800cc10 <_printf_i+0x14c>
 800cbfe:	6923      	ldr	r3, [r4, #16]
 800cc00:	6861      	ldr	r1, [r4, #4]
 800cc02:	4299      	cmp	r1, r3
 800cc04:	bfde      	ittt	le
 800cc06:	2330      	movle	r3, #48	; 0x30
 800cc08:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cc10:	1b52      	subs	r2, r2, r5
 800cc12:	6122      	str	r2, [r4, #16]
 800cc14:	f8cd a000 	str.w	sl, [sp]
 800cc18:	464b      	mov	r3, r9
 800cc1a:	aa03      	add	r2, sp, #12
 800cc1c:	4621      	mov	r1, r4
 800cc1e:	4640      	mov	r0, r8
 800cc20:	f7ff fee2 	bl	800c9e8 <_printf_common>
 800cc24:	3001      	adds	r0, #1
 800cc26:	d14c      	bne.n	800ccc2 <_printf_i+0x1fe>
 800cc28:	f04f 30ff 	mov.w	r0, #4294967295
 800cc2c:	b004      	add	sp, #16
 800cc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc32:	4835      	ldr	r0, [pc, #212]	; (800cd08 <_printf_i+0x244>)
 800cc34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cc38:	6829      	ldr	r1, [r5, #0]
 800cc3a:	6823      	ldr	r3, [r4, #0]
 800cc3c:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc40:	6029      	str	r1, [r5, #0]
 800cc42:	061d      	lsls	r5, r3, #24
 800cc44:	d514      	bpl.n	800cc70 <_printf_i+0x1ac>
 800cc46:	07df      	lsls	r7, r3, #31
 800cc48:	bf44      	itt	mi
 800cc4a:	f043 0320 	orrmi.w	r3, r3, #32
 800cc4e:	6023      	strmi	r3, [r4, #0]
 800cc50:	b91e      	cbnz	r6, 800cc5a <_printf_i+0x196>
 800cc52:	6823      	ldr	r3, [r4, #0]
 800cc54:	f023 0320 	bic.w	r3, r3, #32
 800cc58:	6023      	str	r3, [r4, #0]
 800cc5a:	2310      	movs	r3, #16
 800cc5c:	e7b0      	b.n	800cbc0 <_printf_i+0xfc>
 800cc5e:	6823      	ldr	r3, [r4, #0]
 800cc60:	f043 0320 	orr.w	r3, r3, #32
 800cc64:	6023      	str	r3, [r4, #0]
 800cc66:	2378      	movs	r3, #120	; 0x78
 800cc68:	4828      	ldr	r0, [pc, #160]	; (800cd0c <_printf_i+0x248>)
 800cc6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc6e:	e7e3      	b.n	800cc38 <_printf_i+0x174>
 800cc70:	0659      	lsls	r1, r3, #25
 800cc72:	bf48      	it	mi
 800cc74:	b2b6      	uxthmi	r6, r6
 800cc76:	e7e6      	b.n	800cc46 <_printf_i+0x182>
 800cc78:	4615      	mov	r5, r2
 800cc7a:	e7bb      	b.n	800cbf4 <_printf_i+0x130>
 800cc7c:	682b      	ldr	r3, [r5, #0]
 800cc7e:	6826      	ldr	r6, [r4, #0]
 800cc80:	6961      	ldr	r1, [r4, #20]
 800cc82:	1d18      	adds	r0, r3, #4
 800cc84:	6028      	str	r0, [r5, #0]
 800cc86:	0635      	lsls	r5, r6, #24
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	d501      	bpl.n	800cc90 <_printf_i+0x1cc>
 800cc8c:	6019      	str	r1, [r3, #0]
 800cc8e:	e002      	b.n	800cc96 <_printf_i+0x1d2>
 800cc90:	0670      	lsls	r0, r6, #25
 800cc92:	d5fb      	bpl.n	800cc8c <_printf_i+0x1c8>
 800cc94:	8019      	strh	r1, [r3, #0]
 800cc96:	2300      	movs	r3, #0
 800cc98:	6123      	str	r3, [r4, #16]
 800cc9a:	4615      	mov	r5, r2
 800cc9c:	e7ba      	b.n	800cc14 <_printf_i+0x150>
 800cc9e:	682b      	ldr	r3, [r5, #0]
 800cca0:	1d1a      	adds	r2, r3, #4
 800cca2:	602a      	str	r2, [r5, #0]
 800cca4:	681d      	ldr	r5, [r3, #0]
 800cca6:	6862      	ldr	r2, [r4, #4]
 800cca8:	2100      	movs	r1, #0
 800ccaa:	4628      	mov	r0, r5
 800ccac:	f7f3 fa90 	bl	80001d0 <memchr>
 800ccb0:	b108      	cbz	r0, 800ccb6 <_printf_i+0x1f2>
 800ccb2:	1b40      	subs	r0, r0, r5
 800ccb4:	6060      	str	r0, [r4, #4]
 800ccb6:	6863      	ldr	r3, [r4, #4]
 800ccb8:	6123      	str	r3, [r4, #16]
 800ccba:	2300      	movs	r3, #0
 800ccbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccc0:	e7a8      	b.n	800cc14 <_printf_i+0x150>
 800ccc2:	6923      	ldr	r3, [r4, #16]
 800ccc4:	462a      	mov	r2, r5
 800ccc6:	4649      	mov	r1, r9
 800ccc8:	4640      	mov	r0, r8
 800ccca:	47d0      	blx	sl
 800cccc:	3001      	adds	r0, #1
 800ccce:	d0ab      	beq.n	800cc28 <_printf_i+0x164>
 800ccd0:	6823      	ldr	r3, [r4, #0]
 800ccd2:	079b      	lsls	r3, r3, #30
 800ccd4:	d413      	bmi.n	800ccfe <_printf_i+0x23a>
 800ccd6:	68e0      	ldr	r0, [r4, #12]
 800ccd8:	9b03      	ldr	r3, [sp, #12]
 800ccda:	4298      	cmp	r0, r3
 800ccdc:	bfb8      	it	lt
 800ccde:	4618      	movlt	r0, r3
 800cce0:	e7a4      	b.n	800cc2c <_printf_i+0x168>
 800cce2:	2301      	movs	r3, #1
 800cce4:	4632      	mov	r2, r6
 800cce6:	4649      	mov	r1, r9
 800cce8:	4640      	mov	r0, r8
 800ccea:	47d0      	blx	sl
 800ccec:	3001      	adds	r0, #1
 800ccee:	d09b      	beq.n	800cc28 <_printf_i+0x164>
 800ccf0:	3501      	adds	r5, #1
 800ccf2:	68e3      	ldr	r3, [r4, #12]
 800ccf4:	9903      	ldr	r1, [sp, #12]
 800ccf6:	1a5b      	subs	r3, r3, r1
 800ccf8:	42ab      	cmp	r3, r5
 800ccfa:	dcf2      	bgt.n	800cce2 <_printf_i+0x21e>
 800ccfc:	e7eb      	b.n	800ccd6 <_printf_i+0x212>
 800ccfe:	2500      	movs	r5, #0
 800cd00:	f104 0619 	add.w	r6, r4, #25
 800cd04:	e7f5      	b.n	800ccf2 <_printf_i+0x22e>
 800cd06:	bf00      	nop
 800cd08:	0800d16d 	.word	0x0800d16d
 800cd0c:	0800d17e 	.word	0x0800d17e

0800cd10 <__sread>:
 800cd10:	b510      	push	{r4, lr}
 800cd12:	460c      	mov	r4, r1
 800cd14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd18:	f000 f8de 	bl	800ced8 <_read_r>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	bfab      	itete	ge
 800cd20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd22:	89a3      	ldrhlt	r3, [r4, #12]
 800cd24:	181b      	addge	r3, r3, r0
 800cd26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd2a:	bfac      	ite	ge
 800cd2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd2e:	81a3      	strhlt	r3, [r4, #12]
 800cd30:	bd10      	pop	{r4, pc}

0800cd32 <__swrite>:
 800cd32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd36:	461f      	mov	r7, r3
 800cd38:	898b      	ldrh	r3, [r1, #12]
 800cd3a:	05db      	lsls	r3, r3, #23
 800cd3c:	4605      	mov	r5, r0
 800cd3e:	460c      	mov	r4, r1
 800cd40:	4616      	mov	r6, r2
 800cd42:	d505      	bpl.n	800cd50 <__swrite+0x1e>
 800cd44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd48:	2302      	movs	r3, #2
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f000 f868 	bl	800ce20 <_lseek_r>
 800cd50:	89a3      	ldrh	r3, [r4, #12]
 800cd52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd5a:	81a3      	strh	r3, [r4, #12]
 800cd5c:	4632      	mov	r2, r6
 800cd5e:	463b      	mov	r3, r7
 800cd60:	4628      	mov	r0, r5
 800cd62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd66:	f000 b817 	b.w	800cd98 <_write_r>

0800cd6a <__sseek>:
 800cd6a:	b510      	push	{r4, lr}
 800cd6c:	460c      	mov	r4, r1
 800cd6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd72:	f000 f855 	bl	800ce20 <_lseek_r>
 800cd76:	1c43      	adds	r3, r0, #1
 800cd78:	89a3      	ldrh	r3, [r4, #12]
 800cd7a:	bf15      	itete	ne
 800cd7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd86:	81a3      	strheq	r3, [r4, #12]
 800cd88:	bf18      	it	ne
 800cd8a:	81a3      	strhne	r3, [r4, #12]
 800cd8c:	bd10      	pop	{r4, pc}

0800cd8e <__sclose>:
 800cd8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd92:	f000 b813 	b.w	800cdbc <_close_r>
	...

0800cd98 <_write_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	4d07      	ldr	r5, [pc, #28]	; (800cdb8 <_write_r+0x20>)
 800cd9c:	4604      	mov	r4, r0
 800cd9e:	4608      	mov	r0, r1
 800cda0:	4611      	mov	r1, r2
 800cda2:	2200      	movs	r2, #0
 800cda4:	602a      	str	r2, [r5, #0]
 800cda6:	461a      	mov	r2, r3
 800cda8:	f7f3 ffa5 	bl	8000cf6 <_write>
 800cdac:	1c43      	adds	r3, r0, #1
 800cdae:	d102      	bne.n	800cdb6 <_write_r+0x1e>
 800cdb0:	682b      	ldr	r3, [r5, #0]
 800cdb2:	b103      	cbz	r3, 800cdb6 <_write_r+0x1e>
 800cdb4:	6023      	str	r3, [r4, #0]
 800cdb6:	bd38      	pop	{r3, r4, r5, pc}
 800cdb8:	20006e3c 	.word	0x20006e3c

0800cdbc <_close_r>:
 800cdbc:	b538      	push	{r3, r4, r5, lr}
 800cdbe:	4d06      	ldr	r5, [pc, #24]	; (800cdd8 <_close_r+0x1c>)
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	4604      	mov	r4, r0
 800cdc4:	4608      	mov	r0, r1
 800cdc6:	602b      	str	r3, [r5, #0]
 800cdc8:	f7f3 ffb1 	bl	8000d2e <_close>
 800cdcc:	1c43      	adds	r3, r0, #1
 800cdce:	d102      	bne.n	800cdd6 <_close_r+0x1a>
 800cdd0:	682b      	ldr	r3, [r5, #0]
 800cdd2:	b103      	cbz	r3, 800cdd6 <_close_r+0x1a>
 800cdd4:	6023      	str	r3, [r4, #0]
 800cdd6:	bd38      	pop	{r3, r4, r5, pc}
 800cdd8:	20006e3c 	.word	0x20006e3c

0800cddc <_fstat_r>:
 800cddc:	b538      	push	{r3, r4, r5, lr}
 800cdde:	4d07      	ldr	r5, [pc, #28]	; (800cdfc <_fstat_r+0x20>)
 800cde0:	2300      	movs	r3, #0
 800cde2:	4604      	mov	r4, r0
 800cde4:	4608      	mov	r0, r1
 800cde6:	4611      	mov	r1, r2
 800cde8:	602b      	str	r3, [r5, #0]
 800cdea:	f7f3 ffac 	bl	8000d46 <_fstat>
 800cdee:	1c43      	adds	r3, r0, #1
 800cdf0:	d102      	bne.n	800cdf8 <_fstat_r+0x1c>
 800cdf2:	682b      	ldr	r3, [r5, #0]
 800cdf4:	b103      	cbz	r3, 800cdf8 <_fstat_r+0x1c>
 800cdf6:	6023      	str	r3, [r4, #0]
 800cdf8:	bd38      	pop	{r3, r4, r5, pc}
 800cdfa:	bf00      	nop
 800cdfc:	20006e3c 	.word	0x20006e3c

0800ce00 <_isatty_r>:
 800ce00:	b538      	push	{r3, r4, r5, lr}
 800ce02:	4d06      	ldr	r5, [pc, #24]	; (800ce1c <_isatty_r+0x1c>)
 800ce04:	2300      	movs	r3, #0
 800ce06:	4604      	mov	r4, r0
 800ce08:	4608      	mov	r0, r1
 800ce0a:	602b      	str	r3, [r5, #0]
 800ce0c:	f7f3 ffab 	bl	8000d66 <_isatty>
 800ce10:	1c43      	adds	r3, r0, #1
 800ce12:	d102      	bne.n	800ce1a <_isatty_r+0x1a>
 800ce14:	682b      	ldr	r3, [r5, #0]
 800ce16:	b103      	cbz	r3, 800ce1a <_isatty_r+0x1a>
 800ce18:	6023      	str	r3, [r4, #0]
 800ce1a:	bd38      	pop	{r3, r4, r5, pc}
 800ce1c:	20006e3c 	.word	0x20006e3c

0800ce20 <_lseek_r>:
 800ce20:	b538      	push	{r3, r4, r5, lr}
 800ce22:	4d07      	ldr	r5, [pc, #28]	; (800ce40 <_lseek_r+0x20>)
 800ce24:	4604      	mov	r4, r0
 800ce26:	4608      	mov	r0, r1
 800ce28:	4611      	mov	r1, r2
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	602a      	str	r2, [r5, #0]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	f7f3 ffa4 	bl	8000d7c <_lseek>
 800ce34:	1c43      	adds	r3, r0, #1
 800ce36:	d102      	bne.n	800ce3e <_lseek_r+0x1e>
 800ce38:	682b      	ldr	r3, [r5, #0]
 800ce3a:	b103      	cbz	r3, 800ce3e <_lseek_r+0x1e>
 800ce3c:	6023      	str	r3, [r4, #0]
 800ce3e:	bd38      	pop	{r3, r4, r5, pc}
 800ce40:	20006e3c 	.word	0x20006e3c

0800ce44 <memmove>:
 800ce44:	4288      	cmp	r0, r1
 800ce46:	b510      	push	{r4, lr}
 800ce48:	eb01 0402 	add.w	r4, r1, r2
 800ce4c:	d902      	bls.n	800ce54 <memmove+0x10>
 800ce4e:	4284      	cmp	r4, r0
 800ce50:	4623      	mov	r3, r4
 800ce52:	d807      	bhi.n	800ce64 <memmove+0x20>
 800ce54:	1e43      	subs	r3, r0, #1
 800ce56:	42a1      	cmp	r1, r4
 800ce58:	d008      	beq.n	800ce6c <memmove+0x28>
 800ce5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce62:	e7f8      	b.n	800ce56 <memmove+0x12>
 800ce64:	4402      	add	r2, r0
 800ce66:	4601      	mov	r1, r0
 800ce68:	428a      	cmp	r2, r1
 800ce6a:	d100      	bne.n	800ce6e <memmove+0x2a>
 800ce6c:	bd10      	pop	{r4, pc}
 800ce6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce76:	e7f7      	b.n	800ce68 <memmove+0x24>

0800ce78 <_realloc_r>:
 800ce78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7c:	4680      	mov	r8, r0
 800ce7e:	4614      	mov	r4, r2
 800ce80:	460e      	mov	r6, r1
 800ce82:	b921      	cbnz	r1, 800ce8e <_realloc_r+0x16>
 800ce84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce88:	4611      	mov	r1, r2
 800ce8a:	f7ff b84b 	b.w	800bf24 <_malloc_r>
 800ce8e:	b92a      	cbnz	r2, 800ce9c <_realloc_r+0x24>
 800ce90:	f7fe ffdc 	bl	800be4c <_free_r>
 800ce94:	4625      	mov	r5, r4
 800ce96:	4628      	mov	r0, r5
 800ce98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce9c:	f000 f82e 	bl	800cefc <_malloc_usable_size_r>
 800cea0:	4284      	cmp	r4, r0
 800cea2:	4607      	mov	r7, r0
 800cea4:	d802      	bhi.n	800ceac <_realloc_r+0x34>
 800cea6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ceaa:	d812      	bhi.n	800ced2 <_realloc_r+0x5a>
 800ceac:	4621      	mov	r1, r4
 800ceae:	4640      	mov	r0, r8
 800ceb0:	f7ff f838 	bl	800bf24 <_malloc_r>
 800ceb4:	4605      	mov	r5, r0
 800ceb6:	2800      	cmp	r0, #0
 800ceb8:	d0ed      	beq.n	800ce96 <_realloc_r+0x1e>
 800ceba:	42bc      	cmp	r4, r7
 800cebc:	4622      	mov	r2, r4
 800cebe:	4631      	mov	r1, r6
 800cec0:	bf28      	it	cs
 800cec2:	463a      	movcs	r2, r7
 800cec4:	f7fe ffac 	bl	800be20 <memcpy>
 800cec8:	4631      	mov	r1, r6
 800ceca:	4640      	mov	r0, r8
 800cecc:	f7fe ffbe 	bl	800be4c <_free_r>
 800ced0:	e7e1      	b.n	800ce96 <_realloc_r+0x1e>
 800ced2:	4635      	mov	r5, r6
 800ced4:	e7df      	b.n	800ce96 <_realloc_r+0x1e>
	...

0800ced8 <_read_r>:
 800ced8:	b538      	push	{r3, r4, r5, lr}
 800ceda:	4d07      	ldr	r5, [pc, #28]	; (800cef8 <_read_r+0x20>)
 800cedc:	4604      	mov	r4, r0
 800cede:	4608      	mov	r0, r1
 800cee0:	4611      	mov	r1, r2
 800cee2:	2200      	movs	r2, #0
 800cee4:	602a      	str	r2, [r5, #0]
 800cee6:	461a      	mov	r2, r3
 800cee8:	f7f3 fee8 	bl	8000cbc <_read>
 800ceec:	1c43      	adds	r3, r0, #1
 800ceee:	d102      	bne.n	800cef6 <_read_r+0x1e>
 800cef0:	682b      	ldr	r3, [r5, #0]
 800cef2:	b103      	cbz	r3, 800cef6 <_read_r+0x1e>
 800cef4:	6023      	str	r3, [r4, #0]
 800cef6:	bd38      	pop	{r3, r4, r5, pc}
 800cef8:	20006e3c 	.word	0x20006e3c

0800cefc <_malloc_usable_size_r>:
 800cefc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf00:	1f18      	subs	r0, r3, #4
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	bfbc      	itt	lt
 800cf06:	580b      	ldrlt	r3, [r1, r0]
 800cf08:	18c0      	addlt	r0, r0, r3
 800cf0a:	4770      	bx	lr

0800cf0c <_init>:
 800cf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf0e:	bf00      	nop
 800cf10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf12:	bc08      	pop	{r3}
 800cf14:	469e      	mov	lr, r3
 800cf16:	4770      	bx	lr

0800cf18 <_fini>:
 800cf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf1a:	bf00      	nop
 800cf1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf1e:	bc08      	pop	{r3}
 800cf20:	469e      	mov	lr, r3
 800cf22:	4770      	bx	lr
